/* Generate Lua code that fills the left-side matrix entries
   corresponding to the discretization of the Poisson equation
      Laplacian(phi) = - rho
   with recovery DG in the 2D interior cells. */

kill(all)$
load("recovery-calc/recovery")$

dirs : [x, y]$
size : [2, 2]$
range : [[-1,1], [-1,1]]$
basisNm : ["Ser", "Tensor"]$
J : [4/dx[1]^2, 4/dx[2]^2]$

for bIdx : 1 thru length(basisNm) do (
  load(sconcat("basis-precalc/basis", basisNm[bIdx], "2x")),
  for d : 1 thru length(dirs) do (
    for polyOrder : 1 thru 3 do (
      fname : sconcat("~/max-out/discontPoisson", basisNm[bIdx], "Stencil2D_", polyOrder, "p_", dirs[d], ".lua"),
      fh : openw(fname),
      printf(fh, "local Lin = require \"Lib.Linalg\"~%"),
      printf(fh, "local function stencilFn(dx)~%"),
      printf(fh, "  local _M = {}~%~%"),
      
      numBasis : length(basisC[polyOrder]),
      st : diff(calcRecov3CellGen(basisNm[bIdx], dirs[d], size, polyOrder, 1, hL, hC, hU), dirs[d], 2)*J[d],
      stProj : calcInnerProdListGen(dirs, range, 1, basisC[polyOrder], st),
      
      ML : coefmatrix(stProj, makelist(hL[i], i, 1, numBasis)),
      printf(fh, "  _M[1] = Lin.Mat(~a,~a)~%", numBasis, numBasis),
      for i : 1 thru numBasis do (
        for j : 1 thru numBasis do (
          printf(fh, "  _M[1][~a][~a] = ~a~%", i, j, float(ML[i][j]))
        )
      ),
      
      MC : coefmatrix(stProj, makelist(hC[i], i, 1, numBasis)),
      printf(fh, "  _M[2] = Lin.Mat(~a,~a)~%", numBasis, numBasis),
      for i : 1 thru numBasis do (
        for j : 1 thru numBasis do (
          printf(fh, "  _M[2][~a][~a] = ~a~%", i, j, float(MC[i][j]))
        )
      ),
      
      MU : coefmatrix(stProj, makelist(hU[i], i, 1, numBasis)),
      printf(fh, "  _M[3] = Lin.Mat(~a,~a)~%", numBasis, numBasis),
      for i : 1 thru numBasis do (
        for j : 1 thru numBasis do (
          printf(fh, "  _M[3][~a][~a] = ~a~%", i, j, float(MU[i][j]))
        )
      ),
      
      printf(fh, "  return(_M)~%"),
      printf(fh, "end~%~%"),
      printf(fh, "return(stencilFn)"),
      close(fh)
    )
  )
)$
