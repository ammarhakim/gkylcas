load("modal-basis")$
load("out-scripts");
load(stringproc)$
load("recovery")$
fpprec : 24$

/* This script generates the kernels needed for adding the
   contributions from second order diffusion in all directions
   using two integrations by parts. */

surfLabels : [X1, X2, X3, X4, X5, X6]$

writeCExprsCollect1s(lhs, rhs, clst, nSpaces) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then (
      param : cons(expr[i], clst),
      e : apply(collectterms, param),
      ep : string(e),
      ep : ssubst("g1Sq","g1^2",ep),
      ep : ssubst("std::sinh","sinh",ep),
      printf(fh, sconcat(smake(nSpaces," "),"  ~a = ~a; ~%"), lhs[i-1], ep)
    )
  )
)$

writeCIncrExprs1s(lhs, rhs, nSpaces) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    ep : string(expr[i]),
    ep : ssubst("g1Sq","g1^2",ep),
    ep : ssubst("std::sinh","sinh",ep),
    if expr[i] # 0.0 then printf(fh, sconcat(smake(nSpaces," "),"  ~a += ~a; ~%"), lhs[i-1], ep)
  )
)$

writeCIncrCollect1s(lhs, rhs, clst, nSpaces) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then (
      param : cons(expr[i], clst),
      e  : gcfac(apply(collectterms, param)),
      ep : string(e),
      ep : ssubst("g1Sq","g1^2",ep),
      ep : ssubst("std::sinh","sinh",ep),
      printf(fh,sconcat(smake(nSpaces," "),"  ~a += ~a; ~%"), lhs[i-1], ep)
    )
  )
)$

writeCExprs1s(lhs, rhs, nSpaces) := block([expr],
  expr : expand(float(rhs)),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then (
      ep : string(expr[i]),
      ep : ssubst("std::sinh","sinh",ep),
      for iC : 0 thru Ncp-1 do (
        ep : ssubst(sconcat("xBarSq[",string(iC),"]"),
                    sconcat("xBar[",string(iC),"]^2"),ep),
        ep : ssubst(sconcat("g1Sq"),
                    sconcat("g1[",string(iC),"]^2"),ep)
      ),
      printf(fh,sconcat(smake(nSpaces," "),"  ~a = ~a; ~%"), lhs[i-1], ep)
    )
  )
)$

writeCExprs1sI(lhs, iOut, rhs, nSpaces) := block([expr],
  expr : expand(float(rhs)),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then (
      ep : string(expr[i]),
      ep : ssubst("std::sinh","sinh",ep),
      for iC : 0 thru Ncp-1 do (
        ep : ssubst(sconcat("xBarSq[",string(iC),"]"),
                    sconcat("xBar[",string(iC),"]^2"),ep),
        ep : ssubst(sconcat("g1Sq"),
                    sconcat("g1[",string(iC),"]^2"),ep)
      ),
      printf(fh,sconcat(smake(nSpaces," "),"  ~a = ~a; ~%"), lhs[iOut], ep)
    )
  )
)$

writeCExprs1so(lhs, rhs, nSpaces) := block([expr],
  for i : 1 thru length(rhs) do (
    expr : float(expand(num(rhs[i]))/denom(rhs[i])),
    if expr # 0 then (
      printf(fh,sconcat(smake(nSpaces," "),"  ~a = ~a; ~%"), lhs[i-1], expr)
    )
  )
)$

writeCExprs1sP(lhs, rhs, nSpaces) := block([expr],
  expr : expand(float(rhs)),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then (
      ep : string(expr[i]),
      for iC : 0 thru Ncp-1 do (
        ep : ssubst(sconcat("xBar[",string(iC),"]*xBar[",string(iC),"]"),
                    sconcat("xBar[",string(iC),"]^2"),ep)
      ),
      printf(fh,sconcat(smake(nSpaces," "),"  ~a = ~a; ~%"), lhs[i-1], ep)
    )
  )
)$

/* Functions loadBasisX and getDirCombos ought to match those in the
   header-generating script. */

loadBasisX(dimTot, basisType, pOrder) := block([basis,vars],
  /* Load a basis based on dimensionality and basis type alone. */
  kill(varsC, varsP, basisC, basisP),
  if (dimTot < 4) then (
    load(sconcat("basis-precalc/basis", basisType, dimTot, "x"))
  ) else (
    load(sconcat("basis-precalc/basis", basisType, dimTot-3, "x", 3, "v"))
  ),

  if (dimTot < 4) then (
    basis : basisC[pOrder],
    vars  : varsC
  ) else (
    basis : basisP[pOrder],
    vars  : varsP
  ),
  return([basis,vars])
)$

getDirCombos(varsIn) := block([dirCombosSet,dirCombos,d],
  dirCombosSet : setify([]),
  for d : 1 thru length(varsIn) do (
    dirCombosSet : union(dirCombosSet,powerset(setify(varsIn),d))
  ),
  dirCombos : full_listify(dirCombosSet),
  dirCombos : makelist(sort(dirCombos[i],lambda([a,b],slength(string(a)) < slength(string(b)))),i,1,length(dirCombos)),
  return(dirCombos)
)$


/* Given the value of the recovery polynomial (fRec) and its derivative
   (frecP) at the interface, this function computes the increments and
   writes them to the kernel file. */
compWriteIncr(varsIn, basisIn, dirIn, fRecOrd, nSpaces) := block([cv,surfVars,incr_s1,incr_s2,clst,i,numB,diffOrder],

  cv       : varsIn[dirIn],
  surfVars : delete(cv,varsIn),
  numB     : length(basisIn),

  diffOrder : fRecOrd[1],
  nuSign    : (-1)^(diffOrder/2+1),

  /* Contribution to vector to the left and right of the boundary. */
  /* incr_r2 has 3 minus signs. One comes from the second integration
     by parts, another from evaluating at upper surface Minus lower
     surface, and the last one from evaluating at cv=-1. */
  if (diffOrder=2) then (
    fRec0  : fRecOrd[2],
    fRecP0 : fRecOrd[3],

    incr_l : [calcInnerProdList(surfVars,1,subst(cv=1,basisIn),fRecP0),
              calcInnerProdList(surfVars,-1,subst(cv=1,diff(basisIn,cv)),fRec0)],
  
    incr_r : [-calcInnerProdList(surfVars,1,subst(cv=-1,basisIn),fRecP0),
              -calcInnerProdList(surfVars,-1,subst(cv=-1,diff(basisIn,cv)),fRec0)]
  ) elseif (diffOrder=4) then (
    fRec : fRecOrd[2],

    incr_l : [calcInnerProdList(surfVars,1,subst(cv=1,basisIn),subst(cv=0,diff(fRec,cv,3))),
      calcInnerProdList(surfVars,-1,subst(cv=1,diff(basisIn,cv)),subst(cv=0,diff(fRec,cv,2))),
      calcInnerProdList(surfVars,1,subst(cv=1,diff(basisIn,cv,2)),subst(cv=0,diff(fRec,cv))),
      calcInnerProdList(surfVars,-1,subst(cv=1,diff(basisIn,cv,3)),subst(cv=0,fRec))],
  
    incr_r : [-calcInnerProdList(surfVars,1,subst(cv=-1,basisIn),subst(cv=0,diff(fRec,cv,3))),
      -calcInnerProdList(surfVars,-1,subst(cv=-1,diff(basisIn,cv)),subst(cv=0,diff(fRec,cv,2))),
      -calcInnerProdList(surfVars,1,subst(cv=-1,diff(basisIn,cv,2)),subst(cv=0,diff(fRec,cv))),
      -calcInnerProdList(surfVars,-1,subst(cv=-1,diff(basisIn,cv,3)),subst(cv=0,fRec))]

  ) elseif (diffOrder=6) then (
    fRec : fRecOrd[2],

    incr_l : [calcInnerProdList(surfVars,1,subst(cv=1,basisIn),subst(cv=0,diff(fRec,cv,5))),
      calcInnerProdList(surfVars,-1,subst(cv=1,diff(basisIn,cv)),subst(cv=0,diff(fRec,cv,4))),
      calcInnerProdList(surfVars,1,subst(cv=1,diff(basisIn,cv,2)),subst(cv=0,diff(fRec,cv,3))),
      calcInnerProdList(surfVars,-1,subst(cv=1,diff(basisIn,cv,3)),subst(cv=0,diff(fRec,cv,2))),
      calcInnerProdList(surfVars,1,subst(cv=1,diff(basisIn,cv,4)),subst(cv=0,diff(fRec,cv))),
      calcInnerProdList(surfVars,-1,subst(cv=1,diff(basisIn,cv,5)),subst(cv=0,fRec))],
  
    incr_r : [-calcInnerProdList(surfVars,1,subst(cv=-1,basisIn),subst(cv=0,diff(fRec,cv,5))),
      -calcInnerProdList(surfVars,-1,subst(cv=-1,diff(basisIn,cv)),subst(cv=0,diff(fRec,cv,4))),
      -calcInnerProdList(surfVars,1,subst(cv=-1,diff(basisIn,cv,2)),subst(cv=0,diff(fRec,cv,3))),
      -calcInnerProdList(surfVars,-1,subst(cv=-1,diff(basisIn,cv,3)),subst(cv=0,diff(fRec,cv,2))),
      -calcInnerProdList(surfVars,1,subst(cv=-1,diff(basisIn,cv,4)),subst(cv=0,diff(fRec,cv))),
      -calcInnerProdList(surfVars,-1,subst(cv=-1,diff(basisIn,cv,5)),subst(cv=0,fRec))]
  ),
  
  clst : [wxr, dvxr],
  incr_sOut : makelist(0,i,1,numB),
  for oI : 1 thru diffOrder do (
    incrVar : eval_string(sconcat("incr",oI)),
    writeCExprsCollect1s(incrVar, incr_r[oI], clst, nSpaces),
    printf(fh,"~%"),

    incr_s : makelist(incrVar[i-1], i, 1, numB),
    /* Don't do coefficients where the increment is zero */
    for i : 1 thru numB do (
      if (incr_r[oI][i] = 0) then incr_s[i] : 0
    ), 
    incr_sOut : incr_sOut+incr_s
  ),
  writeCIncrExprs1s(outr, nuSign*rdxFnur*incr_sOut, nSpaces),
  printf(fh, "~%"),
  
  incr_sOut : makelist(0,i,1,numB),
  for oI : 1 thru diffOrder do (
    incrVar : eval_string(sconcat("incr",oI)),
    signs : makelist(1,i,1,numB),
    for i : 1 thru numB do (
      if (incr_r[oI][i] = 0) then
        false
      else
        signs[i] : fullratsimp(incr_l[oI][i]/incr_r[oI][i])
    ),
    incr_s : makelist(signs[i]*incrVar[i-1], i, 1, numB),
    /* Don't do coefficients where the increment is zero */
    for i : 1 thru numB do (
      if (incr_r[oI][i] = 0) then
        incr_s[i] : 0
    ), 
    incr_sOut : incr_sOut+incr_s
  ),
  writeCIncrExprs1s(outl, nuSign*rdxFnul*incr_sOut,nSpaces)
)$

calcUpdateInDir(dir, fh, funcNm, dim, basisFun, polyOrder, diffOrder, applyPos) := block([hsolOrder],

  /* Positivity preserving algorithm only for p=1 for now. */
  if applyPos then (
    polyOrder : 1
  ),

  tmpLst : loadBasisX(dim, basisFun, polyOrder),
  basis  : tmpLst[1],
  vars   : tmpLst[2],

  numB : length(basis),

  /* Variables. */
  cv       : vars[dir],
  surfVars : delete(cv,vars),

  /* Recovery polynomial and its coefficients. */
  hOrder : 2*polyOrder+1,
  h_e    : calcRecov2CellGen(basisFun,cv,vars,polyOrder,dg(makelist(fl[i],i,0,numB)), dg(makelist(fr[i],i,0,numB))),
  hsol   : cons(subst(cv=0,h_e),makelist(subst(cv=0,diff(h_e,cv,ord)/(ord!)),ord,1,hOrder)),

  printf(fh,"void ~aP~a_~a(const double *wl, const double *wr, const double *dxl, const double *dxr, const double *nu, const double *fl, const double *fr, double *outl, double *outr) ~%{ ~%", funcNm, polyOrder, surfLabels[dir]),
  printf(fh,"  // w[~a]:      Cell-center coordinates.~%",dim),
  printf(fh,"  // dx[~a]:     Cell spacing.~%",dim),
  printf(fh,"  // nu[~a]:     diffusion coefficient (collisionality).~%",dim),
  printf(fh,"  // fl/fr:     Distribution function in left/right cells.~%"),
  printf(fh,"  // outl/outr: Incremented distribution function in left/right cells ~%"),
  numFac : 2.0^diffOrder,
  side : ["l","r"],
  for sI : 1 thru 2 do (
    denFac : sconcat("dx",side[sI],"[", dir-1,"]*dx",side[sI],"[", dir-1,"]"),
    for ef : 2 thru diffOrder/2 do (
      denFac : sconcat(denFac,"*dx",side[sI],"[", dir-1,"]*dx",side[sI],"[", dir-1,"]")
    ),
    printf(fh,sconcat("  double rdxFnu",side[sI]," = ~a*nu[~a]/(~a); ~%"), numFac, dir-1, denFac)
  ),
  printf(fh,"~%"),
  
  for oI : 1 thru diffOrder do (
    printf(fh,sconcat("  double incr",oI,"[~a]; ~%"), numB)
  ),
  printf(fh,"~%"),

  if (not applyPos) then (

    if (diffOrder = 2) then (
      hsolOrder : [diffOrder, hsol[1], hsol[2]]
    ) else (
      hsolOrder : [diffOrder, h_e]
    ),
    compWriteIncr(vars, basis, dir, hsolOrder, 0)

  ) else (

    /* This function evaluates the coefficients of the recovery polynomial
       (fIn) in variables evalVars at all combinations of (+/- evalPoint)
       points, and places it in the list fEvOut. */
    pointEval(fEvOut,fIn,evalVars,evalPoint,compIn) := block([v1,otherVars,fSub],
      v1        : evalVars[1],
      otherVars : delete(v1,evalVars),
      for iQ : -1 step 2 thru 1 do (
        fSub : subst(v1=iQ*evalPoint,fIn),
        if length(otherVars)>0 then (
          pointEval(fEvOut,fSub,otherVars,evalPoint,compIn)
        ) else (
          fEvOut[compIn][iHe] : fSub,
          iHe : iHe + 1
        )
      )
    ),

    /* Evaluate boundary value of recovery polynomial at key (control) points. */
    Ncp   : 2^(dim-1),  /* Number of control points. */
    hsolKP: [makelist(0,j,1,Ncp)],
    iHe   : 1,
    if (length(surfVars)>0) then (
      pointEval(hsolKP,hsol[1],surfVars,1/3,1)
    ) else (
      hsolKP[1][iHe] : hsol[1]
    ),


    /* If value of recovery polynomial at the interface, evaluated at key
       points, is below zero, use its exponential representation. */
    hsolKPifCond : "(",
    for iS : 1 thru length(hsolKP[1]) do (
      hsolKPifCond : sconcat(hsolKPifCond,string(float(expand(hsolKP[1][iS]))),">=0.0)"),
      if iS<length(hsolKP[1]) then (
        hsolKPifCond : sconcat(hsolKPifCond," && (")
      )
    ),
    printf(fh,"  if ( ~a ) {~%",hsolKPifCond),

    if (diffOrder = 2) then (
      hsolOrder : [diffOrder, hsol[1], hsol[2]]
    ),
    compWriteIncr(vars, basis, dir, hsolOrder, 2),

    printf(fh,"  } else {~%"),
    printf(fh,"~%"),

    Ncp    : 2^(dim-1),  /* Number of control points. */
    hsolEv : makelist(makelist(0,j,1,Ncp),i,1,4),
    for iC : 1 thru 4 do (
      iHe : 1,
      if (length(surfVars)>0) then (
        pointEval(hsolEv,hsol[iC],surfVars,1/3,iC)
      ) else (
        hsolEv[iC][iHe] : hsol[iC]
      )
    ),

    /* At each point we evaluated the recovery poly, need to reconstruct
       an exponential, for which we need xBar, xBarSq and g1. */
    xBars : makelist(0,i,1,Ncp),
    for iCP : 1 thru Ncp do (
      xBars[iCP] : (hsolEv[2][iCP]+3*hsolEv[4][iCP]/5)/(3*hsolEv[1][iCP]+hsolEv[3][iCP])
    ),

    xBarsSq : makelist(xBar[i]*xBar[i],i,0,Ncp-1),
    g1s     : makelist(xBar[i]*(3-xBarSq[i])/(1-xBarSq[i]),i,0,Ncp-1),

    printf(fh,"    double xBar[~a];~%",Ncp),
    writeCExprs1so(xBar,xBars,2),
    printf(fh,"~%"),

    printf(fh,"    double xBarSq[~a];~%", Ncp),
    writeCExprs1sP(xBarSq,xBarsSq,2),
    printf(fh,"~%"),

    printf(fh,"    double g1[~a];~%",Ncp),
    writeCExprs1s(g1,g1s,2),
    printf(fh,"~%"),

    printf(fh,"    double gBound[~a];~%",Ncp),
    printf(fh,"    double gBoundP[~a];~%",Ncp),
    printf(fh,"~%"),

    for iCP : 1 thru Ncp do (
      /* When the function is very flat we need to compute the exponential
         differently so that 1/sinh(g1) doesn't blow up. */
      printf(fh,"    if (std::abs(g1[~a]) > 1.0e-15) {~%",iCP-1),

      printf(fh,"      double g1Sq = g1[~a]*g1[~a];~%",iCP-1,iCP-1),

      expg0  : [g1[iCP-1]*(hsolEv[1][iCP]+hsolEv[3][iCP]/3)/sinh(g1[iCP-1])],
      gprime : [g1[iCP-1]*expg0[1]],

      writeCExprs1sI(gBound,iCP-1,expg0,4),
      writeCExprs1sI(gBoundP,iCP-1,gprime,4),

      printf(fh,"    } else {~%"),

      expg0  : [hsolEv[1][iCP]+hsolEv[3][iCP]/3],
      gprime : [0.0],

      writeCExprs1sI(gBound,iCP-1,expg0,4),
      writeCExprs1sI(gBoundP,iCP-1,gprime,4),

      printf(fh,"    };~%"),
      printf(fh, "~%")
    ),

    if (dim=1) then (
      if (diffOrder = 2) then (
        hsolOrder : [diffOrder, gBound[0], gBoundP[0]]
      ),
      compWriteIncr(vars, basis, dir, hsolOrder, 2)
    ) else (

      /*........... Create nodal to modal transform matrix .......... */
      /* Surface basis: basis of one lower dimensionality w/o surf variable. */
      bSurf  : sqrt(2)*delete(0,fullratsimp(innerProd(vars,1,basis,subst(cv=0,basis)))*basis),
      gFsurf : doExpand(gF,bSurf),
      /* Evaluate the g-Function at various combinations of control points. */
      gFsurfCP : [makelist(0,i,1,Ncp)],
      iHe      : 1,
      pointEval(gFsurfCP,gFsurf,surfVars,1/3,1),
      /* Construct the nodal-to-modal matrix. */
      n2m : invert(coefmatrix(gFsurfCP[1],makelist(gF[i],i,1,length(bSurf)))),
      /*........... Built nodal to modal transform matrix .......... */

      modalV  : n2m . makelist(gBound[i-1],i,1,Ncp),
      gRec0   : doExpand(makelist(modalV[i][1],i,1,length(bSurf)),bSurf),

      modalV  : n2m . makelist(gBoundP[i-1],i,1,Ncp),
      gRecP0  : doExpand(makelist(modalV[i][1],i,1,length(bSurf)),bSurf),

      if (diffOrder = 2) then (
        hsolOrder : [diffOrder, gRec0, gRecP0]
      ),
      compWriteIncr(vars, basis, dir, hsolOrder, 2)
    ), 

    printf(fh,"  };~%")
  ),
  printf(fh, "~%"),
  
  
  printf(fh, "} ~%")
);

calcBoundaryUpdateInDir(dir, fh, funcNm, dim, basisFun, polyOrder, diffOrder, applyPos) := block([hsolOrder],

  /* Positivity preserving algorithm only for p=1 for now. */
  if applyPos then (
    polyOrder : 1
  ),

  tmpLst : loadBasisX(dim, basisFun, polyOrder),
  basis  : tmpLst[1],
  vars   : tmpLst[2],

  numB : length(basis),

  /* Variables. */
  cv       : vars[dir],
  surfVars : delete(cv,vars),

  /* Recovery polynomial and its coefficients. */
  hOrder : 2*polyOrder+1,
  h_e    : calcRecov2CellGen(basisFun,cv,vars,polyOrder,dg(makelist(fl[i],i,0,numB)), dg(makelist(fr[i],i,0,numB))),
  hsol   : cons(subst(cv=0,h_e),makelist(subst(cv=0,diff(h_e,cv,ord)/(ord!)),ord,1,hOrder)),

  printf(fh,"void ~aP~a_~a(const double *wl, const double *wr, const double *dxl, const double *dxr, const int *idxl, const int *idxr, const double *nu, const double *fl, const double *fr, double *outl, double *outr) ~%{ ~%", funcNm, polyOrder, surfLabels[dir]),
  printf(fh,"  // w[~a]:      Cell-center coordinates.~%",dim),
  printf(fh,"  // dx[~a]:     Cell spacing.~%",dim),
  printf(fh,"  // idx[~a]:    current grid index.~%",dim),
  printf(fh,"  // nu[~a]:     diffusion coefficient (collisionality).~%",dim),
  printf(fh,"  // fl/fr:     Distribution function in left/right cells.~%"),
  printf(fh,"  // outl/outr: Incremented distribution function in left/right cells ~%"),
  numFac : 2.0^diffOrder,
  side : ["l","r"],
  for sI : 1 thru 2 do (
    denFac : sconcat("dx",side[sI],"[", dir-1,"]*dx",side[sI],"[", dir-1,"]"),
    for ef : 2 thru diffOrder/2 do (
      denFac : sconcat(denFac,"*dx",side[sI],"[", dir-1,"]*dx",side[sI],"[", dir-1,"]")
    ),
    printf(fh,sconcat("  double rdxFnu",side[sI]," = ~a*nu[~a]/(~a); ~%"), numFac, dir-1, denFac)
  ),
  printf(fh,"~%"),
  
  for oI : 1 thru diffOrder do (
    printf(fh,sconcat("  double incr",oI,"[~a]; ~%"), numB)
  ),
  printf(fh,"~%"),

  if (not applyPos) then (

    if (diffOrder = 2) then (
      hsolOrder : [diffOrder, hsol[1], hsol[2]]
    ) else (
      hsolOrder : [diffOrder, h_e]
    ),
    compWriteIncr(vars, basis, dir, hsolOrder, 0)

  ) else (

    /* This function evaluates the coefficients of the recovery polynomial
       (fIn) in variables evalVars at all combinations of (+/- evalPoint)
       points, and places it in the list fEvOut. */
    pointEval(fEvOut,fIn,evalVars,evalPoint,compIn) := block([v1,otherVars,fSub],
      v1        : evalVars[1],
      otherVars : delete(v1,evalVars),
      for iQ : -1 step 2 thru 1 do (
        fSub : subst(v1=iQ*evalPoint,fIn),
        if length(otherVars)>0 then (
          pointEval(fEvOut,fSub,otherVars,evalPoint,compIn)
        ) else (
          fEvOut[compIn][iHe] : fSub,
          iHe : iHe + 1
        )
      )
    ),

    /* Evaluate boundary value of recovery polynomial at key (control) points. */
    Ncp : 2^(dim-1),  /* Number of control points. */
    hsolKP: [makelist(0,j,1,Ncp)],
    iHe : 1,
    if (length(surfVars)>0) then (
      pointEval(hsolKP,hsol[1],surfVars,1/3,1)
    ) else (
      hsolKP[1][iHe] : hsol[1]
    ),


    /* If value of recovery polynomial at the interface, evaluated at key
       points, is below zero, use its exponential representation. */
    hsolKPifCond : "(",
    for iS : 1 thru length(hsolKP[1]) do (
      hsolKPifCond : sconcat(hsolKPifCond,string(float(expand(hsolKP[1][iS]))),">=0.0)"),
      if iS<length(hsolKP[1]) then (
        hsolKPifCond : sconcat(hsolKPifCond," && (")
      )
    ),
    printf(fh,"  if ( ~a ) {~%",hsolKPifCond),

    if (diffOrder = 2) then (
      hsolOrder : [diffOrder, hsol[1], hsol[2]]
    ),
    compWriteIncr(vars, basis, dir, hsolOrder, 2),

    printf(fh,"  } else {~%"),
    printf(fh,"~%"),

    Ncp : 2^(dim-1),  /* Number of control points. */
    hsolEv : makelist(makelist(0,j,1,Ncp),i,1,4),
    for iC : 1 thru 4 do (
      iHe : 1,
      if (length(surfVars)>0) then (
        pointEval(hsolEv,hsol[iC],surfVars,1/3,iC)
      ) else (
        hsolEv[iC][iHe] : hsol[iC]
      )
    ),

    /* At each point we evaluated the recovery poly, need to reconstruct
       an exponential, for which we need xBar, xBarSq and g1. */
    xBars : makelist(0,i,1,Ncp),
    for iCP : 1 thru Ncp do (
      xBars[iCP] : (hsolEv[2][iCP]+3*hsolEv[4][iCP]/5)/(3*hsolEv[1][iCP]+hsolEv[3][iCP])
    ),

    xBarsSq : makelist(xBar[i]*xBar[i],i,0,Ncp-1),
    g1s     : makelist(xBar[i]*(3-xBarSq[i])/(1-xBarSq[i]),i,0,Ncp-1),

    printf(fh,"    double xBar[~a];~%",Ncp),
    writeCExprs1so(xBar,xBars,2),
    printf(fh,"~%"),

    printf(fh,"    double xBarSq[~a];~%", Ncp),
    writeCExprs1sP(xBarSq,xBarsSq,2),
    printf(fh,"~%"),

    printf(fh,"    double g1[~a];~%",Ncp),
    writeCExprs1s(g1,g1s,2),
    printf(fh,"~%"),

    printf(fh,"    double gBound[~a];~%",Ncp),
    printf(fh,"    double gBoundP[~a];~%",Ncp),
    printf(fh,"~%"),

    for iCP : 1 thru Ncp do (
      /* When the function is very flat we need to compute the exponential
         differently so that 1/sinh(g1) doesn't blow up. */
      printf(fh,"    if (std::abs(g1[~a]) > 1.0e-15) {~%",iCP-1),

      printf(fh,"      double g1Sq = g1[~a]*g1[~a];~%",iCP-1,iCP-1),

      expg0  : [g1[iCP-1]*(hsolEv[1][iCP]+hsolEv[3][iCP]/3)/sinh(g1[iCP-1])],
      gprime : [g1[iCP-1]*expg0[1]],

      writeCExprs1sI(gBound,iCP-1,expg0,4),
      writeCExprs1sI(gBoundP,iCP-1,gprime,4),

      printf(fh,"    } else {~%"),

      expg0  : [hsolEv[1][iCP]+hsolEv[3][iCP]/3],
      gprime : [0.0],

      writeCExprs1sI(gBound,iCP-1,expg0,4),
      writeCExprs1sI(gBoundP,iCP-1,gprime,4),

      printf(fh,"    };~%"),
      printf(fh, "~%")
    ),

    if (dim=1) then (
      if (diffOrder = 2) then (
        hsolOrder : [diffOrder, gBound[0], gBoundP[0]]
      ),
      compWriteIncr(vars, basis, dir, hsolOrder, 2)
    ) else (

      /*........... Create nodal to modal transform matrix .......... */
      /* Surface basis: basis of one lower dimensionality w/o surf variable. */
      bSurf  : sqrt(2)*delete(0,fullratsimp(innerProd(vars,1,basis,subst(cv=0,basis)))*basis),
      gFsurf : doExpand(gF,bSurf),
      /* Evaluate the g-Function at various combinations of control points. */
      gFsurfCP : [makelist(0,i,1,Ncp)],
      iHe      : 1,
      pointEval(gFsurfCP,gFsurf,surfVars,1/3,1),
      /* Construct the nodal-to-modal matrix. */
      n2m : invert(coefmatrix(gFsurfCP[1],makelist(gF[i],i,1,length(bSurf)))),
      /*........... Built nodal to modal transform matrix .......... */

      modalV  : n2m . makelist(gBound[i-1],i,1,Ncp),
      gRec0   : doExpand(makelist(modalV[i][1],i,1,length(bSurf)),bSurf),

      modalV  : n2m . makelist(gBoundP[i-1],i,1,Ncp),
      gRecP0  : doExpand(makelist(modalV[i][1],i,1,length(bSurf)),bSurf),

      if (diffOrder = 2) then (
        hsolOrder : [diffOrder, gRec0, gRecP0]
      ),
      compWriteIncr(vars, basis, dir, hsolOrder, 2)
    ),

    printf(fh,"  };~%")
  ),
  printf(fh, "~%"),

  printf(fh, "} ~%")
);

calcConstDiffusionSurfUpdater(fh, funcNm, dim, basisFun, polyOrder, diffOrder, usePos) := block([dir],
  for dir : 1 thru dim do (
    calcUpdateInDir(dir, fh, funcNm, dim, basisFun, polyOrder, diffOrder, usePos)
  )
)$

calcConstDiffusionBoundarySurfUpdater(fh, funcNm, dim, basisFun, polyOrder, diffOrder, usePos) := block([dir],
  for dir : 1 thru dim do (
    calcBoundaryUpdateInDir(dir, fh, funcNm, dim, basisFun, polyOrder, diffOrder, usePos)
  )
)$

