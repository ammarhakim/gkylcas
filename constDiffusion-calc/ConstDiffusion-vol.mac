load("modal-basis")$
load("out-scripts");
load(stringproc)$
fpprec : 24$

/* This script generates the kernels needed for adding the
   volume contributions from second order diffusion in all
   directions using two integrations by parts. */

cidx(cdim) := makelist(i,i,0,cdim-1)$

calcConstDiffusionVolUpdater(fh, funcNm, cdim, basisFun, pMax) := block([],
  printf(fh, "#include <ConstDiffusionModDecl.h> ~%"),
  for polyOrder : 1 thru pMax do (

    kill(varsC, varsP, basisC, basisP),
    /* Load basis of dimensionality requested. */
    load(sconcat("basis-precalc/basis", basisFun, cdim, "x")),

    /* Polynomial basis and its derivatives. */
    bC : basisC[polyOrder],
    NC : length(bC),

    fg : doExpand(f, bC),	/* Function expanded in basis. */
    fg : subst(makelist(f[i]=f[i-1],i,1,NC),fg),
    
    /* Volume matrix (convolution of derivatives). */
    incr : (
      incr : 0,
      for dir : 1 thru cdim do (
        cv   : varsC[dir],
        incr : incr+calcInnerProdList(varsC,rdxSq4nu[dir-1],diff(bC,cv,2),fg)
      ),
      incr
    ),

    printf(fh,"double ~aP~a(const double *w, const double *dxv, const double *nu, const double *f, double *out) ~%{ ~%", funcNm, polyOrder),
    printf(fh,"  // w[~a]:   Cell-center coordinates.~%",cdim),
    printf(fh,"  // dxv[~a]: Cell spacing.~%",cdim),
    printf(fh,"  // nu[~a]:  diffusion coefficient (collisionality).~%",cdim),
    printf(fh,"  // f:      Input distribution function.~%"),
    printf(fh,"  // out:    Incremented output ~%"),
    cid : cidx(cdim),
    printf(fh,"  double rdxSq4nu[~a]; ~%", cdim),
    for dir : 1 thru cdim do (
      printf(fh,"  rdxSq4nu[~a] = 4.0*nu[~a]/(dxv[~a]*dxv[~a]); ~%", dir-1, dir-1, dir-1, dir-1)
    ),
    printf(fh,"~%"),
  
    writeCIncrExprs1(out, incr),
    printf(fh,"~%"),

    if cdim = 1 then (
      printf(fh,"  return rdxSq4nu[0]*0.5*~a; ~%",float(((polyOrder+1)**2)/(2*polyOrder+1)))
    ),
    if cdim = 2 then (
      printf(fh,"  return (rdxSq4nu[0]+rdxSq4nu[1])*0.5*~a; ~%",float(((polyOrder+1)**2)/(2*polyOrder+1)))
    ),
    if cdim = 3 then (
      printf(fh,"  return (rdxSq4nu[0]+rdxSq4nu[1]+rdxSq4nu[2])*0.5*~a; ~%",float(((polyOrder+1)**2)/(2*polyOrder+1)))
    ),
    printf(fh,"~%"),
  
    printf(fh,"} ~%")
));

