/* Create kernels to compute the sheath potential and the potential
   everywhere via quadrature assuming ambipolar sheath fluxes. */
load("ambipolar_sheath_potential/ambipolar_sheath_potential_funcs.mac")$
load(stringproc)$

/* ...... USER INPUTS........ */

/* Serendipity basis. */
maxPolyOrder_Ser : 1$
minDim_Ser : 1$
maxDim_Ser : 1$

/* Maximal order basis. */
maxPolyOrder_Max : 2$
minDim_Max : 1$
maxDim_Max : 0$

/* Tensor basis. */
maxPolyOrder_Tensor : 2$
minDim_Tensor : 1$
maxDim_Tensor : 0$

/* ...... END OF USER INPUTS........ */

/* To generate other bases, just add corresponding column to arrays below. */
bName        : ["ser","max","tensor"]$
maxPolyOrder : [maxPolyOrder_Ser,maxPolyOrder_Max,maxPolyOrder_Tensor]$
minDim       : [minDim_Ser,minDim_Max,minDim_Tensor]$
maxDim       : [maxDim_Ser,maxDim_Max,maxDim_Tensor]$

for bInd : 1 thru length(bName) do (
  for cD : minDim[bInd] thru maxDim[bInd] do (
    maxPolyOrderB : maxPolyOrder[bInd],
    if (cD>4 and maxPolyOrderB > 2) then maxPolyOrderB : 2,
    if (cD=6 and maxPolyOrderB > 1) then maxPolyOrderB : 1,

    for polyOrder : 1 thru maxPolyOrderB do (

      disp(printf(false,sconcat("Creating ambipolar_sheath_potential_ ~ax p~a ",bName[bInd]),cD,polyOrder)),

      fname : sconcat("~/max-out/ambipolar_sheath_potential_", cD, "x_p", polyOrder, "_", bName[bInd], ".cpp"),
      fh : openw(fname),
      printf(fh, "#include <ambipolar_sheath_potential_mod_decl.h>~%~%"),

      funcName : sconcat("ambipolar_sheath_potential_gauss_sheath_ev_~a_", cD, "x_p", polyOrder, "_", bName[bInd]),
      genSheathEvGaussQuad(fh, funcName, cD, bName[bInd], polyOrder),

      close(fh)
    )
  )
);
