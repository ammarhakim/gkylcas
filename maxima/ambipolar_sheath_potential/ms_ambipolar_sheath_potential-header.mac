/* Generate the header file for the AmbipolarSheath kernels. */

/* ...... USER INPUTS........ */

/* Indicate the mininimum and maximum dimensionality for which
   you wish to generate kernels. The smallest possible is 1 and
   the largest 3. */

/* Serendipity basis. */
maxPolyOrder_Ser : 1$
minDim_Ser : 1$
maxDim_Ser : 1$

/* Maximal order basis. */
maxPolyOrder_Max : 3$
minDim_Max : 1$
maxDim_Max : 0$

/* Tensor basis. */
maxPolyOrder_Tensor : 2$
minDim_Tensor : 1$
maxDim_Tensor : 0$

/* ...... END OF USER INPUTS (maybe)........ */

/* To generate other bases, just add corresponding column to arrays below. */
bName        : ["ser","max","tensor"]$
maxPolyOrder : [maxPolyOrder_Ser,maxPolyOrder_Max,maxPolyOrder_Tensor]$
minDim       : [minDim_Ser,minDim_Max,minDim_Tensor]$
maxDim       : [maxDim_Ser,maxDim_Max,maxDim_Tensor]$


/* Open new header file. */
fh : openw("~/max-out/ambipolar_sheath_potential_mod_decl.h")$

printf(fh, "#ifndef AMBIPOLAR_SHEATH_POTENTIAL_MOD_DECL_H ~%")$
printf(fh, "#define AMBIPOLAR_SHEATH_POTENTIAL_MOD_DECL_H ~%")$
printf(fh, "~%")$
printf(fh, "#include <cmath> ~%")$
printf(fh, "~%")$
printf(fh, "extern \"C\" { ~%")$
printf(fh, "~%")$

for bInd : 1 thru length(bName) do (
  for cD : 1 thru maxDim[bInd] do (

    maxPolyOrderB : maxPolyOrder[bInd],
    if (cD>3 and maxPolyOrderB > 2) then maxPolyOrderB : 2,
    if (cD=6 and maxPolyOrderB > 1) then maxPolyOrderB : 1,

    for polyOrder : 1 thru maxPolyOrderB do (

      printf(fh, "  void ambipolar_sheath_potential_gauss_sheath_ev_lower_~ax_p~a_~a(const double q_e, const double m_e, const double *Gamma_i, const double *m0Elc, const double *vtSqElc, double *m0ElcS, double *phiS); ~%", cD, polyOrder, bName[bInd]),
      printf(fh, "  void ambipolar_sheath_potential_gauss_sheath_ev_upper_~ax_p~a_~a(const double q_e, const double m_e, const double *Gamma_i, const double *m0Elc, const double *vtSqElc, double *m0ElcS, double *phiS); ~%", cD, polyOrder, bName[bInd])
    ),
    printf(fh, "~%")
  )
)$

printf(fh, "} ~%")$
printf(fh, "~%")$

printf(fh, "#endif ~%")$

close(fh)$
