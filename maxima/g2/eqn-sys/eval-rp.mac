/**
 * Reimann solver for Maxwell equations
 */

evalRp(A, jump) := block(
  /** Determine how many eqns we have */
  [n, m] : matrix_size(A),
  /** Speed of light is positive */
  assume(c>0),
  assume(gam>0),
  /** Compute eigevectors */
  [vals, vects] : eigenvectors(A),
  /** Right eigenvectors */
  Rev : (Rev : matrix([]), for i from 1 thru n
          do (Rev : addcol(Rev, transpose(matrix(vects[i][1])))), Rev),
  /** Left eigenvectors */
  Lev : invert(Rev),
  /** Split it */
  alpha : Lev . jump,
  /** Compute waves */
  Waves : (Waves : matrix([]), for i from 1 thru n 
            do (Waves : addcol(Waves, alpha[i][1]*col(Rev, i))), Waves),
  speeds : (speeds : zeromatrix(1,n), for i from 1 thru n
             do (speeds[1][i] : vals[1][i]), speeds),
  /** Compute positive and negative speeds */
  sp = (sp : zeromatrix(1,n), for i from 1 thru n
         do (sp[1][i] : if (vals[1][i] > 0) then vals[1][i] else 0),
         sp),
  sm = (sm : zeromatrix(1,n), for i from 1 thru n
         do (sm[1][i] : if (vals[1][i] < 0) then vals[1][i] else 0),
         sm),
  /** Compute fluctuations */
  Ap : (Ap : zeromatrix(n,1), for i from 1 thru n
         do (Ap : Ap + sp[1][i]*col(Waves, i)),
         Ap),
  Am : (Am : zeromatrix(n,1), for i from 1 thru n
         do (Am : Am + sm[1][i]*col(Waves, i)),
         Am),
  return ([speeds, Waves, Ap, Am])
);

secondOrderFlux(speeds, waves, dtdr) := block(
  /** Determine how many eqns we have */
  [n, m] : matrix_size(waves),
  assume(c>0),
  assume(gamm>0),
  fso : (fso : zeromatrix(n,1), for i from 1 thru n
          do (fso : fso + abs(speeds[1][i])*(1-dtdr*abs(speeds[1][i]))*col(waves, i)),
          fso/2),
  return (fso)
);
