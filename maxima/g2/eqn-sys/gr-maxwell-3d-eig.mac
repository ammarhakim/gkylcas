/** GR Maxwell eigensystem: hard-coded to Kerr-Schild coorindate. Possibly somewhat wrong */

EM : [Dx, Dy, Dz, Bx, By, Bz]$
flux : [
  0,
  alp*Bz - (betx*Dy-bety*Dx),
  -(alp*By - (betz*Dx-betx*Dz)),
  0,
  -(alp*Dz + betx*By-bety*Bx),
  alp*Dy + betz*Bx-betx*Bz
]$

Atm : coefmatrix(flux, EM)$

/** Compute eigensystem. */
[vals, vects] : eigenvectors(Atm)$

/** Create list of eigenvalues, including repeated ones */
Evs : (Evs : [], for i from 1 thru length(vals[1])
        do (for j from 1 thru vals[2][i]
	  do (Evs : append(Evs, [vals[1][i]]))), Evs)$

/** Right eigenvectors. This nastiness is needed as the eigesystem is
returned as a list of nested lists. These nested lists are taken apart
based on eigenvalue multiplicity and put as columns in a matrix of
right-eigenvectors */

Rev : (Rev : matrix([]), for i from 1 thru length (vals[1]) 
        do (for j from 1 thru vals[2][i] 
          do ( (Rev : addcol(Rev, transpose(matrix(vects[i][j])))))), Rev)$ 

/** Muck around with right eigenvectors so we can go to the proper flat limit */
Revm : matrix([])$

Revm : addcol( Revm, col(Rev,1) )$
Revm : addcol( Revm, col(Rev,2) )$
Revm : addcol( Revm, col(Rev,3) )$
Revm : addcol( Revm, col(Rev,4) )$

Revm : addcol( Revm, fullratsimp(col(Rev,5)*alp*betz*(betx^2-alp^2)) )$
Revm : addcol( Revm, fullratsimp(col(Rev,6)*alp*betz*(betx^2-alp^2)) )$

/** Cross check */
substList : [betx=0, bety=0, betz=0, alp=1]$
flatRevm : subst(substList, Revm)$
