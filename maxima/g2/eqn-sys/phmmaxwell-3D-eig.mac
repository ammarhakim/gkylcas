/** Jacobian is 8x8 */
A : zeromatrix(8, 8)$

EX : 1$
EY : 2$
EZ : 3$
BX : 4$
BY : 5$
BZ : 6$
PHI : 7$
PSI : 8$

/** Set non-zero Jacobian elements */
assume(c>0)$
assume(chi>0)$
assume(gamma>0)$
A[EX, PHI] : c^2*chi$
A[EY, BZ] : c^2$
A[EZ, BY] : -c^2$
A[BX, PSI] : gamma$
A[BY, EZ] : -1$
A[BZ, EY] : 1$
A[PHI, EX] : chi$
A[PSI, BX] : gamma*c^2$

/** Compute eigensystem */
[vals, vects] : eigenvectors(A)$

/** Create right and left eigenvector martrices */
Rev : (Rev : matrix([]), for i from 1 thru length(vals[1])
        do (for j from 1 thru vals[2][i]
	  do (Rev : addcol(Rev, transpose(matrix(vects[i][j]))))), Rev)$
Lev : invert (Rev)$

/** Create list of eigenvalues, including repeated ones */
Evs : (Evs : [], for i from 1 thru length(vals[1])
        do (for j from 1 thru vals[2][i]
	  do (Evs : append(Evs, [vals[1][i]]))), Evs)$

/** Jump in Q */
jump : makelist(qr[i]-ql[i],i,0,7)$

/** Split it */
alpha : Lev . jump$

Waves : (Waves : matrix([]), for i from 1 thru 8 
  do (Waves : addcol(Waves, alpha[i][1]*col(Rev, i))), Waves)$

sp : (sp : zeromatrix(1,8), for i from 1 thru 8
  do (sp[1][i] : if (Evs[i] > 0) then Evs[i] else 0),
  sp)$
sm : (sm : zeromatrix(1,8), for i from 1 thru 8
  do (sm[1][i] : if (Evs[i] < 0) then Evs[i] else 0),
  sm)$

Ap : (Ap : zeromatrix(8,1), for i from 1 thru 8
  do (Ap : Ap + sp[1][i]*col(Waves, i)),
  Ap)$

Am : (Am : zeromatrix(8,1), for i from 1 thru 8
  do (Am : Am + sm[1][i]*col(Waves, i)),
  Am)$


fh : openw("~/max-out/qfluct.c")$
for i : 1 thru 8 do (
  printf(fh, " apdq[~a] = ~a; ~%", i-1, Ap[i][1])
  )$
for i : 1 thru 8 do (
  printf(fh, " amdq[~a] = ~a; ~%", i-1, Am[i][1])
  )$
close(fh)$
