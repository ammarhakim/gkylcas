load("modal-basis")$
load("out-scripts");
load("recovery");
load(stringproc)$
fpprec : 24$

/* This script generates the kernels needed for filling the ghost
   cells so that BCs are enforced for the constantDiffusion term.
   This assumes that ConstantDiffusion is being solved using two
   differentiations by parts and RDG (i.e. the surface kernels and
   the BC kernels would preferably be consistent with each other). */

/* ...... USER INPUTS........ */

/* Serendipity basis. */
maxPolyOrder_Ser : 1$
minDim_Ser : 1$
maxDim_Ser : 4$

/* Maximal order basis. */
maxPolyOrder_Max : 2$
minDim_Max : 1$
maxDim_Max : 4$

/* ...... END OF USER INPUTS (maybe) ........ */

surfLabels : [X1, X2, X3, X4, X5, X6]$
sEdge      : ["lower","upper"]$

loadBasisX(dimTot, basisType, pOrder) := block([basis,vars],
  /* Load a basis based on dimensionality and basis type alone. */
  kill(varsC, varsP, basisC, basisP),
  if (dimTot < 4) then (
    load(sconcat("basis-precalc/basis", basisType, dimTot, "x"))
  ) else (
    load(sconcat("basis-precalc/basis", basisType, dimTot-3, "x", 3, "v"))
  ),

  if (dimTot < 4) then (
    basis : basisC[pOrder],
    vars  : varsC
  ) else (
    basis : basisP[pOrder],
    vars  : varsP
  ),
  return([basis,vars])
)$

calcConstDiffusionDirichletBCs(fh, funcNm, dim, basisFun, pMax) := block([],
  /* Dirichlet BCs: Construct a recovery polynomial. Require that its value
     at the boundary matches the Dirichlet value, and that all the higher
     moments are symmetric (odd moments) or antisymmetric (even moments). */

  for polyOrder : 1 thru pMax do (

    /* Load basis of dimensionality requested. */
    tmpLst : loadBasisX(dim, basisFun, polyOrder),
    basis  : tmpLst[1],
    vars   : tmpLst[2],

    numB : length(basis),

    for dir : 1 thru dim do (

      /* Variables. */
      cv       : vars[dir],
      surfVars : delete(cv,vars),

      /* Coefficients on either side of cell surface. */
      qM_c : makelist(qM[i],i,0,numB-1),
      qP_c : makelist(qP[i],i,0,numB-1),

      for jEd : 1 thru 2 do ( /* Loop over lower/upper edge. */
    
        printf(fh,"void ~aP~a_Dirichlet_~a~a(const double dx, const double *fSkin, const double fBC, double *fGhost) ~%{ ~%", funcNm, polyOrder, surfLabels[dir], sEdge[jEd]),
        printf(fh,"  // dx:         Cell spacing.~%",dim),
        printf(fh,"  // fSkin[~a]:   DG coefficients in skin cell.~%",numB),
        printf(fh,"  // fBC:        Dirichlet boundary value.~%"),
        printf(fh,"  // fGhost[~a]:  DG coefficients in ghost cell.~%",numB),
        printf(fh,"~%"),

        /* Construct recovery polynomial and require that its moments equal those
           of the function in the ghost cell to compute what the coefficients in
           the ghost cell should be.
           NOTE: it appears that the values passed to etaDir, put in lims and the N
                 factor for Neumann BCs have to be consisent with those used inside
                 the recovery functions. */
        lims : makelist([-1,1],d,1,dim),
        if jEd=1 then (
          h_e : calcRecov2CellGen(basisFun, cv, vars, polyOrder, bc(D=1,N=0,val=fBC), dg(qP_c)),

          basisL : etaDir(cv,-1,2,basis),
          qM_e   : doExpand(qM_c,basisL),

          lims[dir] : [-2,0],
          eqLeft  : calcInnerProdListGen(vars,lims,1,basisL,h_e),
          eqRight : calcInnerProdListGen(vars,lims,1,basisL,qM_e),
          eqSolv  : solve(makelist(eqLeft[i]=eqRight[i],i,1,numB),qM_c)[1],

          subList : makelist(qP_c[k]=fSkin[k-1],k,1,numB),
          fGhost_c : makelist(subst(subList,rhs(eqSolv[j])),j,1,numB)
        ) else (
          h_e : calcRecov2CellGen(basisFun, cv, vars, polyOrder, dg(qM_c), bc(D=1,N=0,val=fBC)),

          basisR : etaDir(cv,1,2,basis),
          qP_e   : doExpand(qP_c,basisR),

          lims[dir] : [0,2],
          eqLeft  : calcInnerProdListGen(vars,lims,1,basisR,h_e),
          eqRight : calcInnerProdListGen(vars,lims,1,basisR,qP_e),
          eqSolv  : solve(makelist(eqLeft[i]=eqRight[i],i,1,numB),qP_c)[1],

          subList : makelist(qM_c[k]=fSkin[k-1],k,1,numB),
          fGhost_c : makelist(subst(subList,rhs(eqSolv[j])),j,1,numB)
        ),

        writeCExprs1(fGhost,fGhost_c),
        printf(fh,"~%"),

        printf(fh,"};~%"),
        printf(fh,"~%")

      )
    )
  )
)$

calcConstDiffusionNeumannBCs(fh, funcNm, dim, basisFun, pMax) := block([],
  /* Neumann BCs: 
     In the p=1 vanLeer 2005 test the option that gave the best result was to
     build a recovery poly that matches the Neumann derivative value at the boundary
     and the value of the function in the ghost cell (cell average error converged
     as 1/N^(3.7)).
     It's not clear what the higher dimensional equivalent version should be, so
     we will use another option that gave a cell average error convergence of 1/N^(3.5)
     and easily generalizes to higher dimensions.
     We wish to construct a polynomial (g) in the skin cell that has one more degree of
     freedom. We find this polynomial by imposing weak equality and matching the Neumann
     BC value. However the code assumes recovery with the ghost cell, so we build a
     skin-ghost recovery (h) and require that all its derivatives match those of g
     at the boundary. */
  /* Update: This seems to work for 2x p=1, but not p=2. */
  /* Update 10/01/2020: Change to use recovery script, which can now enforce BC. */

  for polyOrder : 1 thru pMax do (

    /* Load basis of dimensionality requested. */
    tmpLst : loadBasisX(dim, basisFun, polyOrder),
    basis  : tmpLst[1],
    vars   : tmpLst[2],

    numB : length(basis),

    for dir : 1 thru dim do (

      /* Variables. */
      cv       : vars[dir],
      surfVars : delete(cv,vars),

      /* Coefficients on either side of cell surface. */
      qM_c : makelist(qM[i],i,0,numB-1),
      qP_c : makelist(qP[i],i,0,numB-1),

      for jEd : 1 thru 2 do ( /* Loop over lower/upper edge. */
    
        /* Construct recovery polynomial and require that its moments equal those
           of the function in the ghost cell to compute what the coefficients in
           the ghost cell should be.
           NOTE: it appears that the values passed to etaDir, put in lims and the N
                 factor for Neumann BCs have to be consisent with those used inside
                 the recovery functions. */
        lims : makelist([-1,1],d,1,dim),
        if jEd=1 then (
          h_e : calcRecov2CellGen(basisFun, cv, vars, polyOrder, bc(D=0,N=2/dx,val=fpBC), dg(qP_c)),

          basisL : etaDir(cv,-1,2,basis),
          qM_e   : doExpand(qM_c,basisL),

          lims[dir] : [-2,0],
          eqLeft  : calcInnerProdListGen(vars,lims,1,basisL,h_e),
          eqRight : calcInnerProdListGen(vars,lims,1,basisL,qM_e),
          eqSolv  : solve(makelist(eqLeft[i]=eqRight[i],i,1,numB),qM_c)[1],

          subList : makelist(qP_c[k]=fSkin[k-1],k,1,numB),
          fGhost_c : makelist(subst(subList,rhs(eqSolv[j])),j,1,numB)
        ) else (
          h_e : calcRecov2CellGen(basisFun, cv, vars, polyOrder, dg(qM_c), bc(D=0,N=2/dx,val=fpBC)),

          basisR : etaDir(cv,1,2,basis),
          qP_e   : doExpand(qP_c,basisR),

          lims[dir] : [0,2],
          eqLeft  : calcInnerProdListGen(vars,lims,1,basisR,h_e),
          eqRight : calcInnerProdListGen(vars,lims,1,basisR,qP_e),
          eqSolv  : solve(makelist(eqLeft[i]=eqRight[i],i,1,numB),qP_c)[1],

          subList : makelist(qM_c[k]=fSkin[k-1],k,1,numB),
          fGhost_c : makelist(subst(subList,rhs(eqSolv[j])),j,1,numB)
        ),


        printf(fh,"void ~aP~a_Neumann_~a~a(const double dx, const double *fSkin, const double fpBC, double *fGhost) ~%{ ~%", funcNm, polyOrder, surfLabels[dir], sEdge[jEd]),
        printf(fh,"  // dx:         Cell spacing.~%",dim),
        printf(fh,"  // fSkin[~a]:   DG coefficients in skin cell.~%",numB),
        printf(fh,"  // fpBC:       Dirichlet boundary value.~%"),
        printf(fh,"  // fGhost[~a]:  DG coefficients in ghost cell.~%",numB),
        printf(fh,"~%"),

        writeCExprs1(fGhost,fGhost_c),
        printf(fh,"~%"),

        printf(fh,"};~%"),
        printf(fh,"~%")

      )
    )
  )
)$


/* To generate other bases, just add corresponding column to arrays below. */
bName        : ["Ser","Max"]$
maxPolyOrder : [maxPolyOrder_Ser,maxPolyOrder_Max]$
minDim       : [minDim_Ser,minDim_Max]$
maxDim       : [maxDim_Ser,maxDim_Max]$

for bInd : 1 thru length(bName) do (

  fname : sconcat("~/max-out/ConstDiffusionBCs", bName[bInd], ".cpp"),
  fh    : openw(fname),

  printf(fh, "#include <ConstDiffusionModDecl.h> ~%"),

  for cD : 1 thru maxDim[bInd] do (

    disp(printf(false,sconcat("Creating BC kernel",bName[bInd]," ~ax"),cD)),

    funcName : sconcat("ConstDiffusionBC", cD, "x", bName[bInd]),
    calcConstDiffusionDirichletBCs(fh, funcName, cD, bName[bInd], maxPolyOrder[bInd]),

    funcName : sconcat("ConstDiffusionBC", cD, "x", bName[bInd]),
    calcConstDiffusionNeumannBCs(fh, funcName, cD, bName[bInd], maxPolyOrder[bInd])

  ),

  close(fh)
)$
