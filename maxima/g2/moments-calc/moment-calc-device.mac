load(stringproc)$

/* ...... USER INPUTS........ */

/* Serendipity basis. */
maxPolyOrder_Ser : 3$
minCdim_Ser : 1$
minVdim_Ser : 1$    /* but see v loop below. */
maxCdim_Ser : 3$
maxVdim_Ser : 3$

/* Maximal order basis. */
maxPolyOrder_Max : 2$
minCdim_Max : 1$
minVdim_Max : 1$    /* but see v loop below. */
maxCdim_Max : 3$
maxVdim_Max : 3$

/* Tensor order basis. */
maxPolyOrder_Tensor : 2$    /* BoundaryEval fails for polyOrder>2 for some reason. */
minCdim_Tensor : 1$
minVdim_Tensor : 1$    /* but see v loop below. */
maxCdim_Tensor : 2$
maxVdim_Tensor : 2$

gkVdims      : [[1,2], [2], [2]]$

/* ...... END OF USER INPUTS........ */

bName        : ["Ser","Max","Tensor"]$
bNameLong    : ["G_SERENDIPITY_C","G_MAX_ORDER_C","G_TENSOR_C"]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Max, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Max, minCdim_Tensor]$
minVdim      : [minVdim_Ser, minVdim_Max, minVdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Max, maxCdim_Tensor]$
maxVdim      : [maxVdim_Ser, maxVdim_Max, maxVdim_Tensor]$

moments      : ["M0","M1i","M2ij","M2","M3i"]$

load(gentran)$
gentranlang : c$

disp(printf(false,"Creating CUDA wrappers:"))$
fname : "~/max-out/DistFuncMomentCalcDeviceWrappers.cu"$
fh : openw(fname)$
printf(fh,"/* -*- c++ -*- */~%")$
printf(fh,"// Gkyl ------------------------------------------------------------------------~%")$
printf(fh,"//~%")$
printf(fh,"// C wrappers to moment-calculating CUDA kernels.~%")$
printf(fh,"//~%")$
printf(fh,"//    _______     ___~%")$
printf(fh,"// + 6 @ |||| # P ||| +~%")$
printf(fh,"//------------------------------------------------------------------------------~%")$
printf(fh,"~%")$
printf(fh,"#include \"DistFuncMomentCalcDeviceModDecl.h\"~%")$
printf(fh,"#include \"DistFuncMomentCalcDeviceCommon.h\"~%")$
printf(fh,"~%")$
close(fh)$

for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    for v : max(c,minVdim[bInd]) thru maxVdim[bInd] do (
  
      disp(printf(false,"  DistFuncMomentCalcDeviceWrappers ~a~ax~av",bName[bInd],c,v)),

      maxPolyOrderB : maxPolyOrder[bInd],
      if (c+v>4 and maxPolyOrderB > 2) then maxPolyOrderB : 2,
      if (c+v=6 and maxPolyOrderB > 1) then maxPolyOrderB : 1,

      for mI : 1 thru length(moments) do (
        mom : moments[mI],
        for polyOrder : 1 thru maxPolyOrderB do (

          gentranin("moments-calc/moment-device.mac", [fname])

        )
      )
    )

  )
)$
gentraninshut()$

