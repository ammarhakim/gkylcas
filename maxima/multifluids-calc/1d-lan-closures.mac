/** 1D Closures */

assume(n0>0);
assume(p0>0);
assume(m>0);
assume(mu1>0);
assume(mu1<2);

/** Exact integrate response */
resEx : integrate(exp(-t^2/2), t, 0, inf);

/** 2+1 closure */
A21 : matrix( [0, n0], [1/n0, -mu1*%i] );

[vals, vects] : eigenvectors(A21);

/** Matrix of right and left eigenvectors */
Rev : (Rev : matrix([]), for i from 1 thru length (vals[1]) 
        do (for j from 1 thru vals[2][i] 
          do ( (Rev : addcol(Rev, transpose(matrix(vects[i][j])))))), Rev); 
Lev : fullratsimp( invert(Rev) );

/** Compute expansion coefficients */
expandCoeff : Lev . transpose( alpha*matrix([n0, 0]) );
/** Express general solution in terms of expansion coefficients */
sol : sum( expandCoeff[i][1]*exp(-%i*vals[1][i]*t)*col(Rev,i), i, 1, 2 );

/** Now determine the final solution for number density evolution */
nSol : fullratsimp( realpart(sol[1][1])/(alpha*n0) );

/** Compute net response */
res21 : integrate(nSol, t, 0, inf);
solve([res21=resEx], mu1);

/** 3+1 closure */
A31 : matrix( [0, n0, 0], [0, 0, 1/n0], [%i*alpha*p0/n0, 3*p0, -alpha*%i] );

[vals, vects] : eigenvectors(A31);

/** Matrix of right and left eigenvectors */
Rev : (Rev : matrix([]), for i from 1 thru length (vals[1]) 
        do (for j from 1 thru vals[2][i] 
          do ( (Rev : addcol(Rev, transpose(matrix(vects[i][j])))))), Rev); 
Lev : fullratsimp( invert(Rev) );

/** Compute expansion coefficients */
expandCoeff : Lev . transpose( alpha*matrix([n0, 0, 0]) );
/** Express general solution in terms of expansion coefficients */
sol : sum( expandCoeff[i][1]*exp(-%i*vals[1][i]*t)*col(Rev,i), i, 1, 3 );

/** Now determine the final solution for number density evolution */
nSol : fullratsimp( realpart(sol[1][1])/(alpha*n0) );

/** Compute net response */
res21 : integrate(nSol, t, 0, inf);
solve([res21=resEx], mu1);