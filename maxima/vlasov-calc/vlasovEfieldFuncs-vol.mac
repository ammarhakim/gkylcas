/* Functions called to generate the kernels for the volume terms due
   to the (q/m)*E . del_v(f) term in the Vlasov equation. */
load("modal-basis");
load("out-scripts");
load(stringproc)$
fpprec : 24$

varsV : [vx, vy, vz]$
cvars : [X, Y, Z]$
vvars : [VX, VY, VZ]$

dvdx : [dv0dx0, dv1dx1, dv2dx2]$
wdx  : [w0dx0, w1dx1, w2dx2]$
dv1  : [dv10, dv11, dv12]$
Efld : [E0, E1, E2]$

slcn(lst, n) := makelist(lst[i], i, 1, n)$

cidx(cdim)      := makelist(i,i,0,cdim-1)$
vidx(cdim,vdim) := makelist(i,i,cdim,cdim+vdim-1)$

calcVlasovEfieldVolUpdater(fh, funcNm, cdim, vdim, basisFun, pOrder) := block([],

  kill(varsC, varsP, basisC, basisP),

  load(sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v")),

  printf(fh, "#include <VlasovModDecl.h> ~%"),
  bP   : basisP[pOrder],
  bC   : basisC[pOrder],
  numC : length(bC),

  printf(fh, "__host__ __device__ double ~aP~a(const double *w, const double *dxv, const double *E, const double *f, double *out) ~%{ ~%", funcNm, pOrder),
  printf(fh, "  // w[NDIM]:   Cell-center coordinates.~%"),
  printf(fh, "  // dxv[NDIM]: Cell spacing.~%"),
  printf(fh, "  // E/f:       Input electric-field (or force)/distribution function.~%"),
  printf(fh, "  // out:       Incremented output.~%"),
  printf(fh, "~%"),

  cid : cidx(cdim),
  vid : vidx(cdim,vdim),
  for dir : 1 thru cdim do (
    printf(fh, "  double dv1~a = 2/dxv[~a]; ~%", dir-1, vid[dir]),
    printf(fh, "  const double *E~a = &E[~a]; ~%", dir-1, numC*(dir-1))
  ),

  fl : doExpand1(f, bP),
  t : (t : 0, for dir : 1 thru cdim do (
     El : doExpand1(Efld[dir], bC),
     t : t + dv1[dir]*calcInnerProdList(varsP, El, diff(bP,varsV[dir]), fl)
     ),
  t),

  clst : makelist(eval_string(sconcat("dv1",i)),i,0,cdim-1),
  writeCIncrExprsCollect1(out,t,clst),
  printf(fh, "~%"),

  /* Return the value used in the CFL calculation. */
  pstr : "  return (std::abs(E0[0])*dv10",
  for d : 2 thru cdim do ( pstr : sconcat(pstr,"+std::abs(E",d-1,"[0])*dv1",d-1) ),
  pstr :Â sconcat(pstr,")*0.5;~%"),
  printf(fh, pstr),
  printf(fh, "} ~%")
);
