load("vlasov-calc/g0/vlasovPoissonFuncs-boundary-surf-C")$
load(stringproc)$
/* This script calls the functions which calculate the
   updates from the velocity surface term contributions in the
   Vlasov-Poisson kinetic equation at the edge of velocity space
   for zero-flux boundary conditions. 
   Supports just plain Vlasov-Poisson (only phi) and 
   Vlasov-Poisson with external fields (phi and A). */

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
minVdim_Ser : 1$    /* see begining of v loop below though. */
maxCdim_Ser : 3$
maxVdim_Ser : 3$

/* Maximal order basis. */
minPolyOrder_Max : 1$
maxPolyOrder_Max : 2$
minCdim_Max : 1$
minVdim_Max : 1$    /* see begining of v loop below though. */
maxCdim_Max : 0$
maxVdim_Max : 0$

/* Tensor product basis. */
/* Note that Serendipity, p = 1, is equivalent to Tensor */
/* Thus no need to calculate p = 1 Tensor basis */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
minVdim_Tensor : 1$    /* see begining of v loop below though. */
maxCdim_Tensor : 2$
maxVdim_Tensor : 3$

/* ...... END OF USER INPUTS........ */

bName        : ["ser","max","tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Max, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Max, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Max, minCdim_Tensor]$
minVdim      : [minVdim_Ser, minVdim_Max, minVdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Max, maxCdim_Tensor]$
maxVdim      : [maxVdim_Ser, maxVdim_Max, maxVdim_Tensor]$

/* Compute the surface contribution in velocity space from the acceleration term */
for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    for v : max(c,minVdim[bInd]) thru maxVdim[bInd] do (

      minPolyOrderB : minPolyOrder[bInd],
      maxPolyOrderB : maxPolyOrder[bInd],
      if (c+v>4 and maxPolyOrderB > 1) then maxPolyOrderB : 1,

      for polyOrder : minPolyOrderB thru maxPolyOrderB do (
        disp(printf(false,sconcat("Creating surface Vlasov",bName[bInd]," ~ax~av_p~a"),c,v,polyOrder)),
        /* Note, for Vlasov-Poisson where no external field, then we must have the corresponding configuration dimension
            since the force = grad(phi). I.e., in 1x2v, there is no vy update because there is no grad_y(phi) */
        for dir : 1 thru c do ( 
          if (dir = 1) then fname : sconcat("~/max-out/vlasov_poisson_boundary_surfvx_", c, "x", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
          if (dir = 2) then fname : sconcat("~/max-out/vlasov_poisson_boundary_surfvy_", c, "x", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
          if (dir = 3) then fname : sconcat("~/max-out/vlasov_poisson_boundary_surfvz_", c, "x", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
          fh : openw(fname),
          funcName : sconcat("vlasov_poisson_boundary_surf"),
          printf(fh, "#include <gkyl_vlasov_kernels.h> ~%"),
          /* Kernels without an external magnetic field. */
          hasB : false,
          calcVlasovUpwindPoissonBoundaryUpdateInDir(dir, fh, funcName, c, v, bName[bInd], polyOrder, hasB), 
          close(fh)
        ),
        for dir : 1 thru v do ( 
          if (dir = 1) then fname : sconcat("~/max-out/vlasov_poisson_extem_boundary_surfvx_", c, "x", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
          if (dir = 2) then fname : sconcat("~/max-out/vlasov_poisson_extem_boundary_surfvy_", c, "x", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
          if (dir = 3) then fname : sconcat("~/max-out/vlasov_poisson_extem_boundary_surfvz_", c, "x", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
          fh : openw(fname),
          funcName : sconcat("vlasov_poisson_extem_boundary_surf"),
          printf(fh, "#include <gkyl_vlasov_kernels.h> ~%"),
          /* Kernels without an external magnetic field. */
          hasB : true,
          calcVlasovUpwindPoissonBoundaryUpdateInDir(dir, fh, funcName, c, v, bName[bInd], polyOrder, hasB), 
          close(fh)
        )
      )
    )
  )
);
