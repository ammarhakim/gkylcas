/* This script generates the kernels for the surface term of the E + v x B 
   advection in velocity space for the Vlasov equation (full EM) */

load("modal-basis");
load("out-scripts");
load(stringproc)$
load("scifac")$
load("nodalOperations/nodalFunctions")$
fpprec : 24$

varsV : [vx, vy, vz]$
cvars : [x, y, z]$
vvars : [vx, vy, vz]$

dvdx  : [dv0dx0, dv1dx1, dv2dx2]$
wdx   : [w0dx0, w1dx1, w2dx2]$
dx11 : [dx10, dx11, dx12]$
dv11 : [dv10, dv11, dv12]$

Efld  : [E0, E1, E2]$
Bfld  : [B0, B1, B2]$

/* Helper function for switching to eta = (v - w)/(dv/2) coordinates */
vTransSubs : [vvx=vx*dv1/2+wv1, vvy=vy*dv2/2+wv2, vvz=vz*dv3/2+wv3]$

ax(vx, vy, vz, bc) := doExpand1(Efld[1],bc) + vy*doExpand1(Bfld[3],bc) - vz*doExpand1(Bfld[2],bc)$
ay(vx, vy, vz, bc) := doExpand1(Efld[2],bc) + vz*doExpand1(Bfld[1],bc) - vx*doExpand1(Bfld[3],bc)$
az(vx, vy, vz, bc) := doExpand1(Efld[3],bc) + vx*doExpand1(Bfld[2],bc) - vy*doExpand1(Bfld[1],bc)$

vzero(vdim) := if vdim = 1 then [vvy=0, vvz=0] elseif vdim = 2 then [vvz=0] else [] $

calcAccel(vdir, vdim, bc) :=
  if vdir = 1
    then subst(vTransSubs, subst(vzero(vdim), ax(vvx,vvy,vvz,bc)))
  elseif vdir = 2
    then subst(vTransSubs, subst(vzero(vdim), ay(vvx,vvy,vvz,bc)))
  else
    subst(vTransSubs, subst(vzero(vdim), az(vvx,vvy,vvz,bc)))$

slcn(lst, n) := makelist(lst[i], i, 1, n)$

cidx(cdim)      := makelist(i,i,0,cdim-1)$
vidx(cdim,vdim) := makelist(i,i,cdim,cdim+vdim-1)$

/* Helper functions for expanding in basis functions a quantity we know should be sparse  */
/* For example, alpha, the phase space flow only depends on a few phase space coordinates */
doMakeExprLst(vals, S)  := makelist(if vals[i] # 0 then S[i-1] else 0, i, 1, length(vals))$
doExpandLst(lst, basis) := sum(lst[i]*basis[i], i, 1, length(basis))$

calcVlasovLorentzBoundaryUpdateInDir(dir, fh, funcNm, cdim, vdim, basisFun, p) := block([],
  kill(varsC, varsP, basisC, basisP),
  modNm : sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v"),
  load(modNm),

  bP    : basisP[p],
  bC    : basisC[p],
  varsC : slcn(varsP, cdim),
  numC  : length(bC),

  /* Specify a point to evaluate alpha at for use global Lax fluxes. */
  cflPt : makelist(varsP[d]=0, d, 1, length(varsP)),

  printf(fh, "GKYL_CU_DH double ~a~a_~ax~av_~a_p~a(const double *w, const double *dxv, const double amax, const double *qmem, const int edge, const double *fEdge, const double *fSkin, double* restrict out) ~%{ ~%", funcNm, vvars[dir], cdim, vdim, basisFun, p),
  printf(fh, "  // w:           Cell-center coordinates.~%"),
  printf(fh, "  // dxv[NDIM]:   Cell spacing.~%"),
  printf(fh, "  // amax:        amax in global lax flux.~%"),
  printf(fh, "  // qmem:        q/m*EM fields.~%"),
  printf(fh, "  // edge:        Determines if the update is for the left edge (-1) or right edge (+1).~%"),
  printf(fh, "  // fSkin/fEdge: Input Distribution function in skin cell/last edge cell ~%"),
  printf(fh, "  // out:         Output distribution function in skin cell ~%"),
  printf(fh, "  // returns abs(amid) for use in determining amax in cfl and global lax flux ~%"),

  cid : cidx(cdim),
  vid : vidx(cdim,vdim),

  printf(fh, "  const double dv1~a = 2/dxv[~a]; ~%", dir-1, vid[dir]),
  for d : 1 thru vdim do (
    printf(fh, "  const double dv~a = dxv[~a], wv~a = w[~a]; ~%", d, vid[d], d, vid[d])
  ),

  printf(fh, "  const double *E~a = &qmem[~a]; ~%", dir-1, numC*(dir-1)),
  /* If vdim = 1, then no magnetic field. */
  if vdim > 1 then (
    if vdim = 2 then (
      /* In 2 velocity dimensions, only Bz. */
      printf(fh, "  const double *B~a = &qmem[~a]; ~%", 2, numC*2+3*numC)
    ),
    if vdim = 3 then (
      for d : 1 thru 3 do (
        printf(fh, "  const double *B~a = &qmem[~a]; ~%", d-1, numC*(d-1)+3*numC)
      )            
    )
  ),
  printf(fh, "~%"),

  /* Surface contribution is defined as integral(phi^- Ghat) over the surface. */

  /* vv = variable in direction of surface update. */
  vv : varsV[dir],

  /* Surface variables to integrate over. */
  surfVars : delete(vv,varsP),

  /* Generate surface basis. this produces the ndim-1 orthogonal basis with no vv dependence. */
  bSurf : sqrt(2)*delete(0,fullratsimp(innerProd(varsP,1,bP,subst([vv^2=var2,var2=1/3,vv=0],bP)))*bP),

  /* Create expansions of f_left, f_center, and f_right on volume basis. */
  fSkin_e : doExpand1(fSkin, bP),
  fEdge_e : doExpand1(fEdge, bP),

  /* Ghat involves both the average and jump of the distribution function
     across the surface boundary, favg, and fjump. 
     Note, in cell-based update there is a Ghat on the right edge (f_c evaluated at 1)
     and a Ghat on the left edge (f_c evaluated at -1) */
  printf(fh, "  double Ghat[~a]; ~%", length(bSurf)),
  printf(fh, "  double favg[~a]; ~%", length(bSurf)),

  /* alpha is the phase space flux at the surface. */
  /* NOTE: Due to the form of the Vlasov-Maxwell system of equations, this phase space
     flux is the same evaluated at the left edge and right edge in a given direction
     (i.e., the flux does not explicitly depend on the coordinate in the surface direction)
     For example, vx flux is q/m (Ex + vy*Bz - vz*By) */
  printf(fh, "  double alpha[~a]; ~%", length(bSurf)),
  printf(fh, "~%"),

  /* alpha_v = q/m*(E + v x B) */
  acc_e : calcAccel(dir, vdim, bC),
  /* Project alpha_v onto surface basis, and print resulting coefficients. */
  alphaV_c : calcInnerProdList(surfVars, 1, bSurf, subst(vv=1, acc_e)),
  writeCExprsCollect1lhsc(alpha, radcan(alphaV_c)),
  printf(fh, "~%"),
  flush_output(fh),
  /* Zero out components of alpha which are empty. */
  alphaNoZero : doMakeExprLst(alphaV_c, alpha),
  alpha_e     : doExpandLst(alphaNoZero, bSurf),

  /* Evaluate acceleration at cflPt (in this case the midpoint). */
  amid : float(expand(fullratsimp(subst(cflPt,alpha_e)))),
  printf(fh, "  double amid = ~a; ~%", amid),
  printf(fh, "~%"),
  flush_output(fh),

  /* if edge == -1, we are doing the left edge boundary and the skin cell needs to be evauluated at +1 */
  printf(fh, "  if (edge == -1) { ~%~%"),

  /* Print C exprs for average of distribution across surface boundary, (LEFT EDGE BOUNDARY)
     favg = fEdge_e(vv=-1) + fSkin_e(vv=1), projected onto surface basis. */
  favg_c : gcfac(fullratsimp(innerProd(surfVars, 1, bSurf, subst(vv=-1, fEdge_e)+subst(vv=1, fSkin_e)))),
  writeCExprsCollect1lhsc(favg, radcan(favg_c)),
  printf(fh, "~%"),
  favgNoZero : doMakeExprLst(favg_c, favg),
  favg_e : doExpandLst(favgNoZero, bSurf),
  flush_output(fh),

  /* Project fjump = fEdge_e(sv=-1) - fSkin_e(sv=1) onto surface basis. (LEFT EDGE BOUNDARY)
     Don't need to print it out because it is just part of Ghat (see note below),
     unlike favg which appears in Ghat in an inner product with alpha. */
  fjump_c : gcfac(fullratsimp(innerProd(surfVars, 1, bSurf, subst(vv=-1, fEdge_e)-subst(vv=1, fSkin_e)))),

  /* Evaluate surface projection of Ghat = (alpha*favg - amax*fjump)/2. */
  alphafavg_c : calcInnerProdList(surfVars, favg_e, bSurf, alpha_e),
  /* Here we see why we didn't need to print out fjump_c. it appears directly in Ghat_c. */
  Ghat_c : 0.5*alphafavg_c - 0.5*amax*fjump_c,
  writeCExprsCollect1lhsc(Ghat, radcan(Ghat_c)),
  printf(fh, "~%"),
  flush_output(fh),
  /* Zero out components of Ghat which are empty. */
  GhatNoZero : doMakeExprLst(Ghat_c, Ghat),
  Ghat_e     : doExpandLst(GhatNoZero, bSurf),

  incr : calcInnerProdList(surfVars, -1, subst(vv=1.0, bP), Ghat_e),
  writeCIncrExprsCollect1lhsc(out, dv11[dir]*incr),  

  /* otherwise edge == +1, we are doing the right edge boundary and the skin cell needs to be evauluated at -1 */
  printf(fh, "~%  } else { ~%~%"),

  /* Print C exprs for average of distribution across surface boundary, (RIGHT EDGE BOUNDARY)
     favg = fSkin_e(vv=-1) + fEdge_e(vv=1), projected onto surface basis. */
  favg_c : gcfac(fullratsimp(innerProd(surfVars, 1, bSurf, subst(vv=-1, fSkin_e)+subst(vv=1, fEdge_e)))),
  writeCExprsCollect1lhsc(favg, radcan(favg_c)),
  printf(fh, "~%"),
  favgNoZero : doMakeExprLst(favg_c, favg),
  favg_e       : doExpandLst(favgNoZero, bSurf),
  flush_output(fh),

  /* Project fjump = fSkin_e(sv=-1) - fEdge_e(sv=1) onto surface basis. (RIGHT EDGE BOUNDARY)
     Don't need to print it out because it is just part of Ghat (see note below),
     unlike favg which appears in Ghat in an inner product with alpha. */
  fjump_c : gcfac(fullratsimp(innerProd(surfVars, 1, bSurf, subst(vv=-1, fSkin_e)-subst(vv=1, fEdge_e)))),

  /* Evaluate surface projection of Ghat = (alpha*favg - amax*fjump)/2. */
  alphafavg_c : calcInnerProdList(surfVars, favg_e, bSurf, alpha_e),
  /* Here we see why we didn't need to print out fjump_c. it appears directly in Ghat_c. */
  Ghat_c : 0.5*alphafavg_c - 0.5*amax*fjump_c,
  writeCExprsCollect1lhsc(Ghat, radcan(Ghat_c)),
  printf(fh, "~%"),
  flush_output(fh),
  /* Zero out components of Ghat which are empty. */
  GhatNoZero : doMakeExprLst(Ghat_c, Ghat),
  Ghat_e     : doExpandLst(GhatNoZero, bSurf),

  incr : calcInnerProdList(surfVars, 1, subst(vv=-1.0, bP), Ghat_e),
  writeCIncrExprsCollect1lhsc(out, dv11[dir]*incr),
  printf(fh, "~%  } ~%"),

  /* Return a local estimate of amax. */
  printf(fh, "  return fabs(amid); ~%"),
  printf(fh, "} ~%")
);

calcVlasovUpwindLorentzBoundaryUpdateInDir(dir, fh, funcNm, cdim, vdim, basisFun, p) := block([],
  kill(varsC, varsP, basisC, basisP),
  modNm : sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v"),
  load(modNm),

  bP    : basisP[p],
  bC    : basisC[p],
  varsC : slcn(varsP, cdim),
  numC  : length(bC),
  numP  : length(bP),
  pDim  : length(varsP),

  printf(fh, "GKYL_CU_DH void ~a~a_~ax~av_~a_p~a(const double *w, const double *dxv, const double *qmem, const int edge, const double *fEdge, const double *fSkin, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, vvars[dir], cdim, vdim, basisFun, p),
  printf(fh, "  // w:           Cell-center coordinates.~%"),
  printf(fh, "  // dxv[NDIM]:   Cell spacing.~%"),
  printf(fh, "  // qmem:        q/m*EM fields.~%"),
  printf(fh, "  // edge:        Determines if the update is for the left edge (-1) or right edge (+1).~%"),
  printf(fh, "  // fSkin/fEdge: Input Distribution function in skin cell/last edge cell ~%"),
  printf(fh, "  // out:         Output distribution function in skin cell ~%"),

  cid : cidx(cdim),
  vid : vidx(cdim,vdim),

  printf(fh, "  const double dv1~a = 2/dxv[~a]; ~%", dir-1, vid[dir]),
  for d : 1 thru vdim do (
    printf(fh, "  const double dv~a = dxv[~a], wv~a = w[~a]; ~%", d, vid[d], d, vid[d])
  ),

  printf(fh, "  const double *E~a = &qmem[~a]; ~%", dir-1, numC*(dir-1)),
  /* If vdim = 1, then no magnetic field. */
  if vdim > 1 then (
    if vdim = 2 then (
      /* In 2 velocity dimensions, only Bz. */
      printf(fh, "  const double *B~a = &qmem[~a]; ~%", 2, numC*2+3*numC)
    ),
    if vdim = 3 then (
      for d : 1 thru 3 do (
        printf(fh, "  const double *B~a = &qmem[~a]; ~%", d-1, numC*(d-1)+3*numC)
      )            
    )
  ),
  printf(fh, "~%"),

  /* Surface contribution is defined as integral(phi^- Ghat) over the surface. */

  /* vv = variable in direction of surface update. */
  vv : varsV[dir],

  /* Surface variables to integrate over. */
  surfVars : delete(vv,varsP),

  /* Generate surface basis. this produces the ndim-1 orthogonal basis with no vv dependence. */
  bSurf : sqrt(2)*delete(0,fullratsimp(innerProd(varsP,1,bP,subst([vv^2=var2,var2=1/3,vv=0],bP)))*bP),

  /* Create expansions of f_skin, f_edge on volume basis. */
  fSkin_e : doExpand1(fSkin, bP),
  fEdge_e : doExpand1(fEdge, bP),

  /* Ghat involves both the average and jump of the distribution function
     across the surface boundary, favg, and fjump. 
     Note, in cell-based update there is a Ghat on the right edge (f_c evaluated at 1)
     and a Ghat on the left edge (f_c evaluated at -1) */
  printf(fh, "  double Ghat[~a]; ~%", length(bSurf)),

  /* alpha is the phase space flux at the surface. */
  /* NOTE: Due to the form of the Vlasov-Maxwell system of equations, this phase space
     flux is the same evaluated at the left edge and right edge in a given direction
     (i.e., the flux does not explicitly depend on the coordinate in the surface direction)
     For example, vx flux is q/m (Ex + vy*Bz - vz*By) */
  printf(fh, "  double alpha[~a]; ~%", length(bSurf)),
  printf(fh, "~%"),

  /* alpha_v = q/m*(E + v x B) */
  acc_e : calcAccel(dir, vdim, bC),
  /* Project alpha_v onto surface basis, and print resulting coefficients. */
  alphaV_c : calcInnerProdList(surfVars, 1, bSurf, subst(vv=1, acc_e)),
  writeCExprsCollect1lhsc(alpha, radcan(alphaV_c)),
  printf(fh, "~%"),
  flush_output(fh),
  /* Zero out components of alpha which are empty. */
  alphaNoZero : doMakeExprLst(alphaV_c, alpha),
  alpha_e     : doExpandLst(alphaNoZero, bSurf),

  /* Scale nodes of the nodal basis by corresponding factors to obtain the Gauss-Legendre quadrature points */
  surfNodes : getNodes(basisFun, pDim-1, polyOrder),
  if polyOrder=1 then (surfNodes:surfNodes*(1/sqrt(3))) elseif polyOrder=2 then (surfNodes:surfNodes*sqrt(3/5)),
  if cdim=1 and vdim=2 and polyOrder=2 and basisFun="Ser" then (
    /* We found that the 1x2v p=2 Ser LBO does not conserve energy if we used
       sqrt(3/5) nodes. But it does with sqrt(1/3) nodes, or some an arrangement
       where corner cells are sqrt(3/5) nodes, and the other four nodes are sqrt(1/3)
       nodes. We use a similar trick here for the collisionless terms. */
    p1Nodes : args(getNodes(basisFun, pDim-1, 1)),
    p2Nodes : args(getNodes(basisFun, pDim-1, 2)),
    extraNodeInd : [],  p1NodeInd : [],
    for i : 1 thru length(p2Nodes) do (
      idx : sublist_indices(p1Nodes,lambda([x], x=p2Nodes[i])),
      if length(idx)=0 then (
        extraNodeInd : endcons(i,extraNodeInd)
      ) else (
        p1NodeInd : endcons(i,p1NodeInd)
      )
    ),
    surfNodes : copylist(p2Nodes),
    for i : 1 thru length(p1NodeInd) do (
      surfNodes[p1NodeInd[i]] : p2Nodes[p1NodeInd[i]]*sqrt(3/5)
    ),
    for i : 1 thru length(extraNodeInd) do (
      surfNodes[extraNodeInd[i]] : p2Nodes[extraNodeInd[i]]*sqrt(1/3)
    )
  ),
  numNodes : length(surfNodes),

  /* Evaluate f_skin at surface quadrature nodes. */
  /* Depending on which edge we are on, we either need at f_skin at +1 or -1 */
  fOrdSkinL_n : gcfac(float(evAtNodes(subst(vv=-1,fSkin_e),surfNodes,surfVars))),
  fOrdSkinR_n : gcfac(float(evAtNodes(subst(vv=+1,fSkin_e),surfNodes,surfVars))),

  /* Evaluate f_edge at surface quadrature nodes. */
  /* Depending on which edge we are on, we either need at f_edge at +1 or -1 */
  fOrdEdgeL_n : gcfac(float(evAtNodes(subst(vv=-1,fEdge_e),surfNodes,surfVars))),
  fOrdEdgeR_n : gcfac(float(evAtNodes(subst(vv=+1,fEdge_e),surfNodes,surfVars))),

  /* Evaluate alpha at ordinates.
     Note: alphaSurf_e is already a surface expansion. 
     In addition, it is continuous and does not vary with respect to the surface variable.
     Thus, there is no need for alpha_l and alpha_r. We only need alpha at the ordinates. */
  alphaOrd_n : gcfac(float(evAtNodes(alpha_e,surfNodes,surfVars))),

  /* Determine upwinding at each surface quadrature node. */
  /* Note, we are moving the 1/2 factor to later in the computation to avoid 
     Maxima defaulting to heavily nested parantheses */
  /* We have two different fUpwind that are possible; 
     either the far left edge and we need fSkin at +1 and fEdge at -1
     or the far right edge and we need fSkin at -1 and fEdge at +1 */
  /* NOTE: WE ARE USING L TO DENOTE THE LEFT EDGE UPDATE AND R TO DENOTE RIGHT EDGE UPDATE OF GLOBAL DOMAIN */
  fUpOrdL_n : gcfac((fOrdSkinR_n+fOrdEdgeL_n)+copysignf(1.0,alphaQuad)*(fOrdSkinR_n-fOrdEdgeL_n)),
  fUpOrdR_n : gcfac((fOrdEdgeR_n+fOrdSkinL_n)+copysignf(1.0,alphaQuad)*(fOrdEdgeR_n-fOrdSkinL_n)),

  printf(fh, "  double fUpwindQuad[~a];~%", numNodes),
  printf(fh, "  double fUpwind[~a];~%", numNodes),
  printf(fh, "~%"),
  /* if edge == -1, we are doing the left edge boundary and the skin cell needs to be evauluated at +1 */
  printf(fh, "  if (edge == -1) { ~%~%"),

  /* Write out fUpwindQuad for the far left edge */
  for i : 1 thru length(alphaOrd_n) do (
    /* This subst eliminates the need for another variable, and removes
        the common factor (for p=1) which is not needed to determine
        sign (not working for p>1). */
    if polyOrder=1 then (
      rcoFac : 1./(content(alphaOrd_n[1],alpha[0])[1]),
      printf(fh, "  fUpwindQuad[~a] = ~a; ~%", i-1, subst(alphaQuad=fullratsimp(alphaOrd_n[i]*rcoFac),fUpOrdL_n[i]))
    ) else (
      printf(fh, "  fUpwindQuad[~a] = ~a; ~%", i-1, subst(alphaQuad=alphaOrd_n[i],fUpOrdL_n[i]))
    )
  ),
  printf(fh, "~%"),
  /* Get modal surface expansion from nodal quadrature points. */
  nodToMod : calcNodToModWithNodes(basisFun, pDim-1, polyOrder, surfNodes),
  fUp_c : gcfac(fullratsimp(nodToMod . makelist(fUpwindQuad[i-1],i,1,numNodes))),
  fUp_c : makelist(fUp_c[i][1],i,1,numNodes),
  /* Write coefficients of modal surface expansion fupwind. */
  /* include 1/2 factor here for the upwind value */
  writeCExprsNoExpand1(fUpwind, 0.5*fUp_c),
  printf(fh, "~%"),
  flush_output(fh),
  fHatSurf_e : doExpand1(fUpwind,bSurf),

  /* Print C exprs for Ghat across surface boundary */
  Ghat_c : gcfac(fullratsimp(innerProd(surfVars, alpha_e, bSurf, fHatSurf_e))),
  writeCExprsNoExpand1(Ghat, radcan(Ghat_c)),
  printf(fh, "~%"),
  flush_output(fh),
  /* Zero out components of Ghat which are empty. */
  GhatNoZero : doMakeExprLst(Ghat_c, Ghat),
  Ghat_e     : doExpandLst(GhatNoZero, bSurf),

  incr : calcInnerProdList(surfVars, -1, subst(vv=1.0, bP), Ghat_e),
  writeCIncrExprsCollect1lhsc(out, dv11[dir]*incr),  

  /* otherwise edge == +1, we are doing the right edge boundary and the skin cell needs to be evauluated at -1 */
  printf(fh, "~%  } else { ~%~%"),

  /* Write out fUpwindQuad for the far right edge */
  for i : 1 thru length(alphaOrd_n) do (
    /* This subst eliminates the need for another variable, and removes
        the common factor (for p=1) which is not needed to determine
        sign (not working for p>1). */
    if polyOrder=1 then (
      rcoFac : 1./(content(alphaOrd_n[1],alpha[0])[1]),
      printf(fh, "  fUpwindQuad[~a] = ~a; ~%", i-1, subst(alphaQuad=fullratsimp(alphaOrd_n[i]*rcoFac),fUpOrdR_n[i]))
    ) else (
      printf(fh, "  fUpwindQuad[~a] = ~a; ~%", i-1, subst(alphaQuad=alphaOrd_n[i],fUpOrdR_n[i]))
    )
  ),
  printf(fh, "~%"),
  /* Get modal surface expansion from nodal quadrature points. */
  nodToMod : calcNodToModWithNodes(basisFun, pDim-1, polyOrder, surfNodes),
  fUp_c : gcfac(fullratsimp(nodToMod . makelist(fUpwindQuad[i-1],i,1,numNodes))),
  fUp_c : makelist(fUp_c[i][1],i,1,numNodes),
  /* Write coefficients of modal surface expansion fupwind. */
  /* include 1/2 factor here for the upwind value */
  writeCExprsNoExpand1(fUpwind, 0.5*fUp_c),
  printf(fh, "~%"),
  flush_output(fh),
  fHatSurf_e : doExpand1(fUpwind,bSurf),

  /* Print C exprs for Ghat across surface boundary */
  Ghat_c : gcfac(fullratsimp(innerProd(surfVars, alpha_e, bSurf, fHatSurf_e))),
  writeCExprsNoExpand1(Ghat, radcan(Ghat_c)),
  printf(fh, "~%"),
  flush_output(fh),
  /* Zero out components of Ghat which are empty. */
  GhatNoZero : doMakeExprLst(Ghat_c, Ghat),
  Ghat_e     : doExpandLst(GhatNoZero, bSurf),

  incr : calcInnerProdList(surfVars, 1, subst(vv=-1.0, bP), Ghat_e),
  writeCIncrExprsCollect1lhsc(out, dv11[dir]*incr),
  printf(fh, "~%  } ~%"),

  printf(fh, "} ~%")
);