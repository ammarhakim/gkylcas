/* This script generates the kernels for integrating the fluid variables for diagnostic purposes. 
   Integrates rho, rho*ux, rho*uy, rho*uz, rho*ux^2, rho*uy^2, rho*uz^2 p_parallel, p_perp,  */

load("modal-basis")$
load("out-scripts")$
fpprec : 24$

calc_pkpm_vars_integrated(fh, funcNm, cdim, polyOrder) := block(
  [varsC, bC, bC_2p, NC, NC_2p, 
   rho_e, p_par_e, p_perp_e, 
   ux_e, uy_e, uz_e, 
   rhoux_c, rhouy_c, rhouz_c, rhoux_e, rhouy_e, rhouz_e, 
   int_rho_c, int_rhoux_c, int_rhouy_c, int_rhouz_c, 
   int_rhouxSq_c, int_rhouySq_c, int_rhouzSq_c, int_p_par_c, int_p_perp_c],

  kill(varsC, bC),
  kill(varsC, bC_2p),

  /* Load basis of dimensionality requested. Loads a basis of order p and p/2*/
  [varsC,bC] : loadBasis("Tensor", cdim, 1),
  [varsC,bC_2p] : loadBasis("Tensor", cdim, polyOrder),

  /* Number of basis monomials. */
  NC : length(bC),
  NC_2p : length(bC_2p),

  printf(fh, "#include <gkyl_euler_pkpm_kernels.h> ~%"),
  printf(fh, "GKYL_CU_DH void ~a(const double *vlasov_pkpm_moms, 
  const double* pkpm_u, double* GKYL_RESTRICT int_pkpm_vars) ~%{ ~%", funcNm),
  printf(fh, "  // vlasov_pkpm_moms: [rho, p_parallel, p_perp], Moments computed from kinetic equation in pkpm model.~%"),
  printf(fh, "  // pkpm_u:           [ux, uy, uz], Fluid input state vector.~%"),
  printf(fh, "  // int_pkpm_vars:    Output integrated variables.~%"),
  printf(fh, "~%"),

  printf(fh, "  const double *rho = &vlasov_pkpm_moms[~a]; ~%", 0*NC_2p),
  printf(fh, "  const double *p_parallel = &vlasov_pkpm_moms[~a]; ~%", 1*NC_2p),
  printf(fh, "  const double *p_perp = &vlasov_pkpm_moms[~a]; ~%", 2*NC_2p),
  printf(fh, "~%"),

  printf(fh, "  const double *ux = &pkpm_u[~a]; ~%", 0*NC),
  printf(fh, "  const double *uy = &pkpm_u[~a]; ~%", 1*NC),
  printf(fh, "  const double *uz = &pkpm_u[~a]; ~%", 2*NC),
  printf(fh, "~%"),

  /* Expansion of mass, parallel pressure, perpendicular pressure, and flow velocity */
  rho_e : doExpand1(rho, bC_2p),
  p_par_e : doExpand1(p_parallel, bC_2p),
  p_perp_e : doExpand1(p_perp, bC_2p),
  ux_e : doExpand1(ux, bC),
  uy_e : doExpand1(uy, bC),
  uz_e : doExpand1(uz, bC),

  /* Project rho*u onto a p/2 basis for integrating rhou and rhou^2 
     Only need a p/2 basis because u is on a p/2 basis and higher order
     contributions do not affect the cell average. */
  printf(fh, "  double rhoux[~a] = {0.0}; ~%", NC),
  printf(fh, "  double rhouy[~a] = {0.0}; ~%", NC),
  printf(fh, "  double rhouz[~a] = {0.0}; ~%", NC),

  rhoux_c : calcInnerProdList(varsC, 1, bC, rho_e*ux_e), 
  rhouy_c : calcInnerProdList(varsC, 1, bC, rho_e*uy_e), 
  rhouz_c : calcInnerProdList(varsC, 1, bC, rho_e*uz_e),

  writeCExprs1(rhoux, rhoux_c),  
  writeCExprs1(rhouy, rhouy_c),  
  writeCExprs1(rhouz, rhouz_c),
  printf(fh, "~%"),

  rhoux_e : doExpand1(rhoux, bC),
  rhouy_e : doExpand1(rhouy, bC),
  rhouz_e : doExpand1(rhouz, bC),    

  int_rho_c : calcInnerProdList(varsC, 1, [1], rho_e), 
  int_rhoux_c : calcInnerProdList(varsC, 1, [1], rhoux_e), 
  int_rhouy_c : calcInnerProdList(varsC, 1, [1], rhouy_e), 
  int_rhouz_c : calcInnerProdList(varsC, 1, [1], rhouz_e), 
  int_rhouxSq_c : calcInnerProdList(varsC, 1, [1], rhoux_e*ux_e), 
  int_rhouySq_c : calcInnerProdList(varsC, 1, [1], rhouy_e*uy_e), 
  int_rhouzSq_c : calcInnerProdList(varsC, 1, [1], rhouz_e*uz_e), 
  int_p_par_c : calcInnerProdList(varsC, 1, [1], p_par_e), 
  int_p_perp_c : calcInnerProdList(varsC, 1, [1], p_perp_e), 

  printf(fh, "  // Order of integrated variables is (rho, rhoux, rhouy, rhouz, rho ux^2, rho uy^2, rho uz^2, p_parallel, p_perp) ~%"),
  printf(fh, "  int_pkpm_vars[0] += ~a; ~%", float(expand(int_rho_c[1]))),
  printf(fh, "  int_pkpm_vars[1] += ~a; ~%", float(expand(int_rhoux_c[1]))),
  printf(fh, "  int_pkpm_vars[2] += ~a; ~%", float(expand(int_rhouy_c[1]))),
  printf(fh, "  int_pkpm_vars[3] += ~a; ~%", float(expand(int_rhouz_c[1]))),
  printf(fh, "  int_pkpm_vars[4] += ~a; ~%", float(expand(int_rhouxSq_c[1]))),
  printf(fh, "  int_pkpm_vars[5] += ~a; ~%", float(expand(int_rhouySq_c[1]))),
  printf(fh, "  int_pkpm_vars[6] += ~a; ~%", float(expand(int_rhouzSq_c[1]))),
  printf(fh, "  int_pkpm_vars[7] += ~a; ~%", float(expand(int_p_par_c[1]))),
  printf(fh, "  int_pkpm_vars[8] += ~a; ~%", float(expand(int_p_perp_c[1]))),

  printf(fh, "} ~%")
)$
