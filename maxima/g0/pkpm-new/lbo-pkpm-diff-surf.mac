/* This script generates the kernels for the surface term
   diffusion contribution from Lenard Bernstein operator. */

load("modal-basis")$
load("out-scripts");
load("recovery")$
load(stringproc)$
fpprec : 24$

makelistNoZeros(vals, name) := makelist(if vals[i] # 0 then name[i-1] else 0, i, 1, length(vals))$

calcVlasovPKPMLBODiffSurfUpdater(fh, funcNm, cdim, vdim, polyOrder) := block(
  [varsC,bC,varsP,bP,NP,NC,pDim,h_e,nuVtSqSum_e,temp_diff_c,diff_incr_c],

  /* Load basis of dimensionality requested. */
  [varsC,bC,varsP,bP] : loadPhaseBasis("Tensor", cdim, vdim, polyOrder),

  /* Number of basis monomials. */
  NP : length(bP),  NC : length(bC),
  
  pDim : cdim+vdim,

  /* Construct the recovery polynomial */
  h_F_0_e : calcRecov1CellGen("tensor", vx, varsP, polyOrder, 1, dg(makelist(F_0l[i-1],i,1,NP)), dg(makelist(F_0c[i-1],i,1,NP)), dg(makelist(F_0r[i-1],i,1,NP))),
  h_G_1_e : calcRecov1CellGen("tensor", vx, varsP, polyOrder, 1, dg(makelist(G_1l[i-1],i,1,NP)), dg(makelist(G_1c[i-1],i,1,NP)), dg(makelist(G_1r[i-1],i,1,NP))),
  /*............. RECOVERY DONE ..............................*/

  printf(fh, "#include <gkyl_lbo_pkpm_kernels.h> ~%"),    
  printf(fh, "GKYL_CU_DH double ~a(const double *w, const double *dxv, const double *nuSum, const double *nuPrimMomsSum, const double *fl, const double *fc, const double *fr, double* GKYL_RESTRICT out) ~%{ ~%", funcNm),
  printf(fh, "  // w[NDIM]:       Cell-center coordinates. ~%"),
  printf(fh, "  // dxv[NDIM]:     Cell spacing. ~%"),
  printf(fh, "  // nuSum:         Collisionalities added (self and cross species collisionalities). ~%"),
  printf(fh, "  // nuPrimMomsSum: Sum of bulk velocities and thermal speeds (squared) times their respective collisionalities. ~%"),
  printf(fh, "  // fl/fc/fr:      Input Distribution function [F_0, T_perp G = T_perp (F_1 - F_0)] in left/center/right cells ~%"),
  printf(fh, "  // out:           Incremented distribution functions in center cell. ~%"),

  printf(fh, "  double rdvSq4 = 4.0/(dxv[~a]*dxv[~a]); ~%", cdim, cdim),
  /* Create a pointer to nuVtSqSum. */
  printf(fh, "  const double *nuVtSqSum = &nuPrimMomsSum[~a];~%", vdim*NC),
  printf(fh, "~%"),
  
  /* Access F_0 and T_perp G, first two Laguerre moments */
  printf(fh, "  const double *F_0l = &fl[~a]; ~%", 0),
  printf(fh, "  const double *G_1l = &fl[~a]; ~%", NP),  
  printf(fh, "  const double *F_0c = &fc[~a]; ~%", 0),
  printf(fh, "  const double *G_1c = &fc[~a]; ~%", NP), 
  printf(fh, "  const double *F_0r = &fr[~a]; ~%", 0),
  printf(fh, "  const double *G_1r = &fr[~a]; ~%", NP), 

  /* Access the components of out for the first two Laguerre moments */
  printf(fh, "  double *out_F_0 = &out[~a]; ~%", 0),
  printf(fh, "  double *out_G_1 = &out[~a]; ~%", NP),  

  printf(fh, "  double incr_F_0[~a] = {0.0}; ~%", NP),
  printf(fh, "  double incr_G_1[~a] = {0.0}; ~%", NP),
  printf(fh, "~%"),
    
  /* Write out the second derivative of the recovered distribution. */
  nuVtSqSum_e : doExpand1(nuVtSqSum,bC),

  /* Write out the second derivative of the recovered distribution. 
     Note: this simplification only works for tensor bases where 
     velocity space and configuration space are separable. */
  printf(fh, "  double F_0_xx[~a] = {0.0}; ~%", NP),
  printf(fh, "  double G_1_xx[~a] = {0.0}; ~%", NP),
  F_0_xx_c : calcInnerProdList(varsP, 1, bP, diff(h_F_0_e, vx, 2)),
  G_1_xx_c : calcInnerProdList(varsP, 1, bP, diff(h_G_1_e, vx, 2)),
  writeCExprs1(F_0_xx, F_0_xx_c),
  writeCExprs1(G_1_xx, G_1_xx_c),
  printf(fh, "~%"),

  F_0_xx_e : doExpand(makelistNoZeros(F_0_xx_c, F_0_xx),bP),
  G_1_xx_e : doExpand(makelistNoZeros(G_1_xx_c, G_1_xx),bP),

  incr_F_0_c : calcInnerProdList(varsP, nuVtSqSum_e, bP, F_0_xx_e),
  incr_G_1_c : calcInnerProdList(varsP, nuVtSqSum_e, bP, G_1_xx_e),
  writeCExprs1(incr_F_0, incr_F_0_c),
  writeCExprs1(incr_G_1, incr_G_1_c),
  printf(fh, "~%"),
    
  writeCIncrExprs1(out_F_0, rdvSq4*makelistNoZeros(incr_F_0_c, incr_F_0)),
  writeCIncrExprs1(out_G_1, rdvSq4*makelistNoZeros(incr_G_1_c, incr_G_1)),
  printf(fh, "~%"),

  printf(fh, "  return 0.;~%"),  /* Return CFL frequency from volume kernel. */
  printf(fh, "~%"),

  printf(fh, "} ~%")
);


