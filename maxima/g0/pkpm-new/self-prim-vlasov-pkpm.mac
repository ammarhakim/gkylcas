/* Generate kernels for the updater that sets the matrices to compute the primitive
   primitive moments vt^2 given the moments and the distribution function.
   Note that there is also a "u" correction even though
   PKPM model is in local flow frame to insure collision operator
   exactly satisfies integral(vpar F_0) = 0 (no spurious flows)
   Weak multiplication and dot products are employed to set up the matrices.
   Weak division employed elsewhere to obtain final result.

   Note that this Maxima only sets the requisite matrices for the linear
   system to solve and an external *batched* linear solve is performed. */

/* In the comments we refer to the rank 3 tensor E_M. This is
   E_{M,i,j,k} = InnerProd(varsC,bC[i],bC[j],bC[k]). */

load("modal-basis");

load("out-scripts");

load("nodal_operations/node_locations");

load(stringproc)$

fpprec : 24$

VarsC : [X, Y, Z]$

varsV : [vx, vy, vz]$

writeCExprsA(lhs, rhs) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then printf(fh,"  ~a,~a); ~%", lhs[i], expr[i])
  )
)$

writeCExprsB(lhs, rhs) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then printf(fh, "  ~a = ~a; ~%", sremove("\\", ssubst(")","]",ssubst("(","[",string(lhs[i])))), expr[i])
  )
)$

writeCExprs1s(lhs, rhs) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    printf(fh, "    ~a = ~a; ~%", lhs[i-1], expr[i])
  )
)$

calc_self_prim_pkpm(fh, funcNm, cdim, vdim, polyOrder) := block([bP,bC,NP,NC,nodes,m0_c,m0_e,vtSq_c,vtSq_e,m1_c,m1_e,m0Corners,m2Corners,expr,eq,cM_c,cM_e,cE_c,cE_e,u_c,u_e,E,Eflat,Elhs,m1RHS_c],

  kill(varsC, varsP, basisC, basisP),

  /* Load basis of dimensionality requested. */
  [varsC,bC,varsP,bP] : loadPhaseBasis("Tensor", cdim, vdim, polyOrder),

  NP  : length(bP),
  NC  : length(bC),
  nodes : eval_string(sconcat("nodesSer", cdim, "xp", 1)),

  /* Function declaration with input/output variables. */
  printf(fh, "GKYL_CU_DH void ~a(struct gkyl_mat *A, struct gkyl_mat *rhs, const double *vlasov_pkpm_moms, const double *boundary_corrections) ~%{ ~%", funcNm, polyOrder),
  printf(fh, "  // A:                    Matrix to be inverted to solve Ax = rhs (set by this function). ~%"),
  printf(fh, "  // rhs:                  right-hand side of Ax = rhs (set by this function). ~%"),
  printf(fh, "  // vlasov_pkpm_moms:     [rho, p_parallel, p_perp], Moments computed from kinetic equation in pkpm model. ~%"),
  printf(fh, "  // boundary_corrections: boundary corrections to vtSq. ~%"),
  printf(fh, " ~%"),

  /* Get pointers to PKPM moments, rho, p_parallel, p_perp, M1. M1 used here to insure collision operator conserves momentum */
  printf(fh, "  const double *rho = &vlasov_pkpm_moms[~a]; ~%", 0*NC),
  printf(fh, "  const double *p_parallel = &vlasov_pkpm_moms[~a]; ~%", 1*NC),
  printf(fh, "  const double *p_perp = &vlasov_pkpm_moms[~a]; ~%", 2*NC),
  printf(fh, "  const double *M1 = &vlasov_pkpm_moms[~a]; ~%", 3*NC),

  /* In order to avoid dividing by very small, negative or zero densities
     use the cell average rho, p_parallel, p_perp when rho, p_parallel, or p_perp<0 at one of the corners. */
  printf(fh, "  // If a corner value is below zero, use cell average.~%"),
  printf(fh, "  bool cellAvg = false;~%"),
  nodesub(f):=makelist(subst(makelist(varsC[j]=nodes[i][j],j,1,length(varsC)),f),i,1,length(nodes)),
  rhoCorners : gcfac(float(fullratsimp(nodesub(doExpand1(rho,bC))))),
  p_parCorners : gcfac(float(fullratsimp(nodesub(doExpand1(p_parallel,bC))))),
  p_perpCorners : gcfac(float(fullratsimp(nodesub(doExpand1(p_perp,bC))))),
  for i : 1 thru length(nodes) do (
    printf(fh, "  if (~a < 0) cellAvg = true; ~%", rhoCorners[i]),
    printf(fh, "  if (~a < 0) cellAvg = true; ~%", p_parCorners[i]),
    printf(fh, "  if (~a < 0) cellAvg = true; ~%", p_perpCorners[i])
  ),
  printf(fh, " ~%"),

  /* Declare new buffers where moments and boundary corrections are stored. */
  printf(fh, "  double m0r[~a] = {0.0}; ~%", NC),
  printf(fh, "  double m1r[~a] = {0.0}; ~%", NC),
  printf(fh, "  double cMr[~a] = {0.0}; ~%", NC),
  printf(fh, "  double cEr[~a] = {0.0}; ~%", NC),

  printf(fh, "  if (cellAvg) { ~%"),
  /* Use the cell average of m0. */
  writeCExprs1s(m0r,append([rho[0]],makelist(0.0,i,1,NC-1))),
  writeCExprs1s(m1r,append([M1[0]],makelist(0.0,i,1,NC-1))),

  writeCExprs1s(cMr,append([boundary_corrections[0]],makelist(0.0,i,1,NC-1))),
  expr : float(expand(append([M1[0]],makelist(0.0,i,1,NC-1)))),
  for i : 1 thru length(expr) do (
    printf(fh,"    gkyl_mat_set(rhs,~a,0,~a); ~%", i-1, expr[i])
  ),

  writeCExprs1s(cEr,append([boundary_corrections[NC]],makelist(0.0,i,1,NC-1))),
  expr : float(expand(append([p_parallel[0]+2.0*p_perp[0]],makelist(0.0,i,1,NC-1)))),
  for i : 1 thru length(expr) do (
    printf(fh,"    gkyl_mat_set(rhs,~a,0,~a); ~%", NC+i-1, expr[i])
  ),
  printf(fh, "  } else { ~%"),
  /* Use the original expansion polynomial. */
  writeCExprs1s(m0r,makelist(rho[i],i,0,NC-1)),
  writeCExprs1s(m1r,makelist(M1[i],i,0,NC-1)),

  writeCExprs1s(cMr,makelist(boundary_corrections[i],i,0,NC-1)),
  expr : float(expand(makelist(M1[i],i,0,NC-1))),
  for i : 1 thru length(expr) do (
    printf(fh,"    gkyl_mat_set(rhs,~a,0,~a); ~%", i-1, expr[i])
  ),

  writeCExprs1s(cEr,makelist(boundary_corrections[i+NC],i,0,NC-1)),
  expr : float(expand(makelist(p_parallel[i]+2.0*p_perp[i],i,0,NC-1))),
  for i : 1 thru length(expr) do (
    printf(fh,"    gkyl_mat_set(rhs,~a,0,~a); ~%", NC+i-1, expr[i])
  ),
  printf(fh, "  } ~%"),
  printf(fh, " ~%"),

  /* Expansion in configuration space basis and coefficients of m0. */
  m0_e : doExpand1(m0r, bC),
  m0_c : makelist(m0r[i],i,0,NC-1),

  /* Equivalently for  vtSq .*/
  vtSq_e : doExpand1(vtSq,bC),
  vtSq_c : makelist(vtSq[i],i,0,NC-1),
  /* cE is the correction to vtSq
     needed to preserve energy conservation. */
  cE_e : doExpand1(cEr, bC),
  cE_c : makelist(cEr[i],i,0,NC-1),

  /* N is the size of the linear problem. LHS Eigen matrix is NxN. */
  N : NC*(vdim+1),

  /* Make a list of the LHS matrix assignments. */
  /* Note: Eigen defaults to Column-major order. */
  Ef[i,j] := sconcat("gkyl_mat_set(A,",i,",",j),

  m1RHS_c : [],
  for vd : 1 thru vdim do (
    /* Expand u function and create a list of expansion coefficients. */
    m1_e : doExpand1(m1r, bC),
    m1_c : makelist(m1r[i],i,0,NC-1),
    u_e  : doExpand1(u,bC),
    u_c  : makelist(u[i],i,0,NC-1),
    cM_e : doExpand1(cMr, bC),
    cM_c : makelist(cMr[i],i,0,NC-1),
    /* Use the vd component of u, m1 and cM. */
    u_e : subst(makelist(u[i]=u[(vd-1)*NC+i],i,0,NC-1),u_e),
    u_c : subst(makelist(u[i]=u[(vd-1)*NC+i],i,0,NC-1),u_c),
    m1_e : subst(makelist(m1r[i]=m1r[(vd-1)*NC+i],i,0,NC-1),m1_e),
    m1_c : subst(makelist(m1r[i]=m1r[(vd-1)*NC+i],i,0,NC-1),m1_c),
    cM_e : subst(makelist(cMr[i]=cMr[(vd-1)*NC+i],i,0,NC-1),cM_e),
    cM_c : subst(makelist(cMr[i]=cMr[(vd-1)*NC+i],i,0,NC-1),cM_c),

    /*........... Matrix block from weak multiply of u and M_0 .............*/
    eq : calcInnerProdList(varsC,u_e,bC,m0_e),
    E  : fullratsimp(coefmatrix(eq,u_c)),
    /* Flatten E for WriteCExprsB. */
    Eflat : list_matrix_entries(E),
  
    Elhs : list_matrix_entries(genmatrix(Ef,vd*NC-1,vd*NC-1,(vd-1)*NC,(vd-1)*NC)),
  
    printf(fh, "  // ....... Block from weak multiply of u (correction to M1) and rho  .......... // ~%"),
    writeCExprsA(Elhs,Eflat),
    printf(fh, " ~%"),
  
    /*........... Matrix block from correction to u .............*/
    eq : -calcInnerProdList(varsC,vtSq_e,bC,cM_e),
    E  : fullratsimp(coefmatrix(eq,vtSq_c)),
    /* Flatten E for WriteCExprsB. */
    Eflat : list_matrix_entries(E),
  
    Elhs  : list_matrix_entries(genmatrix(Ef,vd*NC-1,N-1,(vd-1)*NC,(vdim-1)*NC+NC)),
  
    printf(fh, "  // ....... Block from correction to u (correction to M1).......... // ~%"),
    writeCExprsA(Elhs,Eflat),
    printf(fh, " ~%"),
  
    /*........... Matrix block from weak multiply of u and m1 .............*/
    eq    : calcInnerProdList(varsC,u_e,bC,m1_e),
    E     : fullratsimp(coefmatrix(eq,u_c)),
    /* Flatten E for WriteCExprsB. */
    Eflat : list_matrix_entries(E),
  
    Elhs  : list_matrix_entries(genmatrix(Ef,N-1,vd*NC-1,vdim*NC,(vd-1)*NC)),

    printf(fh, "  // ....... Block from weak multiply of u (correction to M1) and M1  .......... // ~%"),
    writeCExprsA(Elhs,Eflat),
    printf(fh, " ~%"),

    /* Vector of all m1 coefficients. */
    m1RHS_c : append(m1RHS_c,m1_c)
  ),
  
  /*........... Matrix block from correction to vtSq .............*/
  eq : calcInnerProdList(varsC,vtSq_e,bC,3*m0_e-cE_e),
  E : fullratsimp(coefmatrix(eq,vtSq_c)),
  /* Flatten E for WriteCExprsB. */
  Eflat : list_matrix_entries(E),
  
  Elhs  : list_matrix_entries(genmatrix(Ef,N-1,N-1,vdim*NC,vdim*NC)),
  
  printf(fh, "  // ....... Block from correction to vtSq .......... // ~%"),
  writeCExprsA(Elhs,Eflat),
  printf(fh, " ~%"),

  printf(fh, "} ~%"),
  printf(fh, " ~%")
)$


