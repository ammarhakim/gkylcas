/* Generate the header file for the PKPM (Vlasov) equation kernels. */

/* ...... USER INPUTS........ */

/* Tensor product basis. */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
maxCdim_Tensor : 3$

/* ...... END OF USER INPUTS........ */
clabels : ["x","y","z"]$

printPKPMPrototype(deco, ci, bStr, pi) := block([si],
  printf(fh, "~adouble vlasov_pkpm_vol_~ax1v_~a_p~a(const double *w, const double *dxv, 
  const double *bvar, const double *pkpm_u, 
  const double *div_b, const double *pkpm_accel_vars, 
  const double *g_dist_source, const double *f, 
  double* GKYL_RESTRICT out); ~%", deco, ci, bStr, pi),
  printf(fh, "~avoid pkpm_dist_mirror_force_~ax1v_~a_p~a(const double *w, const double *dxv, 
  const double *pkpm_prim, const double *nu_prim_moms_sum, 
  const double *div_b, const double *pkpm_accel_vars, 
  const double *f, const double *F_k_p_1, 
  double* GKYL_RESTRICT g_dist_source, double* GKYL_RESTRICT F_k_m_1); ~%", deco, ci, bStr, pi),
  for si : 1 thru ci do (
    printf(fh, "~adouble vlasov_pkpm_surf~a_~ax1v_~a_p~a(const double *w, const double *dxv, 
    const double *bvar_surf_l, const double *bvar_surf_c, const double *bvar_surf_r, 
    const double *pkpm_u_surf_l, const double *pkpm_u_surf_c, const double *pkpm_u_surf_r, 
    const double *fl, const double *fc, const double *fr, 
    const double *pkpm_max_b, const double *pkpm_lax, double* GKYL_RESTRICT out); ~%", deco, clabels[si], ci, bStr, pi),
    printf(fh, "~avoid pkpm_dist_div_ppar_~a_~ax1v_~a_p~a(const double *w, const double *dxv, 
     const double *bvar_surf_l, const double *bvar_surf_c, const double *bvar_surf_r, 
     const double *fl, const double *fc, const double *fr, 
     const double *bvar_c, const double *pkpm_max_b, double* GKYL_RESTRICT pkpm_div_ppar); ~%", deco, clabels[si], ci, bStr, pi)
  ),
  printf(fh, "~adouble vlasov_pkpm_surfvpar_~ax1v_~a_p~a(const double *w, const double *dxv, 
     const double *div_b, const double *pkpm_accel_vars, 
     const double *g_dist_sourcel, const double *g_dist_sourcec, const double *g_dist_sourcer, 
     const double *fl, const double *fc, const double *fr, double* GKYL_RESTRICT out); ~%", deco, ci, bStr, pi),
  printf(fh, "~adouble vlasov_pkpm_boundary_surfvpar_~ax1v_~a_p~a(const double *w, const double *dxv, 
     const double *div_b, const double *pkpm_accel_vars, 
     const double *g_dist_sourceEdge, const double *g_dist_sourceSkin, 
     const int edge, const double *fEdge, const double *fSkin, double* GKYL_RESTRICT out); ~%", deco, ci, bStr, pi),
  printf(fh, "~%")
)$

/* ............ Write out the C header file ............ */
fh : openw("~/max-out/gkyl_vlasov_pkpm_kernels.h")$

printf(fh, "#pragma once ~%")$
printf(fh, "#include <math.h> ~%")$
printf(fh, "#include <gkyl_util.h> ~%")$
printf(fh, "EXTERN_C_BEG ~%")$
printf(fh, "~%")$

decorator : "GKYL_CU_DH "$
for d : minCdim_Tensor thru maxCdim_Tensor do (
  for polyOrder : minPolyOrder_Tensor thru maxPolyOrder_Tensor do (
    printPKPMPrototype(decorator, d, "tensor", polyOrder)
  )
);
printf(fh, "EXTERN_C_END ~%")$
close(fh)$
/* ............ Finished writing out the C header file ............ */
