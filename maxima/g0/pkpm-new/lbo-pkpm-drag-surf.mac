/* This script generates the kernels for the surface term
   drag contribution from Lenard Bernstein operator when 
   coupled to the Vlasov parallel-kinetic-perpendicular-moment (pkpm) model. */

load("modal-basis");
load("out-scripts");
load(stringproc)$
load("scifac")$
load("nodal_operations/nodal_functions")$
fpprec : 24$

calcVlasovPKPMLBODragSurfUpdater(fh, funcNm, cdim, vdim, polyOrder) := block(
  [varsC, bC, varsP, bP, NP, NC, pDim, 
   surfVars, bSurf, surf_cdim, surf_vdim, surfNodes, basisStr, numNodes, NSurf, 
   nuSum_e, nuUSum_e, alphaDr, 
   alphaDrSurf_l_c, alphaDrSurf_r_c, alst_l, alst_r, alphaDrSurf_l_e, alphaDrSurf_r_e,
   alphaOrd_l_n, alphaOrd_r_n, 
   F_0_HatSurf_l_e, G_1_HatSurf_l_e, F_0_HatSurf_r_e, G_1_HatSurf_r_e, 
   Ghat_F_0_l_c, Ghat_G_1_l_c, Ghat_F_0_r_c, Ghat_G_1_r_c, 
   Ghat_F_0_l_e, Ghat_G_1_l_e, Ghat_F_0_r_e, Ghat_G_1_r_e, 
   incr_F_0_l, incr_G_1_l, incr_F_0_r, incr_G_1_r],
  
  /* Load basis of dimensionality requested. */
  [varsC,bC,varsP,bP] : loadPhaseBasis("Tensor", cdim, vdim, polyOrder),

  /* Number of basis monomials. */
  NP : length(bP),
  NC : length(bC),
  pDim  : length(varsP),

  /* Surface variables to integrate over. */
  surfVars : delete(vx,varsP),

  /* Generate surface basis. this produces the ndim-1 orthogonal basis with no vx dependence. */
  /* Also generate necessary basis strings, and surface nodes given by tensor product of Gauss-Legendre quadrature points */
  bSurf : basisFromVars("Tensor",surfVars,polyOrder),
  surfNodes : gaussOrd(polyOrder+1, pDim-1),

  basisStr : sconcat("tensor_", cdim+vdim, "x", "_p", polyOrder),
  numNodes : length(surfNodes),
  NSurf : length(bSurf),

  printf(fh, "GKYL_CU_DH double ~a(const double *w, const double *dxv, const double *nuSum, const double *nuPrimMomsSum, const double *fl, const double *fc, const double *fr, double* GKYL_RESTRICT out) ~%{ ~%", funcNm),
  printf(fh, "  // w[NDIM]:       Cell-center coordinates. ~%"),
  printf(fh, "  // dxv[NDIM]:     Cell spacing. ~%"),
  printf(fh, "  // nuSum:         Collisionalities added (self and cross species collisionalities). ~%"),
  printf(fh, "  // nuPrimMomsSum: Sum of bulk velocities and thermal speeds (squared) times their respective collisionalities. ~%"),
  printf(fh, "  // fl/fc/fr:      Input distribution functions [F_0, T_perp/m G_1 = T_perp/m (F_0 - F_1)] in left/center/right cells. ~%"),
  printf(fh, "  // out:           Incremented output distribution functions in center cell. ~%"),
  printf(fh, "~%"),

  /* grid spacing in v_parallel and v_parallel coordinate */
  printf(fh, "  const double dv1par = 2.0/dxv[~a]; ~%", cdim),
  printf(fh, "  const double dvpar = dxv[~a], wvpar = w[~a]; ~%", cdim, cdim),

  /* Access F_0 and T_perp G, first two Laguerre moments */
  printf(fh, "  const double *F_0l = &fl[~a]; ~%", 0),
  printf(fh, "  const double *G_1l = &fl[~a]; ~%", NP),  
  printf(fh, "  const double *F_0c = &fc[~a]; ~%", 0),
  printf(fh, "  const double *G_1c = &fc[~a]; ~%", NP), 
  printf(fh, "  const double *F_0r = &fr[~a]; ~%", 0),
  printf(fh, "  const double *G_1r = &fr[~a]; ~%", NP), 

  /* Access the components of out for the first two Laguerre moments */
  printf(fh, "  double *out_F_0 = &out[~a]; ~%", 0),
  printf(fh, "  double *out_G_1 = &out[~a]; ~%", NP),  
  printf(fh, "~%"),

  nuSum_e : doExpand1(nuSum,bC),
  /* Expand the mean flow speed in the configuration basis. */
  nuUSum_e : doExpand1(sumNuUPar,bC),
  /* Create pointer to M1_correction to upar. */
  printf(fh, "  const double *sumNuUPar = &nuPrimMomsSum[~a]; ~%", 0),
  printf(fh, "~%"),
  /* Calculate the alpha-velocity due to drag. */
  alphaDr : nuSum_e*((1.0/2.0)*dvpar*vx+wvpar)-nuUSum_e,

  /* Project alphaDrag evaluated at interior surface onto surf basis. */
  alphaDrSurf_l_c : fullratsimp(innerProd(surfVars, 1, bSurf, subst(vx=-1,alphaDr))),
  alphaDrSurf_r_c : fullratsimp(innerProd(surfVars, 1, bSurf, subst(vx=1,alphaDr))),
  alst_l          : doMakeExprLst(alphaDrSurf_l_c, alphaDrSurf_l),
  alst_r          : doMakeExprLst(alphaDrSurf_r_c, alphaDrSurf_r),
  alphaDrSurf_l_e : doExpand(alst_l, bSurf),
  alphaDrSurf_r_e : doExpand(alst_r, bSurf),
  printf(fh, "  double alphaDrSurf_l[~a] = {0.0}; ~%", length(bSurf)),
  writeCExprs1(alphaDrSurf_l, alphaDrSurf_l_c),
  printf(fh, "~%"),
  printf(fh, "  double alphaDrSurf_r[~a] = {0.0}; ~%", length(bSurf)),
  writeCExprs1(alphaDrSurf_r, alphaDrSurf_r_c),
  printf(fh, "~%"),

  /* Evaluate alpha at ordinates.
     Note: alphaSurf_e is already a surface expansion. 
     In addition, it is continuous and does not vary with respect to the surface variable.
     We still require a alpha_l (w - dv/2) and alpha_r (w + dv/2) for the two sides of the cell */
  alphaOrd_l_n : gcfac(float(evAtNodes(alphaDrSurf_l_e,surfNodes,surfVars))),
  alphaOrd_r_n : gcfac(float(evAtNodes(alphaDrSurf_r_e,surfNodes,surfVars))),

  printf(fh, "  double F_0_UpwindQuad_l[~a] = {0.0};~%", numNodes),
  printf(fh, "  double F_0_UpwindQuad_r[~a] = {0.0};~%", numNodes),
  printf(fh, "  double F_0_Upwind_l[~a] = {0.0};~%", NSurf),
  printf(fh, "  double F_0_Upwind_r[~a] = {0.0};~%", NSurf),
  printf(fh, "  double Ghat_F_0_l[~a] = {0.0}; ~%", NSurf),
  printf(fh, "  double Ghat_F_0_r[~a] = {0.0}; ~%", NSurf),

  printf(fh, "  double G_1_UpwindQuad_l[~a] = {0.0};~%", numNodes),
  printf(fh, "  double G_1_UpwindQuad_r[~a] = {0.0};~%", numNodes),
  printf(fh, "  double G_1_Upwind_l[~a] = {0.0};~%", NSurf),
  printf(fh, "  double G_1_Upwind_r[~a] = {0.0};~%", NSurf),
  printf(fh, "  double Ghat_G_1_l[~a] = {0.0}; ~%", NSurf),
  printf(fh, "  double Ghat_G_1_r[~a] = {0.0}; ~%", NSurf),
  printf(fh, "~%"),

  for i : 1 thru length(alphaOrd_l_n) do (
    /* Drag term on left side of interface */
    printf(fh, "  if (~a < 0) { ~%", alphaOrd_l_n[i]),
    printf(fh, "    F_0_UpwindQuad_l[~a] = ~a_surfx~a_eval_quad_node_~a_r(F_0l); ~%", i-1, basisStr, cdim+1, i-1),
    printf(fh, "    G_1_UpwindQuad_l[~a] = ~a_surfx~a_eval_quad_node_~a_r(G_1l); ~%", i-1, basisStr, cdim+1, i-1),
    printf(fh, "  } else { ~%"),
    printf(fh, "    F_0_UpwindQuad_l[~a] = ~a_surfx~a_eval_quad_node_~a_l(F_0c); ~%", i-1, basisStr, cdim+1, i-1),
    printf(fh, "    G_1_UpwindQuad_l[~a] = ~a_surfx~a_eval_quad_node_~a_l(G_1c); ~%", i-1, basisStr, cdim+1, i-1),
    printf(fh, "  } ~%"),

    /* Drag term on right side of interface */
    printf(fh, "  if (~a < 0) { ~%", alphaOrd_r_n[i]),
    printf(fh, "    F_0_UpwindQuad_r[~a] = ~a_surfx~a_eval_quad_node_~a_r(F_0c); ~%", i-1, basisStr, cdim+1, i-1),
    printf(fh, "    G_1_UpwindQuad_r[~a] = ~a_surfx~a_eval_quad_node_~a_r(G_1c); ~%", i-1, basisStr, cdim+1, i-1),
    printf(fh, "  } else { ~%"),
    printf(fh, "    F_0_UpwindQuad_r[~a] = ~a_surfx~a_eval_quad_node_~a_l(F_0r); ~%", i-1, basisStr, cdim+1, i-1),
    printf(fh, "    G_1_UpwindQuad_r[~a] = ~a_surfx~a_eval_quad_node_~a_l(G_1r); ~%", i-1, basisStr, cdim+1, i-1),
    printf(fh, "  } ~%")
  ),

  printf(fh, "~%"),
  printf(fh, "  // Project tensor nodal quadrature basis back onto modal basis. ~%"),
  printf(fh, "  ~a_upwind_quad_to_modal(F_0_UpwindQuad_l, F_0_Upwind_l); ~%", basisStr),
  printf(fh, "  ~a_upwind_quad_to_modal(F_0_UpwindQuad_r, F_0_Upwind_r); ~%", basisStr),
  printf(fh, "  ~a_upwind_quad_to_modal(G_1_UpwindQuad_l, G_1_Upwind_l); ~%", basisStr),
  printf(fh, "  ~a_upwind_quad_to_modal(G_1_UpwindQuad_r, G_1_Upwind_r); ~%", basisStr),
  printf(fh, "~%"),

  /* Create expansions of F_0_hat, G_1_hat (upwinded first two Laguerre moments) on the left and right in the surface basis. */
  /* Upwinded values calculated from alpha_drag = nu*(vpar - M1_corr) where M1_corr is the correction to insure momentum conservation */
  F_0_HatSurf_l_e : doExpand1(F_0_Upwind_l, bSurf),
  F_0_HatSurf_r_e : doExpand1(F_0_Upwind_r, bSurf),
  G_1_HatSurf_l_e : doExpand1(G_1_Upwind_l, bSurf),
  G_1_HatSurf_r_e : doExpand1(G_1_Upwind_r, bSurf),

  /* Print C exprs for Ghat across surface boundary, (LEFT BOUNDARY) */
  Ghat_F_0_l_c : calcInnerProdList(surfVars, alphaDrSurf_l_e, bSurf, F_0_HatSurf_l_e),
  Ghat_G_1_l_c : calcInnerProdList(surfVars, alphaDrSurf_l_e, bSurf, G_1_HatSurf_l_e),
  writeCExprsCollect1lhsc(Ghat_F_0_l, radcan(Ghat_F_0_l_c)),
  writeCExprsCollect1lhsc(Ghat_G_1_l, radcan(Ghat_G_1_l_c)),
  printf(fh, "~%"),
  flush_output(fh),

  /* Print C exprs for Ghat across surface boundary, (RIGHT BOUNDARY) */
  Ghat_F_0_r_c : calcInnerProdList(surfVars, alphaDrSurf_r_e, bSurf, F_0_HatSurf_r_e),
  Ghat_G_1_r_c : calcInnerProdList(surfVars, alphaDrSurf_r_e, bSurf, G_1_HatSurf_r_e),
  writeCExprsCollect1lhsc(Ghat_F_0_r, radcan(Ghat_F_0_r_c)),
  writeCExprsCollect1lhsc(Ghat_G_1_r, radcan(Ghat_G_1_r_c)),
  printf(fh, "~%"),
  flush_output(fh),

  /* Expand G_hat in surface basis. */
  Ghat_F_0_l_e       : doExpand1(Ghat_F_0_l, bSurf),
  Ghat_G_1_l_e       : doExpand1(Ghat_G_1_l, bSurf),
  Ghat_F_0_r_e       : doExpand1(Ghat_F_0_r, bSurf),
  Ghat_G_1_r_e       : doExpand1(Ghat_G_1_r, bSurf),

  /* Compute surface contribution integral(phi^- Ghat). */
  incr_F_0_l : calcInnerProdList(surfVars, -1, subst(vx=-1.0, bP), Ghat_F_0_l_e),
  incr_F_0_r : calcInnerProdList(surfVars, 1, subst(vx=1.0, bP), Ghat_F_0_r_e),
  incr_G_1_l : calcInnerProdList(surfVars, -1, subst(vx=-1.0, bP), Ghat_G_1_l_e),
  incr_G_1_r : calcInnerProdList(surfVars, 1, subst(vx=1.0, bP), Ghat_G_1_r_e),

  writeCIncrExprsCollect1lhsc(out_F_0, dv1par*incr_F_0_l + dv1par*incr_F_0_r),  
  writeCIncrExprsCollect1lhsc(out_G_1, dv1par*incr_G_1_l + dv1par*incr_G_1_r),  
  printf(fh, "~%"),

  printf(fh, "  return 0.;~%"),  /* Return CFL frequency from volume kernel. */
  printf(fh, "~%"),

  printf(fh, "} ~%")
);

