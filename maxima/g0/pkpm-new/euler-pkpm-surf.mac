/* This script generates the kernels for the surface term of Euler's equations
   for the parallel-kinetic-perpendicular-moment (pkpm) model */

load("modal-basis");
load("out-scripts");
load(stringproc)$
load("scifac")$
load("nodal_operations/nodal_functions")$
fpprec : 24$

cvars : [x, y, z]$
dx11 : [dx10, dx11, dx12]$

euler_pkpm : [rhou0, rhou1, rhou2]$
lhs : [outrhou0, outrhou1, outrhou2]$

/* Helper functions for expanding in basis functions a quantity we know should be sparse  */
/* For example, alpha, the phase space flow only depends on a few phase space coordinates */
doMakeExprLst(vals, S)  := makelist(if vals[i] # 0 then S[i-1] else 0, i, 1, length(vals))$
doExpandLst(lst, basis) := sum(lst[i]*basis[i], i, 1, length(basis))$

let(uxl_r^2, uxl_r_sq)$
let(uxc_l^2, uxc_l_sq)$
let(uxc_r^2, uxc_r_sq)$
let(uxr_l^2, uxr_l_sq)$

/* 1D Euler special since only involves evaluations */
calcEulerPKPM1xUpdateInDir(dir, fh, funcNm, cdim, polyOrder) := block(
  [varsC, bC, bC_2p, NC, NC_2p, cv, surfVars,
  rhouxl_e,rhouyl_e,rhouzl_e,rhol_e,
  rhouxc_e,rhouyc_e,rhouzc_e,rhoc_e,
  rhouxr_e,rhouyr_e,rhouzr_e,rhor_e,
  rhouxl_r,rhouyl_r,rhouzl_r,rhol_r,
  rhouxc_l,rhouyc_l,rhouzc_l,rhoc_l,
  rhouxc_r,rhouyc_r,rhouzc_r,rhoc_r,
  rhouxr_l,rhouyr_l,rhouzr_l,rhor_l,
  avg_rho_l, avg_rho_r, avg_ux_l, avg_ux_r, avg_uy_l, avg_uy_r, avg_uz_l, avg_uz_r, 
  Ghat_rho_l_exp, Ghat_rho_r_exp, jump_rhoux_l, jump_rhoux_r, jump_rhouy_l, jump_rhouy_r, jump_rhouz_l, jump_rhouz_r, 
  Ghat_rhoux_l_exp,Ghat_rhoux_r_exp,Ghat_rhouy_l_exp,Ghat_rhouy_r_exp,Ghat_rhouz_l_exp,Ghat_rhouz_r_exp,
  incr_rhoux_l,incr_rhoux_r,incr_rhouy_l,incr_rhouy_r,incr_rhouz_l,incr_rhouz_r],

  kill(varsC, bC),
  kill(varsC, bC_2p),

  /* Load basis of dimensionality requested. Loads a basis of order p and p/2*/
  [varsC,bC] : loadBasis("Tensor", cdim, polyOrder),
  [varsC,bC_2p] : loadBasis("Tensor", cdim, 2*polyOrder),

  /* Number of basis monomials. */
  NC : length(bC),
  NC_2p : length(bC_2p),

  printf(fh, "GKYL_CU_DH double ~a(const double *w, const double *dxv, 
    const struct gkyl_wv_eqn *wv_eqn, const struct gkyl_wave_cell_geom *geom_l, const struct gkyl_wave_cell_geom *geom_r, 
    const double *vlasov_pkpm_moms_l, const double *vlasov_pkpm_moms_c, const double *vlasov_pkpm_moms_r,
    const double *pkpm_u_surf_l, const double *pkpm_u_surf_c, const double *pkpm_u_surf_r,
    const double *p_ij_l, const double *p_ij_c, const double *p_ij_r,
    const double *euler_pkpm_l, const double *euler_pkpm_c, const double *euler_pkpm_r, 
    const double *pkpm_lax, double* GKYL_RESTRICT out) ~%{ ~%", funcNm),
  printf(fh, "  // w[NDIM]:                Cell-center coordinates.~%"),
  printf(fh, "  // dxv[NDIM]:              Cell spacing.~%"),
  printf(fh, "  // wv_eqn:                 Wave equation for computing fluctuations at the interface for upwinding.~%"),
  printf(fh, "  // geom_l:                 Geometry for the left surface update.~%"),
  printf(fh, "  // geom_r:                 Geometry for the right surface update.~%"),
  printf(fh, "  // vlasov_pkpm_moms_l/c/r: Input pkpm moments in left/center/right cells.~%"),
  printf(fh, "  // pkpm_u_surf_l/c/r:      Input surface flow velocity in left/center/right cells in each direction.~%"),
  printf(fh, "  // p_ij_l/c/r:             Input volume expansion of p_ij = (p_par - p_perp) b_i b_j + p_perp g_ij in left/center/right cells.~%"),
  printf(fh, "  // euler_pkpm_l/c/r:       Input [rho ux, rho uy, rho uz], Fluid input state vector in left/center/right cells.~%"),
  printf(fh, "  // pkpm_lax:               Surface expansion of pkpm Lax penalization: lambda_i = |u_i| + sqrt(3.0*T_ii/m).~%"),
  printf(fh, "  // out: Incremented output.~%"),
  printf(fh, "~%"),

  /* cv = variable in direction of surface update. */
  cv : varsC[dir],

  /* Surface variables to integrate over. */
  surfVars : delete(cv,varsC),
  NSurf : 1, 
  NSurf_2p : 1, 

  printf(fh, "  const double dx1 = 2.0/dxv[~a]; ~%", dir-1),
  printf(fh, "~%"),

  printf(fh, "  const double *rhoux_l = &euler_pkpm_l[~a]; ~%", 0*NC),
  printf(fh, "  const double *rhouy_l = &euler_pkpm_l[~a]; ~%", 1*NC),
  printf(fh, "  const double *rhouz_l = &euler_pkpm_l[~a]; ~%", 2*NC),
  printf(fh, "~%"),

  printf(fh, "  const double *rhoux_c = &euler_pkpm_c[~a]; ~%", 0*NC),
  printf(fh, "  const double *rhouy_c = &euler_pkpm_c[~a]; ~%", 1*NC),
  printf(fh, "  const double *rhouz_c = &euler_pkpm_c[~a]; ~%", 2*NC),
  printf(fh, "~%"),

  printf(fh, "  const double *rhoux_r = &euler_pkpm_r[~a]; ~%", 0*NC),
  printf(fh, "  const double *rhouy_r = &euler_pkpm_r[~a]; ~%", 1*NC),
  printf(fh, "  const double *rhouz_r = &euler_pkpm_r[~a]; ~%", 2*NC),
  printf(fh, "~%"),

  printf(fh, "  const double *rho_l = &vlasov_pkpm_moms_l[~a]; ~%", 0*NC_2p),
  printf(fh, "  const double *rho_c = &vlasov_pkpm_moms_c[~a]; ~%", 0*NC_2p),
  printf(fh, "  const double *rho_r = &vlasov_pkpm_moms_r[~a]; ~%", 0*NC_2p),
  printf(fh, "~%"),

  printf(fh, "  const double *Pxx_l = &p_ij_l[~a]; ~%", 0*NC_2p),
  printf(fh, "  const double *Pxy_l = &p_ij_l[~a]; ~%", 1*NC_2p),
  printf(fh, "  const double *Pxz_l = &p_ij_l[~a]; ~%", 2*NC_2p),
  printf(fh, "  const double *Pyy_l = &p_ij_l[~a]; ~%", 3*NC_2p),
  printf(fh, "  const double *Pyz_l = &p_ij_l[~a]; ~%", 4*NC_2p),
  printf(fh, "  const double *Pzz_l = &p_ij_l[~a]; ~%", 5*NC_2p),
  printf(fh, "~%"),

  printf(fh, "  const double *Pxx_c = &p_ij_c[~a]; ~%", 0*NC_2p),
  printf(fh, "  const double *Pxy_c = &p_ij_c[~a]; ~%", 1*NC_2p),
  printf(fh, "  const double *Pxz_c = &p_ij_c[~a]; ~%", 2*NC_2p),
  printf(fh, "  const double *Pyy_c = &p_ij_c[~a]; ~%", 3*NC_2p),
  printf(fh, "  const double *Pyz_c = &p_ij_c[~a]; ~%", 4*NC_2p),
  printf(fh, "  const double *Pzz_c = &p_ij_c[~a]; ~%", 5*NC_2p),
  printf(fh, "~%"),

  printf(fh, "  const double *Pxx_r = &p_ij_r[~a]; ~%", 0*NC_2p),
  printf(fh, "  const double *Pxy_r = &p_ij_r[~a]; ~%", 1*NC_2p),
  printf(fh, "  const double *Pxz_r = &p_ij_r[~a]; ~%", 2*NC_2p),
  printf(fh, "  const double *Pyy_r = &p_ij_r[~a]; ~%", 3*NC_2p),
  printf(fh, "  const double *Pyz_r = &p_ij_r[~a]; ~%", 4*NC_2p),
  printf(fh, "  const double *Pzz_r = &p_ij_r[~a]; ~%", 5*NC_2p),
  printf(fh, "~%"),

  /* Surface primitive variables are organized as:
     [ux_xl, ux_xr, uy_xl, uy_xr, uz_xl, uz_xr, 
      ux_yl, ux_yr, uy_yl, uy_yr, uz_yl, uz_yr, 
      ux_zl, ux_zr, uy_zl, uy_zr, uz_zl, uz_zr] */
  printf(fh, "  const double *ux_surf_lr = &pkpm_u_surf_l[~a]; ~%", (1 + (dir-1)*6)*NSurf),
  printf(fh, "  const double *uy_surf_lr = &pkpm_u_surf_l[~a]; ~%", (3 + (dir-1)*6)*NSurf),
  printf(fh, "  const double *uz_surf_lr = &pkpm_u_surf_l[~a]; ~%", (5 + (dir-1)*6)*NSurf),
  printf(fh, "~%"),

  printf(fh, "  const double *ux_surf_cl = &pkpm_u_surf_c[~a]; ~%", (0 + (dir-1)*6)*NSurf),
  printf(fh, "  const double *uy_surf_cl = &pkpm_u_surf_c[~a]; ~%", (2 + (dir-1)*6)*NSurf),
  printf(fh, "  const double *uz_surf_cl = &pkpm_u_surf_c[~a]; ~%", (4 + (dir-1)*6)*NSurf),
  printf(fh, "~%"),

  printf(fh, "  const double *ux_surf_cr = &pkpm_u_surf_c[~a]; ~%", (1 + (dir-1)*6)*NSurf),
  printf(fh, "  const double *uy_surf_cr = &pkpm_u_surf_c[~a]; ~%", (3 + (dir-1)*6)*NSurf),
  printf(fh, "  const double *uz_surf_cr = &pkpm_u_surf_c[~a]; ~%", (5 + (dir-1)*6)*NSurf),
  printf(fh, "~%"),

  printf(fh, "  const double *ux_surf_rl = &pkpm_u_surf_r[~a]; ~%", (0 + (dir-1)*6)*NSurf),
  printf(fh, "  const double *uy_surf_rl = &pkpm_u_surf_r[~a]; ~%", (2 + (dir-1)*6)*NSurf),
  printf(fh, "  const double *uz_surf_rl = &pkpm_u_surf_r[~a]; ~%", (4 + (dir-1)*6)*NSurf),
  printf(fh, "~%"),

  /* Surface Lax penalization organized as (note T_ii = 3*P_ii/rho, includes necessary factors) : 
     [|ux_xl| + sqrt(Txx_xl), |ux_xr| + sqrt(Txx_xr), 
      |uy_yl| + sqrt(Tyy_yl), |uy_yr| + sqrt(Tyy_yr),
      |uz_zl| + sqrt(Tzz_zl), |uz_zr| + sqrt(Tzz_zr)] */
  printf(fh, "  const double *pkpm_lax_l = &pkpm_lax[~a]; ~%", (0 + (dir-1)*2)*NSurf_2p),
  printf(fh, "  const double *pkpm_lax_r = &pkpm_lax[~a]; ~%", (1 + (dir-1)*2)*NSurf_2p),
  printf(fh, "~%"),

  printf(fh, "  double *outrhou0 = &out[~a]; ~%", 0*NC),
  printf(fh, "  double *outrhou1 = &out[~a]; ~%", 1*NC),
  printf(fh, "  double *outrhou2 = &out[~a]; ~%", 2*NC),
  printf(fh, "~%"),

  rhouxl_e : doExpand1(rhoux_l, bC),
  rhouyl_e : doExpand1(rhouy_l, bC),
  rhouzl_e : doExpand1(rhouz_l, bC),

  rhouxc_e : doExpand1(rhoux_c, bC),
  rhouyc_e : doExpand1(rhouy_c, bC),
  rhouzc_e : doExpand1(rhouz_c, bC),

  rhouxr_e : doExpand1(rhoux_r, bC),
  rhouyr_e : doExpand1(rhouy_r, bC),
  rhouzr_e : doExpand1(rhouz_r, bC),

  rhol_e : doExpand1(rho_l, bC_2p), 
  rhoc_e : doExpand1(rho_c, bC_2p), 
  rhor_e : doExpand1(rho_r, bC_2p), 

  rhol_r : subst(cv=1, rhol_e),
  rhoc_l : subst(cv=-1, rhoc_e),
  rhoc_r : subst(cv=1, rhoc_e),
  rhor_l : subst(cv=-1, rhor_e),

  printf(fh, "  double Ghat_rhoux_l = 0.0; ~%"),
  printf(fh, "  double Ghat_rhoux_r = 0.0; ~%"),
  printf(fh, "  double Ghat_rhouy_l = 0.0; ~%"),
  printf(fh, "  double Ghat_rhouy_r = 0.0; ~%"),
  printf(fh, "  double Ghat_rhouz_l = 0.0; ~%"),
  printf(fh, "  double Ghat_rhouz_r = 0.0; ~%"),  

  rhouxl_r : subst(cv=1, rhouxl_e),
  rhouyl_r : subst(cv=1, rhouyl_e),
  rhouzl_r : subst(cv=1, rhouzl_e),

  rhouxc_l : subst(cv=-1, rhouxc_e),
  rhouyc_l : subst(cv=-1, rhouyc_e),
  rhouzc_l : subst(cv=-1, rhouzc_e),

  rhouxc_r : subst(cv=1, rhouxc_e),
  rhouyc_r : subst(cv=1, rhouyc_e),
  rhouzc_r : subst(cv=1, rhouzc_e),

  rhouxr_l : subst(cv=-1, rhouxr_e),
  rhouyr_l : subst(cv=-1, rhouyr_e),
  rhouzr_l : subst(cv=-1, rhouzr_e),

  /* Expand pressure tensor (all components, will select particular components based on direction) */
  Pxxl_e : doExpand1(Pxx_l, bC_2p),
  Pxyl_e : doExpand1(Pxy_l, bC_2p),
  Pxzl_e : doExpand1(Pxz_l, bC_2p),
  Pyyl_e : doExpand1(Pyy_l, bC_2p),
  Pyzl_e : doExpand1(Pyz_l, bC_2p),
  Pzzl_e : doExpand1(Pzz_l, bC_2p),

  Pxxc_e : doExpand1(Pxx_c, bC_2p),
  Pxyc_e : doExpand1(Pxy_c, bC_2p),
  Pxzc_e : doExpand1(Pxz_c, bC_2p),
  Pyyc_e : doExpand1(Pyy_c, bC_2p),
  Pyzc_e : doExpand1(Pyz_c, bC_2p),
  Pzzc_e : doExpand1(Pzz_c, bC_2p),

  Pxxr_e : doExpand1(Pxx_r, bC_2p),
  Pxyr_e : doExpand1(Pxy_r, bC_2p),
  Pxzr_e : doExpand1(Pxz_r, bC_2p),
  Pyyr_e : doExpand1(Pyy_r, bC_2p),
  Pyzr_e : doExpand1(Pyz_r, bC_2p),
  Pzzr_e : doExpand1(Pzz_r, bC_2p),

  Pxxl_r : subst(cv=1, Pxxl_e),
  Pxyl_r : subst(cv=1, Pxyl_e),
  Pxzl_r : subst(cv=1, Pxzl_e),
  Pyyl_r : subst(cv=1, Pyyl_e),
  Pyzl_r : subst(cv=1, Pyzl_e),
  Pzzl_r : subst(cv=1, Pzzl_e),

  Pxxc_l : subst(cv=-1, Pxxc_e),
  Pxyc_l : subst(cv=-1, Pxyc_e),
  Pxzc_l : subst(cv=-1, Pxzc_e),
  Pyyc_l : subst(cv=-1, Pyyc_e),
  Pyzc_l : subst(cv=-1, Pyzc_e),
  Pzzc_l : subst(cv=-1, Pzzc_e),

  Pxxc_r : subst(cv=1, Pxxc_e),
  Pxyc_r : subst(cv=1, Pxyc_e),
  Pxzc_r : subst(cv=1, Pxzc_e),
  Pyyc_r : subst(cv=1, Pyyc_e),
  Pyzc_r : subst(cv=1, Pyzc_e),
  Pzzc_r : subst(cv=1, Pzzc_e),

  Pxxr_l : subst(cv=-1, Pxxr_e),
  Pxyr_l : subst(cv=-1, Pxyr_e),
  Pxzr_l : subst(cv=-1, Pxzr_e),
  Pyyr_l : subst(cv=-1, Pyyr_e),
  Pyzr_l : subst(cv=-1, Pyzr_e),
  Pzzr_l : subst(cv=-1, Pzzr_e),

  /* State vector at interface */
  printf(fh, "  double q_lr[10] = {0.0}; ~%"),
  printf(fh, "  double q_cl[10] = {0.0}; ~%"),
  printf(fh, "  double q_cr[10] = {0.0}; ~%"),
  printf(fh, "  double q_rl[10] = {0.0}; ~%"),

  printf(fh, "  q_lr[0] = ~a; ~%", float(expand(rhol_r))),
  printf(fh, "  q_lr[1] = ~a; ~%", float(expand(rhouxl_r))),
  printf(fh, "  q_lr[2] = ~a; ~%", float(expand(rhouyl_r))),
  printf(fh, "  q_lr[3] = ~a; ~%", float(expand(rhouzl_r))),
  printf(fh, "  q_lr[4] = ~a + q_lr[1]*q_lr[1]/q_lr[0]; ~%", float(expand(Pxxl_r))),
  printf(fh, "  q_lr[5] = ~a + q_lr[1]*q_lr[2]/q_lr[0]; ~%", float(expand(Pxyl_r))),
  printf(fh, "  q_lr[6] = ~a + q_lr[1]*q_lr[3]/q_lr[0]; ~%", float(expand(Pxzl_r))),
  printf(fh, "  q_lr[7] = ~a + q_lr[2]*q_lr[2]/q_lr[0]; ~%", float(expand(Pyyl_r))),
  printf(fh, "  q_lr[8] = ~a + q_lr[2]*q_lr[3]/q_lr[0]; ~%", float(expand(Pyzl_r))),
  printf(fh, "  q_lr[9] = ~a + q_lr[3]*q_lr[3]/q_lr[0]; ~%", float(expand(Pzzl_r))),

  printf(fh, "  q_cl[0] = ~a; ~%", float(expand(rhoc_l))),
  printf(fh, "  q_cl[1] = ~a; ~%", float(expand(rhouxc_l))),
  printf(fh, "  q_cl[2] = ~a; ~%", float(expand(rhouyc_l))),
  printf(fh, "  q_cl[3] = ~a; ~%", float(expand(rhouzc_l))),
  printf(fh, "  q_cl[4] = ~a + q_cl[1]*q_cl[1]/q_cl[0]; ~%", float(expand(Pxxc_l))),
  printf(fh, "  q_cl[5] = ~a + q_cl[1]*q_cl[2]/q_cl[0]; ~%", float(expand(Pxyc_l))),
  printf(fh, "  q_cl[6] = ~a + q_cl[1]*q_cl[3]/q_cl[0]; ~%", float(expand(Pxzc_l))),
  printf(fh, "  q_cl[7] = ~a + q_cl[2]*q_cl[2]/q_cl[0]; ~%", float(expand(Pyyc_l))),
  printf(fh, "  q_cl[8] = ~a + q_cl[2]*q_cl[3]/q_cl[0]; ~%", float(expand(Pyzc_l))),
  printf(fh, "  q_cl[9] = ~a + q_cl[3]*q_cl[3]/q_cl[0]; ~%", float(expand(Pzzc_l))),

  printf(fh, "  q_cr[0] = ~a; ~%", float(expand(rhoc_r))),
  printf(fh, "  q_cr[1] = ~a; ~%", float(expand(rhouxc_r))),
  printf(fh, "  q_cr[2] = ~a; ~%", float(expand(rhouyc_r))),
  printf(fh, "  q_cr[3] = ~a; ~%", float(expand(rhouzc_r))),
  printf(fh, "  q_cr[4] = ~a + q_cr[1]*q_cr[1]/q_cr[0]; ~%", float(expand(Pxxc_r))),
  printf(fh, "  q_cr[5] = ~a + q_cr[1]*q_cr[2]/q_cr[0]; ~%", float(expand(Pxyc_r))),
  printf(fh, "  q_cr[6] = ~a + q_cr[1]*q_cr[3]/q_cr[0]; ~%", float(expand(Pxzc_r))),
  printf(fh, "  q_cr[7] = ~a + q_cr[2]*q_cr[2]/q_cr[0]; ~%", float(expand(Pyyc_r))),
  printf(fh, "  q_cr[8] = ~a + q_cr[2]*q_cr[3]/q_cr[0]; ~%", float(expand(Pyzc_r))),
  printf(fh, "  q_cr[9] = ~a + q_cr[3]*q_cr[3]/q_cr[0]; ~%", float(expand(Pzzc_r))),

  printf(fh, "  q_rl[0] = ~a; ~%", float(expand(rhor_l))),
  printf(fh, "  q_rl[1] = ~a; ~%", float(expand(rhouxr_l))),
  printf(fh, "  q_rl[2] = ~a; ~%", float(expand(rhouyr_l))),
  printf(fh, "  q_rl[3] = ~a; ~%", float(expand(rhouzr_l))),
  printf(fh, "  q_rl[4] = ~a + q_rl[1]*q_rl[1]/q_rl[0]; ~%", float(expand(Pxxr_l))),
  printf(fh, "  q_rl[5] = ~a + q_rl[1]*q_rl[2]/q_rl[0]; ~%", float(expand(Pxyr_l))),
  printf(fh, "  q_rl[6] = ~a + q_rl[1]*q_rl[3]/q_rl[0]; ~%", float(expand(Pxzr_l))),
  printf(fh, "  q_rl[7] = ~a + q_rl[2]*q_rl[2]/q_rl[0]; ~%", float(expand(Pyyr_l))),
  printf(fh, "  q_rl[8] = ~a + q_rl[2]*q_rl[3]/q_rl[0]; ~%", float(expand(Pyzr_l))),
  printf(fh, "  q_rl[9] = ~a + q_rl[3]*q_rl[3]/q_rl[0]; ~%", float(expand(Pzzr_l))),
  printf(fh, "~%"),


  /* Rotate to local coordinates at left and right interface */
  printf(fh, "  double q_lr_local[10] = {0.0}; ~%"),
  printf(fh, "  double q_cl_local[10] = {0.0}; ~%"),
  printf(fh, "  double q_cr_local[10] = {0.0}; ~%"),
  printf(fh, "  double q_rl_local[10] = {0.0}; ~%"),
  printf(fh, "  gkyl_wv_eqn_rotate_to_local(wv_eqn, geom_l->tau1[~a], geom_l->tau2[~a], geom_l->norm[~a], q_lr, q_lr_local); ~%", dir-1, dir-1, dir-1),
  printf(fh, "  gkyl_wv_eqn_rotate_to_local(wv_eqn, geom_l->tau1[~a], geom_l->tau2[~a], geom_l->norm[~a], q_cl, q_cl_local); ~%", dir-1, dir-1, dir-1),

  printf(fh, "  gkyl_wv_eqn_rotate_to_local(wv_eqn, geom_r->tau1[~a], geom_r->tau2[~a], geom_r->norm[~a], q_cr, q_cr_local); ~%", dir-1, dir-1, dir-1),
  printf(fh, "  gkyl_wv_eqn_rotate_to_local(wv_eqn, geom_r->tau1[~a], geom_r->tau2[~a], geom_r->norm[~a], q_rl, q_rl_local); ~%", dir-1, dir-1, dir-1),
  printf(fh, "~%"),

  /* Compute jumps for calculating fluctuations */
  printf(fh, "  double delta_l[10] = {0.0}; ~%"),
  printf(fh, "  double delta_r[10] = {0.0}; ~%"),

  printf(fh, "  delta_l[0] = q_cl_local[0] - q_lr_local[0]; ~%"),
  printf(fh, "  delta_l[1] = q_cl_local[1] - q_lr_local[1]; ~%"),
  printf(fh, "  delta_l[2] = q_cl_local[2] - q_lr_local[2]; ~%"),
  printf(fh, "  delta_l[3] = q_cl_local[3] - q_lr_local[3]; ~%"),
  printf(fh, "  delta_l[4] = q_cl_local[4] - q_lr_local[4]; ~%"),
  printf(fh, "  delta_l[5] = q_cl_local[5] - q_lr_local[5]; ~%"),
  printf(fh, "  delta_l[6] = q_cl_local[6] - q_lr_local[6]; ~%"),
  printf(fh, "  delta_l[7] = q_cl_local[7] - q_lr_local[7]; ~%"),
  printf(fh, "  delta_l[8] = q_cl_local[8] - q_lr_local[8]; ~%"),
  printf(fh, "  delta_l[9] = q_cl_local[9] - q_lr_local[9]; ~%"),

  printf(fh, "  delta_r[0] = q_rl_local[0] - q_cr_local[0]; ~%"),
  printf(fh, "  delta_r[1] = q_rl_local[1] - q_cr_local[1]; ~%"),
  printf(fh, "  delta_r[2] = q_rl_local[2] - q_cr_local[2]; ~%"),
  printf(fh, "  delta_r[3] = q_rl_local[3] - q_cr_local[3]; ~%"),
  printf(fh, "  delta_r[4] = q_rl_local[4] - q_cr_local[4]; ~%"),
  printf(fh, "  delta_r[5] = q_rl_local[5] - q_cr_local[5]; ~%"),
  printf(fh, "  delta_r[6] = q_rl_local[6] - q_cr_local[6]; ~%"),
  printf(fh, "  delta_r[7] = q_rl_local[7] - q_cr_local[7]; ~%"),
  printf(fh, "  delta_r[8] = q_rl_local[8] - q_cr_local[8]; ~%"),
  printf(fh, "  delta_r[9] = q_rl_local[9] - q_cr_local[9]; ~%"),  
  printf(fh, "~%"),

  /* Compute local waves and speeds at interface */
  printf(fh, "  double waves_l[50] = {0.0}; ~%"),
  printf(fh, "  double waves_r[50] = {0.0}; ~%"),  
  printf(fh, "  double speeds_l[5] = {0.0}; ~%"),
  printf(fh, "  double speeds_r[5] = {0.0}; ~%"),  

  printf(fh, "  double my_max_speed_l = gkyl_wv_eqn_waves(wv_eqn, GKYL_WV_HIGH_ORDER_FLUX, delta_l, q_lr_local, q_cl_local, waves_l, speeds_l); ~%"),
  printf(fh, "  double my_max_speed_r = gkyl_wv_eqn_waves(wv_eqn, GKYL_WV_HIGH_ORDER_FLUX, delta_r, q_cr_local, q_rl_local, waves_r, speeds_r); ~%"), 
  printf(fh, "~%"),

  /* rescale speeds */
  printf(fh, "  double lenr_l = geom_l->lenr[~a]; ~%", dir-1),
  printf(fh, "  speeds_l[0] *= lenr_l; ~%"),
  printf(fh, "  speeds_l[1] *= lenr_l; ~%"),
  printf(fh, "  speeds_l[2] *= lenr_l; ~%"),
  printf(fh, "  speeds_l[3] *= lenr_l; ~%"),
  printf(fh, "  speeds_l[4] *= lenr_l; ~%"),

  printf(fh, "  double lenr_r = geom_r->lenr[~a]; ~%", dir-1),
  printf(fh, "  speeds_r[0] *= lenr_r; ~%"),
  printf(fh, "  speeds_r[1] *= lenr_r; ~%"),
  printf(fh, "  speeds_r[2] *= lenr_r; ~%"),
  printf(fh, "  speeds_r[3] *= lenr_r; ~%"),
  printf(fh, "  speeds_r[4] *= lenr_r; ~%"),
  printf(fh, "~%"),

  /* Compute local fluctuations at interface */
  printf(fh, "  double amdq_l_local[10] = {0.0}; ~%"),
  printf(fh, "  double apdq_l_local[10] = {0.0}; ~%"),
  printf(fh, "  double amdq_r_local[10] = {0.0}; ~%"),
  printf(fh, "  double apdq_r_local[10] = {0.0}; ~%"),

  printf(fh, "  gkyl_wv_eqn_qfluct(wv_eqn, GKYL_WV_HIGH_ORDER_FLUX, q_lr_local, q_cl_local, waves_l, speeds_l, amdq_l_local, apdq_l_local); ~%"),
  printf(fh, "  gkyl_wv_eqn_qfluct(wv_eqn, GKYL_WV_HIGH_ORDER_FLUX, q_cr_local, q_rl_local, waves_r, speeds_r, amdq_r_local, apdq_r_local); ~%"),  
  printf(fh, "~%"),

  /* Rotate local fluctuations at interface back to compute final update */
  printf(fh, "  double amdq_l[10] = {0.0}; ~%"),
  printf(fh, "  double apdq_l[10] = {0.0}; ~%"),
  printf(fh, "  double amdq_r[10] = {0.0}; ~%"),
  printf(fh, "  double apdq_r[10] = {0.0}; ~%"),

  printf(fh, "  gkyl_wv_eqn_rotate_to_global(wv_eqn, geom_l->tau1[~a], geom_l->tau2[~a], geom_l->norm[~a], amdq_l_local, amdq_l); ~%", dir-1, dir-1, dir-1),
  printf(fh, "  gkyl_wv_eqn_rotate_to_global(wv_eqn, geom_l->tau1[~a], geom_l->tau2[~a], geom_l->norm[~a], apdq_l_local, apdq_l); ~%", dir-1, dir-1, dir-1),
  printf(fh, "  gkyl_wv_eqn_rotate_to_global(wv_eqn, geom_r->tau1[~a], geom_r->tau2[~a], geom_r->norm[~a], amdq_r_local, amdq_r); ~%", dir-1, dir-1, dir-1),
  printf(fh, "  gkyl_wv_eqn_rotate_to_global(wv_eqn, geom_r->tau1[~a], geom_r->tau2[~a], geom_r->norm[~a], apdq_r_local, apdq_r); ~%", dir-1, dir-1, dir-1),
  printf(fh, "~%"),

  /* Fetch u and Lax penalization at surface interfaces */
  printf(fh, "  double uxl_r = ux_surf_lr[0]; ~%"),
  printf(fh, "  double uxc_l = ux_surf_cl[0]; ~%"),
  printf(fh, "  double uxc_r = ux_surf_cr[0]; ~%"),
  printf(fh, "  double uxr_l = ux_surf_rl[0]; ~%"),
  printf(fh, "~%"),
  printf(fh, "  double uxl_r_sq = uxl_r*uxl_r; ~%"),
  printf(fh, "  double uxc_l_sq = uxc_l*uxc_l; ~%"),
  printf(fh, "  double uxc_r_sq = uxc_r*uxc_r; ~%"),
  printf(fh, "  double uxr_l_sq = uxr_l*uxr_l; ~%"),
  printf(fh, "~%"),  
  printf(fh, "  double uyl_r = uy_surf_lr[0]; ~%"),
  printf(fh, "  double uyc_l = uy_surf_cl[0]; ~%"),
  printf(fh, "  double uyc_r = uy_surf_cr[0]; ~%"),
  printf(fh, "  double uyr_l = uy_surf_rl[0]; ~%"),
  printf(fh, "~%"), 
  printf(fh, "  double uzl_r = uz_surf_lr[0]; ~%"),
  printf(fh, "  double uzc_l = uz_surf_cl[0]; ~%"),
  printf(fh, "  double uzc_r = uz_surf_cr[0]; ~%"),
  printf(fh, "  double uzr_l = uz_surf_rl[0]; ~%"),
  printf(fh, "~%"), 
  printf(fh, "  double max_speed_l = pkpm_lax_l[0]; ~%"),
  printf(fh, "  double max_speed_r = pkpm_lax_r[0]; ~%"),
  printf(fh, "~%"),

  avg_ux_l : 0.5*(uxc_l + uxl_r),
  avg_ux_r : 0.5*(uxr_l + uxc_r),

  avg_uy_l : 0.5*(uyc_l + uyl_r),
  avg_uy_r : 0.5*(uyr_l + uyc_r),

  avg_uz_l : 0.5*(uzc_l + uzl_r),
  avg_uz_r : 0.5*(uzr_l + uzc_r),

  avg_Pxx_l : 0.5*(Pxxc_l + Pxxl_r),
  avg_Pxx_r : 0.5*(Pxxr_l + Pxxc_r),

  avg_Pxy_l : 0.5*(Pxyc_l + Pxyl_r),
  avg_Pxy_r : 0.5*(Pxyr_l + Pxyc_r),

  avg_Pxz_l : 0.5*(Pxzc_l + Pxzl_r),
  avg_Pxz_r : 0.5*(Pxzr_l + Pxzc_r),

  avg_rho_l : 0.5*(rhoc_l + rhol_r),
  avg_rho_r : 0.5*(rhor_l + rhoc_r),

  jump_rho_l : 0.5*(rhoc_l - rhol_r),
  jump_rho_r : 0.5*(rhor_l - rhoc_r),

  Ghat_rho_l_exp : avg_rho_l*avg_ux_l - max_speed_l*jump_rho_l,
  Ghat_rho_r_exp : avg_rho_r*avg_ux_r - max_speed_r*jump_rho_r,

  Ghat_rhoux_l_exp : Ghat_rho_l_exp*avg_ux_l + avg_Pxx_l - 0.5*(apdq_l[1] - amdq_l[1]),
  Ghat_rhoux_r_exp : Ghat_rho_r_exp*avg_ux_r + avg_Pxx_r - 0.5*(apdq_r[1] - amdq_r[1]),

  Ghat_rhoux_l_exp : map(letsimp, Ghat_rhoux_l_exp),
  Ghat_rhoux_r_exp : map(letsimp, Ghat_rhoux_r_exp),

  Ghat_rhouy_l_exp : Ghat_rho_l_exp*avg_uy_l + avg_Pxy_l - 0.5*(apdq_l[2] - amdq_l[2]),
  Ghat_rhouy_r_exp : Ghat_rho_r_exp*avg_uy_r + avg_Pxy_r - 0.5*(apdq_r[2] - amdq_r[2]),

  Ghat_rhouz_l_exp : Ghat_rho_l_exp*avg_uz_l + avg_Pxz_l - 0.5*(apdq_l[3] - amdq_l[3]),
  Ghat_rhouz_r_exp : Ghat_rho_r_exp*avg_uz_r + avg_Pxz_r - 0.5*(apdq_r[3] - amdq_r[3]),

  printf(fh, "  Ghat_rhoux_l = ~a; ~%", float(expand(Ghat_rhoux_l_exp))),
  printf(fh, "  Ghat_rhouy_l = ~a; ~%", float(expand(Ghat_rhouy_l_exp))),
  printf(fh, "  Ghat_rhouz_l = ~a; ~%", float(expand(Ghat_rhouz_l_exp))),

  printf(fh, "  Ghat_rhoux_r = ~a; ~%", float(expand(Ghat_rhoux_r_exp))),
  printf(fh, "  Ghat_rhouy_r = ~a; ~%", float(expand(Ghat_rhouy_r_exp))),
  printf(fh, "  Ghat_rhouz_r = ~a; ~%", float(expand(Ghat_rhouz_r_exp))), 

  printf(fh, "~%"),

  incr_rhoux_l : calcInnerProdList(surfVars, 1, subst(cv=-1, bC), Ghat_rhoux_l),
  incr_rhoux_r : calcInnerProdList(surfVars, -1, subst(cv=1, bC), Ghat_rhoux_r),

  incr_rhouy_l : calcInnerProdList(surfVars, 1, subst(cv=-1, bC), Ghat_rhouy_l),
  incr_rhouy_r : calcInnerProdList(surfVars, -1, subst(cv=1, bC), Ghat_rhouy_r),

  incr_rhouz_l : calcInnerProdList(surfVars, 1, subst(cv=-1, bC), Ghat_rhouz_l),
  incr_rhouz_r : calcInnerProdList(surfVars, -1, subst(cv=1, bC), Ghat_rhouz_r),

  surfTerms : [incr_rhoux_l + incr_rhoux_r,incr_rhouy_l + incr_rhouy_r,incr_rhouz_l + incr_rhouz_r],
  for m : 1 thru 3 do (
    surf : surfTerms[m],
    writeCIncrExprsCollect1lhsc(lhs[m], dx1*surf),
    printf(fh, "~%")
  ),
  printf(fh, "  return 0.;~%"),  /* Return CFL frequency from volume kernel. */
  printf(fh, "~%"),
  printf(fh, "} ~%")
);

calcEulerPKPMUpdateInDir(dir, fh, funcNm, cdim, polyOrder) := block(
  [varsC, bC, bC_2p, NC, NC_2p, cv, surfVars, bSurf, nSurf, surfNodes, numNodes,
   ux_surf_lr_e, ux_surf_cl_e, ux_surf_cr_e, ux_surf_rl_e, 
   uy_surf_lr_e, uy_surf_cl_e, uy_surf_cr_e, uy_surf_rl_e, 
   uz_surf_lr_e, uz_surf_cl_e, uz_surf_cr_e, uz_surf_rl_e, 
   pkpm_lax_l_e, pkpm_lax_r_e, 
   rhouxl_e,rhouyl_e,rhouzl_e,rhol_e,
   rhouxc_e,rhouyc_e,rhouzc_e,rhoc_e,
   rhouxr_e,rhouyr_e,rhouzr_e,rhor_e,
   rhouxl_r,rhouyl_r,rhouzl_r,rhol_r,
   rhouxc_l,rhouyc_l,rhouzc_l,rhoc_l,
   rhouxc_r,rhouyc_r,rhouzc_r,rhoc_r,
   rhouxr_l,rhouyr_l,rhouzr_l,rhor_l,
   flux_rho_l_c, flux_rho_r_c, flux_rho_l_e, flux_rho_r_e, 
   jump_rhoux_l_c, jump_rhoux_r_c, jump_rhouy_l_c, jump_rhouy_r_c, jump_rhouz_l_c, jump_rhouz_r_c, 
   jump_rhoux_l_e, jump_rhoux_r_e, jump_rhouy_l_e, jump_rhouy_r_e, jump_rhouz_l_e, jump_rhouz_r_e,
   incr_rhoux_l,incr_rhoux_r,incr_rhouy_l,incr_rhouy_r,incr_rhouz_l,incr_rhouz_r],

  kill(varsC, bC),
  kill(varsC, bC_2p),

  /* Load basis of dimensionality requested. Loads a basis of order p and p/2*/
  [varsC,bC] : loadBasis("Tensor", cdim, polyOrder),
  [varsC,bC_2p] : loadBasis("Tensor", cdim, 2*polyOrder),

  /* Number of basis monomials. */
  NC : length(bC),
  NC_2p : length(bC_2p),

  printf(fh, "GKYL_CU_DH double ~a(const double *w, const double *dxv,
    const struct gkyl_wv_eqn *wv_eqn, const struct gkyl_wave_cell_geom *geom_l, const struct gkyl_wave_cell_geom *geom_r, 
    const double *vlasov_pkpm_moms_l, const double *vlasov_pkpm_moms_c, const double *vlasov_pkpm_moms_r,
    const double *pkpm_u_surf_l, const double *pkpm_u_surf_c, const double *pkpm_u_surf_r,
    const double *p_ij_l, const double *p_ij_c, const double *p_ij_r,
    const double *euler_pkpm_l, const double *euler_pkpm_c, const double *euler_pkpm_r, 
    const double *pkpm_lax, double* GKYL_RESTRICT out) ~%{ ~%", funcNm),
  printf(fh, "  // w[NDIM]:                Cell-center coordinates.~%"),
  printf(fh, "  // dxv[NDIM]:              Cell spacing.~%"),
  printf(fh, "  // wv_eqn:                 Wave equation for computing fluctuations at the interface for upwinding.~%"),
  printf(fh, "  // geom_l:                 Geometry for the left surface update.~%"),
  printf(fh, "  // geom_r:                 Geometry for the right surface update.~%"),
  printf(fh, "  // vlasov_pkpm_moms_l/c/r: Input pkpm moments in left/center/right cells.~%"),
  printf(fh, "  // pkpm_u_surf_l/c/r:        Input surface primitive variables [u_i, 3*T_ii/m] in left/center/right cells in each direction.~%"),
  printf(fh, "  // p_ij_l/c/r:             Input volume expansion of p_ij = (p_par - p_perp) b_i b_j + p_perp g_ij in left/center/right cells.~%"),
  printf(fh, "  // euler_pkpm_l/c/r:       Input [rho ux, rho uy, rho uz], Fluid input state vector in left/center/right cells.~%"),
  printf(fh, "  // pkpm_lax:               Surface expansion of pkpm Lax penalization: lambda_i = |u_i| + sqrt(3.0*T_ii/m).~%"),
  printf(fh, "  // out: Incremented output.~%"),
  printf(fh, "~%"),

  /* cv = variable in direction of surface update. */
  cv : varsC[dir],

  /* Surface variables to integrate over. */
  surfVars : delete(cv,varsC),

  /* Generate surface basis. this produces the ndim-1 orthogonal basis with no cv dependence. */
  bSurf : basisFromVars("Tensor",surfVars,polyOrder),
  NSurf : length(bSurf),
  bSurf_2p : basisFromVars("Tensor",surfVars,2*polyOrder),
  NSurf_2p : length(bSurf_2p),

  basisStr : sconcat("tensor_", cdim, "x", "_p", polyOrder),

  /* Surface nodes given by tensor product of Gauss-Legendre quadrature points */
  surfNodes : gaussOrd(polyOrder+1, cdim-1),
  numNodes : length(surfNodes),

  printf(fh, "  const double dx1 = 2.0/dxv[~a]; ~%", dir-1),
  printf(fh, "~%"),

  printf(fh, "  const double *rhoux_l = &euler_pkpm_l[~a]; ~%", 0*NC),
  printf(fh, "  const double *rhouy_l = &euler_pkpm_l[~a]; ~%", 1*NC),
  printf(fh, "  const double *rhouz_l = &euler_pkpm_l[~a]; ~%", 2*NC),
  printf(fh, "~%"),

  printf(fh, "  const double *rhoux_c = &euler_pkpm_c[~a]; ~%", 0*NC),
  printf(fh, "  const double *rhouy_c = &euler_pkpm_c[~a]; ~%", 1*NC),
  printf(fh, "  const double *rhouz_c = &euler_pkpm_c[~a]; ~%", 2*NC),
  printf(fh, "~%"),

  printf(fh, "  const double *rhoux_r = &euler_pkpm_r[~a]; ~%", 0*NC),
  printf(fh, "  const double *rhouy_r = &euler_pkpm_r[~a]; ~%", 1*NC),
  printf(fh, "  const double *rhouz_r = &euler_pkpm_r[~a]; ~%", 2*NC),
  printf(fh, "~%"),

  printf(fh, "  const double *rho_l = &vlasov_pkpm_moms_l[~a]; ~%", 0*NC_2p),
  printf(fh, "  const double *rho_c = &vlasov_pkpm_moms_c[~a]; ~%", 0*NC_2p),
  printf(fh, "  const double *rho_r = &vlasov_pkpm_moms_r[~a]; ~%", 0*NC_2p),
  printf(fh, "~%"),

  printf(fh, "  const double *Pxx_l = &p_ij_l[~a]; ~%", 0*NC_2p),
  printf(fh, "  const double *Pxy_l = &p_ij_l[~a]; ~%", 1*NC_2p),
  printf(fh, "  const double *Pxz_l = &p_ij_l[~a]; ~%", 2*NC_2p),
  printf(fh, "  const double *Pyy_l = &p_ij_l[~a]; ~%", 3*NC_2p),
  printf(fh, "  const double *Pyz_l = &p_ij_l[~a]; ~%", 4*NC_2p),
  printf(fh, "  const double *Pzz_l = &p_ij_l[~a]; ~%", 5*NC_2p),
  printf(fh, "~%"),

  printf(fh, "  const double *Pxx_c = &p_ij_c[~a]; ~%", 0*NC_2p),
  printf(fh, "  const double *Pxy_c = &p_ij_c[~a]; ~%", 1*NC_2p),
  printf(fh, "  const double *Pxz_c = &p_ij_c[~a]; ~%", 2*NC_2p),
  printf(fh, "  const double *Pyy_c = &p_ij_c[~a]; ~%", 3*NC_2p),
  printf(fh, "  const double *Pyz_c = &p_ij_c[~a]; ~%", 4*NC_2p),
  printf(fh, "  const double *Pzz_c = &p_ij_c[~a]; ~%", 5*NC_2p),
  printf(fh, "~%"),

  printf(fh, "  const double *Pxx_r = &p_ij_r[~a]; ~%", 0*NC_2p),
  printf(fh, "  const double *Pxy_r = &p_ij_r[~a]; ~%", 1*NC_2p),
  printf(fh, "  const double *Pxz_r = &p_ij_r[~a]; ~%", 2*NC_2p),
  printf(fh, "  const double *Pyy_r = &p_ij_r[~a]; ~%", 3*NC_2p),
  printf(fh, "  const double *Pyz_r = &p_ij_r[~a]; ~%", 4*NC_2p),
  printf(fh, "  const double *Pzz_r = &p_ij_r[~a]; ~%", 5*NC_2p),
  printf(fh, "~%"),

  /* Surface primitive variables are organized as:
     [ux_xl, ux_xr, uy_xl, uy_xr, uz_xl, uz_xr, 
      ux_yl, ux_yr, uy_yl, uy_yr, uz_yl, uz_yr, 
      ux_zl, ux_zr, uy_zl, uy_zr, uz_zl, uz_zr] */
  printf(fh, "  const double *ux_surf_lr = &pkpm_u_surf_l[~a]; ~%", (1 + (dir-1)*6)*NSurf),
  printf(fh, "  const double *uy_surf_lr = &pkpm_u_surf_l[~a]; ~%", (3 + (dir-1)*6)*NSurf),
  printf(fh, "  const double *uz_surf_lr = &pkpm_u_surf_l[~a]; ~%", (5 + (dir-1)*6)*NSurf),
  printf(fh, "~%"),

  printf(fh, "  const double *ux_surf_cl = &pkpm_u_surf_c[~a]; ~%", (0 + (dir-1)*6)*NSurf),
  printf(fh, "  const double *uy_surf_cl = &pkpm_u_surf_c[~a]; ~%", (2 + (dir-1)*6)*NSurf),
  printf(fh, "  const double *uz_surf_cl = &pkpm_u_surf_c[~a]; ~%", (4 + (dir-1)*6)*NSurf),
  printf(fh, "~%"),

  printf(fh, "  const double *ux_surf_cr = &pkpm_u_surf_c[~a]; ~%", (1 + (dir-1)*6)*NSurf),
  printf(fh, "  const double *uy_surf_cr = &pkpm_u_surf_c[~a]; ~%", (3 + (dir-1)*6)*NSurf),
  printf(fh, "  const double *uz_surf_cr = &pkpm_u_surf_c[~a]; ~%", (5 + (dir-1)*6)*NSurf),
  printf(fh, "~%"),

  printf(fh, "  const double *ux_surf_rl = &pkpm_u_surf_r[~a]; ~%", (0 + (dir-1)*6)*NSurf),
  printf(fh, "  const double *uy_surf_rl = &pkpm_u_surf_r[~a]; ~%", (2 + (dir-1)*6)*NSurf),
  printf(fh, "  const double *uz_surf_rl = &pkpm_u_surf_r[~a]; ~%", (4 + (dir-1)*6)*NSurf),
  printf(fh, "~%"),

  /* Surface Lax penalization organized as (note T_ii = 3*P_ii/rho, includes necessary factors) : 
     [|ux_xl| + sqrt(Txx_xl), |ux_xr| + sqrt(Txx_xr), 
      |uy_yl| + sqrt(Tyy_yl), |uy_yr| + sqrt(Tyy_yr),
      |uz_zl| + sqrt(Tzz_zl), |uz_zr| + sqrt(Tzz_zr)] */
  printf(fh, "  const double *pkpm_lax_l = &pkpm_lax[~a]; ~%", (0 + (dir-1)*2)*NSurf_2p),
  printf(fh, "  const double *pkpm_lax_r = &pkpm_lax[~a]; ~%", (1 + (dir-1)*2)*NSurf_2p),
  printf(fh, "~%"),

  printf(fh, "  double *outrhou0 = &out[~a]; ~%", 0*NC),
  printf(fh, "  double *outrhou1 = &out[~a]; ~%", 1*NC),
  printf(fh, "  double *outrhou2 = &out[~a]; ~%", 2*NC),
  printf(fh, "~%"),

  /* Intermediate variables in the surface basis for ease of computation */
  printf(fh, "  double flux_rho_l[~a] = {0.0}; ~%", NSurf_2p),
  printf(fh, "  double flux_rho_r[~a] = {0.0}; ~%", NSurf_2p),
  printf(fh, "~%"),
  printf(fh, "  double avg_p_ij_x_l[~a] = {0.0}; ~%", NSurf_2p),
  printf(fh, "  double avg_p_ij_x_r[~a] = {0.0}; ~%", NSurf_2p),
  printf(fh, "  double avg_p_ij_y_l[~a] = {0.0}; ~%", NSurf_2p),
  printf(fh, "  double avg_p_ij_y_r[~a] = {0.0}; ~%", NSurf_2p),
  printf(fh, "  double avg_p_ij_z_l[~a] = {0.0}; ~%", NSurf_2p),
  printf(fh, "  double avg_p_ij_z_r[~a] = {0.0}; ~%", NSurf_2p), 
  printf(fh, "~%"),

  /* Expand surface basis quantities u_i and pkpm Lax penalization */
  ux_surf_lr_e : doExpand1(ux_surf_lr, bSurf),
  ux_surf_cl_e : doExpand1(ux_surf_cl, bSurf),
  ux_surf_cr_e : doExpand1(ux_surf_cr, bSurf),
  ux_surf_rl_e : doExpand1(ux_surf_rl, bSurf),

  uy_surf_lr_e : doExpand1(uy_surf_lr, bSurf),
  uy_surf_cl_e : doExpand1(uy_surf_cl, bSurf),
  uy_surf_cr_e : doExpand1(uy_surf_cr, bSurf),
  uy_surf_rl_e : doExpand1(uy_surf_rl, bSurf),

  uz_surf_lr_e : doExpand1(uz_surf_lr, bSurf),
  uz_surf_cl_e : doExpand1(uz_surf_cl, bSurf),
  uz_surf_cr_e : doExpand1(uz_surf_cr, bSurf),
  uz_surf_rl_e : doExpand1(uz_surf_rl, bSurf),

  pkpm_lax_l_e : doExpand1(pkpm_lax_l, bSurf_2p),
  pkpm_lax_r_e : doExpand1(pkpm_lax_r, bSurf_2p),

  /* Expand the mass density and evaluate at the surfaces for use in the split-form momentum update */
  rhol_e : doExpand1(rho_l, bC_2p), 
  rhoc_e : doExpand1(rho_c, bC_2p), 
  rhor_e : doExpand1(rho_r, bC_2p), 

  rhol_r : subst(cv=1, rhol_e),
  rhoc_l : subst(cv=-1, rhoc_e),
  rhoc_r : subst(cv=1, rhoc_e),
  rhor_l : subst(cv=-1, rhor_e),

  /* Expand pressure tensor (all components, will select particular components based on direction) */
  Pxxl_e : doExpand1(Pxx_l, bC_2p),
  Pxyl_e : doExpand1(Pxy_l, bC_2p),
  Pxzl_e : doExpand1(Pxz_l, bC_2p),
  Pyyl_e : doExpand1(Pyy_l, bC_2p),
  Pyzl_e : doExpand1(Pyz_l, bC_2p),
  Pzzl_e : doExpand1(Pzz_l, bC_2p),

  Pxxc_e : doExpand1(Pxx_c, bC_2p),
  Pxyc_e : doExpand1(Pxy_c, bC_2p),
  Pxzc_e : doExpand1(Pxz_c, bC_2p),
  Pyyc_e : doExpand1(Pyy_c, bC_2p),
  Pyzc_e : doExpand1(Pyz_c, bC_2p),
  Pzzc_e : doExpand1(Pzz_c, bC_2p),

  Pxxr_e : doExpand1(Pxx_r, bC_2p),
  Pxyr_e : doExpand1(Pxy_r, bC_2p),
  Pxzr_e : doExpand1(Pxz_r, bC_2p),
  Pyyr_e : doExpand1(Pyy_r, bC_2p),
  Pyzr_e : doExpand1(Pyz_r, bC_2p),
  Pzzr_e : doExpand1(Pzz_r, bC_2p),

  Pxxl_r : subst(cv=1, Pxxl_e),
  Pxyl_r : subst(cv=1, Pxyl_e),
  Pxzl_r : subst(cv=1, Pxzl_e),
  Pyyl_r : subst(cv=1, Pyyl_e),
  Pyzl_r : subst(cv=1, Pyzl_e),
  Pzzl_r : subst(cv=1, Pzzl_e),

  Pxxc_l : subst(cv=-1, Pxxc_e),
  Pxyc_l : subst(cv=-1, Pxyc_e),
  Pxzc_l : subst(cv=-1, Pxzc_e),
  Pyyc_l : subst(cv=-1, Pyyc_e),
  Pyzc_l : subst(cv=-1, Pyzc_e),
  Pzzc_l : subst(cv=-1, Pzzc_e),

  Pxxc_r : subst(cv=1, Pxxc_e),
  Pxyc_r : subst(cv=1, Pxyc_e),
  Pxzc_r : subst(cv=1, Pxzc_e),
  Pyyc_r : subst(cv=1, Pyyc_e),
  Pyzc_r : subst(cv=1, Pyzc_e),
  Pzzc_r : subst(cv=1, Pzzc_e),

  Pxxr_l : subst(cv=-1, Pxxr_e),
  Pxyr_l : subst(cv=-1, Pxyr_e),
  Pxzr_l : subst(cv=-1, Pxzr_e),
  Pyyr_l : subst(cv=-1, Pyyr_e),
  Pyzr_l : subst(cv=-1, Pyzr_e),
  Pzzr_l : subst(cv=-1, Pzzr_e),

  /* Compute needed averages and jumps */
  avg_rho_l : 0.5*(rhol_r + rhoc_l),
  avg_rho_r : 0.5*(rhoc_r + rhor_l),

  jump_rho_l : 0.5*(rhoc_l - rhol_r),
  jump_rho_r : 0.5*(rhor_l - rhoc_r),

  avg_Pxx_l : 0.5*(Pxxc_l + Pxxl_r),
  avg_Pxx_r : 0.5*(Pxxr_l + Pxxc_r),

  avg_Pxy_l : 0.5*(Pxyc_l + Pxyl_r),
  avg_Pxy_r : 0.5*(Pxyr_l + Pxyc_r),

  avg_Pxz_l : 0.5*(Pxzc_l + Pxzl_r),
  avg_Pxz_r : 0.5*(Pxzr_l + Pxzc_r),

  avg_Pyy_l : 0.5*(Pyyc_l + Pyyl_r),
  avg_Pyy_r : 0.5*(Pyyr_l + Pyyc_r),

  avg_Pyz_l : 0.5*(Pyzc_l + Pyzl_r),
  avg_Pyz_r : 0.5*(Pyzr_l + Pyzc_r),

  avg_Pzz_l : 0.5*(Pzzc_l + Pzzl_r),
  avg_Pzz_r : 0.5*(Pzzr_l + Pzzc_r),

  if (dir = 1) then (
    /* Compute the flux of mass at the interface using split-form averaging in the x-direction */
    flux_rho_l_c : calcInnerProdList(surfVars, 1, bSurf_2p, avg_rho_l*0.5*(ux_surf_cl_e + ux_surf_lr_e) - pkpm_lax_l_e*jump_rho_l),
    flux_rho_r_c : calcInnerProdList(surfVars, 1, bSurf_2p, avg_rho_r*0.5*(ux_surf_rl_e + ux_surf_cr_e) - pkpm_lax_r_e*jump_rho_r),

    avg_p_ij_x_l_c : calcInnerProdList(surfVars, 1, bSurf_2p, avg_Pxx_l),
    avg_p_ij_x_r_c : calcInnerProdList(surfVars, 1, bSurf_2p, avg_Pxx_r),
    avg_p_ij_y_l_c : calcInnerProdList(surfVars, 1, bSurf_2p, avg_Pxy_l),
    avg_p_ij_y_r_c : calcInnerProdList(surfVars, 1, bSurf_2p, avg_Pxy_r),
    avg_p_ij_z_l_c : calcInnerProdList(surfVars, 1, bSurf_2p, avg_Pxz_l),
    avg_p_ij_z_r_c : calcInnerProdList(surfVars, 1, bSurf_2p, avg_Pxz_r)
  )
  else if (dir = 2) then (
    /* Compute the flux of mass at the interface using split-form averaging in the y-direction */
    flux_rho_l_c : calcInnerProdList(surfVars, 1, bSurf_2p, avg_rho_l*0.5*(uy_surf_cl_e + uy_surf_lr_e) - pkpm_lax_l_e*jump_rho_l),
    flux_rho_r_c : calcInnerProdList(surfVars, 1, bSurf_2p, avg_rho_r*0.5*(uy_surf_rl_e + uy_surf_cr_e) - pkpm_lax_r_e*jump_rho_r), 

    avg_p_ij_x_l_c : calcInnerProdList(surfVars, 1, bSurf_2p, avg_Pxy_l),
    avg_p_ij_x_r_c : calcInnerProdList(surfVars, 1, bSurf_2p, avg_Pxy_r),
    avg_p_ij_y_l_c : calcInnerProdList(surfVars, 1, bSurf_2p, avg_Pyy_l),
    avg_p_ij_y_r_c : calcInnerProdList(surfVars, 1, bSurf_2p, avg_Pyy_r),
    avg_p_ij_z_l_c : calcInnerProdList(surfVars, 1, bSurf_2p, avg_Pyz_l),
    avg_p_ij_z_r_c : calcInnerProdList(surfVars, 1, bSurf_2p, avg_Pyz_r)
  )
  else (
    /* Compute the flux of mass at the interface using split-form averaging in the z-direction */
    flux_rho_l_c : calcInnerProdList(surfVars, 1, bSurf_2p, avg_rho_l*0.5*(uz_surf_cl_e + uz_surf_lr_e) - pkpm_lax_l_e*jump_rho_l),
    flux_rho_r_c : calcInnerProdList(surfVars, 1, bSurf_2p, avg_rho_r*0.5*(uz_surf_rl_e + uz_surf_cr_e) - pkpm_lax_r_e*jump_rho_r), 

    avg_p_ij_x_l_c : calcInnerProdList(surfVars, 1, bSurf_2p, avg_Pxz_l),
    avg_p_ij_x_r_c : calcInnerProdList(surfVars, 1, bSurf_2p, avg_Pxz_r),
    avg_p_ij_y_l_c : calcInnerProdList(surfVars, 1, bSurf_2p, avg_Pyz_l),
    avg_p_ij_y_r_c : calcInnerProdList(surfVars, 1, bSurf_2p, avg_Pyz_r),
    avg_p_ij_z_l_c : calcInnerProdList(surfVars, 1, bSurf_2p, avg_Pzz_l),
    avg_p_ij_z_r_c : calcInnerProdList(surfVars, 1, bSurf_2p, avg_Pzz_r)    
  ),

  /* Write out the mass flux and average pressure in direction dir and expand in surface basis */
  writeCExprs1(flux_rho_l, flux_rho_l_c),
  printf(fh, "~%"),
  flush_output(fh),

  writeCExprs1(flux_rho_r, flux_rho_r_c),
  printf(fh, "~%"),
  flush_output(fh),

  flux_rho_l_e : doExpand1(flux_rho_l, bSurf_2p),
  flux_rho_r_e : doExpand1(flux_rho_r, bSurf_2p),

  writeCExprs1(avg_p_ij_x_l, avg_p_ij_x_l_c),
  printf(fh, "~%"),
  flush_output(fh),

  writeCExprs1(avg_p_ij_x_r, avg_p_ij_x_r_c),
  printf(fh, "~%"),
  flush_output(fh),

  avg_p_ij_x_l_e : doExpand1(avg_p_ij_x_l, bSurf_2p),
  avg_p_ij_x_r_e : doExpand1(avg_p_ij_x_r, bSurf_2p),

  writeCExprs1(avg_p_ij_y_l, avg_p_ij_y_l_c),
  printf(fh, "~%"),
  flush_output(fh),

  writeCExprs1(avg_p_ij_y_r, avg_p_ij_y_r_c),
  printf(fh, "~%"),
  flush_output(fh),

  avg_p_ij_y_l_e : doExpand1(avg_p_ij_y_l, bSurf_2p),
  avg_p_ij_y_r_e : doExpand1(avg_p_ij_y_r, bSurf_2p),    

  writeCExprs1(avg_p_ij_z_l, avg_p_ij_z_l_c),
  printf(fh, "~%"),
  flush_output(fh),

  writeCExprs1(avg_p_ij_z_r, avg_p_ij_z_r_c),
  printf(fh, "~%"),
  flush_output(fh),

  avg_p_ij_z_l_e : doExpand1(avg_p_ij_z_l, bSurf_2p),
  avg_p_ij_z_r_e : doExpand1(avg_p_ij_z_r, bSurf_2p),

  /* Evaluate fluctuations at quadrature points */
  printf(fh, "  double amdq_rhoux_l[~a] = {0.0}; ~%", NSurf),
  printf(fh, "  double apdq_rhoux_l[~a] = {0.0}; ~%", NSurf),
  printf(fh, "  double amdq_rhouy_l[~a] = {0.0}; ~%", NSurf),
  printf(fh, "  double apdq_rhouy_l[~a] = {0.0}; ~%", NSurf),
  printf(fh, "  double amdq_rhouz_l[~a] = {0.0}; ~%", NSurf),
  printf(fh, "  double apdq_rhouz_l[~a] = {0.0}; ~%", NSurf),
  printf(fh, "~%"),

  printf(fh, "  double amdq_rhoux_r[~a] = {0.0}; ~%", NSurf),
  printf(fh, "  double apdq_rhoux_r[~a] = {0.0}; ~%", NSurf),
  printf(fh, "  double amdq_rhouy_r[~a] = {0.0}; ~%", NSurf),
  printf(fh, "  double apdq_rhouy_r[~a] = {0.0}; ~%", NSurf),
  printf(fh, "  double amdq_rhouz_r[~a] = {0.0}; ~%", NSurf),
  printf(fh, "  double apdq_rhouz_r[~a] = {0.0}; ~%", NSurf),
  printf(fh, "~%"),

  printf(fh, "  double amdq_rhoux_quad_l[~a] = {0.0}; ~%", numNodes),
  printf(fh, "  double apdq_rhoux_quad_l[~a] = {0.0}; ~%", numNodes),
  printf(fh, "  double amdq_rhouy_quad_l[~a] = {0.0}; ~%", numNodes),
  printf(fh, "  double apdq_rhouy_quad_l[~a] = {0.0}; ~%", numNodes),
  printf(fh, "  double amdq_rhouz_quad_l[~a] = {0.0}; ~%", numNodes),
  printf(fh, "  double apdq_rhouz_quad_l[~a] = {0.0}; ~%", numNodes),
  printf(fh, "~%"),

  printf(fh, "  double amdq_rhoux_quad_r[~a] = {0.0}; ~%", numNodes),
  printf(fh, "  double apdq_rhoux_quad_r[~a] = {0.0}; ~%", numNodes),
  printf(fh, "  double amdq_rhouy_quad_r[~a] = {0.0}; ~%", numNodes),
  printf(fh, "  double apdq_rhouy_quad_r[~a] = {0.0}; ~%", numNodes),
  printf(fh, "  double amdq_rhouz_quad_r[~a] = {0.0}; ~%", numNodes),
  printf(fh, "  double apdq_rhouz_quad_r[~a] = {0.0}; ~%", numNodes),
  printf(fh, "~%"),

  /* Temporary variables for quadrature point evaluation */
  printf(fh, "  double q_lr[10] = {0.0}; ~%"),
  printf(fh, "  double q_cl[10] = {0.0}; ~%"),
  printf(fh, "  double q_cr[10] = {0.0}; ~%"),
  printf(fh, "  double q_rl[10] = {0.0}; ~%"),

  printf(fh, "  double q_lr_local[10] = {0.0}; ~%"),
  printf(fh, "  double q_cl_local[10] = {0.0}; ~%"),
  printf(fh, "  double q_cr_local[10] = {0.0}; ~%"),
  printf(fh, "  double q_rl_local[10] = {0.0}; ~%"),

  printf(fh, "  double delta_l[10] = {0.0}; ~%"),
  printf(fh, "  double delta_r[10] = {0.0}; ~%"),

  printf(fh, "  double my_max_speed_l = 0.0; ~%"),
  printf(fh, "  double my_max_speed_r = 0.0; ~%"),
  printf(fh, "  double lenr_l = 0.0; ~%"),
  printf(fh, "  double lenr_r = 0.0; ~%"),

  printf(fh, "  double waves_l[50] = {0.0}; ~%"),
  printf(fh, "  double waves_r[50] = {0.0}; ~%"),  
  printf(fh, "  double speeds_l[5] = {0.0}; ~%"),
  printf(fh, "  double speeds_r[5] = {0.0}; ~%"),  

  printf(fh, "  double amdq_l_local[10] = {0.0}; ~%"),
  printf(fh, "  double apdq_l_local[10] = {0.0}; ~%"),
  printf(fh, "  double amdq_r_local[10] = {0.0}; ~%"),
  printf(fh, "  double apdq_r_local[10] = {0.0}; ~%"),

  printf(fh, "  double amdq_l[10] = {0.0}; ~%"),
  printf(fh, "  double apdq_l[10] = {0.0}; ~%"),
  printf(fh, "  double amdq_r[10] = {0.0}; ~%"),
  printf(fh, "  double apdq_r[10] = {0.0}; ~%"),
  printf(fh, "~%"),

  for i : 1 thru numNodes do (
    /* Evaluate state variable at quadrature point */
    printf(fh, "  q_lr[0] = ~a_surfx~a_eval_quad_node_~a_r(rho_l); ~%", basisStr, dir, i-1),
    printf(fh, "  q_lr[1] = ~a_surfx~a_eval_quad_node_~a_r(rhoux_l); ~%", basisStr, dir, i-1),
    printf(fh, "  q_lr[2] = ~a_surfx~a_eval_quad_node_~a_r(rhouy_l); ~%", basisStr, dir, i-1),
    printf(fh, "  q_lr[3] = ~a_surfx~a_eval_quad_node_~a_r(rhouz_l); ~%", basisStr, dir, i-1),
    printf(fh, "  q_lr[4] = ~a_surfx~a_eval_quad_node_~a_r(Pxx_l) + q_lr[1]*q_lr[1]/q_lr[0]; ~%", basisStr, dir, i-1),
    printf(fh, "  q_lr[5] = ~a_surfx~a_eval_quad_node_~a_r(Pxy_l) + q_lr[1]*q_lr[2]/q_lr[0]; ~%", basisStr, dir, i-1),
    printf(fh, "  q_lr[6] = ~a_surfx~a_eval_quad_node_~a_r(Pxz_l) + q_lr[1]*q_lr[3]/q_lr[0]; ~%", basisStr, dir, i-1),
    printf(fh, "  q_lr[7] = ~a_surfx~a_eval_quad_node_~a_r(Pyy_l) + q_lr[2]*q_lr[2]/q_lr[0]; ~%", basisStr, dir, i-1),
    printf(fh, "  q_lr[8] = ~a_surfx~a_eval_quad_node_~a_r(Pyz_l) + q_lr[2]*q_lr[3]/q_lr[0]; ~%", basisStr, dir, i-1),
    printf(fh, "  q_lr[9] = ~a_surfx~a_eval_quad_node_~a_r(Pzz_l) + q_lr[3]*q_lr[3]/q_lr[0]; ~%", basisStr, dir, i-1),

    printf(fh, "  q_cl[0] = ~a_surfx~a_eval_quad_node_~a_l(rho_c); ~%", basisStr, dir, i-1),
    printf(fh, "  q_cl[1] = ~a_surfx~a_eval_quad_node_~a_l(rhoux_c); ~%", basisStr, dir, i-1),
    printf(fh, "  q_cl[2] = ~a_surfx~a_eval_quad_node_~a_l(rhouy_c); ~%", basisStr, dir, i-1),
    printf(fh, "  q_cl[3] = ~a_surfx~a_eval_quad_node_~a_l(rhouz_c); ~%", basisStr, dir, i-1),
    printf(fh, "  q_cl[4] = ~a_surfx~a_eval_quad_node_~a_l(Pxx_c) + q_cl[1]*q_cl[1]/q_cl[0]; ~%", basisStr, dir, i-1),
    printf(fh, "  q_cl[5] = ~a_surfx~a_eval_quad_node_~a_l(Pxy_c) + q_cl[1]*q_cl[2]/q_cl[0]; ~%", basisStr, dir, i-1),
    printf(fh, "  q_cl[6] = ~a_surfx~a_eval_quad_node_~a_l(Pxz_c) + q_cl[1]*q_cl[3]/q_cl[0]; ~%", basisStr, dir, i-1),
    printf(fh, "  q_cl[7] = ~a_surfx~a_eval_quad_node_~a_l(Pyy_c) + q_cl[2]*q_cl[2]/q_cl[0]; ~%", basisStr, dir, i-1),
    printf(fh, "  q_cl[8] = ~a_surfx~a_eval_quad_node_~a_l(Pyz_c) + q_cl[2]*q_cl[3]/q_cl[0]; ~%", basisStr, dir, i-1),
    printf(fh, "  q_cl[9] = ~a_surfx~a_eval_quad_node_~a_l(Pzz_c) + q_cl[3]*q_cl[3]/q_cl[0]; ~%", basisStr, dir, i-1),

    printf(fh, "  q_cr[0] = ~a_surfx~a_eval_quad_node_~a_r(rho_c); ~%", basisStr, dir, i-1),
    printf(fh, "  q_cr[1] = ~a_surfx~a_eval_quad_node_~a_r(rhoux_c); ~%", basisStr, dir, i-1),
    printf(fh, "  q_cr[2] = ~a_surfx~a_eval_quad_node_~a_r(rhouy_c); ~%", basisStr, dir, i-1),
    printf(fh, "  q_cr[3] = ~a_surfx~a_eval_quad_node_~a_r(rhouz_c); ~%", basisStr, dir, i-1),
    printf(fh, "  q_cr[4] = ~a_surfx~a_eval_quad_node_~a_r(Pxx_c) + q_cr[1]*q_cr[1]/q_cr[0]; ~%", basisStr, dir, i-1),
    printf(fh, "  q_cr[5] = ~a_surfx~a_eval_quad_node_~a_r(Pxy_c) + q_cr[1]*q_cr[2]/q_cr[0]; ~%", basisStr, dir, i-1),
    printf(fh, "  q_cr[6] = ~a_surfx~a_eval_quad_node_~a_r(Pxz_c) + q_cr[1]*q_cr[3]/q_cr[0]; ~%", basisStr, dir, i-1),
    printf(fh, "  q_cr[7] = ~a_surfx~a_eval_quad_node_~a_r(Pyy_c) + q_cr[2]*q_cr[2]/q_cr[0]; ~%", basisStr, dir, i-1),
    printf(fh, "  q_cr[8] = ~a_surfx~a_eval_quad_node_~a_r(Pyz_c) + q_cr[2]*q_cr[3]/q_cr[0]; ~%", basisStr, dir, i-1),
    printf(fh, "  q_cr[9] = ~a_surfx~a_eval_quad_node_~a_r(Pzz_c) + q_cr[3]*q_cr[3]/q_cr[0]; ~%", basisStr, dir, i-1),

    printf(fh, "  q_rl[0] = ~a_surfx~a_eval_quad_node_~a_l(rho_r); ~%", basisStr, dir, i-1),
    printf(fh, "  q_rl[1] = ~a_surfx~a_eval_quad_node_~a_l(rhoux_r); ~%", basisStr, dir, i-1),
    printf(fh, "  q_rl[2] = ~a_surfx~a_eval_quad_node_~a_l(rhouy_r); ~%", basisStr, dir, i-1),
    printf(fh, "  q_rl[3] = ~a_surfx~a_eval_quad_node_~a_l(rhouz_r); ~%", basisStr, dir, i-1),
    printf(fh, "  q_rl[4] = ~a_surfx~a_eval_quad_node_~a_l(Pxx_r) + q_rl[1]*q_rl[1]/q_rl[0]; ~%", basisStr, dir, i-1),
    printf(fh, "  q_rl[5] = ~a_surfx~a_eval_quad_node_~a_l(Pxy_r) + q_rl[1]*q_rl[2]/q_rl[0]; ~%", basisStr, dir, i-1),
    printf(fh, "  q_rl[6] = ~a_surfx~a_eval_quad_node_~a_l(Pxz_r) + q_rl[1]*q_rl[3]/q_rl[0]; ~%", basisStr, dir, i-1),
    printf(fh, "  q_rl[7] = ~a_surfx~a_eval_quad_node_~a_l(Pyy_r) + q_rl[2]*q_rl[2]/q_rl[0]; ~%", basisStr, dir, i-1),
    printf(fh, "  q_rl[8] = ~a_surfx~a_eval_quad_node_~a_l(Pyz_r) + q_rl[2]*q_rl[3]/q_rl[0]; ~%", basisStr, dir, i-1),
    printf(fh, "  q_rl[9] = ~a_surfx~a_eval_quad_node_~a_l(Pzz_r) + q_rl[3]*q_rl[3]/q_rl[0]; ~%", basisStr, dir, i-1),
    printf(fh, "~%"),

    /* Rotate to local coordinates at left and right interface */
    printf(fh, "  gkyl_wv_eqn_rotate_to_local(wv_eqn, geom_l->tau1[~a], geom_l->tau2[~a], geom_l->norm[~a], q_lr, q_lr_local); ~%", dir-1, dir-1, dir-1),
    printf(fh, "  gkyl_wv_eqn_rotate_to_local(wv_eqn, geom_l->tau1[~a], geom_l->tau2[~a], geom_l->norm[~a], q_cl, q_cl_local); ~%", dir-1, dir-1, dir-1),
    printf(fh, "  gkyl_wv_eqn_rotate_to_local(wv_eqn, geom_r->tau1[~a], geom_r->tau2[~a], geom_r->norm[~a], q_cr, q_cr_local); ~%", dir-1, dir-1, dir-1),
    printf(fh, "  gkyl_wv_eqn_rotate_to_local(wv_eqn, geom_r->tau1[~a], geom_r->tau2[~a], geom_r->norm[~a], q_rl, q_rl_local); ~%", dir-1, dir-1, dir-1),
    printf(fh, "~%"),

    /* Compute jumps for calculating fluctuations */
    printf(fh, "  delta_l[0] = q_cl_local[0] - q_lr_local[0]; ~%"),
    printf(fh, "  delta_l[1] = q_cl_local[1] - q_lr_local[1]; ~%"),
    printf(fh, "  delta_l[2] = q_cl_local[2] - q_lr_local[2]; ~%"),
    printf(fh, "  delta_l[3] = q_cl_local[3] - q_lr_local[3]; ~%"),
    printf(fh, "  delta_l[4] = q_cl_local[4] - q_lr_local[4]; ~%"),
    printf(fh, "  delta_l[5] = q_cl_local[5] - q_lr_local[5]; ~%"),
    printf(fh, "  delta_l[6] = q_cl_local[6] - q_lr_local[6]; ~%"),
    printf(fh, "  delta_l[7] = q_cl_local[7] - q_lr_local[7]; ~%"),
    printf(fh, "  delta_l[8] = q_cl_local[8] - q_lr_local[8]; ~%"),
    printf(fh, "  delta_l[9] = q_cl_local[9] - q_lr_local[9]; ~%"),

    printf(fh, "  delta_r[0] = q_rl_local[0] - q_cr_local[0]; ~%"),
    printf(fh, "  delta_r[1] = q_rl_local[1] - q_cr_local[1]; ~%"),
    printf(fh, "  delta_r[2] = q_rl_local[2] - q_cr_local[2]; ~%"),
    printf(fh, "  delta_r[3] = q_rl_local[3] - q_cr_local[3]; ~%"),
    printf(fh, "  delta_r[4] = q_rl_local[4] - q_cr_local[4]; ~%"),
    printf(fh, "  delta_r[5] = q_rl_local[5] - q_cr_local[5]; ~%"),
    printf(fh, "  delta_r[6] = q_rl_local[6] - q_cr_local[6]; ~%"),
    printf(fh, "  delta_r[7] = q_rl_local[7] - q_cr_local[7]; ~%"),
    printf(fh, "  delta_r[8] = q_rl_local[8] - q_cr_local[8]; ~%"),
    printf(fh, "  delta_r[9] = q_rl_local[9] - q_cr_local[9]; ~%"),  
    printf(fh, "~%"),

    /* Compute local waves and speeds at interface */
    printf(fh, "  my_max_speed_l = gkyl_wv_eqn_waves(wv_eqn, GKYL_WV_HIGH_ORDER_FLUX, delta_l, q_lr_local, q_cl_local, waves_l, speeds_l); ~%"),
    printf(fh, "  my_max_speed_r = gkyl_wv_eqn_waves(wv_eqn, GKYL_WV_HIGH_ORDER_FLUX, delta_r, q_cr_local, q_rl_local, waves_r, speeds_r); ~%"), 

    /* rescale speeds */
    printf(fh, "  lenr_l = geom_l->lenr[~a]; ~%", dir-1),
    printf(fh, "  speeds_l[0] *= lenr_l; ~%"),
    printf(fh, "  speeds_l[1] *= lenr_l; ~%"),
    printf(fh, "  speeds_l[2] *= lenr_l; ~%"),
    printf(fh, "  speeds_l[3] *= lenr_l; ~%"),
    printf(fh, "  speeds_l[4] *= lenr_l; ~%"),

    printf(fh, "  lenr_r = geom_r->lenr[~a]; ~%", dir-1),
    printf(fh, "  speeds_r[0] *= lenr_r; ~%"),
    printf(fh, "  speeds_r[1] *= lenr_r; ~%"),
    printf(fh, "  speeds_r[2] *= lenr_r; ~%"),
    printf(fh, "  speeds_r[3] *= lenr_r; ~%"),
    printf(fh, "  speeds_r[4] *= lenr_r; ~%"),
    printf(fh, "~%"),

    /* Compute local fluctuations at interface */
    printf(fh, "  gkyl_wv_eqn_qfluct(wv_eqn, GKYL_WV_HIGH_ORDER_FLUX, q_lr_local, q_cl_local, waves_l, speeds_l, amdq_l_local, apdq_l_local); ~%"),
    printf(fh, "  gkyl_wv_eqn_qfluct(wv_eqn, GKYL_WV_HIGH_ORDER_FLUX, q_cr_local, q_rl_local, waves_r, speeds_r, amdq_r_local, apdq_r_local); ~%"),  
    printf(fh, "~%"),

    /* Rotate local fluctuations back to global coordinates */
    printf(fh, "  gkyl_wv_eqn_rotate_to_global(wv_eqn, geom_l->tau1[~a], geom_l->tau2[~a], geom_l->norm[~a], amdq_l_local, amdq_l); ~%", dir-1, dir-1, dir-1),
    printf(fh, "  gkyl_wv_eqn_rotate_to_global(wv_eqn, geom_l->tau1[~a], geom_l->tau2[~a], geom_l->norm[~a], apdq_l_local, apdq_l); ~%", dir-1, dir-1, dir-1),
    printf(fh, "  gkyl_wv_eqn_rotate_to_global(wv_eqn, geom_r->tau1[~a], geom_r->tau2[~a], geom_r->norm[~a], amdq_r_local, amdq_r); ~%", dir-1, dir-1, dir-1),
    printf(fh, "  gkyl_wv_eqn_rotate_to_global(wv_eqn, geom_r->tau1[~a], geom_r->tau2[~a], geom_r->norm[~a], apdq_r_local, apdq_r); ~%", dir-1, dir-1, dir-1),
    printf(fh, "~%"),

    printf(fh, "  amdq_rhoux_quad_l[~a] = amdq_l[1]; ~%", i-1),
    printf(fh, "  apdq_rhoux_quad_l[~a] = apdq_l[1]; ~%", i-1),
    printf(fh, "  amdq_rhouy_quad_l[~a] = amdq_l[2]; ~%", i-1),
    printf(fh, "  apdq_rhouy_quad_l[~a] = apdq_l[2]; ~%", i-1),
    printf(fh, "  amdq_rhouz_quad_l[~a] = amdq_l[3]; ~%", i-1),
    printf(fh, "  apdq_rhouz_quad_l[~a] = apdq_l[3]; ~%", i-1),
    printf(fh, "~%"),

    printf(fh, "  amdq_rhoux_quad_r[~a] = amdq_r[1]; ~%", i-1),
    printf(fh, "  apdq_rhoux_quad_r[~a] = apdq_r[1]; ~%", i-1),
    printf(fh, "  amdq_rhouy_quad_r[~a] = amdq_r[2]; ~%", i-1),
    printf(fh, "  apdq_rhouy_quad_r[~a] = apdq_r[2]; ~%", i-1),
    printf(fh, "  amdq_rhouz_quad_r[~a] = amdq_r[3]; ~%", i-1),
    printf(fh, "  apdq_rhouz_quad_r[~a] = apdq_r[3]; ~%", i-1),
    printf(fh, "~%")
  ), 
  /* Create modal expansions of upwinded characteristics at quadrature points */
  printf(fh, "  ~a_upwind_quad_to_modal(amdq_rhoux_quad_l, amdq_rhoux_l); ~%", basisStr),
  printf(fh, "  ~a_upwind_quad_to_modal(amdq_rhouy_quad_l, amdq_rhouy_l); ~%", basisStr),
  printf(fh, "  ~a_upwind_quad_to_modal(amdq_rhouz_quad_l, amdq_rhouz_l); ~%", basisStr),
  printf(fh, "~%"),

  printf(fh, "  ~a_upwind_quad_to_modal(apdq_rhoux_quad_l, apdq_rhoux_l); ~%", basisStr),
  printf(fh, "  ~a_upwind_quad_to_modal(apdq_rhouy_quad_l, apdq_rhouy_l); ~%", basisStr),
  printf(fh, "  ~a_upwind_quad_to_modal(apdq_rhouz_quad_l, apdq_rhouz_l); ~%", basisStr),
  printf(fh, "~%"),

  printf(fh, "  ~a_upwind_quad_to_modal(amdq_rhoux_quad_r, amdq_rhoux_r); ~%", basisStr),
  printf(fh, "  ~a_upwind_quad_to_modal(amdq_rhouy_quad_r, amdq_rhouy_r); ~%", basisStr),
  printf(fh, "  ~a_upwind_quad_to_modal(amdq_rhouz_quad_r, amdq_rhouz_r); ~%", basisStr),
  printf(fh, "~%"),

  printf(fh, "  ~a_upwind_quad_to_modal(apdq_rhoux_quad_r, apdq_rhoux_r); ~%", basisStr),
  printf(fh, "  ~a_upwind_quad_to_modal(apdq_rhouy_quad_r, apdq_rhouy_r); ~%", basisStr),
  printf(fh, "  ~a_upwind_quad_to_modal(apdq_rhouz_quad_r, apdq_rhouz_r); ~%", basisStr),
  printf(fh, "~%"),

  /* Expand fluctuations in the surface basis */
  amdq_rhoux_l_e : doExpand1(amdq_rhoux_l, bSurf),
  amdq_rhouy_l_e : doExpand1(amdq_rhouy_l, bSurf),
  amdq_rhouz_l_e : doExpand1(amdq_rhouz_l, bSurf),

  apdq_rhoux_l_e : doExpand1(apdq_rhoux_l, bSurf),
  apdq_rhouy_l_e : doExpand1(apdq_rhouy_l, bSurf),
  apdq_rhouz_l_e : doExpand1(apdq_rhouz_l, bSurf),

  amdq_rhoux_r_e : doExpand1(amdq_rhoux_r, bSurf),
  amdq_rhouy_r_e : doExpand1(amdq_rhouy_r, bSurf),
  amdq_rhouz_r_e : doExpand1(amdq_rhouz_r, bSurf),

  apdq_rhoux_r_e : doExpand1(apdq_rhoux_r, bSurf),
  apdq_rhouy_r_e : doExpand1(apdq_rhouy_r, bSurf),
  apdq_rhouz_r_e : doExpand1(apdq_rhouz_r, bSurf),

  /* Compute the increments on the left and right from Ghat expansions */
  incr_rhoux_l : calcInnerProdList(surfVars, 1, subst(cv=-1, bC), flux_rho_l_e*0.5*(ux_surf_cl_e + ux_surf_lr_e) + avg_p_ij_x_l_e - 0.5*(apdq_rhoux_l_e - amdq_rhoux_l_e)),
  incr_rhoux_r : calcInnerProdList(surfVars, -1, subst(cv=1, bC), flux_rho_r_e*0.5*(ux_surf_rl_e + ux_surf_cr_e) + avg_p_ij_x_r_e - 0.5*(apdq_rhoux_r_e - amdq_rhoux_r_e)),

  incr_rhouy_l : calcInnerProdList(surfVars, 1, subst(cv=-1, bC), flux_rho_l_e*0.5*(uy_surf_cl_e + uy_surf_lr_e) + avg_p_ij_y_l_e - 0.5*(apdq_rhouy_l_e - amdq_rhouy_l_e)),
  incr_rhouy_r : calcInnerProdList(surfVars, -1, subst(cv=1, bC), flux_rho_r_e*0.5*(uy_surf_rl_e + uy_surf_cr_e) + avg_p_ij_y_r_e - 0.5*(apdq_rhouy_r_e - amdq_rhouy_r_e)),

  incr_rhouz_l : calcInnerProdList(surfVars, 1, subst(cv=-1, bC), flux_rho_l_e*0.5*(uz_surf_cl_e + uz_surf_lr_e) + avg_p_ij_z_l_e - 0.5*(apdq_rhouz_l_e - amdq_rhouz_l_e)),
  incr_rhouz_r : calcInnerProdList(surfVars, -1, subst(cv=1, bC), flux_rho_r_e*0.5*(uz_surf_rl_e + uz_surf_cr_e) + avg_p_ij_z_r_e - 0.5*(apdq_rhouz_r_e - amdq_rhouz_r_e)),

  surfTerms : [incr_rhoux_l + incr_rhoux_r,incr_rhouy_l + incr_rhouy_r,incr_rhouz_l + incr_rhouz_r],
  for m : 1 thru 3 do (
    surf : surfTerms[m],
    writeCIncrExprsCollect1lhsc(lhs[m], dx1*surf),
    printf(fh, "~%")
  ),
  printf(fh, "  return 0.;~%"),  /* Return CFL frequency from volume kernel. */
  printf(fh, "~%"),
  printf(fh, "} ~%")
);