/* Generate the header file for PKPM Vlasov LBO kernels. */

/* ...... USER INPUTS........ */

/* Tensor product basis. 
   Kinetic variables are p=2 */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
maxCdim_Tensor : 3$

/* ...... END OF USER INPUTS........ */

printPKPMPrototype(deco, ci, bStr, pi) := block([si],

  printf(fh, "~adouble lbo_pkpm_drag_vol_~ax1v_~a_p~a(const double *w, const double *dxv, const double *nuSum, const double *nuPrimMomsSum, const double *f, double* GKYL_RESTRICT out); ~%", deco, ci, bStr, pi),
  printf(fh, "~adouble lbo_pkpm_drag_boundary_surfvpar_~ax1v_~a_p~a(const double *w, const double *dxv, const double *nuSum, const double *nuPrimMomsSum, int edge, const double *fEdge, const double *fSkin, double* GKYL_RESTRICT out); ~%", deco, ci, bStr, pi),
  printf(fh, "~adouble lbo_pkpm_drag_surfvpar_~ax1v_~a_p~a(const double *w, const double *dxv, const double *nuSum, const double *nuPrimMomsSum, const double *fl, const double *fc, const double *fr, double* GKYL_RESTRICT out); ~%", deco, ci, bStr, pi),

  printf(fh, "~%"),

  printf(fh, "~adouble lbo_pkpm_diff_vol_~ax1v_~a_p~a(const double *w, const double *dxv, const double *nuSum, const double *nuPrimMomsSum, const double *f, double* GKYL_RESTRICT out); ~%", deco, ci, bStr, pi),
  printf(fh, "~adouble lbo_pkpm_diff_boundary_surfvpar_~ax1v_~a_p~a(const double *w, const double *dxv, const double *nuSum, const double *nuPrimMomsSum, int edge, const double *fEdge, const double *fSkin, double* GKYL_RESTRICT out); ~%", deco, ci, bStr, pi),
  printf(fh, "~adouble lbo_pkpm_diff_surfvpar_~ax1v_~a_p~a(const double *w, const double *dxv, const double *nuSum, const double *nuPrimMomsSum, const double *fl, const double *fc, const double *fr, double* GKYL_RESTRICT out); ~%", deco, ci, bStr, pi),

  printf(fh, "~%")
)$

/* ............ Write out the C header file ............ */

fh : openw("~/max-out/gkyl_lbo_pkpm_kernels.h")$
printf(fh, "#pragma once ~%")$
printf(fh, "#include <math.h> ~%")$
printf(fh, "#include <gkyl_util.h> ~%")$
printf(fh, "EXTERN_C_BEG ~%")$
printf(fh, "~%")$

decorator : "GKYL_CU_DH "$
for d : minCdim_Tensor thru maxCdim_Tensor do (
  for polyOrder : minPolyOrder_Tensor thru maxPolyOrder_Tensor do (
    printPKPMPrototype(decorator, d, "tensor", polyOrder)
  )
);
printf(fh, "EXTERN_C_END ~%")$

close(fh)$

/* ............ Finished writing out the C header file ............ */


