/* Generate the header file for PKPM (euler, primitive variables, aux functions) equation kernels. */

/* ...... USER INPUTS........ */

/* Tensor product basis. */
minPolyOrder_Tensor : 1$
maxPolyOrder_Tensor : 1$
minCdim_Tensor : 1$
maxCdim_Tensor : 3$

/* ...... END OF USER INPUTS........ */
clabels : ["x","y","z"]$

printPKPMPrototype(deco, ci, bStr, pi) := block([si],

  printf(fh, "~avoid pkpm_vars_pressure_~ax_~a_p~a(const double *bvar, const double *vlasov_pkpm_moms, double* GKYL_RESTRICT p_ij); ~%", deco, ci, bStr, 2*pi),
  printf(fh, "~avoid pkpm_vars_p_force_~ax_~a_p~a(const double *prim_c, const double *div_b, double* GKYL_RESTRICT pkpm_accel); ~%", deco, ci, bStr, 2*pi),

  printf(fh, "~aint pkpm_vars_set_~ax_~a_p~a(int count, struct gkyl_nmat *A, struct gkyl_nmat *rhs, 
  const double *vlasov_pkpm_moms, const double *p_ij, const double *pkpm_div_ppar); ~%", deco, ci, bStr, 2*pi),
  printf(fh, "~avoid pkpm_vars_copy_~ax_~a_p~a(int count, struct gkyl_nmat *x, double* GKYL_RESTRICT prim); ~%", deco, ci, bStr, 2*pi),

  printf(fh, "~avoid pkpm_vars_integrated_~ax_~a_p~a(const double *vlasov_pkpm_moms, const double *pkpm_u, double* GKYL_RESTRICT pkpm_int_vars); ~%", deco, ci, bStr, 2*pi),
  printf(fh, "~avoid pkpm_vars_io_~ax_~a_p~a(const double *vlasov_pkpm_moms, const double *pkpm_u, 
  const double* p_ij, const double* prim, const double* pkpm_accel, 
  double* GKYL_RESTRICT fluid_io, double* GKYL_RESTRICT pkpm_vars_io); ~%", deco, ci, bStr, 2*pi),

  printf(fh, "~%"), 

  printf(fh, "~aint pkpm_vars_u_set_~ax_~a_p~a(int count, struct gkyl_nmat *A, struct gkyl_nmat *rhs, 
  const double *vlasov_pkpm_moms, const double *euler_pkpm); ~%", deco, ci, bStr, pi),
  printf(fh, "~avoid pkpm_vars_u_copy_~ax_~a_p~a(int count, struct gkyl_nmat *x, double* GKYL_RESTRICT pkpm_u); ~%", deco, ci, bStr, pi),
  printf(fh, "~avoid pkpm_vars_u_surf_~ax_~a_p~a(const double* pkpm_u, double* GKYL_RESTRICT pkpm_u_surf); ~%", deco, ci, bStr, pi),

  printf(fh, "~avoid euler_pkpm_em_coupling_set_~ax_~a_p~a(int count, int num_species, double qbym[GKYL_MAX_SPECIES], double epsilon0, bool pkpm_field_static, double dt, 
  struct gkyl_nmat *A, struct gkyl_nmat *rhs, 
  const double *app_accel[GKYL_MAX_SPECIES], const double *ext_em, const double *app_current, 
  const double *vlasov_pkpm_moms[GKYL_MAX_SPECIES], const double* pkpm_u[GKYL_MAX_SPECIES], 
  double* GKYL_RESTRICT em); ~%", deco, ci, bStr, pi),
  printf(fh, "~avoid euler_pkpm_em_coupling_copy_~ax_~a_p~a(int count, int num_species, double qbym[GKYL_MAX_SPECIES], double epsilon0, struct gkyl_nmat *x, 
  const double *vlasov_pkpm_moms[GKYL_MAX_SPECIES], const double* pkpm_u[GKYL_MAX_SPECIES], 
  double* GKYL_RESTRICT euler_pkpm[GKYL_MAX_SPECIES], double* GKYL_RESTRICT em) ; ~%", deco, ci, bStr, pi),

  printf(fh, "~avoid euler_pkpm_explicit_source_~ax_~a_p~a(const double *qmem, const double *vlasov_pkpm_moms, const double *euler_pkpm, double* GKYL_RESTRICT out); ~%", deco, ci, bStr, pi),
  printf(fh, "~adouble euler_pkpm_vol_~ax_~a_p~a(const double *w, const double *dxv, 
  const double *vlasov_pkpm_moms, const double *pkpm_u, const double *p_ij, const double *euler_pkpm, double* GKYL_RESTRICT out); ~%", deco, ci, bStr, pi),

  printf(fh, "~%"),   
  for si : 1 thru ci do (
    printf(fh, "~avoid pkpm_vars_accel_~a_~ax_~a_p~a(const double *dxv, 
    const double *u_surf_l, const double *u_surf_c, const double *u_surf_r, 
    const double *prim_l, const double *prim_c, const double *prim_r, 
    const double *pkpm_u_c, const double *bvar_c, const double *nu_c, 
    double* GKYL_RESTRICT pkpm_lax, double* GKYL_RESTRICT pkpm_accel); ~%", deco, clabels[si], ci, bStr, 2*pi),  

    printf(fh, "~avoid euler_pkpm_limiter_~a_~ax_~a_p~a(double limiter_fac, const struct gkyl_wv_eqn *wv_eqn, 
    const struct gkyl_wave_cell_geom *geom, 
    const double *vlasov_pkpm_moms_l, const double *vlasov_pkpm_moms_c, const double *vlasov_pkpm_moms_r,
    const double *pkpm_u_l, const double *pkpm_u_c, const double *pkpm_u_r, 
    const double *p_ij_l, const double *p_ij_c, const double *p_ij_r, 
    double *euler_pkpm_l, double *euler_pkpm_c, double *euler_pkpm_r); ~%", deco, clabels[si], ci, bStr, pi),  

    printf(fh, "~adouble euler_pkpm_surf~a_~ax_~a_p~a(const double *w, const double *dxv, 
    const struct gkyl_wv_eqn *wv_eqn, const struct gkyl_wave_cell_geom *geom_l, const struct gkyl_wave_cell_geom *geom_r, 
    const double *vlasov_pkpm_moms_l, const double *vlasov_pkpm_moms_c, const double *vlasov_pkpm_moms_r,
    const double *pkpm_u_surf_l, const double *pkpm_u_surf_c, const double *pkpm_u_surf_r,
    const double *p_ij_l, const double *p_ij_c, const double *p_ij_r,
    const double *euler_pkpm_l, const double *euler_pkpm_c, const double *euler_pkpm_r, 
    const double *pkpm_lax, double* GKYL_RESTRICT out); ~%", deco, clabels[si], ci, bStr, pi)
  ),

  printf(fh, "~%")
)$

/* ............ Write out the C header file ............ */
fh : openw("~/max-out/gkyl_euler_pkpm_kernels.h")$

printf(fh, "#pragma once ~%")$
printf(fh, "#include <math.h> ~%")$
printf(fh, "#include <gkyl_mat.h> ~%")$
printf(fh, "#include <gkyl_wave_geom.h> ~%")$
printf(fh, "#include <gkyl_wv_eqn.h> ~%")$
printf(fh, "#include <gkyl_util.h> ~%")$
printf(fh, "EXTERN_C_BEG ~%")$
printf(fh, "~%")$

decorator : "GKYL_CU_DH "$
for d : minCdim_Tensor thru maxCdim_Tensor do (
  for polyOrder : minPolyOrder_Tensor thru maxPolyOrder_Tensor do (
    printPKPMPrototype(decorator, d, "tensor", polyOrder)
  )
);
printf(fh, "EXTERN_C_END ~%")$
close(fh)$
/* ............ Finished writing out the C header file ............ */