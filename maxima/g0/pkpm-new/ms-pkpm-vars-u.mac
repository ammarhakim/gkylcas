load("pkpm-new/pkpm-vars-u")$
load(stringproc)$
/* This script calls the functions which generate the kernels for calculating the 
   flow velocity using weak division required to update the PKPM system. 
   Note: the mass density rho is order 2*p, 
   but the momentum rhou and flow velocity are *only* order p. */


/* ...... USER INPUTS........ */

/* Tensor product basis. 
   Note: flow velocity is only p=1, while kinetic variables are p=2 */
minPolyOrder_Tensor : 1$
maxPolyOrder_Tensor : 1$
minCdim_Tensor : 1$
maxCdim_Tensor : 3$

/* ...... END OF USER INPUTS........ */

for d : minCdim_Tensor thru maxCdim_Tensor do (
  for polyOrder : minPolyOrder_Tensor thru maxPolyOrder_Tensor do (
    disp(printf(false,sconcat("Creating pkpm flow funcs "," ~axp~a"),d,polyOrder)),

    fname : sconcat("~/max-out/pkpm_vars_u_set_", d, "x_",  "tensor_p", polyOrder, ".c"),
    fh : openw(fname),
    funcName : sconcat("pkpm_vars_u_set_",  d, "x_",  "tensor_p", polyOrder),
    set_pkpm_u_i(fh, funcName, d, polyOrder),
    close(fh), 

    fname : sconcat("~/max-out/pkpm_vars_u_copy_", d, "x_",  "tensor_p", polyOrder, ".c"),
    fh : openw(fname),
    funcName : sconcat("pkpm_vars_u_copy_",  d, "x_", "tensor_p", polyOrder),
    copy_pkpm_u_i(fh, funcName, d, polyOrder),
    close(fh), 

    fname : sconcat("~/max-out/pkpm_vars_u_surf_", d, "x_",  "tensor_p", polyOrder, ".c"),
    fh : openw(fname),
    funcName : sconcat("pkpm_vars_u_surf_",  d, "x_", "tensor_p", polyOrder),
    pkpm_u_surf(fh, funcName, d, polyOrder),
    close(fh)    
  )
);
