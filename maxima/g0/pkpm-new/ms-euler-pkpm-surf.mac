load("pkpm-new/euler-pkpm-surf")$
load(stringproc)$
/* This script calls the functions which calculate the
   updates from the surface term due to an euler equation
   in the parallel-kinetic-perpendicular-moment (pkpm) model. */

/* ...... USER INPUTS........ */

/* Tensor product basis. */
minPolyOrder_Tensor : 1$
maxPolyOrder_Tensor : 1$
minCdim_Tensor : 1$
maxCdim_Tensor : 3$

/* ...... END OF USER INPUTS........ */
clabels : ["x","y","z"]$
for d : minCdim_Tensor thru maxCdim_Tensor do (
  for polyOrder : minPolyOrder_Tensor thru maxPolyOrder_Tensor do (
    disp(printf(false,sconcat("Creating surface euler pkpm model",bName[bInd]," ~axp~a"),d,polyOrder)),
    for dir : 1 thru d do ( 
      fname : sconcat("~/max-out/euler_pkpm_surf", clabels[dir], "_", d, "x_tensor_p", polyOrder, ".c"),
      fh : openw(fname),
      funcName : sconcat("euler_pkpm_surf", clabels[dir], "_", d, "x_tensor_p", polyOrder),
      printf(fh, "#include <gkyl_euler_pkpm_kernels.h> ~%"),
      if d = 1 then (
        printf(fh, "#include <gkyl_basis_tensor_~ax_p~a_surfx~a_eval_quad.h> ~%", d, polyOrder, dir),
        calcEulerPKPM1xUpdateInDir(dir, fh, funcName, d, polyOrder)
      )
      else (
        printf(fh, "#include <gkyl_basis_tensor_~ax_p~a_surfx~a_eval_quad.h> ~%", d, polyOrder, dir),
        printf(fh, "#include <gkyl_basis_tensor_~ax_p~a_upwind_quad_to_modal.h> ~%", d, polyOrder),
        calcEulerPKPMUpdateInDir(dir, fh, funcName, d, polyOrder)
      ),
      close(fh)
    )
  )
);
