/* 
   Generate sheath kernels used in gyrokinetics.

   Code called in this script is in files loaded below.
*/

/* Configuration space dimensions to generate kernels for,
   and velocity space dimensions for each configuration space
   dimension. */
cDims : [1,3]$
vDims : [[1,2],[2]]$

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 1$

/* Tensor order basis. */
minPolyOrder_Tensor : 2$  /* Don't generate p=1. */
maxPolyOrder_Tensor : 0$

bName        : ["ser", "tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$

edge : ["lower","upper"]$

load("gk-sheath/sheath-1x1v");
load("gk-sheath/sheath-1x2v");
load("gk-sheath/sheath-3x2v_new");

/* Create the sheath kernels. */
for bInd : 1 thru length(bName) do (
  minPolyOrderB : minPolyOrder[bInd],
  maxPolyOrderB : maxPolyOrder[bInd],
  for polyOrder : minPolyOrderB thru maxPolyOrderB do (
    fname : sconcat("~/max-out/bc_sheath_gyrokinetic_",bName[bInd],"_p",polyOrder,".c"),
    fh : openw(fname),
  
    printf(fh, "#include <gkyl_bc_sheath_gyrokinetic_kernels.h> ~%"),
    printf(fh, "~%"),
  
    for cI : 1 thru length(cDims) do (
      for vI : 1 thru length(vDims[cI]) do (
        print(sconcat("Creating bc_sheath_gyrokinetic ", cDims[cI], "x", vDims[cI][vI], "v", " ", bName[bInd], " p",polyOrder)),
        if cDims[cI]=1 and vDims[cI][vI]=1 then (
          genGkSheathKer1x1v(fh, cDims[cI], vDims[cI][vI], bName[bInd], polyOrder)
        ) else if cDims[cI]=1 and vDims[cI][vI]=2 then (
          genGkSheathKer1x2v(fh, cDims[cI], vDims[cI][vI], bName[bInd], polyOrder)
        ) else if cDims[cI]=3 and vDims[cI][vI]=2 and bName[bInd]="ser" then (
          genGkSheathKer3x2v(fh, cDims[cI], vDims[cI][vI], bName[bInd], polyOrder)
        )
      )
    ),
    close(fh)
  )
)$


/* Create a header file for sheath kernels. */
fh : openw("~/max-out/gkyl_bc_sheath_gyrokinetic_kernels.h")$
printf(fh, "#pragma once~%")$
printf(fh, "~%")$
printf(fh, "#include <gkyl_util.h>~%")$
printf(fh, "#include <math.h>~%")$
printf(fh, "~%")$

printf(fh, "// approximation for inverse Langevin function ~%")$
printf(fh, "GKYL_CU_DH~%")$
printf(fh, "static inline double invL(double x) {~%")$
printf(fh, "  // from Kroger ~%")$
printf(fh, "  return (3.*x-x*x*x*(6. + x*x - 2.*x*x*x*x)/5.)/(1.-x*x); ~%")$
printf(fh, "}~%")$
printf(fh, "~%")$
  
printf(fh, "EXTERN_C_BEG~%")$
printf(fh, "~%")$

for bInd : 1 thru length(bName) do (
  maxPolyOrderB : maxPolyOrder[bInd],
  for polyOrder : 1 thru maxPolyOrderB do (
    for cI : 1 thru length(cDims) do (
      for vI : 1 thru length(vDims[cI]) do (
        for sI : 1 thru length(edge) do (

          printf(fh, "GKYL_CU_DH void bc_sheath_gyrokinetic_reflectedf_~a_~ax~av_~a_p~a(const double wv, const double dv, const double vlowerSq, const double vupperSq, const double q2Dm, const double *phi, const double *phiWall, const double *f, double *fRefl); ~%", edge[sI], cDims[cI], vDims[cI][vI], bName[bInd], polyOrder)

        )
      )
    )
  )
)$

printf(fh, "~%")$
printf(fh, "EXTERN_C_END~%")$
printf(fh, "~%")$
close(fh)$
