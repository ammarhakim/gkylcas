/*
   Gyrokinetic sheath function for 3x2v kernel.
*/
load("modal-basis")$
load("out-scripts")$
load("nodal_operations/nodal_functions")$
load("utilities_gyrokinetic")$
load(stringproc)$
fpprec : 24$

genGkSheathKer2x2v(fh, cdim, vdim, basisFun, polyOrder) := block(
  [pdim,varsC,bC,varsP,bP,vSub,NP,varsV,vmap_e,vmapSq_e,vmap_prime_e,surfPerpVar,surfVars,surfVarsC,
   bSurf,bV,bVpar,bMu,bX,numBsurf,zvSurfVars,nodesX,nodesXMu,nodesMu,numNodesX,numNodesXMu,numNodesMu,
   bNMu,bNX,f_e,edge,surfPerpVal,sI,phiSheath_e,phiWall_e,deltaPhi_e,deltaPhi_q,vcutSq_q,fSurf_c,
   fSurf_e,fSurfX_q,fSurfXMu_q,fReflSurfX_e,vparLo_e,vparUp_e,i,fSurfX_c,fReflSurfXMu_e,j,nodeIdx,
   fSurfXMu_c,fSurfXMu_e,intLims,fReflSurfXMu_c,xBar_v,xSqBar_v,fReflSurfX_c,fReflSurf_c,fReflSurf_e,fRefl_c],

  pdim : cdim+vdim,

  /* Get desired basis. */
  [varsC,bC,varsP,bP,vSub] : loadGkBasis(basisFun, cdim, vdim, polyOrder),
  NP : length(bP),
  varsV : copylist(varsP),  for d : 1 thru cdim do (varsV : delete(varsC[d],varsV)),

  [vmap_e,vmapSq_e,vmap_prime_e] : expandVmapFields(varsP),

  /* Get name of last config space dimension, which is always assumed to be
     the direction parallel to the magnetic field (z). */
  surfPerpVar : varsC[cdim],
  surfVars  : delete(surfPerpVar, varsP),  /* = x,vpar,mu. */
  surfVarsC : delete(surfPerpVar, varsC),  /* = x. */

  /* Set up various bases with reduced dimension. */
  if polyOrder = 1 then (  /* Force p=1 to use hybrid basis. */
    bSurf : basisFromVars("gkhyb",surfVars,polyOrder),
    bV    : basisFromVars("gkhyb",[vpar,mu],polyOrder),
    bVpar : basisFromVars("gkhyb",[vpar],polyOrder),
    bMu   : basisFromVars("gkhyb",[mu],polyOrder),
    bX    : basisFromVars("gkhyb",[x],polyOrder)
  ) else (
    bSurf : basisFromVars(basisFun,surfVars,polyOrder),
    bV    : basisFromVars(basisFun,[vpar,mu],polyOrder),
    bVpar : basisFromVars(basisFun,[vpar],polyOrder),
    bMu   : basisFromVars(basisFun,[mu],polyOrder),
    bX    : basisFromVars(basisFun,[x],polyOrder)
  ),
  numBsurf : length(bSurf),

  zvSurfVars : append(surfVarsC, [mu]),  /* = x,mu. */
  /* Set up surface nodes. */
  if polyOrder = 1 then (  /* Force p=1 to use hybrid basis. */
    nodesX   : gaussOrdGkHyb(polyOrder+1, surfVarsC, []),
    nodesXMu : gaussOrdGkHyb(polyOrder+1, surfVarsC, [mu]),
    nodesMu  : gaussOrdGkHyb(polyOrder+1, [], [mu])
  ) else (
    nodesX   : gaussOrd(polyOrder+1, length(surfVarsC)),
    nodesXMu : gaussOrd(polyOrder+1, length(zvSurfVars)),
    nodesMu  : gaussOrd(polyOrder+1, length([mu]))
  ),
  numNodesX   : length(nodesX),
  numNodesXMu : length(nodesXMu),
  numNodesMu  : length(nodesMu),

  /* Get nodal basis sets. */
  if polyOrder = 1 then (  /* Force p=1 to use hybrid basis. */
    bNMu : getVarsNodalBasisWithNodesHyb("gkhyb", 0, 1, [mu], nodesMu),
    bNX  : getVarsNodalBasisWithNodesHyb("gkhyb", length(surfVarsC), polyOrder, surfVarsC, nodesX)
  ) else (
    bNMu : getVarsNodalBasisWithNodes("tensor", 1, polyOrder, [mu], nodesMu),
    bNX  : getVarsNodalBasisWithNodes("tensor", length(surfVarsC), polyOrder, surfVarsC, nodesX)
  ),

  /* Expand input distribution function f on phase-space basis using input coeffs. */
  f_e : doExpand1(f, bP),

  /* Generate separate kernels for lower/upper boundaries. */
  edge        : ["lower", "upper"],
  surfPerpVal : [-1, 1],

  for sI : 1 thru length(edge) do (

    printf(fh, "~%"),
    printf(fh, "GKYL_CU_DH void bc_sheath_gyrokinetic_reflectedf_~a_~ax~av_~a_p~a(const double *vmap, double q2Dm, const double *phi, const double *phiWall, const double *f, double *fRefl) ~%{ ~%", edge[sI], cdim, vdim, basisFun, polyOrder),

    /* Calculate expansion for deltaPhi = phiSheath - phiWall, evaluated at z=zVal,
       where zVal=-1 or 1 depending on if we're on the left or right edge of the global domain, respectively. */
    phiSheath_e : subst(surfPerpVar=surfPerpVal[sI],doExpand1(phi, bC)),
    phiWall_e   : subst(surfPerpVar=surfPerpVal[sI],doExpand1(phiWall, bC)),
    deltaPhi_e  : phiSheath_e - phiWall_e,

    /* Evaluate vcutSq = vcut^2 at x nodes. */
    deltaPhi_q : evAtNodes(deltaPhi_e, nodesX, surfVarsC),
    vcutSq_q   : gcfac(float(fullratsimp(-q2Dm*deltaPhi_q))),

    /* Evaluate f at the z surface. */
    fSurf_c : calcInnerProdList(surfVars, 1, bSurf, subst(surfPerpVar=surfPerpVal[sI], f_e)),
    fSurf_e : doExpand(fSurf_c, bSurf),

    /* Evaluate the surface f at nodes in x, and at x,mu nodes. Use Gauss-Legendre nodes
       for lack of something obviously better. */
    fSurfX_q   : evAtNodes(fSurf_e, nodesX, surfVarsC),
    fSurfXMu_q : evAtNodes(fSurf_e, nodesXMu, zvSurfVars),

    printf(fh, "  double vcutSq;~%"),
    printf(fh, "  double fReflSurfX[~a][~a] = {0.}; ~%", numNodesX, length(bV)),

    /* Reflected f at (x)_i nodes. */
    fReflSurfX_e : makelist(0,i,1,numNodesX),

    vparLo_e : subst(vpar=-1, vmap_e[1]),
    vparUp_e : subst(vpar=1, vmap_e[1]),
    printf(fh, "  double vparLo = ~a;~%", float(expand(vparLo_e))),
    printf(fh, "  double vparUp = ~a;~%", float(expand(vparUp_e))),
    printf(fh, "~%"),

    printf(fh, "  double vparAbsSqLo = vmap[0]>0.? vparLo*vparLo : vparUp*vparUp;~%"),
    printf(fh, "  double vparAbsSqUp = vmap[0]>0.? vparUp*vparUp : vparLo*vparLo;~%"),
    printf(fh, "~%"),

    for i : 1 thru numNodesX do (
      printf(fh, "  // node (x)_~a ~%", i-1),

      /* Write vcut^2 at this node. */
      printf(fh, "  vcutSq = ~a;~%", vcutSq_q[i]),
      printf(fh, "~%"),

      /* If vcut^2 at this node is below all vpar^2 in this cell, BC at this node should be absorbing
         so set coefficients of fRefl at this (x) node to 0 (no reflection from this node). */
      printf(fh, "  if (vcutSq <= vparAbsSqLo) { // absorb (no reflection)~%"),
      printf(fh, "~%"),

      writeCExprsWithZeros1(fReflSurfX[i-1], makelist(0.,j,1,length(bV))),
      printf(fh, "~%"),

      /* If vcut^2 at this node is above the max vpar^2 in this cell, BC at this node should be full reflection */
      /* so set coefficients of fRefl at this (x) node to coefficients of f. */
      printf(fh, "  } else if (vcutSq > vparAbsSqUp) { // full reflection~%"),
      printf(fh, "~%"),

      /* Project f at this (x) node onto vpar,mu basis (bV). */
      fSurfX_c : gcfac(fullratsimp(calcInnerProdList(varsV, 1, bV, fSurfX_q[i]))),
      /* Full reflection: set fRefl bZVpMu coefficients to f bZVpMu coefficients at this (x)_i node. */
      writeCExprsNoExpand1(fReflSurfX[i-1], fSurfX_c),
      printf(fh, "~%"),

      /* If vcut^2 at this node is in this cell, BC at this node is partial reflection. */
      printf(fh, "  } else { // partial reflection~%"),
      printf(fh, "~%"),

      /* Reflected f at (x)_i,(mu)_j nodes. Only need to store it for one
         (x)_i node at a time. */
      fReflSurfXMu_e : makelist(0,j,1,numNodesMu),

      printf(fh, "    double wv = ~a;~%", float(fullratsimp((vparUp + vparLo)/2))),
      printf(fh, "    double dv = ~a;~%", float(fullratsimp(vparUp - vparLo))),
      printf(fh, "~%"),

      printf(fh, "    double xBar, xSqBar;~%"),
      printf(fh, "    double fReflSurfXMu[~a][~a] = {0.}; ~%", numNodesMu, length(bVpar)),
      printf(fh, "~%"),

      /* Loop over (mu)_j nodes. */
      for j : 1 thru numNodesMu do (
        printf(fh, "    // node (mu)_~a ~%", j-1),

        nodeIdx : sublist_indices(nodesXMu, lambda([x], x[1]=nodesX[i][1] and x[2]=nodesMu[j][1]))[1],

        /* Project f at this (x)_i,(mu)_j node onto vpar basis (bVpar). */
        fSurfXMu_c : gcfac(fullratsimp(calcInnerProdList([vpar], 1, bVpar, fSurfXMu_q[nodeIdx]))),
        fSurfXMu_e : doExpand(fSurfXMu_c, bVpar),

        printf(fh, "    if (wv > 0.) {~%"),
        printf(fh, "      // vcut in logical space.~%"),
        printf(fh, "      double vcut_l = 2.*(sqrt(vcutSq)-wv)/dv;~%"),
        printf(fh, "~%"),

        intLims : [[-1,vcut_l]],
        fReflSurfXMu_c : calcInnerProdListGen([vpar], intLims, 1, bVpar, fSurfXMu_e),
        tempVars1 : [],
        tempVars1 : writeCExprs1noPowers(fReflSurfXMu[j-1], fReflSurfXMu_c, [vcut_l], tempVars1),
        printf(fh, "~%"),
    
        printf(fh, "    } else {~%"),
        printf(fh, "      // vcut in logical space.~%"),
        printf(fh, "      double vcut_l = 2.*(-sqrt(vcutSq)-wv)/dv;~%"),
        printf(fh, "~%"),

        intLims : [[vcut_l,1]],
        fReflSurfXMu_c : calcInnerProdListGen([vpar], intLims, 1, bVpar, fSurfXMu_e),
        tempVars2 : [],
        tempVars2 : writeCExprs1noPowers(fReflSurfXMu[j-1], fReflSurfXMu_c, [vcut_l], tempVars2),
        printf(fh, "~%"),

        printf(fh, "    }~%"),
        printf(fh, "~%"),
    
        /* Evaluate realizability. In 1D a function is realization if
           |bar{x}|<=1 and |bar{x^2}|<=1, where bar{g}=int g*f dx/int f dx. */
        xBar_v   : gcfac(float(fReflSurfXMu[j-1][1]/(sqrt(3)*fReflSurfXMu[j-1][0]))),
        xSqBar_v : gcfac(float((2*sqrt(5)*fReflSurfXMu[j-1][2]+5*fReflSurfXMu[j-1][0])/(15*fReflSurfXMu[j-1][0]))),
        printf(fh, "  // If the cut distribution f(vpar), where vpar \in [-1,vcut_l] or [vcut_l/1],~%"),
        printf(fh, "  // has a cell average < 0, set to 0. If it's >0 but not realizable, set to p=0.~%"),
        printf(fh, "  xBar = ~a;~%", xBar_v),
        printf(fh, "  xSqBar = ~a;~%", xSqBar_v),
        printf(fh, "  if (fReflSurfXMu[~a][0]<0.) {~%",j-1),
        writeCExprsWithZeros1(fReflSurfXMu[j-1], makelist(0,i,1,length(bVpar))),
        printf(fh, "  } else if (fabs(xBar)>=1. || fabs(xSqBar)>=1.) {~%"),
        writeCExprsWithZeros1(fReflSurfXMu[j-1], makelist(0,i,1,length(bVpar))),
        printf(fh, "  }~%"),
        printf(fh, "~%"),

        /* Expand vpar coefficients in vpar basis at this (x)_i (mu)_j node. */
        fReflSurfXMu_e[j] : doExpand1(fReflSurfXMu[j-1], bVpar)

      ), /* End of j loop over (mu)_j nodes. */

      /* We have the vpar expansion at each (mu)_j node. Reconstruct the mu
         modal representation via a nodal-modal conversion. */
      fReflSurfX_c    : calcInnerProdList([mu], 1, bMu, doExpand(fReflSurfXMu_e, bNMu)),
      fReflSurfX_e[i] : doExpand(fReflSurfX_c, bMu),

      /* Project fRefl at this (x)_i node onto vpar,mu basis (bV). */
      fReflSurfX_c : gcfac(fullratsimp(calcInnerProdList(varsV, 1, bV, fReflSurfX_e[i]))),
      writeCExprsNoExpand1(fReflSurfX[i-1], fReflSurfX_c),
      printf(fh, "~%"),

      printf(fh, "  }~%"), /* End of partial reflection else. */
      printf(fh, "~%"),

      /* Expansion in vpar,mu of fReflSurf at each (x)_i node. */
      fReflSurfX_e[i] : doExpand1(fReflSurfX[i-1], bV)

    ), /* End of i loop over (x)_i nodes. */

    /* We have the vpar-mu at each (x)_i node. Reconstruct the x-y modal
       representation via a noda-modal conversion. */
    fReflSurf_c : calcInnerProdList(surfVarsC, 1, bX, doExpand(fReflSurfX_e, bNX)),
    fReflSurf_e : doExpand(fReflSurf_c, bX),

    /* Project expansion onto phase-space basis bP. */
    fRefl_c : gcfac(fullratsimp(calcInnerProdList(varsP, 1, bP, fReflSurf_e))),
    /* Write coefficients. */
    writeCExprsWithZerosNoExpand1(fRefl, fRefl_c),

    printf(fh, "}~%")

  )

)$
