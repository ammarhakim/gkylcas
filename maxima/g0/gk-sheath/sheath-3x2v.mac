/* 
   Gyrokinetic sheath function for 3x2v kernel.
*/
load("modal-basis");
load("out-scripts");
load("nodal_operations/nodal_functions")$
load(stringproc)$
fpprec : 24$

genGkSheathKer3x2v(fh, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,vSub,NP,bXY,bVp,bZVp,bZMu,bZVpMu,NVp,zVar,surfVars,surfVarsC,zmuVars,edge,zVal,
   phiSheath_e,phiWall_e,deltaPhi_e,quad,nodesXY,nodesZMu,numNodesXY,numNodesZMu,basisNodalZMu,basisNodalXY,deltaPhiQ,
   f_e,fXYQ_e,fReflXYQ_e,vcutSqQ,fXYQ_ZVpMu_c,fReflXYZMuQ_e,fXYZMuQ_e,fXYZMuQ_Vp_c,xbar,
   beta,fReflfacs,fReflXYQ_ZVpMu_e,fReflXYQ_ZVpMu_c,fRefl_e,fRefl_c],

  /* Get desired basis. */
  [varsC,bC,varsP,bP,vSub] : loadGkBasis(basisFun, cdim, vdim, polyOrder),
  NP : length(bP),

  /* Set up various bases with reduced dimension. */
  if polyOrder = 1 then (  /* Force p=1 to use hybrid basis. */
    bXY    : basisFromVars("gkhyb",[x,y],polyOrder),
    bVp    : basisFromVars("gkhyb",[vpar],polyOrder),
    bZVp   : basisFromVars("gkhyb",[z,vpar],polyOrder),
    bZMu   : basisFromVars("gkhyb",[z,mu],polyOrder),
    bZVpMu : basisFromVars("gkhyb",[z,vpar,mu],polyOrder)
  ) else (
    bXY    : basisFromVars(basisFun,[x,y],polyOrder),
    bVp    : basisFromVars(basisFun,[vpar],polyOrder),
    bZVp   : basisFromVars(basisFun,[z,vpar],polyOrder),
    bZMu   : basisFromVars(basisFun,[z,mu],polyOrder),
    bZVpMu : basisFromVars(basisFun,[z,vpar,mu],polyOrder)
  ),
  NVp : length(bVp),
  
  /* Get name of last config space dimension, which is always assumed
     to be the direction parallel to the magnetic field (z). */
  zVar      : varsC[cdim],
  surfVars  : delete(zVar, varsP),   /* = x,y,vpar,mu. */
  surfVarsC : delete(zVar, varsC),   /* = x,y. */
  zmuVars   : [zVar, mu],             

  /* Set up quadrature nodes. */
  if polyOrder = 1 then (  /* Force p=1 to use hybrid basis. */
    nodesXY  : gaussOrdGkHyb(1+1, surfVarsC, []),
    nodesZMu : gaussOrdGkHyb(1+1, [zmuVars[1]], [zmuVars[2]])
  ) else (
    nodesXY  : gaussOrd(polyOrder+1, 2),
    nodesZMu : gaussOrd(polyOrder+1, 2) 
  ),
  numNodesXY  : length(nodesXY),
  numNodesZMu : length(nodesZMu),

  /* Get (quadrature) nodal basis sets. */
  if polyOrder = 1 then (  /* Force p=1 to use hybrid basis. */
    basisNodalZMu : getVarsNodalBasisWithNodesHyb("gkhyb", 1, 1, zmuVars, nodesZMu),
    basisNodalXY  : getVarsNodalBasisWithNodesHyb("gkhyb", 1, 1, surfVarsC, nodesXY)
  ) else (
    basisNodalZMu : getVarsNodalBasisWithNodes("tensor", 2, polyOrder, zmuVars, nodesZMu),
    basisNodalXY  : getVarsNodalBasisWithNodes("tensor", 2, polyOrder, surfVarsC, nodesXY)
  ),
    
  /* Generate separate kernels for lower/upper boundaries. */
  edge : ["lower", "upper"],
  zVal : [-1, 1],

  for sI : 1 thru length(edge) do (

    printf(fh, "~%"),
    printf(fh, "GKYL_CU_DH void bc_sheath_gyrokinetic_reflectedf_~a_~ax~av_~a_p~a(const double wv, const double dv, const double vlowerSq, const double vupperSq, const double q2Dm, const double *phi, const double *phiWall, const double *f, double *fRefl) ~%{ ~%", edge[sI], cdim, vdim, basisFun, polyOrder),
    
    /* Calculate expansion for deltaPhi = phiSheath - phiWall, evaluated at z=zVal, 
       where zVal=-1 or 1 depending on if we're on the left or right edge of the global domain, respectively. */
    phiSheath_e : subst(zVar=zVal[sI],doExpand1(phi, bC)),
    phiWall_e   : subst(zVar=zVal[sI],doExpand1(phiWall, bC)),
    deltaPhi_e  : phiSheath_e - phiWall_e,
    
    /* Evaluate deltaPhi at x,y nodes. */
    deltaPhiQ : evAtNodes(deltaPhi_e, nodesXY, surfVarsC),
    
    /* Expand input distribution function f on phase-space basis using input coeffs. */
    f_e : doExpand1(f, bP),
    /* Evaluate f at x,y nodes, so that fXYQ_e[i] = fXYQ_e[i](z,vpar,mu)
       for each (x,y)=node[i]. */
    fXYQ_e : evAtNodes(f_e, nodesXY, surfVarsC),
    
    /* Some naming conventions: 
       fXYQ_e = f evaluated at x,y nodes (XYQ), expansion in remaining variables (_e)
       fXYZMuQ_e = f evaluated at x,y,z,mu nodes (XYZMuQ), expansion in remaining variables (_e)
       fXYQ_ZVpMu_c = f evaluated at x,y nodes (XYQ), then projected onto (z,vpar,mu) basis resulting in coefficients (_ZVpMu_c)
    */
    
    /* Allocate empty vector for reflected distribution function evaluated at x,y nodes. */
    fReflXYQ_e : makelist(0,i,1,numNodesXY),
    
    /* Variable declarations/allocations. */
    printf(fh, "  double vcutSq_i; double xc, b, xbarVal, fac; ~%"),
    printf(fh, "  double fReflXYQuad[~a][~a]; ~%", numNodesXY, length(bZVpMu)),
    printf(fh, "  double fReflXYZMuQuad[~a][~a]; ~%", numNodesXY, length(bZVp)),
    printf(fh, "  ~%~%"),
    
    /* Evaluate vcutSqQ = vcut^2 at x,y nodes (deltaPhiQ is evaluated at x,y nodes). */
    vcutSqQ : gcfac(float(fullratsimp(-q2Dm*deltaPhiQ))),
    
    /* For each (x,y)_i node, determine and write coefficients fReflXYQuad for z,vpar,mu modal basis (bZVpMu). */
    /* Loop over (x,y)_i nodes. */
    for i : 1 thru numNodesXY do (
      printf(fh, "// node (x,y)_~a ~%", i),
    
      /* Write vcut^2 at this node. */
      printf(fh, "  vcutSq_i = ~a; ~%", vcutSqQ[i]),
    
      /* If vcut^2 at this node is below all vpar^2 in this cell, BC at this node should be absorbing 
         so set coefficients of fRefl at this (x,y)_i node to 0 (no reflection from this node). */
      printf(fh, "  if(vcutSq_i <= vlowerSq) { // absorb (no reflection) ~%"),
      writeCExprsWithZerosNoExpand1(fReflXYQuad[i-1], makelist(0.,j,1,length(bZVpMu))),
    
      /* If vcut^2 at this node is above all vpar^2 in this cell, BC at this node should be full reflection */
      /* so set coefficients of fRefl at this (x,y)_i node to coefficients of f. */
      printf(fh, "  } else if(vcutSq_i > vupperSq) { // full reflection ~%"),
      /* Project f at this (x,y)_i node onto z,vpar,mu basis (bZVpMu). */
      fXYQ_ZVpMu_c : gcfac(fullratsimp(innerProd([z,vpar,mu], 1, bZVpMu, fXYQ_e[i]))),
      /* Full reflection: set fRefl bZVpMu coefficients to f bZVpMu coefficients at this (x,y)_i node. */
      writeCExprsNoExpand1(fReflXYQuad[i-1], fXYQ_ZVpMu_c),
    
      /* If vcut^2 at this node is in this cell, BC at this node is partial reflection. */
      printf(fh, "  } else { // partial reflection ~%"),
    
        /* Allocate empty vector for reflected distribution function also evaluated at z,mu nodes. */
        fReflXYZMuQ_e : makelist(0, i,1,numNodesZMu),
        /* Recall that fXYQ_e[i]=fXYQ_e[i](z,vpar,mu) is an expansion in z,vpar,mu evaluated at the current (x,y)_i node.
           Now evaluate fXYQ_e[i] at z,mu nodes, so that fXYZMuQ_e[j]=fXYZMuQ_e[j](vpar) 
           is evaluated a (z,mu)_j nodes (for the current (x,y)_i node). */
        fXYZMuQ_e : evAtNodes(fXYQ_e[i], nodesZMu, zmuVars),
    
        /* Loop over (z,mu)_j nodes. */
        for j : 1 thru numNodesZMu do (
          /* Project f at this (x,y)_i,(z,mu)_j node onto vpar basis (bVp). */
          fXYZMuQ_Vp_c : gcfac(fullratsimp(innerProd([vpar], 1, bVp, fXYZMuQ_e[j]))),
    
          /* Evaluate xbar = slope/cell_avg = f1/f0/sqrt(3) from vpar basis
             coefficients (recall that this is being done at every (x,y,z,mu)_i
             node). */
          xbar : gcfac(float(fXYZMuQ_Vp_c[2]/sqrt(3)/fXYZMuQ_Vp_c[1])),
          /* Print as xbarVal. */
          printf(fh, "  xbarVal = ~a; ~%", xbar),
          printf(fh, "  // if f is not realizable, no reflection from this node ~%"),
          /* If abs(xbar)>=1, then f is not realizable. Use .95 as conservative threshold. */ 
          /* Also not realizable if cell_avg is negative. */
          printf(fh, "  if(~a <= 0. || fabs(xbarVal)>=.95) { ~%", gcfac(float(fXYZMuQ_Vp_c[1]))),
          /* If not realizable, set reflection coeffs to zero so that no reflection from this node. */
          writeCExprsWithZerosNoExpand1(fReflXYZMuQuad[j-1],makelist(0.,j,1,NVp)),
    
          /* If f is realizable at this node...*/
          printf(fh, "  } else {~%"),
          /* Compute and write beta = L^-1(xbar), where L^-1=invL is the inverse Langevin function. */
          beta : invL(xbarVal),
          printf(fh, "   b = ~a; ~%", beta),
    
          /* Compute partial reflection scaling factors for coefficients
             of f, based on exponential construction. */
          printf(fh, "   if(wv > 0) {~%"),
          printf(fh, "    xc = 2.*(sqrt(vcutSq_i)-wv)/dv; ~%"),
          fReflfacs : [ "b>500? 0. : b<-500? 1. : fabs(b)<2e-8? (1.+xc)/2. : (exp(b*xc)-exp(-b))/(2.*sinh(b))", 
                        "b>500? 0. : b<-500? 1. : fabs(b)<2e-8? (1.+xc)/2. : ((b*xc-1)*exp(b*xc)+(b+1)*exp(-b))/2./(b*cosh(b)-sinh(b))",
                        "b>500? 0. : b<-500? 1. : fabs(b)<2e-8? (1.+xc)/2. : (((b*(3*b*xc*xc-(6*xc+b))+6)*exp(b*xc))/3-(2*(b*b+3*(b+1))*exp(-b))/3)/(-4*b*cosh(b) + 4/3*(3 + b*b)*sinh(b))"],
          for k : 1 thru NVp do (
          printf(fh, "    fac = ~a; ~%", fReflfacs[k]),
          printf(fh, "    if(isnan(fac) || isinf(fac)) {printf(\"reflect fac = \%G, b=\%G, xbarVal=\%G \\n\", fac, b, xbarVal); fac=0.;} ~%"),
          printf(fh, "    fReflXYZMuQuad[~a][~a] = (~a)*fac; ~%", j-1, k-1, gcfac(float(fXYZMuQ_Vp_c[k])))
          ),
          printf(fh, "   } else { ~%"),
          printf(fh, "    xc = 2.*(-sqrt(vcutSq_i)-wv)/dv; ~%"),
          fReflfacs : [ "b>500? 1. : b<-500? 0. : fabs(b)<2e-8? (1.-xc)/2. : (exp(b)-exp(b*xc))/(2.*sinh(b))", 
                        "b>500? 1. : b<-500? 0. : fabs(b)<2e-8? (1.-xc)/2. : ((b-1)*exp(b)-(b*xc-1)*exp(b*xc))/2./(b*cosh(b)-sinh(b))", 
                        "b>500? 1. : b<-500? 0. : fabs(b)<2e-8? (1.-xc)/2. : ((2*(b*b+3*(1-b))*exp(b))/3-((b*(3*b*xc*xc-(6*xc+b))+6)*exp(b*xc))/3)/(-4*b*cosh(b) + 4/3*(3 + b*b)*sinh(b))"],
          for k : 1 thru NVp do (
          printf(fh, "    fac = ~a; ~%", fReflfacs[k]),
          printf(fh, "    if(isnan(fac) || isinf(fac)) {printf(\"reflect fac = \%G, b=\%G, xbarVal=\%G \\n\", fac, b, xbarVal); fac=0.;} ~%"),
          printf(fh, "    fReflXYZMuQuad[~a][~a] = (~a)*fac; ~%", j-1, k-1, gcfac(float(fXYZMuQ_Vp_c[k])))
          ),
          printf(fh, "   } ~%"),
          printf(fh, "  } ~%"),
          /* We just printed bVp coefficients of fRefl at (x,y)_i (z,mu)_j
             node. Now expand in vpar using those coeffs. */
          fReflXYZMuQ_e[j] : makelist(fReflXYZMuQuad[j-1][k-1],k,1,NVp) . bVp
        ), /* End of j loop over (z,mu)_j nodes. */
    
        /* Calculate expansion in z,vpar,mu. */
        fReflXYQ_ZVpMu_c : calcInnerProdList(zmuVars, 1, bZMu, doExpand(fReflXYZMuQ_e, basisNodalZMu)),
        fReflXYQ_ZVpMu_e : doExpand(fReflXYQ_ZVpMu_c, bZMu),
    
        /* Project fRefl at this (x,y)_i node onto z,vpar,mu basis (bZVpMu). */
        fReflXYQ_ZVpMu_c : gcfac(fullratsimp(innerProd([z,vpar,mu], 1, bZVpMu, fReflXYQ_ZVpMu_e))),
        /* Write coefficients at this (x,y)_i node. */
        writeCExprsNoExpand1(fReflXYQuad[i-1], fReflXYQ_ZVpMu_c),
    
      printf(fh, "  } ~%~%"), /* End of partial reflection else. */
    
      /* Expansion in z,vpar,mu of fRefl[i] at each (x,y)_i node. */
      fReflXYQ_e[i] : makelist(fReflXYQuad[i-1][j-1],j,1,length(bZVpMu)) . bZVpMu,
      printf(fh, " ~%")
    ),
    
    /* Calculate expansion (now in all vars). */
    fRefl_c : calcInnerProdList(surfVarsC, 1, bXY, doExpand(fReflXYQ_e, basisNodalXY)),
    fRefl_e : doExpand(fRefl_c, bXY),

    /* Project expansion onto phase-space basis bP. */
    fRefl_c : gcfac(fullratsimp(innerProd(varsP, 1, bP, fRefl_e))),
    /* Write coefficients. */
    writeCExprsWithZerosNoExpand1(fRefl, fRefl_c),
    printf(fh, "}~%")

  )
)$

