/* 
   Gyrokinetic sheath function for 1x2v kernel.
*/
load("modal-basis");
load("out-scripts");
load("nodal_operations/nodal_functions")$
load(stringproc)$
fpprec : 24$

genGkSheathKer1x2v(fh, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,vSub,NP,bVp,bZVp,bZMu,NVp,zVar,zmuVars,edge,zVal,phiSheath_e,phiWall_e,
   deltaPhi_e,quad,nodesZMu,numNodesZMu,basisNodalZMu,f_e,vcutSqQ,fRefl_c,fReflZMuQ_e,fZMuQ_e,fZMuQ_Vp_c,
   xbar,beta,fReflfacs,fReflQ_ZVpMu_e,fReflQ_ZVpMu_c],

  /* Get desired basis. */
  [varsC,bC,varsP,bP,vSub] : loadGkBasis(basisFun, cdim, vdim, polyOrder),
  NP : length(bP),

  /* Set up various bases with reduced dimension. */
  if polyOrder = 1 then (  /* Force p=1 to use hybrid basis. */
    bVp  : basisFromVars("gkhyb",[vpar],polyOrder),
    bZVp : basisFromVars("gkhyb",[x,vpar],polyOrder),
    bZMu : basisFromVars("gkhyb",[x,mu],polyOrder)
  ) else (
    bVp  : basisFromVars(basisFun,[vpar],polyOrder),
    bZVp : basisFromVars(basisFun,[x,vpar],polyOrder),
    bZMu : basisFromVars(basisFun,[x,mu],polyOrder)
  ),
  NVp : length(bVp),
  
  /* Get name of last config space dimension, which is always assumed to be
     the direction parallel to the magnetic field (z). */
  zVar    : varsC[cdim],
  zmuVars : [zVar, mu],

  /* Set up quadrature nodes. */
  if polyOrder = 1 then  /* Force p=1 to use hybrid basis. */
    nodesZMu : gaussOrdGkHyb(1+1, [zmuVars[1]], [zmuVars[2]])
  else
    nodesZMu : gaussOrd(polyOrder+1, 2),
  numNodesZMu : length(nodesZMu),

  /* Get (quadrature) nodal basis sets. */
  if polyOrder = 1 then  /* Force p=1 to use hybrid basis. */
    basisNodalZMu : getVarsNodalBasisWithNodesHyb("gkhyb", 1, 1, zmuVars, nodesZMu)
  else
    basisNodalZMu : getVarsNodalBasisWithNodes("tensor", 2, polyOrder, zmuVars, nodesZMu),

  /* Generate separate kernels for lower/upper boundaries. */
  edge : ["lower", "upper"],
  zVal : [-1, 1],

  for sI : 1 thru length(edge) do (
  
    printf(fh, "~%"),
    printf(fh, "void bc_sheath_gyrokinetic_reflectedf_~a_~ax~av_~a_p~a(const double wv, const double dv, const double vlowerSq, const double vupperSq, const double q2Dm, const double *phi, const double *phiWall, const double *f, double *fRefl) ~%{ ~%", edge[sI], cdim, vdim, basisFun, polyOrder),
    
    /* Calculate expansion for deltaPhi = phiSheath - phiWall, evaluated at z=zVal, 
       where zVal=-1 or 1 depending on if we're on the left or right edge of the global domain, respectively. */
    phiSheath_e : subst(zVar=zVal[sI],doExpand1(phi, bC)),
    phiWall_e   : subst(zVar=zVal[sI],doExpand1(phiWall, bC)),
    deltaPhi_e  : phiSheath_e - phiWall_e,
    
    /* Expand input distribution function f on phase-space basis using input coeffs. */
    f_e : doExpand1(f, bP),
    
    /* Some naming conventions: 
       fZMuQ_e = f evaluated at z,mu nodes (ZMuQ), expansion in remaining variables (_e).
       fQ_ZVpMu_c = f projected onto (z,vpar,mu) basis resulting in coefficients (_ZVpMu_c).
    */
    
    /* Variable declarations/allocations. */
    printf(fh, "  double vcutSq; double xc, b, xbarVal, fac; ~%"),
    printf(fh, "  double fReflZMuQuad[~a][~a]; ~%", numNodesZMu, length(bZVp)),
    printf(fh, "  ~%~%"),
    
    /* Evaluate vcutSqQ = vcut^2. q2Dm = q*2/m. */
    vcutSqQ : gcfac(float(fullratsimp(-q2Dm*deltaPhi_e))),
    
    /* Write vcut^2 at boundary. */
    printf(fh, "  vcutSq = ~a; ~%", vcutSqQ),
    
    /* If vcut^2 at this node is below all vpar^2 in this cell, BC at this node should be absorbing 
       so set coefficients of fRefl at this (x,y)_i node to 0 (no reflection from this node). */
    printf(fh, "  if(vcutSq <= vlowerSq) { // absorb (no reflection) ~%"),
    writeCExprsWithZerosNoExpand1(fRefl, makelist(0.,j,1,NP)),
    
    /* If vcut^2 at this node is above all vpar^2 in this cell, BC at this node should be full reflection. */
    /* So set coefficients of fRefl to coefficients of f. */
    printf(fh, "  } else if (vcutSq > vupperSq) { // full reflection ~%"),
    /* Project f onto z,vpar basis (bZVp). */
    fRefl_c : gcfac(fullratsimp(innerProd(varsP, 1, bP, f_e))),
    /* Full reflection: set fRefl coefficients to f coefficients. */
    writeCExprsNoExpand1(fRefl, fRefl_c),
    
    /* If vcut^2 at this node is in this cell, BC at this node is partial reflection. */
    printf(fh, "  } else { // partial reflection ~%"),
    
      /* Allocate empty vector for reflected distribution function also evaluated at z,mu nodes. */
      fReflZMuQ_e : makelist(0,i,1,numNodesZMu),
      /* f_e is an expansion in z,vpar,mu;
         now evaluate f_e at z,mu nodes
         so fZMuQ_e[j] = fZQMu_e[j](vpar) 
         is evaluated at the (z,mu)_j nodes */
      fZMuQ_e : evAtNodes(f_e, nodesZMu, zmuVars),
      
      /* Loop over (z,mu)_j nodes. */
      for j : 1 thru numNodesZMu do (
        /* Project f at this (z,mu)_j node onto vpar basis (bVp). */
        fZMuQ_Vp_c : gcfac(fullratsimp(innerProd([vpar], 1, bVp, fZMuQ_e[j]))),
    
        /* Evaluate xbar = slope/cell_avg = f1/f0/sqrt(3) from vpar basis
           coefficients (recall that this is being done at every (x,y,z,mu)_i node). */
        xbar : gcfac(float(fZMuQ_Vp_c[2]/sqrt(3)/fZMuQ_Vp_c[1])),
        /* Print as xbarVal. */
        printf(fh, "  xbarVal = ~a; ~%", xbar),
        printf(fh, "  // if f is not realizable, no reflection from this node ~%"),
        /* If abs(xbar)>=1, then f is not realizable. Use .95 as conservative threshold. */ 
        /* Also not realizable if cell_avg is negative. */
        printf(fh, "  if (~a <= 0. || fabs(xbarVal)>=.95) { ~%", gcfac(float(fZMuQ_Vp_c[1]))),
        /* If not realizable, set reflection coeffs to zero so that no reflection from this node. */
        writeCExprsWithZerosNoExpand1(fReflZMuQuad[j-1],makelist(0.,j,1,NVp)),
    
        /* If f is realizable at this node...*/
        printf(fh, "  } else {~%"),
        /* Compute and write beta = L^-1(xbar), where L^-1=invL is the inverse Langevin function. */
        beta : invL(xbarVal),
        printf(fh, "   b = ~a; ~%", beta),
    
        /* Compute partial reflection scaling factors for coefficients of f, based on exponential construction. */
        printf(fh, "   if(wv > 0) {~%"),
        printf(fh, "    xc = 2.*(sqrt(vcutSq)-wv)/dv; ~%"),
        fReflfacs : [ "b>500? 0. : b<-500? 1. : fabs(b)<1e-10? (1.+xc)/2. : (exp(b*xc)-exp(-b))/(2.*sinh(b))", 
          	    "(b>500 || fabs(b)<1e-8)? 0. : b<-500? 1. : ((b*xc-1)*exp(b*xc)+(b+1)*exp(-b))/2./(b*cosh(b)-sinh(b))",
              	    "(((b*(3*b*xc*xc-(6*xc+b))+6)*exp(b*xc))/3-(2*(b*b+3*(b+1))*exp(-b))/3)/(-4*b*cosh(b) + 4/3*(3 + b*b)*sinh(b))"],
        for k : 1 thru NVp do (
          printf(fh, "    fac = ~a; ~%", fReflfacs[k]),
          printf(fh, "    if(isnan(fac) || isinf(fac)) {printf(\"reflect fac = \%G, b=\%G, xbarVal=\%G \\n\", fac, b, xbarVal); fac=0.;} ~%"),
          printf(fh, "    fReflZMuQuad[~a][~a] = (~a)*fac; ~%", j-1, k-1, gcfac(float(fZMuQ_Vp_c[k])))
        ),
        printf(fh, "   } else { ~%"),
        printf(fh, "    xc = 2.*(-sqrt(vcutSq)-wv)/dv; ~%"),
        fReflfacs : [ "b>500? 1. : b<-500? 0. : fabs(b)<1e-10? (1.-xc)/2. : (exp(b)-exp(b*xc))/(2.*sinh(b))", 
                      "b>500? 1. : (b<-500 || fabs(b)<1e-8)? 0. : ((b-1)*exp(b)-(b*xc-1)*exp(b*xc))/2./(b*cosh(b)-sinh(b))", 
                      "((2*(b*b+3*(1-b))*exp(b))/3-((b*(3*b*xc*xc-(6*xc+b))+6)*exp(b*xc))/3)/(-4*b*cosh(b) + 4/3*(3 + b*b)*sinh(b))"],
        for k : 1 thru NVp do (
          printf(fh, "    fac = ~a; ~%", fReflfacs[k]),
          printf(fh, "    if(isnan(fac) || isinf(fac)) {printf(\"reflect fac = \%G, b=\%G, xbarVal=\%G \\n\", fac, b, xbarVal); fac=0.;} ~%"),
          printf(fh, "    fReflZMuQuad[~a][~a] = (~a)*fac; ~%", j-1, k-1, gcfac(float(fZMuQ_Vp_c[k])))
        ),
        printf(fh, "   } ~%"),
        printf(fh, "  } ~%"),
        /* We just printed bVp coefficients of fRefl at (z,mu)_j node. now expand in vpar using those coeffs. */
        fReflZMuQ_e[j] : makelist(fReflZMuQuad[j-1][k-1],k,1,NVp) . bVp
      ), /* End of j loop over (z,mu)_j nodes. */
    
      /* Calculate expansion in z,vpar,mu. */
      fReflQ_ZVpMu_c : calcInnerProdList(zmuVars, 1, bZMu, doExpand(fReflZMuQ_e, basisNodalZMu)),
      fReflQ_ZVpMu_e : doExpand(fReflQ_ZVpMu_c, bZMu),
     
      /* Project fRefl onto z,vpar,mu basis (bP). */
      fReflQ_ZVpMu_c : gcfac(fullratsimp(innerProd(varsP, 1, bP, fReflQ_ZVpMu_e))),
      /* Write coefficients. */
      writeCExprsNoExpand1(fRefl, fReflQ_ZVpMu_c),
  
    printf(fh, "  } ~%~%"), /* End of partial reflection else. */
  
    /* Expansion in z,vpar,mu of fRefl. */
    /* fReflQ_e : makelist(fReflQuad[j-1],j,1,NP).bP, */
    printf(fh, " ~%"),
    printf(fh, "}~%")

  )

)$

