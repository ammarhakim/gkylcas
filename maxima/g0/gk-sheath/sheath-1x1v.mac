/* 
   Gyrokinetic sheath function for 1x1v kernel.
*/
load("modal-basis");
load("out-scripts");
load("nodal_operations/nodal_functions")$
load(stringproc)$
fpprec : 24$

calcGkSheathFuncs1x1v(fh, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,vSub,NP,bVp,NVp,zVar,funcNm,phiSheath_e,phiWall_e,deltaPhi_e,quad,
   nodes1d,numNodes1d,f_e,vcutSqQ,fRefl_c,fReflZQ_e,fZQ_e,fZQ_Vp_c,xbar,beta,fReflfacs,
   nodToModZ,fReflQ_ZVp_e,fReflQ_ZVp_c,fReflQ_e],

  /* Get desired basis. */
  [varsC,bC,varsP,bP,vSub] : loadGkBasis(basisFun, cdim, vdim, polyOrder),
  NP : length(bP),

  /* Set up various bases with reduced dimension. */
  if polyOrder = 1 then (  /* Force p=1 to use hybrid basis. */
    bVp : basisFromVars("gkhyb",[vpar],polyOrder)
  ) else (
    bVp : basisFromVars(basisFun,[vpar],polyOrder)
  ),
  NVp : length(bVp),
  
  /* Get name of last config space dimension, which is always assumed to be
     the direction parallel to the magnetic field (z). */
  zVar : varsC[cdim], /* In 1x1v this is just z */
  
  funcNm : sconcat("calcSheathReflection", cdim, "x", vdim, "v", basisFun),
  disp(printf(false,"Working on function ~a",funcNm)),
  printf(fh, "~%"),
  printf(fh, "void ~a_P~a(const double wv, const double dv, const double vlowerSq, const double vupperSq, const double zVal, const double q_, const double m_, const double *phi, const double *phiWall, const double *f, double *fRefl) ~%{ ~%", funcNm, polyOrder),
  
  /* Calculate expansion for deltaPhi = phiSheath - phiWall, evaluated at z=zVal, 
     where zVal=-1 or 1 depending on if we're on the left or right edge of the global domain, respectively. */
  phiSheath_e : subst(zVar=zVal, doExpand1(phi, bC)),
  phiWall_e   : subst(zVar=zVal, doExpand1(phiWall, bC)),
  deltaPhi_e  : phiSheath_e - phiWall_e,
  
  /* Set up quadrature nodes. */
  if polyOrder=1 then quad : 1/(3), /* Use control nodes instead of quadrature nodes for p=1, for positivity. */
  if polyOrder=2 then quad : sqrt(3/5),
  nodes1d    : quad*getNodes(basisFun, 1, polyOrder),   /* 1d quadrature/control nodes. */
  numNodes1d : length(nodes1d),
  
  /* Substitution function to evaluate expansion f at z=node[i] for all i. */
  nodesZsub(f) := makelist(subst(makelist(x=nodes1d[i][j],j,1,1),f),i,1,numNodes1d),
  
  /* Expand input distribution function f on phase-space basis using input coeffs. */
  f_e : doExpand1(f, bP),
  
  /* Some naming conventions: 
     fZQ_e = f evaluated at z nodes (ZQ), expansion in remaining variables (_e).
     fQ_ZVpMu_c = f projected onto (z,vpar) basis resulting in coefficients (_ZVp_c).
  */
  
  /* Variable declarations/allocations. */
  printf(fh, "  double vcutSq; long double xc, b, xbarVal, fac; ~%"),
  printf(fh, "  double fReflZQuad[~a][~a]; ~%", numNodes1d, NP),
  printf(fh, "  ~%~%"),
  
  /* Evaluate vcutSqQ = vcut^2. */
  vcutSqQ : gcfac(float(fullratsimp(-2*q_/m_*deltaPhi_e))),
  
  /* Write vcut^2 at boundary. */
  printf(fh, "  vcutSq = ~a; ~%", vcutSqQ),
  
  /* If vcut^2 at this node is below all vpar^2 in this cell, BC at this node should be absorbing 
     so set coefficients of fRefl to 0 (no reflection from this node). */
  printf(fh, "  if (vcutSq <= vlowerSq) { // absorb (no reflection) ~%"),
  writeCExprsWithZerosNoExpand1(fRefl, makelist(0.,j,1,NP)),
  
  /* If vcut^2 at this node is above all vpar^2 in this cell, BC at this node should be full reflection */
  /* so set coefficients of fRefl to coefficients of f. */
  printf(fh, "  } else if (vcutSq > vupperSq) { // full reflection ~%"),
  /* Project f onto basis. */
  fRefl_c : gcfac(fullratsimp(innerProd(varsP, 1, bP, f_e))),
  /* Full reflection: set fRefl coefficients to f coefficients. */
  writeCExprsNoExpand1(fRefl, fRefl_c),
  
  /* If vcut^2 at this node is in this cell, BC at this node is partial reflection. */
  printf(fh, "  } else { // partial reflection ~%"),
  
    /* Allocate empty vector for reflected distribution function also evaluated at z nodes. */
    fReflZQ_e : makelist(0, i,1,numNodes1d),
    /* f_e is an expansion in z,vpar;
       now evaluate f_e at z nodes
       so fZQ_e[j] = fZQ_e[j](vpar) 
       is evaluated at the z_j nodes. */
    fZQ_e : nodesZsub(f_e),
  
    /* Loop over z_j nodes. */
    for j : 1 thru numNodes1d do (
      /* Project f at this z_j node onto vpar basis (bVp). */
      fZQ_Vp_c : gcfac(fullratsimp(innerProd([vpar], 1, bVp, fZQ_e[j]))),

      /* Evaluate xbar = slope/cell_avg = f1/f0/sqrt(3) from vpar basis
         coefficients (recall that this is being done at every z_i node). */
      xbar : gcfac(float(fZQ_Vp_c[2]/sqrt(3)/fZQ_Vp_c[1])),
      /* Print as xbarVal. */
      printf(fh, "  xbarVal = ~a; ~%", xbar),
      printf(fh, "  // if f is not realizable, no reflection from this node ~%"),
      /* If abs(xbar)>=1, then f is not realizable. Use .95 as conservative threshold. */ 
      /* Also not realizable if cell_avg is negative. */
      printf(fh, "  if(~a <= 0. || std::abs(xbarVal)>=.95) { ~%", gcfac(float(fZQ_Vp_c[1]))),
      /* If not realizable, set reflection coeffs to zero so that no reflection from this node. */
      writeCExprsWithZerosNoExpand1(fReflZQuad[j-1],makelist(0.,j,1,NVp)),

      /* If f is realizable at this node...*/
      printf(fh, "  } else {~%"),
      /* Compute and write beta = L^-1(xbar), where L^-1=invL is the inverse Langevin function. */
      beta : invL(xbarVal),
      printf(fh, "   b = ~a; ~%", beta),

      /* Compute partial reflection scaling factors for coefficients of f,
         based on exponential construction. */
      printf(fh, "   if (wv > 0) {~%"),
      printf(fh, "    xc = 2.*(std::sqrt(vcutSq)-wv)/dv; ~%"),
      fReflfacs : [ "b>500? 0. : b<-500? 1. : std::abs(b)<1e-10? (1.+xc)/2. : (std::exp(b*xc)-std::exp(-b))/(2.*std::sinh(b))", 
          "(b>500 || std::abs(b)<1e-8)? 0. : b<-500? 1. : ((b*xc-1)*std::exp(b*xc)+(b+1)*std::exp(-b))/2./(b*std::cosh(b)-std::sinh(b))",
          "(((b*(3*b*xc*xc-(6*xc+b))+6)*std::exp(b*xc))/3-(2*(b*b+3*(b+1))*std::exp(-b))/3)/(-4*b*std::cosh(b) + 4/3*(3 + b*b)*std::sinh(b))"],
      for k:1 thru NVp do (
      printf(fh, "    fac = ~a; ~%", fReflfacs[k]),
      printf(fh, "    if(std::isnan(fac) || std::isinf(fac)) {printf(\"reflect fac = \%LG, b=\%LG, xbarVal=\%LG \\n\", fac, b, xbarVal); fac=0.;} ~%"),
      printf(fh, "    fReflZQuad[~a][~a] = (~a)*fac; ~%", j-1, k-1, gcfac(float(fZQ_Vp_c[k])))
      ),
      printf(fh, "   } else { ~%"),
      printf(fh, "    xc = 2.*(-std::sqrt(vcutSq)-wv)/dv; ~%"),
      fReflfacs : [ "b>500? 1. : b<-500? 0. : std::abs(b)<1e-10? (1.-xc)/2. : (std::exp(b)-std::exp(b*xc))/(2.*std::sinh(b))", 
          "b>500? 1. : (b<-500 || std::abs(b)<1e-8)? 0. : ((b-1)*std::exp(b)-(b*xc-1)*std::exp(b*xc))/2./(b*std::cosh(b)-std::sinh(b))", 
          "((2*(b*b+3*(1-b))*std::exp(b))/3-((b*(3*b*xc*xc-(6*xc+b))+6)*std::exp(b*xc))/3)/(-4*b*std::cosh(b) + 4/3*(3 + b*b)*std::sinh(b))"],
      for k:1 thru NVp do (
      printf(fh, "    fac = ~a; ~%", fReflfacs[k]),
      printf(fh, "    if(std::isnan(fac) || std::isinf(fac)) {printf(\"reflect fac = \%LG, b=\%LG, xbarVal=\%LG \\n\", fac, b, xbarVal); fac=0.;} ~%"),
      printf(fh, "    fReflZQuad[~a][~a] = (~a)*fac; ~%", j-1, k-1, gcfac(float(fZQ_Vp_c[k])))
      ),
      printf(fh, "   } ~%"),
      printf(fh, "  } ~%"),
      /* We just printed bVp coefficients of fRefl at each z_j node. now expand in vpar using those coeffs. */
      fReflZQ_e[j] : makelist(fReflZQuad[j-1][k-1],k,1,NVp) . bVp
    ), /* End of j loop over (z)_j nodes. */ 

    /* Get modToNod matrix for transformation from (z) nodes to z basis coeffs. */
    nodToModZ : fullratsimp(calcNodToModWithNodesAndBasis(nodes1d, bC, varsC)),
    /* Calculate expansion in z,vpar. */
    fReflQ_ZVp_e : fullratsimp(bC . fullratsimp(float(nodToModZ) . fReflZQ_e)),
 
    /* Project fRefl onto z,vpar basis (bP). */
    fReflQ_ZVp_c : gcfac(fullratsimp(innerProd(varsP, 1, bP, fReflQ_ZVp_e))),
    /* Write coefficients. */
    writeCExprsNoExpand1(fRefl, fReflQ_ZVp_c),

  printf(fh, "  } ~%~%"), /* End of partial reflection else. */

  /* Expansion in z,vpar of fRefl. */
  fReflQ_e : makelist(fReflQuad[j-1],j,1,NP) . bP,
  printf(fh, " ~%"),
  printf(fh, "}~%")

)$
