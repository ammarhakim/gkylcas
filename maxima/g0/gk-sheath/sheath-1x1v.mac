/* 
   Gyrokinetic sheath function for 1x1v kernel.
*/
load("modal-basis");
load("out-scripts");
load("nodal_operations/nodal_functions")$
load(stringproc)$
fpprec : 24$

genGkSheathKer1x1v(fh, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,vSub,NP,bVp,NVp,zVar,edge,zVal,phiSheath_e,phiWall_e,deltaPhi_e,quad,
   nodesZ,numNodesZ,basisNodalZ,f_e,vcutSqQ,fRefl_c,fReflZQ_e,fZQ_e,fZQ_Vp_c,xbar,beta,fReflfacs,
   fReflQ_ZVp_e,fReflQ_ZVp_c,fReflQ_e],

  /* Get desired basis. */
  [varsC,bC,varsP,bP,vSub] : loadGkBasis(basisFun, cdim, vdim, polyOrder),
  NP : length(bP),

  /* Set up various bases with reduced dimension. */
  if polyOrder = 1 then (  /* Force p=1 to use hybrid basis. */
    bVp : basisFromVars("gkhyb",[vpar],polyOrder)
  ) else (
    bVp : basisFromVars(basisFun,[vpar],polyOrder)
  ),
  NVp : length(bVp),
  
  /* Get name of last config space dimension, which is always assumed to be
     the direction parallel to the magnetic field (z). */
  zVar : varsC[cdim], /* In 1x1v this is just z */

  /* Set up quadrature nodes. */
  nodesZ    : gaussOrd(polyOrder+1, 1),
  numNodesZ : length(nodesZ),

  /* Get (quadrature) nodal basis sets. */
  basisNodalZ : getVarsNodalBasisWithNodes("tensor", 1, polyOrder, [zVar], nodesZ),

  /* Generate separate kernels for lower/upper boundaries. */
  edge : ["lower", "upper"],
  zVal : [-1, 1],

  for sI : 1 thru length(edge) do (
  
    printf(fh, "~%"),
    printf(fh, "void bc_sheath_gyrokinetic_reflectedf_~a_~ax~av_~a_p~a(const double wv, const double dv, const double vlowerSq, const double vupperSq, const double q2Dm, const double *phi, const double *phiWall, const double *f, double *fRefl) ~%{ ~%", edge[sI], cdim, vdim, basisFun, polyOrder),
    
    /* Calculate expansion for deltaPhi = phiSheath - phiWall, evaluated at z=zVal, 
       where zVal=-1 or 1 depending on if we're on the left or right edge of the global domain, respectively. */
    phiSheath_e : subst(zVar=zVal[sI], doExpand1(phi, bC)),
    phiWall_e   : subst(zVar=zVal[sI], doExpand1(phiWall, bC)),
    deltaPhi_e  : phiSheath_e - phiWall_e,
    
    /* Expand input distribution function f on phase-space basis using input coeffs. */
    f_e : doExpand1(f, bP),
    
    /* Some naming conventions: 
       fZQ_e = f evaluated at z nodes (ZQ), expansion in remaining variables (_e).
       fQ_ZVpMu_c = f projected onto (z,vpar) basis resulting in coefficients (_ZVp_c).
    */
    
    /* Variable declarations/allocations. */
    printf(fh, "  double vcutSq; long double xc, b, xbarVal, fac; ~%"),
    printf(fh, "  double fReflZQuad[~a][~a]; ~%", numNodesZ, NP),
    printf(fh, "  ~%~%"),
    
    /* Evaluate vcutSqQ = vcut^2. */
    vcutSqQ : gcfac(float(fullratsimp(-q2Dm*deltaPhi_e))),
    
    /* Write vcut^2 at boundary. */
    printf(fh, "  vcutSq = ~a; ~%", vcutSqQ),
    
    /* If vcut^2 at this node is below all vpar^2 in this cell, BC at this node should be absorbing 
       so set coefficients of fRefl to 0 (no reflection from this node). */
    printf(fh, "  if (vcutSq <= vlowerSq) { // absorb (no reflection) ~%"),
    writeCExprsWithZerosNoExpand1(fRefl, makelist(0.,j,1,NP)),
    
    /* If vcut^2 at this node is above all vpar^2 in this cell, BC at this node should be full reflection */
    /* so set coefficients of fRefl to coefficients of f. */
    printf(fh, "  } else if (vcutSq > vupperSq) { // full reflection ~%"),
    /* Project f onto basis. */
    fRefl_c : gcfac(fullratsimp(innerProd(varsP, 1, bP, f_e))),
    /* Full reflection: set fRefl coefficients to f coefficients. */
    writeCExprsNoExpand1(fRefl, fRefl_c),
    
    /* If vcut^2 at this node is in this cell, BC at this node is partial reflection. */
    printf(fh, "  } else { // partial reflection ~%"),
    
      /* Allocate empty vector for reflected distribution function also evaluated at z nodes. */
      fReflZQ_e : makelist(0, i,1,numNodesZ),
      /* f_e is an expansion in z,vpar;
         now evaluate f_e at z nodes
         so fZQ_e[j] = fZQ_e[j](vpar) 
         is evaluated at the z_j nodes. */
      fZQ_e : evAtNodes(f_e, nodesZ, [zVar]),
    
      /* Loop over z_j nodes. */
      for j : 1 thru numNodesZ do (
        /* Project f at this z_j node onto vpar basis (bVp). */
        fZQ_Vp_c : gcfac(fullratsimp(innerProd([vpar], 1, bVp, fZQ_e[j]))),
  
        /* Evaluate xbar = slope/cell_avg = f1/f0/sqrt(3) from vpar basis
           coefficients (recall that this is being done at every z_i node). */
        xbar : gcfac(float(fZQ_Vp_c[2]/sqrt(3)/fZQ_Vp_c[1])),
        /* Print as xbarVal. */
        printf(fh, "  xbarVal = ~a; ~%", xbar),
        printf(fh, "  // if f is not realizable, no reflection from this node ~%"),
        /* If abs(xbar)>=1, then f is not realizable. Use .95 as conservative threshold. */ 
        /* Also not realizable if cell_avg is negative. */
        printf(fh, "  if(~a <= 0. || fabsl(xbarVal)>=.95) { ~%", gcfac(float(fZQ_Vp_c[1]))),
        /* If not realizable, set reflection coeffs to zero so that no reflection from this node. */
        writeCExprsWithZerosNoExpand1(fReflZQuad[j-1],makelist(0.,j,1,NVp)),
  
        /* If f is realizable at this node...*/
        printf(fh, "  } else {~%"),
        /* Compute and write beta = L^-1(xbar), where L^-1=invL is the inverse Langevin function. */
        beta : invL(xbarVal),
        printf(fh, "   b = ~a; ~%", beta),
  
        /* Compute partial reflection scaling factors for coefficients of f,
           based on exponential construction. */
        printf(fh, "   if (wv > 0) {~%"),
        printf(fh, "    xc = 2.*(sqrt(vcutSq)-wv)/dv; ~%"),
        fReflfacs : [ "b>500? 0. : b<-500? 1. : fabsl(b)<1e-10? (1.+xc)/2. : (expl(b*xc)-expl(-b))/(2.*sinhl(b))", 
            "(b>500 || fabsl(b)<1e-8)? 0. : b<-500? 1. : ((b*xc-1)*expl(b*xc)+(b+1)*expl(-b))/2./(b*coshl(b)-sinhl(b))",
            "(((b*(3*b*xc*xc-(6*xc+b))+6)*expl(b*xc))/3-(2*(b*b+3*(b+1))*expl(-b))/3)/(-4*b*coshl(b) + 4/3*(3 + b*b)*sinhl(b))"],
        for k : 1 thru NVp do (
        printf(fh, "    fac = ~a; ~%", fReflfacs[k]),
        printf(fh, "    if(isnan(fac) || isinf(fac)) {printf(\"reflect fac = \%LG, b=\%LG, xbarVal=\%LG \\n\", fac, b, xbarVal); fac=0.;} ~%"),
        printf(fh, "    fReflZQuad[~a][~a] = (~a)*fac; ~%", j-1, k-1, gcfac(float(fZQ_Vp_c[k])))
        ),
        printf(fh, "   } else { ~%"),
        printf(fh, "    xc = 2.*(-sqrt(vcutSq)-wv)/dv; ~%"),
        fReflfacs : [ "b>500? 1. : b<-500? 0. : fabsl(b)<1e-10? (1.-xc)/2. : (expl(b)-expl(b*xc))/(2.*sinhl(b))", 
            "b>500? 1. : (b<-500 || fabsl(b)<1e-8)? 0. : ((b-1)*expl(b)-(b*xc-1)*expl(b*xc))/2./(b*coshl(b)-sinhl(b))", 
            "((2*(b*b+3*(1-b))*expl(b))/3-((b*(3*b*xc*xc-(6*xc+b))+6)*expl(b*xc))/3)/(-4*b*coshl(b) + 4/3*(3 + b*b)*sinhl(b))"],
        for k : 1 thru NVp do (
        printf(fh, "    fac = ~a; ~%", fReflfacs[k]),
        printf(fh, "    if(isnan(fac) || isinf(fac)) {printf(\"reflect fac = \%LG, b=\%LG, xbarVal=\%LG \\n\", fac, b, xbarVal); fac=0.;} ~%"),
        printf(fh, "    fReflZQuad[~a][~a] = (~a)*fac; ~%", j-1, k-1, gcfac(float(fZQ_Vp_c[k])))
        ),
        printf(fh, "   } ~%"),
        printf(fh, "  } ~%"),
        /* We just printed bVp coefficients of fRefl at each z_j node. now expand in vpar using those coeffs. */
        fReflZQ_e[j] : makelist(fReflZQuad[j-1][k-1],k,1,NVp) . bVp
      ), /* End of j loop over (z)_j nodes. */ 
  
      /* Calculate expansion in z,vpar. */
      fReflQ_ZVp_c : calcInnerProdList([zVar], 1, bC, doExpand(fReflZQ_e, basisNodalZ)),
      fReflQ_ZVp_e : doExpand(fReflQ_ZVp_c, bC),
   
      /* Project fRefl onto z,vpar basis (bP). */
      fReflQ_ZVp_c : gcfac(fullratsimp(innerProd(varsP, 1, bP, fReflQ_ZVp_e))),
      /* Write coefficients. */
      writeCExprsNoExpand1(fRefl, fReflQ_ZVp_c),
  
    printf(fh, "  } ~%~%"), /* End of partial reflection else. */
  
    /* Expansion in z,vpar of fRefl. */
    fReflQ_e : makelist(fReflQuad[j-1],j,1,NP) . bP,
    printf(fh, " ~%"),
    printf(fh, "}~%")

  )

)$
