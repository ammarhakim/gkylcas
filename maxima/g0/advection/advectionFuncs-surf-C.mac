/* This script generates the kernels for the surface term of the advection equation df/dt + div(uf) = 0 */

load("modal-basis");
load("out-scripts");
load(stringproc)$
load("scifac")$
load("nodal_operations/nodal_functions")$
fpprec : 24$

cvars : [x, y, z]$
dx11 : [dx10, dx11, dx12]$
cidx(cdim)      := makelist(i,i,0,cdim-1)$

/* Helper functions for expanding in basis functions a quantity we know should be sparse  */
/* For example, alpha, the phase space flow only depends on a few phase space coordinates */
doMakeExprLst(vals, S)  := makelist(if vals[i] # 0 then S[i-1] else 0, i, 1, length(vals))$
doExpandLst(lst, basis) := sum(lst[i]*basis[i], i, 1, length(basis))$

/* 1D advection special since only involves evaluations */
calcAdvection1xUpdateInDir(dir, fh, funcNm, cdim, basisFun, polyOrder) := block(
  [bC,NC,cid,cv,surfVars,ul_e,uc_e,ur_e,fl_e,fc_e,fr_e,ul_r,fl_r,uc_l,fc_l,uc_r,fc_r,ur_l,fr_l,avg_l,avg_r,jump_l,jump_r,incr_l,incr_r],

  kill(varsC, basisC),

  load(sconcat("basis-precalc/basis", basisFun, cdim, "x")),

  bC : basisC[polyOrder],
  NC : length(bC),

  printf(fh, "GKYL_CU_DH void ~a~a_~ax_~a_p~a(const double *w, const double *dxv, const double *ul, const double *uc, const double *ur, const double *fl, const double *fc, const double *fr, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, cvars[dir], cdim, basisFun, polyOrder),
  printf(fh, "  // w[NDIM]:   Cell-center coordinates.~%"),
  printf(fh, "  // dxv[NDIM]: Cell spacing.~%"),
  printf(fh, "  // ul/uc/ur:  Advection velocity in left/center/right cells.~%"),
  printf(fh, "  // fl/fc/fr:  Input function in left/center/right cells.~%"),
  printf(fh, "  // out:       Incremented function in center cell.~%"),

  cid : cidx(cdim),

  /* cv = variable in direction of surface update. */
  cv : varsC[dir],

  /* Surface variables to integrate over. */
  surfVars : delete(cv,varsC),

  printf(fh, "  const double dx1 = 2.0/dxv[~a]; ~%", dir-1),
  printf(fh, "  const double *ul_0 = &ul[~a]; ~%", NC*(dir-1)),
  printf(fh, "  const double *uc_0 = &uc[~a]; ~%", NC*(dir-1)),
  printf(fh, "  const double *ur_0 = &ur[~a]; ~%", NC*(dir-1)),

  ul_e : doExpand1(ul_0,bC),
  fl_e : doExpand1(fl,bC),

  uc_e : doExpand1(uc_0,bC),
  fc_e : doExpand1(fc,bC),

  ur_e : doExpand1(ur_0,bC),
  fr_e : doExpand1(fr,bC),

  ul_r : subst(cv=1, ul_e),
  fl_r : subst(cv=1, fl_e),

  uc_l : subst(cv=-1, uc_e),
  fc_l : subst(cv=-1, fc_e),

  uc_r : subst(cv=1, uc_e),
  fc_r : subst(cv=1, fc_e),

  ur_l : subst(cv=-1, ur_e),
  fr_l : subst(cv=-1, fr_e),

  /* Ghat = 1/2 * (alpha_l*f_l + alpha_r*f_r) - 1/2 * |max(alpha_l, alpha_r)| (f_r - f_l) */
  avg_l : 0.5*(ul_r*fl_r + uc_l*fc_l),
  avg_r : 0.5*(uc_r*fc_r + ur_l*fr_l),
  jump_l : 0.5*(fc_l - fl_r),
  jump_r : 0.5*(fr_l - fc_r),

  /* Surface contribution is defined as integral(phi^- Ghat) over the surface. */
  /* evaluate u at surface interfaces to find max */
  printf(fh, "  double u_l_r = ~a_~ax_p~a_surfx1_eval_quad_node_0_r(ul_0); ~%", basisFun, cdim, polyOrder),
  printf(fh, "  double u_c_l = ~a_~ax_p~a_surfx1_eval_quad_node_0_l(uc_0); ~%", basisFun, cdim, polyOrder),
  printf(fh, "  double u_c_r = ~a_~ax_p~a_surfx1_eval_quad_node_0_r(uc_0); ~%", basisFun, cdim, polyOrder),
  printf(fh, "  double u_r_l = ~a_~ax_p~a_surfx1_eval_quad_node_0_l(ur_0); ~%", basisFun, cdim, polyOrder),

  printf(fh, "  double u_max_l = fabs(fmax(u_l_r, u_c_l)); ~%"),
  printf(fh, "  double u_max_r= fabs(fmax(u_c_r, u_r_l)); ~%"),

  incr_l : calcInnerProdList(surfVars, 1, subst(cv=-1, bC), avg_l - u_max_l*jump_l),
  incr_r : calcInnerProdList(surfVars, -1, subst(cv=1, bC), avg_r - u_max_r*jump_r),
  writeCIncrExprsCollect1lhsc(out, dx1*incr_l + dx1*incr_r), 
  printf(fh, "~%"),

  printf(fh, "} ~%")
);

calcAdvectionUpdateInDir(dir, fh, funcNm, cdim, basisFun, polyOrder) := block(
  [bC,NC,cid,cv,surfVars,ul_e,uc_e,ur_e,fl_e,fc_e,fr_e,ul_r,fl_r,uc_l,fc_l,uc_r,fc_r,ur_l,fr_l,avg_l,avg_r,jump_l,jump_r,gaussOrds,numNodes,uMax_l_e, uMax_r_e,Ghat_l_c,Ghat_r_c,incr_l,incr_r],

  kill(varsC, basisC),

  load(sconcat("basis-precalc/basis", basisFun, cdim, "x")),

  bC : basisC[polyOrder],
  NC : length(bC),

  printf(fh, "GKYL_CU_DH void ~a~a_~ax_~a_p~a(const double *w, const double *dxv, const double *ul, const double *uc, const double *ur, const double *fl, const double *fc, const double *fr, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, cvars[dir], cdim, basisFun, polyOrder),
  printf(fh, "  // w[NDIM]:   Cell-center coordinates.~%"),
  printf(fh, "  // dxv[NDIM]: Cell spacing.~%"),
  printf(fh, "  // ul/uc/ur:  Advection velocity in left/center/right cells.~%"),
  printf(fh, "  // fl/fc/fr:  Input function in left/center/right cells.~%"),
  printf(fh, "  // out:       Incremented function in center cell.~%"),

  cid : cidx(cdim),

  /* cv = variable in direction of surface update. */
  cv : varsC[dir],

  /* Surface variables to integrate over. */
  surfVars : delete(cv,varsC),

  printf(fh, "  const double dx1 = 2.0/dxv[~a]; ~%", dir-1),
  printf(fh, "  const double *ul_0 = &ul[~a]; ~%", NC*(dir-1)),
  printf(fh, "  const double *uc_0 = &uc[~a]; ~%", NC*(dir-1)),
  printf(fh, "  const double *ur_0 = &ur[~a]; ~%", NC*(dir-1)),

  ul_e : doExpand1(ul_0,bC),
  fl_e : doExpand1(fl,bC),

  uc_e : doExpand1(uc_0,bC),
  fc_e : doExpand1(fc,bC),

  ur_e : doExpand1(ur_0,bC),
  fr_e : doExpand1(fr,bC),

  ul_r : subst(cv=1, ul_e),
  fl_r : subst(cv=1, fl_e),

  uc_l : subst(cv=-1, uc_e),
  fc_l : subst(cv=-1, fc_e),

  uc_r : subst(cv=1, uc_e),
  fc_r : subst(cv=1, fc_e),

  ur_l : subst(cv=-1, ur_e),
  fr_l : subst(cv=-1, fr_e),

  /* Ghat = 1/2 * (alpha_l*f_l + alpha_r*f_r) - 1/2 * |max(alpha_l, alpha_r)| (f_r - f_l) */
  avg_l : 0.5*(ul_r*fl_r + uc_l*fc_l),
  avg_r : 0.5*(uc_r*fc_r + ur_l*fr_l),
  jump_l : 0.5*(fc_l - fl_r),
  jump_r : 0.5*(fr_l - fc_r),

  /* Generate surface basis. this produces the ndim-1 orthogonal basis with no cv dependence. */
  bSurf : sqrt(2)*delete(0,fullratsimp(innerProd(varsC,1,bC,subst([cv^2=var2,var2=1/3,cv=0],bC)))*bC),

  /* Surface nodes given by tensor product of Gauss-Legendre quadrature points */
  surfNodes : gaussOrd(polyOrder+1, cdim-1),
  numNodes : length(surfNodes),

  printf(fh, "  double uQuad_l[~a] = {0.0};~%", numNodes),
  printf(fh, "  double uQuad_r[~a] = {0.0};~%", numNodes),
  printf(fh, "  double uMax_l[~a] = {0.0};;~%", length(bSurf)),
  printf(fh, "  double uMax_r[~a] = {0.0};~%", length(bSurf)),
  printf(fh, "  double Ghat_l[~a] = {0.0}; ~%", length(bSurf)),
  printf(fh, "  double Ghat_r[~a] = {0.0}; ~%", length(bSurf)),

  printf(fh, "  double u_l_r = 0.0; ~%"),
  printf(fh, "  double u_c_l = 0.0; ~%"),
  printf(fh, "  double u_c_r = 0.0; ~%"),
  printf(fh, "  double u_r_l = 0.0; ~%"),
  printf(fh, "~%"),
  for i : 1 thru numNodes do (
    printf(fh, "  u_l_r = ~a_~ax_p~a_surfx~a_eval_quad_node_~a_r(ul_0); ~%", basisFun, cdim, polyOrder, dir, i-1),
    printf(fh, "  u_c_l = ~a_~ax_p~a_surfx~a_eval_quad_node_~a_l(uc_0); ~%", basisFun, cdim, polyOrder, dir, i-1),
    printf(fh, "  u_c_r = ~a_~ax_p~a_surfx~a_eval_quad_node_~a_r(uc_0); ~%", basisFun, cdim, polyOrder, dir, i-1),
    printf(fh, "  u_r_l = ~a_~ax_p~a_surfx~a_eval_quad_node_~a_l(ur_0); ~%", basisFun, cdim, polyOrder, dir, i-1),

    printf(fh, "  uQuad_l[~a] = fabs(fmax(u_l_r, u_c_l)); ~%", i-1),
    printf(fh, "  uQuad_r[~a] = fabs(fmax(u_c_r, u_r_l)); ~%", i-1)
  ),

  printf(fh, "~%"),
  printf(fh, "  // Project tensor nodal quadrature basis back onto modal basis. ~%"),
  printf(fh, "  ~a_~ax_p~a_upwind_quad_to_modal(uQuad_l, uMax_l); ~%", basisFun, cdim, polyOrder),
  printf(fh, "  ~a_~ax_p~a_upwind_quad_to_modal(uQuad_r, uMax_r); ~%", basisFun, cdim, polyOrder),

  /* Create expansions of u_max (|u_max| evaluated at the surface) on the left and right in the surface basis. */
  uMax_l_e : doExpand1(uMax_l, bSurf),
  uMax_r_e : doExpand1(uMax_r, bSurf),

  /* Print C exprs for Ghat across surface boundary, (LEFT BOUNDARY) */
  Ghat_l_c : fullratsimp(innerProd(surfVars, 1, bSurf, avg_l - uMax_l_e*jump_l)),

  writeCExprs1(Ghat_l, Ghat_l_c),
  printf(fh, "~%"),
  flush_output(fh),

  /* Zero out components of Ghat which are empty. */
  GhatNoZero_l : doMakeExprLst(Ghat_l_c, Ghat_l),
  Ghat_l_e     : doExpandLst(GhatNoZero_l, bSurf),

  /* Print C exprs for Ghat across surface boundary, (RIGHT BOUNDARY) */
  Ghat_r_c : fullratsimp(innerProd(surfVars, 1, bSurf, avg_r - uMax_r_e*jump_r)),

  writeCExprs1(Ghat_r, Ghat_r_c),
  printf(fh, "~%"),
  flush_output(fh),

  /* Zero out components of Ghat which are empty. */
  GhatNoZero_r : doMakeExprLst(Ghat_r_c, Ghat_r),
  Ghat_r_e     : doExpandLst(GhatNoZero_r, bSurf),

  /* Compute surface contribution integral(phi^- Ghat) on the left and right. */
  incr_l : calcInnerProdList(surfVars, 1, subst(cv=-1.0, bC), Ghat_l_e),
  incr_r : calcInnerProdList(surfVars, -1, subst(cv=1.0, bC), Ghat_r_e),
  writeCIncrExprsCollect1lhsc(out, dx1*incr_l + dx1*incr_r),  
  printf(fh, "~%"),

  printf(fh, "} ~%")
);