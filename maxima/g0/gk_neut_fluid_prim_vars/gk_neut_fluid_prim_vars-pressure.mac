/* This script generates the kernels for calculating the pressure for updating
   fluid equations. Pressure different for each equation system: 
   Euler -> p = (gas_gamma - 1)*(E - 1/2 rho u^2)*/

load("modal-basis")$
load("out-scripts")$
load(stringproc)$
load("scifac")$
fpprec : 24$

gk_neut_fluid_prim_vars_pressure(fh, funcNm, cdim, basisFun, polyOrder) := block(
  [varsC, bC, NC, i],

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),

  /* Number of basis monomials. */
  NC : length(bC),

  printf(fh, "GKYL_CU_DH void ~a(double gas_gamma, const double *moms, const double *udrift, 
    double* GKYL_RESTRICT out) ~%{ ~%", funcNm, polyOrder),
  printf(fh, "  // gas_gamma: Adiabatic index.~%"),
  printf(fh, "  // moms: Moments (rho, rho ux, rho uy, rho uz, totalE).~%"),
  printf(fh, "  // udrift: Input volume expansion of flow velocity: [ux, uy, uz]. ~%"),
  printf(fh, "  // out: Output volume expansion of pressure.~%"),
  printf(fh, "~%"),

  /* Fetch pointers needed to compute pressure from other fluid variables
     Either p = (gas_gamma - 1)*(E - 1/2 rho u^2) */
  printf(fh, "  const double *rho    = &moms[~a]; ~%", 0*NC),
  printf(fh, "  const double *rhoux  = &moms[~a]; ~%", 1*NC),
  printf(fh, "  const double *rhouy  = &moms[~a]; ~%", 2*NC),
  printf(fh, "  const double *rhouz  = &moms[~a]; ~%", 3*NC),
  printf(fh, "  const double *energy = &moms[~a]; ~%", 4*NC),
  printf(fh, "~%"),
  printf(fh, "  const double *ux = &udrift[~a]; ~%", 0*NC),
  printf(fh, "  const double *uy = &udrift[~a]; ~%", 1*NC),
  printf(fh, "  const double *uz = &udrift[~a]; ~%", 2*NC),
  printf(fh, "~%"),

  /* First construct volume expansion of rhou . u */
  printf(fh, "  double rhoux2[~a] = {0.0}; ~%", NC),
  printf(fh, "  binop_mul_~ad_~a_p~a(rhoux, ux, rhoux2); ~%", cdim, basisFun, polyOrder),
  printf(fh, " ~%"),
  printf(fh, "  double rhouy2[~a] = {0.0}; ~%", NC),
  printf(fh, "  binop_mul_~ad_~a_p~a(rhouy, uy, rhouy2); ~%", cdim, basisFun, polyOrder),
  printf(fh, " ~%"),
  printf(fh, "  double rhouz2[~a] = {0.0}; ~%", NC),
  printf(fh, "  binop_mul_~ad_~a_p~a(rhouz, uz, rhouz2); ~%", cdim, basisFun, polyOrder),
  printf(fh, " ~%"),

  /* Compute pressure from energy */
  for i : 1 thru NC do (
    printf(fh, "  out[~a] = (gas_gamma - 1.0)*(energy[~a] - 0.5*(rhoux2[~a] + rhouy2[~a] + rhouz2[~a])); ~%", i-1, i-1, i-1, i-1, i-1)
  ),

  printf(fh, "} ~%")
)$
