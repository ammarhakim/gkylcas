/* This script generates the kernels for calculating the flow velocity udrift_i
   using weak division. */

load("modal-basis")$
load("out-scripts")$
load(stringproc)$
load("scifac")$
load("nodal_operations/nodal_functions")$
fpprec : 24$

/* Special set of kernels which analytically invert the matrix for 1/rho 
   for p=1 using the basis_inv operator. Significantly faster than the bin_op operator,
   but only works for p=1 */
gk_neut_fluid_prim_vars_udrift_set_prob_p1(fh, funcNm, cdim, basisFun, polyOrder) := block(
  [varsC, bC, NC, rho_e, expr_ux, expr_uy, expr_uz, i],

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),

  /* Number of basis monomials. */
  NC : length(bC),

  printf(fh, "#include <gkyl_mat.h> ~%"),
  printf(fh, "#include <gkyl_gk_neut_fluid_prim_vars_kernels.h> ~%"),
  printf(fh, "#include <gkyl_binop_mul_ser.h> ~%"),
  printf(fh, "#include <gkyl_basis_~a_~ax_p~a_inv.h> ~%", basisFun, cdim, polyOrder),
  printf(fh, "GKYL_CU_DH void ~a(int count, struct gkyl_nmat *A, struct gkyl_nmat *rhs, 
    const double *moms) ~%{ ~%", funcNm, polyOrder),
  printf(fh, "  // count: integer to indicate which matrix being fetched. ~%"),
  printf(fh, "  // A: preallocated LHS matrix. ~%"),
  printf(fh, "  // rhs: preallocated RHS vector. ~%"),
  printf(fh, "  // moms: moments (rho, rho ux, rho uy, rho uz, totalE).~%"),
  printf(fh, "~%"),

  printf(fh, "  // For poly_order = 1, we can analytically invert the matrix and just store the solution ~%"),
  printf(fh, "  struct gkyl_mat rhs_ux = gkyl_nmat_get(rhs, count); ~%"),
  printf(fh, "  struct gkyl_mat rhs_uy = gkyl_nmat_get(rhs, count+1); ~%"),
  printf(fh, "  struct gkyl_mat rhs_uz = gkyl_nmat_get(rhs, count+2); ~%"),

  printf(fh, "  // Clear rhs for each component of flow velocity being solved for ~%"),
  printf(fh, "  gkyl_mat_clear(&rhs_ux, 0.0); ~%"),
  printf(fh, "  gkyl_mat_clear(&rhs_uy, 0.0); ~%"),
  printf(fh, "  gkyl_mat_clear(&rhs_uz, 0.0); ~%"),

  printf(fh, "  const double *rho   = &moms[~a]; ~%", 0*NC),
  printf(fh, "  const double *rhoux = &moms[~a]; ~%", 1*NC),
  printf(fh, "  const double *rhouy = &moms[~a]; ~%", 2*NC),
  printf(fh, "  const double *rhouz = &moms[~a]; ~%", 3*NC),
  printf(fh, "~%"),

  /* Expand rho. */
  rho_e : doExpand1(rho, bC),

  /* Arrays for storing inverse of rho */
  printf(fh, "  double rho_inv[~a] = {0.0}; ~%", NC),
  printf(fh, "  ~a_~ax_p~a_inv(rho, rho_inv); ~%", basisFun, cdim, polyOrder),

  printf(fh, "  // Calculate expansions of flow velocity, which can be calculated free of aliasing errors. ~%"),
  printf(fh, "  double ux[~a] = {0.0}; ~%", NC),
  printf(fh, "  double uy[~a] = {0.0}; ~%", NC),
  printf(fh, "  double uz[~a] = {0.0}; ~%", NC),
  printf(fh, " ~%"),

  printf(fh, "  binop_mul_~ad_~a_p~a(rho_inv, rhoux, ux); ~%", cdim, basisFun, polyOrder),
  printf(fh, "  binop_mul_~ad_~a_p~a(rho_inv, rhouy, uy); ~%", cdim, basisFun, polyOrder),
  printf(fh, "  binop_mul_~ad_~a_p~a(rho_inv, rhouz, uz); ~%", cdim, basisFun, polyOrder),
  printf(fh, " ~%"),

  expr_ux : float(expand(makelist(ux[i],i,0,NC-1))),
  expr_uy : float(expand(makelist(uy[i],i,0,NC-1))),
  expr_uz : float(expand(makelist(uz[i],i,0,NC-1))),

  for i : 1 thru length(expr_ux) do (
    printf(fh,"  gkyl_mat_set(&rhs_ux,~a,0,~a); ~%", i-1, expr_ux[i]),
    printf(fh,"  gkyl_mat_set(&rhs_uy,~a,0,~a); ~%", i-1, expr_uy[i]),
    printf(fh,"  gkyl_mat_set(&rhs_uz,~a,0,~a); ~%", i-1, expr_uz[i])
  ),
  printf(fh, " ~%"),
  printf(fh, "} ~%")
)$

gk_neut_fluid_prim_vars_udrift_set_prob(fh, funcNm, cdim, basisFun, polyOrder) := block(
  [varsC, bC, NC, rho_e, expr_ux, expr_uy, expr_uz, i, ue, un, eq_rho, E_rho, j],

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),

  /* Number of basis monomials. */
  NC : length(bC),

  printf(fh, "#include <gkyl_mat.h> ~%"),
  printf(fh, "#include <gkyl_gk_neut_fluid_prim_vars_kernels.h> ~%"),
  printf(fh, "GKYL_CU_DH void ~a(int count, struct gkyl_nmat *A, struct gkyl_nmat *rhs, 
    const double *moms) ~%{ ~%", funcNm, polyOrder),
  printf(fh, "  // count: integer to indicate which matrix being fetched. ~%"),
  printf(fh, "  // A: preallocated LHS matrix. ~%"),
  printf(fh, "  // rhs: preallocated RHS vector. ~%"),
  printf(fh, "  // moms: Moments [rho, rho ux, rho uy, rho uz, totalE].~%"),
  printf(fh, "~%"),

  printf(fh, "  struct gkyl_mat A_ux = gkyl_nmat_get(A, count); ~%"),
  printf(fh, "  struct gkyl_mat A_uy = gkyl_nmat_get(A, count+1); ~%"),
  printf(fh, "  struct gkyl_mat A_uz = gkyl_nmat_get(A, count+2); ~%"),

  printf(fh, "  struct gkyl_mat rhs_ux = gkyl_nmat_get(rhs, count); ~%"),
  printf(fh, "  struct gkyl_mat rhs_uy = gkyl_nmat_get(rhs, count+1); ~%"),
  printf(fh, "  struct gkyl_mat rhs_uz = gkyl_nmat_get(rhs, count+2); ~%"),

  printf(fh, "  // Clear matrix and rhs for each component of flow velocity being solved for ~%"),
  printf(fh, "  gkyl_mat_clear(&A_ux, 0.0); gkyl_mat_clear(&rhs_ux, 0.0); ~%"),
  printf(fh, "  gkyl_mat_clear(&A_uy, 0.0); gkyl_mat_clear(&rhs_uy, 0.0); ~%"),
  printf(fh, "  gkyl_mat_clear(&A_uz, 0.0); gkyl_mat_clear(&rhs_uz, 0.0); ~%"),

  printf(fh, "  const double *rho   = &moms[~a]; ~%", 0*NC),
  printf(fh, "  const double *rhoux = &moms[~a]; ~%", 1*NC),
  printf(fh, "  const double *rhouy = &moms[~a]; ~%", 2*NC),
  printf(fh, "  const double *rhouz = &moms[~a]; ~%", 3*NC),
  printf(fh, "~%"),

  /* Expand rho. */
  rho_e : doExpand1(rho, bC),

  expr_ux : float(expand(makelist(rhoux[i],i,0,NC-1))),
  expr_uy : float(expand(makelist(rhouy[i],i,0,NC-1))),
  expr_uz : float(expand(makelist(rhouz[i],i,0,NC-1))),

  for i : 1 thru length(expr_ux) do (
    printf(fh,"  gkyl_mat_set(&rhs_ux,~a,0,~a); ~%", i-1, expr_ux[i]),
    printf(fh,"  gkyl_mat_set(&rhs_uy,~a,0,~a); ~%", i-1, expr_uy[i]),
    printf(fh,"  gkyl_mat_set(&rhs_uz,~a,0,~a); ~%", i-1, expr_uz[i])
  ),
  printf(fh, " ~%"),

  /* Generate matrix of unknown coefficients */
  ue : doExpand1(u,bC),
  un : makelist(u[i],i,0,NC-1),
  eq_rho : calcInnerProdList(varsC,ue,bC,rho_e),
  E_rho : fullratsimp(coefmatrix(eq_rho,un)),

  /* declare temp_rho and temp_p_perp since matrix entries in A are the same for all operations */
  printf(fh, "  double temp_rho = 0.0; ~%"),
  /* Matrix is dense so just do a simple write routine */
  for i : 1 thru NC do (
    for j : 1 thru NC do (
      printf(fh,"  temp_rho = ~a; ~%", float(expand(E_rho[i,j]))),
      printf(fh,"  gkyl_mat_set(&A_ux,~a,~a,~a); ~%", i-1, j-1, temp_rho),
      printf(fh,"  gkyl_mat_set(&A_uy,~a,~a,~a); ~%", i-1, j-1, temp_rho),
      printf(fh,"  gkyl_mat_set(&A_uz,~a,~a,~a); ~%", i-1, j-1, temp_rho),
      printf(fh, " ~%")
    )
  ),
  printf(fh, "} ~%")
)$

gk_neut_fluid_prim_vars_udrift_get_sol(fh, funcNm, cdim, basisFun, polyOrder) := block(
  [varsC, bC, NC, ux_e, uy_e, uz_e],

  kill(varsC, basisC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),

  /* Number of basis monomials. */
  NC : length(bC),

  printf(fh, "#include <gkyl_mat.h> ~%"),
  printf(fh, "#include <gkyl_gk_neut_fluid_prim_vars_kernels.h> ~%"),
  /* Function declaration with input/output variables. */
  printf(fh, "GKYL_CU_DH void ~a(int count, struct gkyl_nmat *xsol, 
    double* GKYL_RESTRICT udrift) ~%{ ~%", funcNm),
  printf(fh, "  // count: integer to indicate which matrix being fetched. ~%"),
  printf(fh, "  // xsol: Input solution vector. ~%"),
  printf(fh, "  // udrift: Output volume expansion of flow velocity: ~%"),
  printf(fh, "  //         [ux, uy, uz]. ~%"),
  printf(fh, " ~%"),

  printf(fh, "  struct gkyl_mat x_ux = gkyl_nmat_get(xsol, count); ~%"),
  printf(fh, "  struct gkyl_mat x_uy = gkyl_nmat_get(xsol, count+1); ~%"),
  printf(fh, "  struct gkyl_mat x_uz = gkyl_nmat_get(xsol, count+2); ~%"),

  printf(fh, "  double *ux = &udrift[~a]; ~%", 0*NC),
  printf(fh, "  double *uy = &udrift[~a]; ~%", 1*NC),
  printf(fh, "  double *uz = &udrift[~a]; ~%", 2*NC),
  printf(fh, "~%"),

  /* Fetch volume expansion solution from linear solve */
  for i : 1 thru NC do (
    printf(fh,"  ux[~a] = gkyl_mat_get(&x_ux,~a,0); ~%", i-1, i-1),
    printf(fh,"  uy[~a] = gkyl_mat_get(&x_uy,~a,0); ~%", i-1, i-1),
    printf(fh,"  uz[~a] = gkyl_mat_get(&x_uz,~a,0); ~%", i-1, i-1)
  ),
  printf(fh, "~%"),

  printf(fh, "} ~%"),
  printf(fh, " ~%")
)$
