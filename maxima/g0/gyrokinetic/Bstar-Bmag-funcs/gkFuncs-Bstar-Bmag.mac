/*
   Create kernels for the volume expansion of the time-independent part of Bstar/Bmag. 
   NOTE: BECAUSE Bstar/Bmag IS A HIGHER ORDER QUANTITY, THIS PRE-PROJECTION CAN CREATE
   ISSUES OF LACK OF CONTINUITY IN THE CONSTRUCTION OF THE SURFACE PHASE SPACE FLUX
   OF ALPHA, THEREFORE WE DO NOT CURRENTLY USE THIS. THIS MAY STILL BE USEFUL *LATER*
   FOR VOLUME KERNELS, BUT IT CANNOT BE USED WITH SURFACE KERNELS.
*/

load("modal-basis")$
load("out-scripts")$
load(stringproc)$
load("scifac")$
load("gyrokinetic/gkUtil")$
load("utilities")$
fpprec : 24$

buildGKBStarBMagKernel(fh, funcNm, cdim, basisFun, polyOrder, varsInB) := block(
  [varsC,varsP,basisC,basisP,vSub,numC,allVarLabelsC,
   bmagBasis,ignoreVars,inFlds_e,cmag_e,b_x_e,b_y_e,b_z_e,jacobTotInv_e,
   BstarXdBmag_e,BstarYdBmag_e,BstarZdBmag_e],

  kill(varsC, varsP, bC, bP),

  /* Load two bases of cdim. Bstar/Bmag is a function of (x,z,vpar), 
     no y dependence (axisymmetry) and no mu dependence 
     Use standard configuration space basis (x,y,z) to reuse infrastructure for ignoring y variable
     in expansions of the geometry fields.
     Since Bstar/Bmag is linear in vparallel, we don't need a hybrid basis to represent it when p=1. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),
  /* Bstar/Bmag dependence: 1D (x), 2D (x,vpar), 3D (x,z,vpar) */ 
  [varsP,bP] : loadBasis(basisFun, cdim, polyOrder),
  /* switch to GK variables */
  if (cdim = 2) then (
    vSub : [y=vpar]
  )
  else (
    vSub : [z=vpar,y=z]
  ),
  bP : subst(vSub, copylist(bP)),  varsP : subst(vSub, copylist(varsP)),
  numC : length(bC),  numP : length(bP),

  allVarLabelsC : ["x","y","z"],

  print("Working on ", funcNm),
  printf(fh, "GKYL_CU_DH void ~a(const double *w, const double *dxv, const double q_, const double m_, const double *bmag, const double *jacobtot_inv, const double *cmag, const double *b_i, double* GKYL_RESTRICT Bstar_Bmag) ~%{ ~%", funcNm),
  printf(fh, "  // w[NDIM]: cell-center.~%"),
  printf(fh, "  // dxv[NDIM]: cell length.~%"),
  printf(fh, "  // q_,m_: species q_ and m_.~%"),
  printf(fh, "  // bmag: magnetic field amplitude.~%"),
  printf(fh, "  // jacobtot_inv: reciprocal of the conf-space jacobian time the guiding center coordinate Jacobian.~%"),
  printf(fh, "  // cmag: coefficient multiplying parallel gradient.~%"),
  printf(fh, "  // b_i: covariant components of the field aligned unit vector.~%"),
  printf(fh, "  // Bstar_Bmag: output volume expansion of B*/Bmag.~%"),
  printf(fh, "~%"),

  /* Declare cell-center variables and variables multiplying gradients.
     No coordinates needed in 1D and only need x coordinate in 2D. */
  if (cdim > 1) then (
    if (cdim = 2) then (
      printf(fh, "  double wx = w[0];~%"),
      printf(fh, "  double rdx2 = 2.0/dxv[0];~%"),
      printf(fh, "  double wvpar = w[2];~%"),
      printf(fh, "  double rdvpar2 = 2.0/dxv[2];~%")
    )
    else (
      printf(fh, "  double wx = w[0];~%"),
      printf(fh, "  double rdx2 = 2.0/dxv[0];~%"),
      printf(fh, "  double wz = w[2];~%"),
      printf(fh, "  double rdz2 = 2.0/dxv[2];~%"),
      printf(fh, "  double wvpar = w[3];~%"),
      printf(fh, "  double rdvpar2 = 2.0/dxv[3];~%")
    )
  ),
  printf(fh, "~%"),

  /* Create pointers to the components of b_i. */
  for d : 1 thru 3 do (
    printf(fh, "  const double *b_~a = &b_i[~a];~%", allVarLabelsC[d], numC*(d-1))
  ),
  printf(fh, "~%"),

  /* Load a basis that only has the variables B depends on, but has the right
     normalization and dimensionality for the dimensionality of interest. */
  bmagBasis  : copylist(bC),
  ignoreVars : listify(setdifference(setify(varsC),setify(varsInB))),
  for i : 1 thru numC do (
    for v : 1 thru length(ignoreVars) do (
      if not freeof(ignoreVars[v],bC[i]) then (
        bmagBasis[i] : 0
  ))),

  inFlds_e : expandInputFields(bC,bmagBasis),

  for i : 1 thru cdim do (
    if (cdim = 1) then (   
      printf(fh, "  double *BstarZdBmag = &Bstar_Bmag[~a]; ~%", (i-1)*numP)
    )
    else (
      printf(fh, "  double *Bstar~adBmag = &Bstar_Bmag[~a]; ~%", supcase(allVarLabelsC[i]), (i-1)*numP)
    )
  ),

  /* Compute B* divided by B and write it out. */
  cmag_e : inFlds_e[2],
  b_x_e : inFlds_e[7],  
  b_y_e : inFlds_e[8],  
  b_z_e : inFlds_e[9],
  jacobTotInv_e : inFlds_e[10],

  /* Expand BstarX/Bmag on basis. */
  BstarXdBmag_e : (-((m_/q_)*(wvpar+vpar/rdvpar2))*rdz2*diff(b_y_e,z))*jacobTotInv_e,
  /* Expand BstarY/Bmag on basis. */
  BstarYdBmag_e : (-((m_/q_)*(wvpar+vpar/rdvpar2))*(rdx2*diff(b_z_e,x) - rdz2*diff(b_x_e,z)))*jacobTotInv_e,
  /* Expand BstarZ/Bmag on basis. */
  if (cdim = 1) then (
    BstarZdBmag_e : cmag_e*jacobTotInv_e
  )
  else (
    BstarZdBmag_e : (cmag_e + ((m_/q_)*(wvpar+vpar/rdvpar2))*rdx2*diff(b_y_e,x))*jacobTotInv_e
  ),

  if (cdim > 1) then (
    BstarXdBmag_c : calcInnerProdList(varsP, 1, bP, BstarXdBmag_e),
    writeCExprsNoExpand1(BstarXdBmag, gcfac(float(expand(BstarXdBmag_c)))),
    printf(fh, "~%"),
    flush_output(fh),
    BstarYdBmag_c : calcInnerProdList(varsP, 1, bP, BstarYdBmag_e),
    writeCExprsNoExpand1(BstarYdBmag, gcfac(float(expand(BstarYdBmag_c)))),
    printf(fh, "~%"),
    flush_output(fh)
  ),
  if cdim # 2 then (
    BstarZdBmag_c : calcInnerProdList(varsP, 1, bP, BstarZdBmag_e),
    writeCExprsNoExpand1(BstarZdBmag, gcfac(float(expand(BstarZdBmag_c)))),
    printf(fh, "~%"),
    flush_output(fh)
  ),
  printf(fh, "} ~%")
)$  
