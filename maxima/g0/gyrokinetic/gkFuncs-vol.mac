/*
   Create kernels for the volume term of the gyrokinetic equation.
*/

load("modal-basis")$
load("out-scripts")$
load(stringproc)$
load("scifac")$
load("gyrokinetic/gkUtil")$
load("utilities")$
fpprec : 24$

buildGKVolKernel(fh, funcNm, cdim, vdim, basisFun, polyOrder, varsInB, no_by) := block(
  [pDim,varsC,bC,varsP,bP,vSub,numC,numP,varLabel,
   rdx2vec,rdv2vec,allVarLabelsC,
   bmagBasis,ignoreVars,inFlds_e,cmag_e,b_x_e,b_y_e,b_z_e,jacobTotInv_e,
   BstarXdBmag_e,BstarYdBmag_e,BstarZdBmag_e,BstardBmag_e,
   hamil_e,pbAuxFlds,alphaSum_e,vd,dir,dirLabel,wDir,rdDirVar2,dirVar,alpha_e,alpha_c,
   alphaLabel,alphaNoZero_c,alphaDotGradBasis_e,f_e,volTerm_c],

  kill(varsC,varsP,bC,bP),
  pDim : cdim+vdim,

  [varsC,bC,varsP,bP,vSub] : loadGkBasis(basisFun, cdim, vdim, polyOrder),
  numC : length(bC),  numP : length(bP), 

  /* 2x2v kernels are (x,z,vpar,mu) so we need to relabel y=z */
  if (cdim = 2) then (
    varsSub : [y=z],
    bC : subst(varsSub, copylist(bC)),  
    varsC : subst(varsSub, copylist(varsC)),
    bP : subst(varsSub, copylist(bP)),  
    varsP : subst(varsSub, copylist(varsP))
  ),

  varLabel : makelist(string(varsP[d]),d,1,pDim),

  print("Working on ", funcNm),
  printf(fh, "GKYL_CU_DH double ~a(const double *w, const double *dxv, const double q_, const double m_, const double *bmag, const double *jacobtot_inv, const double *cmag, const double *b_i, const double *phi, const double *apar, const double* apardot, const double *fin, double* GKYL_RESTRICT out) ~%{ ~%", funcNm),
  printf(fh, "  // w[NDIM]: cell-center.~%"),
  printf(fh, "  // dxv[NDIM]: cell length.~%"),
  printf(fh, "  // q_,m_: species charge and mass.~%"),
  printf(fh, "  // bmag: magnetic field amplitude.~%"),
  printf(fh, "  // jacobtot_inv: reciprocal of the conf-space jacobian time the guiding center coordinate Jacobian.~%"),
  printf(fh, "  // cmag: coefficient multiplying parallel gradient.~%"),
  printf(fh, "  // b_i: covariant components of the field aligned unit vector.~%"),
  printf(fh, "  // phi: electrostatic potential .~%"),
  printf(fh, "  // apar: parallel component of magnetic vector potential.~%"),
  printf(fh, "  // apardot: time derivative of Apar.~%"),
  printf(fh, "  // fin: Distribution function.~%"),
  printf(fh, "  // out: output increment.~%"),
  printf(fh, "~%"),

  /* Declare cell-center variables and variables multiplying gradients. */
  for d : 1 thru pDim do (
    printf(fh, "  double w~a = w[~a];~%", varLabel[d], d-1),
    printf(fh, "  double rd~a2 = 2.0/dxv[~a];~%", varLabel[d], d-1)
  ),
  printf(fh, "~%"),
  rdx2vec : makelist(eval_string(sconcat("rd",varLabel[i],"2")),i,1,cdim),
  rdv2vec : makelist(eval_string(sconcat("rd",varLabel[i],"2")),i,cdim+1,pDim),

  /* Declare variables with squared of cell centers and rdx2 variables (only need vpar^2). */
  printf(fh, "  double wvparSq = wvpar*wvpar;~%"),
  printf(fh, "  double rdvpar2Sq = rdvpar2*rdvpar2;~%"),
  printf(fh, "~%"),

  /* Create pointers to the components of b_i. */
  allVarLabelsC : ["x","y","z"],
  for d : 1 thru 3 do (
    printf(fh, "  const double *b_~a = &b_i[~a];~%", allVarLabelsC[d], numC*(d-1))
  ),
  printf(fh, "~%"),

  /* Load a basis that only has the variables B depends on, but has the right
     normalization and dimensionality for the dimensionality of interest. */
  bmagBasis  : copylist(bC),
  ignoreVars : listify(setdifference(setify(varsC),setify(varsInB))),
  for i : 1 thru numC do (
    for v : 1 thru length(ignoreVars) do (
      if not freeof(ignoreVars[v],bC[i]) then (
        bmagBasis[i] : 0
  ))),

  inFlds_e : expandInputFields(bC,bmagBasis),

  cmag_e : inFlds_e[2],
  b_x_e : inFlds_e[7],  
  b_y_e : inFlds_e[8],  
  b_z_e : inFlds_e[9],
  jacobTotInv_e : inFlds_e[10],
  /* Expand BstarX/Bmag, BstarY/Bmag, BstarZ/Bmag on basis. */
  if (no_by) then (
    BstarXdBmag_e : 0,
    BstarYdBmag_e : (-((m_/q_)*(wvpar+vpar/rdvpar2))*(rdx2*diff(b_z_e,x) - rdz2*diff(b_x_e,z)))*jacobTotInv_e,
    BstarZdBmag_e : cmag_e*jacobTotInv_e
  )
  else (
    BstarXdBmag_e : (-((m_/q_)*(wvpar+vpar/rdvpar2))*rdz2*diff(b_y_e,z))*jacobTotInv_e,
    BstarYdBmag_e : (-((m_/q_)*(wvpar+vpar/rdvpar2))*(rdx2*diff(b_z_e,x) - rdz2*diff(b_x_e,z)))*jacobTotInv_e,
    if (cdim = 1) then (
      BstarZdBmag_e : cmag_e*jacobTotInv_e
    )
    else (
      BstarZdBmag_e : (cmag_e + ((m_/q_)*(wvpar+vpar/rdvpar2))*rdx2*diff(b_y_e,x))*jacobTotInv_e
    )
  ),
  if (cdim = 1) then (
    BstardBmag_e : [BstarZdBmag_e]
  )
  else if (cdim = 2) then (
    BstardBmag_e : [BstarXdBmag_e, BstarZdBmag_e]
  )
  else (
    BstardBmag_e : [BstarXdBmag_e, BstarYdBmag_e, BstarZdBmag_e]
  ),

  /* Compute electrostatic Hamiltonian and write it out. */
  hamil_e : calcAndWrite_HamilES(fh,q_,m_,[wvpar,wmu],rdv2vec,bP,inFlds_e,""),

  pbAuxFlds : [BstardBmag_e],
  b_x_e : inFlds_e[7],  b_y_e : inFlds_e[8],  b_z_e : inFlds_e[9],
  jacobTotInv_e : inFlds_e[10],
  pbAuxFlds : append(pbAuxFlds,[b_x_e,b_y_e,b_z_e,jacobTotInv_e]),

  alphaSum_e : 0,
  /* Note: no contribution from mu. */
  if vdim = 0 then (vd : 0) else (vd : 1),
  for dir : 1 thru cdim+vd do (

    dirLabel : varLabel[dir],

    wDir      : eval_string(sconcat("w",dirLabel)),
    rdDirVar2 : eval_string(sconcat("rd",dirLabel,"2")),
  
    dirVar    : varsP[dir],         /* Variable in current direction. */

    /* Calculate phase space velocity alpha_d = {z[d], H} = dz[d]/dt. */
    alpha_e : poissonBracket(wDir+dirVar/rdDirVar2,hamil_e,m_,q_,rdx2vec,rdv2vec,pbAuxFlds,no_by),

    /* Project alpha on basis and write to array. */
    printf(fh, "  double alpha~a[~a] = {0.}; ~%", dirLabel, numP),
    alpha_c    : fullratsimp(calcInnerProdList(varsP, 1, bP, alpha_e)*rdDirVar2),
    alphaLabel : eval_string(sconcat(alpha, dirLabel)),
    clst : [rdx2vec, rdv2vec, m_, q_, wvpar],
    writeCExprsCollect1(alphaLabel, alpha_c, clst),
    printf(fh, "~%"),
    flush_output(fh),
    alphaNoZero_c : doMakeExprLst(alpha_c, alphaLabel),
    alpha_e       : doExpand(alphaNoZero_c, bP),

    /* Note: factor of 2/dxv already included in alpha_e. */
    alphaDotGradBasis_e : alpha_e*diff(bP, dirVar),

    /* Accumulate alpha.grad(w) in this direction to the direction-summed alpha.grad(w). */
    alphaSum_e : alphaSum_e + alphaDotGradBasis_e
  ),

  /* Expand distribution function on basis. */
  f_e : doExpand1(fin,bP),

  volTerm_c : fullratsimp(innerProd(varsP, 1, f_e, alphaSum_e)),
  writeCIncrExprsNoExpand(gcfac(float(expand(volTerm_c)))),
  flush_output(fh),
  printf(fh, "~%"),

  /* Evaluate CFL frequency in surface kernels. */
  printf(fh, "  return 0.; ~%"),
  printf(fh, "} ~%"),
  flush_output(fh)
)$

buildGKStep2VolKernel(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [pDim,varsC,bC,varsP,bP,vSub,numC,numP,f_e,dApardt_e,
   volTerm_c,replaceList,alpha_e,dir,dirVar],
  /* Generate the volume kernel for the 2nd step in gyrokinetics with Apar. */

  pDim : cdim+vdim,

  [varsC,bC,varsP,bP,vSub] : loadGkBasis(basisFun, cdim, vdim, polyOrder),
  numC : length(bC),  numP : length(bP),

  print("Working on ", funcNm),
  printf(fh, "GKYL_CU_DH double ~a(const double *w, const double *dxv, const double q_, const double m_, const double *apardot, const double *fin, double* GKYL_RESTRICT out) ~%{ ~%", funcNm),
  printf(fh, "  // w[NDIM]: cell-center.~%"),
  printf(fh, "  // dxv[NDIM]: cell length.~%"),
  printf(fh, "  // q_,m_: species charge and mass.~%"),
  printf(fh, "  // apardot: time derivative of Apar.~%"),
  printf(fh, "  // fIn: Distribution function.~%"),
  printf(fh, "  // out: output increment.~%"),
  printf(fh, "~%"),

  printf(fh, "  double rdvpar2 = 2.0/dxv[~a]; ~%", cdim),

  /* Expand distribution function on basis. */
  f_e : doExpand1(fin,bP),

  /* Expand dApar/dt. */
  dApardt_e : doExpand1(apardot,bC),

  /* Calculate volume term, which is inner product
     < - f (q/m) dApar/dt d/dvpar(bP) > */
  volTerm_c : fullratsimp(calcInnerProdList(varsP, 1, diff(bP,vpar), -(q_/m_)*dApardt_e*rdvpar2*f_e)),

  replaceList : [wvpar^2=wvparSq, rdvpar2^2=rdvpar2Sq, rdx2^2=rdx2Sq, m_^2=mSq, q_^2=qSq],
  /* Write C increment expressions for volume term. */
  writeCIncrExprsNoExpand(float(subst(replaceList, facsum(volTerm_c,rdvpar2)))),

  alpha_e : - (q_/m_)*dApardt_e*rdvpar2,

  /* CFL calculation. */
  /* Calculate cflFreq = sum_d alpha_d / dxv[d]. */
  printf(fh, "  double cflFreq = 0.0; ~%"),
  printf(fh, "  double alphaL = 0.0; ~%"),
  printf(fh, "  double alphaR = 0.0; ~%"),

  dir    : cdim+1,
  dirVar : varsP[dir],         /* Variable in current direction. */

  /* Evaluate cfl by evaluating at all surface quadrature points. */
  calcAndWrite_quadCFLfreq_wPhaseAlpha(basisFun,polyOrder,bP,dir,alpha_e),
  printf(fh, "~%"),

  printf(fh, "  return cflFreq; ~%"),
  printf(fh, "} ~%")
)$
