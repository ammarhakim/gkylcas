/*
  Generate the kernel for surface expansions of the phase space characteristics.

  The functions called in this file are in gkFuncs-alpha-surf.mac.
*/
load("gyrokinetic/gkFuncs-alpha-surf")$

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 1$
minCdim_Ser : 1$
maxCdim_Ser : 1$

/* Tensor order basis. No need to generate p=1. */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
maxCdim_Tensor : 0$

/* Vdim possibilities for each of Cdim=[1,2,3]. */
gkVdims : [[1,2], [2], [2]]$

/* ...... END OF USER INPUTS........ */

/* To generate other bases, just add corresponding column to arrays below. */
bName        : ["ser", "tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$

clabels : ["x","y","z"]$
vlabels : ["vpar","mu"]$

/* Possible combinations of variable dependence of background magnetic field.
   with [] = const. Note that we assume axisymmetry, which means B cannot depend on y. */
bVarsList : [x,z]$

/* Generate kernels of selected types. */
for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    for gkV : 1 thru length(gkVdims[c]) do (
      v : gkVdims[c][gkV],

      maxPolyOrderB : maxPolyOrder[bInd],
      if (c=3) then maxPolyOrderB : 1, /* Only generate p=1 kernels for 3x2v */
      for polyOrder : minPolyOrder[bInd] thru maxPolyOrderB do (
        /* Surface alpha in direction dir in configuration space.*/
        for dir : 1 thru c do (
          fname : sconcat("~/max-out/gyrokinetic_alpha_surf",clabels[dir],"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
          disp(printf(false,"Creating alpha surf~a file: ~a",clabels[dir],fname)),
    
          fh : openw(fname),
          printf(fh, "#include <gkyl_gyrokinetic_kernels.h> ~%"),

          funcName : sconcat("gyrokinetic_alpha_surf",clabels[dir],"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder),
          buildGKAlphaESKernel(dir, fh, funcName, c, v, bName[bInd], polyOrder, bVarsList, false, false),
          close(fh),

          fname : sconcat("~/max-out/gyrokinetic_alpha_edge_surf",clabels[dir],"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
          disp(printf(false,"Creating alpha edge surf~a file: ~a",clabels[dir],fname)),
    
          fh : openw(fname),
          printf(fh, "#include <gkyl_gyrokinetic_kernels.h> ~%"),

          funcName : sconcat("gyrokinetic_alpha_edge_surf",clabels[dir],"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder),
          buildGKAlphaESKernel(dir, fh, funcName, c, v, bName[bInd], polyOrder, bVarsList, false, true),
          close(fh),

          /* if cdim > 1, also generate a set of kernels for the case where there is no toroidal field (by = 0) */
          if (c > 1) then (
            fname : sconcat("~/max-out/gyrokinetic_alpha_no_by_surf",clabels[dir],"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
            disp(printf(false,"Creating alpha surf~a_no_by file: ~a",clabels[dir],fname)),
      
            fh : openw(fname),
            printf(fh, "#include <gkyl_gyrokinetic_kernels.h> ~%"),

            funcName : sconcat("gyrokinetic_alpha_no_by_surf",clabels[dir],"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder),
            buildGKAlphaESKernel(dir, fh, funcName, c, v, bName[bInd], polyOrder, bVarsList, true, false),
            close(fh),

            fname : sconcat("~/max-out/gyrokinetic_alpha_no_by_edge_surf",clabels[dir],"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
            disp(printf(false,"Creating alpha edge surf~a_no_by file: ~a",clabels[dir],fname)),
      
            fh : openw(fname),
            printf(fh, "#include <gkyl_gyrokinetic_kernels.h> ~%"),

            funcName : sconcat("gyrokinetic_alpha_no_by_edge_surf",clabels[dir],"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder),
            buildGKAlphaESKernel(dir, fh, funcName, c, v, bName[bInd], polyOrder, bVarsList, true, true),
            close(fh)
          )
        ),

        /* Surface alpha in vparallel direction.*/
        fname : sconcat("~/max-out/gyrokinetic_alpha_surf",vlabels[1],"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
        disp(printf(false,"Creating alpha surfvpar file: ~a",fname)),
  
        fh : openw(fname),
        printf(fh, "#include <gkyl_gyrokinetic_kernels.h> ~%"),

        funcName : sconcat("gyrokinetic_alpha_surf",vlabels[1],"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder),
        buildGKAlphaESKernel(c+1, fh, funcName, c, v, bName[bInd], polyOrder, bVarsList, false, false),
        close(fh),  

        /* if cdim > 1, also generate a set of kernels for the case where there is no toroidal field (by = 0) */
        if (c > 1) then (
          fname : sconcat("~/max-out/gyrokinetic_alpha_no_by_surf",vlabels[1],"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
          disp(printf(false,"Creating alpha surfvpar_no_by file: ~a",fname)),
    
          fh : openw(fname),
          printf(fh, "#include <gkyl_gyrokinetic_kernels.h> ~%"),

          funcName : sconcat("gyrokinetic_alpha_no_by_surf",vlabels[1],"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder),
          buildGKAlphaESKernel(c+1, fh, funcName, c, v, bName[bInd], polyOrder, bVarsList, true, false),
          close(fh) 
        )  
      )
    )
  )
)$
