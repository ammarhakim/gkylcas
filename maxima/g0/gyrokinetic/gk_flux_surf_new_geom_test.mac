load("modal-basis")$
load("out-scripts")$
load(stringproc)$
load("scifac")$
load("gyrokinetic/gkUtil")$
fpprec : 24$

buildGKFluxESKernel(surfDir, fh, funcNm, cdim, vdim, basisFun, polyOrder, varsInB, no_by, edge) := block(
  [pDim,vpardim,varsC,bC,varsP,bP,vSub,surfVar,varLabel,dirLabel,
   surfIntVars,surfIntVarsC,surf_cvars,surf_vvars,surfNodes,bSurf,bSurfC,NSurf,numNodes,
   tempVars,tempBasis,NSurfIndexing,numNodesIndexing,
   rdx2vec,rdv2vec,allVarLabelsC,
   bmagBasis,bmagSurfBasis,ignoreVars,inFlds_e,geoSurfFlds_e,bmag_e,cmag_e,b_x_e,b_y_e,b_z_e,jacobTotInv_e,
   bmagSurf_e,cmagSurf_e,b_xSurf_e,b_ySurf_e,b_zSurf_e,jacobTotInvSurf_e,
   BstarXdBmag_e,BstarYdBmag_e,BstarZdBmag_e,BstardBmag_e,hamil_e,fluxSurf_e],

  kill(varsC,varsP,bC,bP),
  pDim : cdim+vdim,

  [varsC,bC,varsP,bP,vSub] : loadGkBasis(basisFun, cdim, vdim, polyOrder),
  numC : length(bC),  numP : length(bP), 

  surfVar  : varsP[surfDir],         /* Surface variable. */
  varLabel : makelist(string(varsP[d]),d,1,pDim),
  dirLabel : varLabel[surfDir],

  surfIntVars : delete(surfVar,varsP), 
  surf_cvars  : delete(surfVar, makelist(varsP[i],i,1,cdim)),
  surf_vvars  : delete(surfVar, makelist(varsP[cdim+i],i,1,vdim)),

  surfIntVarsC : delete(surfVar,varsC), 
  bSurfC       : basisFromVars(basisFun,surfIntVarsC,polyOrder),
  
  if polyOrder = 1 then (  /* Force p=1 to use hybrid basis. */
    surfNodes : gaussOrdGkHyb(1+1, surf_cvars, surf_vvars),
    nodeVars  : surfIntVars, 
    bSurf     : basisFromVars("gkhyb",surfIntVars,polyOrder)
  ) else (
    surfNodes : gaussOrd(polyOrder+1, pDim-1),
    nodeVars  : surfIntVars,
    bSurf     : basisFromVars(basisFun,surfIntVars,polyOrder)
  ),
  if cdim = 1 then (
    surfConfigNodes : [1]
  )
  else (
    surfConfigNodes : gaussOrd(polyOrder+1, cdim-1)
  ),
  numSurfNodes : length(surfNodes),  
  numSurfConfigNodes : length(surfConfigNodes), 
  numVelNodes : numSurfNodes/numSurfConfigNodes, 


  print("Working on ", funcNm),
  printf(fh, "GKYL_CU_DH double ~a(
    const struct gkyl_basis *basis, const double *w, const double *dxv,
    const double *vmap, const double *vmapSq, const double q_, const double m_,
    const struct gkyl_dg_surf_geom *dgs, const struct gkyl_gk_dg_surf_geom *gkdgs, 
    const double *bmag, const double *phi, const double *JfL, const double *JfR, 
    double* GKYL_RESTRICT flux_surf) ~%{ ~%", funcNm),
  printf(fh, "  // w[NDIM]: cell-center.~%"),
  printf(fh, "  // dxv[NDIM]: cell length.~%"),
  printf(fh, "  // vmap: velocity space mapping.~%"),
  printf(fh, "  // vmapSq: velocity space mapping squared.~%"),
  printf(fh, "  // q_,m_: species charge and mass.~%"),
  printf(fh, "  // bmag: magnetic field amplitude.~%"),
  printf(fh, "  // jacobtot_inv: reciprocal of the conf-space jacobian time the guiding center coordinate Jacobian.~%"),
  printf(fh, "  // cmag: coefficient multiplying parallel gradient.~%"),
  printf(fh, "  // b_i: covariant components of the field aligned unit vector.~%"),
  printf(fh, "  // phi: electrostatic potential.~%"),
  printf(fh, "  // bmag_surf: bmag represented on the surface.~%"),
  printf(fh, "  // jacobtot_inv_surf: jacobtot_inv represented on the surface.~%"),
  printf(fh, "  // cmag_surf: cmag represented on the surface.~%"),
  printf(fh, "  // b_i_surf: b_i represented on the surface.~%"),
  printf(fh, "  // flux_surf: output surface phase space flux in each direction (cdim + 1 components).~%"),
  printf(fh, "  //             Note: Each cell owns their *lower* edge surface evaluation.~%"),
  printf(fh, "~%"),

  /* Declare cell-center variables and variables multiplying gradients. */
  for d : 1 thru cdim+1 do (
    printf(fh, "  double rd~a2 = 2.0/dxv[~a];~%", varLabel[d], d-1)
  ),
  printf(fh, "~%"),
  rdx2vec : makelist(eval_string(sconcat("rd",varLabel[i],"2")),i,1,cdim),
  rdv2vec : makelist(eval_string(sconcat("rd",varLabel[i],"2")),i,cdim+1,pDim),

  /* Axisymmetric basis (independent of y). */
  bmagBasis : getAxisymmetricConfBasis(bC),
  bmagSurfBasis : getAxisymmetricConfBasis(bSurfC),

  /* Expand input fields for Hamiltonian calculation */
  phi_e     : doExpand1(phi,bC),
  bmagSurf_e : doExpand1(bmag, bmagSurfBasis),

  /* Basis for the velocity space mapping. */
  [jnk,vmapBasis] : loadBasis("Ser", 1, 1),  [jnk,vmapSqBasis] : loadBasis("Ser", 1, 2),
  vmapBnum        : length(vmapBasis),       vmapSqBnum        : length(vmapSqBasis),

  vmap_e : [],  vmapSq_e : [],  vmap_prime_e : [],
  for d : 1 thru vdim do (
    vmap_c : makelist(vmap[(d-1)*vmapBnum+i-1],i,1,vmapBnum),
    vmap_e : endcons(doExpand(vmap_c,subst(x=varsP[cdim+d],vmapBasis)), vmap_e),

    vmapSq_c : makelist(vmapSq[(d-1)*vmapSqBnum+i-1],i,1,vmapSqBnum),
    vmapSq_e : endcons(doExpand(vmapSq_c,subst(x=varsP[cdim+d],vmapSqBasis)), vmapSq_e),

    vmap_prime_e : endcons(vmap_prime[d-1], vmap_prime_e)
  ),


  /* Redefine vmap_prime to exploit the relationship between it and vmap. */
  vmap_prime_e : makelist((2/dxv[cdim+d-1])*diff(vmap_e[d],varsP[cdim+d]),d,1,vdim),

  if edge = true then (
      evPoint : 1
  )
  else (
      evPoint : -1
  ),

  /* Finally write out the hamiltonian*/
  hamil_e : q_*phi_e + (1/2)*m_*vmapSq_e[1],
  if vdim > 1 then ( hamil_e : hamil_e + vmap_e[2]*bmagSurf_e ),
  hamil_c : calcInnerProdList(surfIntVars, 1, bSurf, subst(surfVar=evPoint,hamil_e)),
  printf(fh, "  double hamil[~a] = {0.}; ~%", numP),
  replaceList : [wvpar^2=wvparSq, rdvpar2^2=rdvpar2Sq, rdx2^2=rdx2Sq, m_^2=mSq, q_^2=qSq],
  hamilCvar : eval_string(sconcat("hamil")),
  writeCExprsNoExpand1(hamilCvar, gcfac(float(expand(subst(replaceList, hamil_c))))),
  printf(fh, "~%"),
  flush_output(fh),
  hamilNoZero_c : makelistNoZeros1(hamil_c, hamilCvar),
  /* Expand projected Hamiltonian on basis. */
  hamil_e : hamilNoZero_c . bSurf,


  /*fl and fr */
  JfL_e : doExpand1(JfL, bP),
  JfR_e : doExpand1(JfR, bP),
  JfL_c : calcInnerProdList(surfIntVars, 1, bSurf, subst(surfVar=1,JfL_e)),
  JfR_c : calcInnerProdList(surfIntVars, 1, bSurf, subst(surfVar=-1,JfR_e)),
  JfL_e : JfL_c . bSurf,
  JfR_e : JfR_c . bSurf,

  JfL_nodes : float(evAtNodes(JfL_e,surfNodes,surfIntVars)),
  JfR_nodes : float(evAtNodes(JfR_e,surfNodes,surfIntVars)),

  vmap_prime_nodes : float(evAtNodes(vmap_prime_e[1],surfNodes,surfIntVars)),

  vpardim : pDim-1,
  if vdim = 1 then ( vpardim : pDim ),
  dH_dz_nodes : makelist(0, i, 1, pDim),  
  for i : 1 thru vpardim do (
    if i = vpardim then (
      /*dH_dz_nodes[i] : (float(evAtNodes(diff(hamil_e,varsP[i]),surfNodes,surfIntVars)))/(float(evAtNodes(vmap_prime_e,surfNodes,surfIntVars)))*/
      dH_dz_nodes[i] : float(evAtNodes(diff(hamil_e,varsP[i]),surfNodes,surfIntVars))
    )
    else (
      dH_dz_nodes[i] : float(evAtNodes(diff(hamil_e,varsP[i]),surfNodes,surfIntVars))
    )
  ),

  if surfDir = cdim then(
      di3 : true
  )
   else (
      di3 : false
  ),

  /* Now calculate flux at all quadrature nodes */
  printf(fh, "double alpha_surf_nodal[~a]= {0.0}; ~%", numSurfNodes),
  printf(fh, "double flux_surf_nodal[~a]= {0.0}; ~%", numSurfNodes),
  printf(fh, "double cfl = 0.0; ~%"),
  printf(fh, "double bmag_quad = 0.0; ~%"),
  printf(fh, "double Jc_quad = 0.0; ~%"),
  printf(fh, "double B3_quad = 0.0; ~%"),
  printf(fh, "double normcurlbhat_quad = 0.0; ~%"),
  printf(fh, "double area_elem_quad = 0.0; ~%"),
  printf(fh, "double bhat_quad[3] = {0.0}; ~%"),
  printf(fh, "~%"),
  for i : 1 thru numSurfConfigNodes do (
    printf(fh, "~%"),
    printf(fh, "bmag_quad = gkdgs[~a].bmag; ~%", i-1), 
    printf(fh, "Jc_quad = gkdgs[~a].Jc; ~%", i-1), 
    printf(fh, "B3_quad = gkdgs[~a].B3; ~%", i-1), 
    printf(fh, "normcurlbhat_quad = gkdgs[~a].normcurlbhat; ~%", i-1), 
    printf(fh, "bhat_quad[0] = gkdgs[~a].bhat.x[0];  ~%", i-1), 
    printf(fh, "bhat_quad[1] = gkdgs[~a].bhat.x[1];  ~%", i-1), 
    printf(fh, "bhat_quad[2] = gkdgs[~a].bhat.x[2];  ~%", i-1), 
    printf(fh, "area_elem_quad = dgs[~a].area_elem; ~%", i-1), 
    printf(fh, "~%"),
    for j : 1 thru numVelNodes do (
      j0index : j-1+(i-1)*numVelNodes,
      j1index : j+(i-1)*numVelNodes,
      if di3 = true then (
        printf(fh, "flux_surf_nodal[~a] = (~a)/m_/bmag_quad * B3_quad ;~%", j0index, dH_dz_nodes[vpardim][j1index]/vmap_prime_nodes[j1index])
      )
      else (
        printf(fh, "flux_surf_nodal[~a] = 0.0  ;~%", j0index)
      ),
      if no_by = false then (
        printf(fh, "flux_surf_nodal[~a] += (~a)/m_/bmag_quad * (~a)/q_ * normcurlbhat_quad ;~%", j0index, dH_dz_nodes[vpardim][j1index]/vmap_prime_nodes[j1index], dH_dz_nodes[vpardim][j1index]),
        if cdim = 3 then (
           if surfDir = 1 then(
             printf(fh, "flux_surf_nodal[~a] += 1/q_/bmag_quad/area_elem_quad * (bhat_quad[1]*(~a) - bhat_quad[2]*(~a))  ;~%", j0index, dH_dz_nodes[3][j1index], dH_dz_nodes[2][j1index])
           ),
           if surfDir = 2 then(
             printf(fh, "flux_surf_nodal[~a] += 1/q_/bmag_quad/area_elem_quad * (bhat_quad[2]*(~a) - bhat_quad[0]*(~a))  ;~%", j0index, dH_dz_nodes[1][j1index], dH_dz_nodes[3][j1index])
           ),
           if surfDir = 3 then(
             printf(fh, "flux_surf_nodal[~a] += 1/q_/bmag_quad/area_elem_quad * (bhat_quad[0]*(~a) - bhat_quad[1]*(~a))  ;~%", j0index, dH_dz_nodes[2][j1index], dH_dz_nodes[1][j1index])
           )
        ),
        if cdim = 2 then (
           if surfDir = 1 then(
             printf(fh, "flux_surf_nodal[~a] += 1/q_/bmag_quad/area_elem_quad * bhat_quad[1]*(~a)  ;~%", j0index, dH_dz_nodes[2][j1index])
           ),
           if surfDir = 2 then(
             printf(fh, "flux_surf_nodal[~a] += 1/q_/bmag_quad/area_elem_quad * -bhat_quad[0]*(~a) ;~%", j0index, dH_dz_nodes[1][j1index])
           )
        )
      ),
      printf(fh, "alpha_surf_nodal[~a] = flux_surf_nodal[~a]*area_elem_quad/Jc_quad ;~%", j0index, j0index),
      printf(fh, "cfl = fmax(fabs(alpha_surf_nodal[~a]), fabs(cfl)) ;~%", j0index),
      printf(fh, "flux_surf_nodal[~a] *= area_elem_quad ;~%", j0index),
      printf(fh, "flux_surf_nodal[~a] = flux_surf_nodal[~a]/2.0/Jc_quad * (~a + ~a) + fabs(flux_surf_nodal[~a])/2.0/Jc_quad * (~a - (~a)) ;~%", j0index, j0index, JfR_nodes[j1index], JfL_nodes[j1index], j0index, JfR_nodes[j1index], JfL_nodes[j1index])
    )
  ),

  for k : 1 thru length(bSurf) do (
    printf(fh, "basis->quad_nodal_to_modal(flux_surf_nodal, &flux_surf[~a], ~a) ;~%", length(bSurf)*(surfDir-1), k-1)
  ),

  /*Calculate the cfl*/
  pOrderCFL : polyOrder,
  printf(fh, "~%"),
  printf(fh, "  return cfl*~a; ~%", float(0.5*(2*pOrderCFL+1)*rdSurfVar2)),

  printf(fh, "~%"),
  flush_output(fh),
  printf(fh, "} ~%")

)$
