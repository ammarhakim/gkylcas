/* Generate the header file for Vlasov LBO kernels. */

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
minVdim_Ser : 1$    /* see begining of v loop below though. */
maxCdim_Ser : 3$
maxVdim_Ser : 3$

/* Tensor product basis. */
/* Note that Serendipity, p = 1, is equivalent to Tensor */
/* Thus no need to calculate p = 1 Tensor basis */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
minVdim_Tensor : 1$    /* see begining of v loop below though. */
maxCdim_Tensor : 2$
maxVdim_Tensor : 3$

/* ...... END OF USER INPUTS........ */

bName        : ["ser","tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
minVdim      : [minVdim_Ser, minVdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$
maxVdim      : [maxVdim_Ser, maxVdim_Tensor]$

/* Is non-uniform booleans. */

/* NOT CURRENTLY USED IN THIS HEADER GENERATION */

if     grid="uni"    then (gridType : [false])
elseif grid="nonuni" then (gridType : [true])
elseif grid="both"   then (gridType : [false,true])$

cvars : [x, y, z]$

printPrototypeDrag(deco, ci, vi, bStr, pi) := block([si],

  printf(fh, "~adouble lbo_vlasov_drag_vol_~ax~av_~a_p~a(const double *w, const double *dxv, const double *nuSum, const double *nuPrimMomsSum, const double *f, double* GKYL_RESTRICT out); ~%", deco, ci, vi, bStr, pi),
  printf(fh, "~adouble lbo_vlasov_vmap_drag_vol_~ax~av_~a_p~a(const double *w, const double *dxv, const double *vmap, const double *jacob_vel_inv, const double *nuSum, const double *nuPrimMomsSum, const double *f, double* GKYL_RESTRICT out); ~%", deco, ci, vi, bStr, pi),
  for si : 1 thru vi do (
    printf(fh, "~adouble lbo_vlasov_drag_boundary_surfv~a_~ax~av_~a_p~a(const double *w, const double *dxv, const double *vmap, const double *jacob_vel_inv, const double *nuSum, const double *nuPrimMomsSum, int edge, const double *fEdge, const double *fSkin, double* GKYL_RESTRICT out); ~%", deco, cvars[si], ci, vi, bStr, pi),
    printf(fh, "~adouble lbo_vlasov_drag_surfv~a_~ax~av_~a_p~a(const double *w, const double *dxv, const double *vmap, const double *jacob_vel_inv, const double *nuSum, const double *nuPrimMomsSum, const double *fl, const double *fc, const double *fr, double* GKYL_RESTRICT out); ~%", deco, cvars[si], ci, vi, bStr, pi), 
    printf(fh, "~adouble lbo_vlasov_vmap_drag_boundary_surfv~a_~ax~av_~a_p~a(const double *w, const double *dxv, const double *vmap, const double *jacob_vel_inv, const double *nuSum, const double *nuPrimMomsSum, int edge, const double *fEdge, const double *fSkin, double* GKYL_RESTRICT out); ~%", deco, cvars[si], ci, vi, bStr, pi),
    printf(fh, "~adouble lbo_vlasov_vmap_drag_surfv~a_~ax~av_~a_p~a(const double *w, const double *dxv, const double *vmap, const double *jacob_vel_inv, const double *nuSum, const double *nuPrimMomsSum, const double *fl, const double *fc, const double *fr, double* GKYL_RESTRICT out); ~%", deco, cvars[si], ci, vi, bStr, pi)
  ),
  printf(fh, "~%")
)$

printPrototypeDiff(deco, ci, vi, bStr, pi) := block([si],

  printf(fh, "~adouble lbo_vlasov_diff_vol_~ax~av_~a_p~a(const double *w, const double *dxv, const double *nuSum, const double *nuPrimMomsSum, const double *f, double* GKYL_RESTRICT out); ~%", deco, ci, vi, bStr, pi),
  for si : 1 thru vi do (
    printf(fh, "~adouble lbo_vlasov_diff_boundary_surfv~a_~ax~av_~a_p~a(const double *w, const double *dxv, const double *nuSum, const double *nuPrimMomsSum, int edge, const double *fEdge, const double *fSkin, double* GKYL_RESTRICT out); ~%", deco, cvars[si], ci, vi, bStr, pi),
    printf(fh, "~adouble lbo_vlasov_diff_surfv~a_~ax~av_~a_p~a(const double *w, const double *dxv, const double *nuSum, const double *nuPrimMomsSum, const double *fl, const double *fc, const double *fr, double* GKYL_RESTRICT out); ~%", deco, cvars[si], ci, vi, bStr, pi)
  ),
  printf(fh, "~%")
)$

/* ............ Write out the C header file ............ */

fh : openw("~/max-out/gkyl_lbo_vlasov_kernels.h")$
printf(fh, "#pragma once ~%")$
printf(fh, "#include <math.h> ~%")$
printf(fh, "#include <gkyl_util.h> ~%")$
printf(fh, "EXTERN_C_BEG ~%")$
printf(fh, "~%")$

decorator : "GKYL_CU_DH "$

for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    minVdim : c, 
    if (c < 3) then minVdim : 1, 
    for v : minVdim thru maxVdim[bInd] do (

      minPolyOrderB : minPolyOrder[bInd],
      maxPolyOrderB : maxPolyOrder[bInd],
      if (c+v>5 and maxPolyOrderB > 1) then maxPolyOrderB : 1,

      for polyOrder : minPolyOrderB thru maxPolyOrderB do (
        printPrototypeDrag(decorator, c, v, bName[bInd], polyOrder),
        printPrototypeDiff(decorator, c, v, bName[bInd], polyOrder)
      )
    )
  )
);

printf(fh, "EXTERN_C_END ~%")$

close(fh)$

/* ............ Finished writing out the C header file ............ */


