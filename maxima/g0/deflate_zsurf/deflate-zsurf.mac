load("modal-basis")$
load(stringproc)$
load("out-scripts")$

/* Taking a 2d or 3d DG field as an input, these kernels will
deflate the field onto a surface of constant "z" (the last coordinate)
*/

deflatezsurf(fh, basisName, polyOrder, cdim) := block(
  [vars, basis, numCoeffs, removeVars, vars_deflated, removeStr,
   ndim, basis_deflated, numCoeffs_deflated, fld_zl, fld_e, boundaries,
   boundaryvals, ibry, sublist, fld_deflated_e, fld_deflated_c],

  [vars,basis] : loadBasis(basisName, cdim, polyOrder),
  numCoeffs : length(basis),

  if cdim=2 then (
    removeVars : [y]
  ),

  if cdim=3 then (
    removeVars : [z]
  ),

  vars_deflated : delete(removeVars[1],vars),
  removeStr : "rem",
  removeStr : sconcat(removeStr,removeVars[1]),
  ndim : length(vars),
  basis_deflated : basisFromVars(basisName, vars_deflated, polyOrder) ,
  numCoeffs_deflated : length(basis_deflated),

  mkzlist(S,N) := makelist(S[i],i,0,N-1),

  fld_zl : mkzlist(fld, numCoeffs),
  fld_e : doExpand(fld_zl, basis),

  boundaries : ["lo", "up"],
  boundaryvals : [-1,1],

  for ibry : 1 thru 2 do(

    sublist : makelist(removeVars[k] = boundaryvals[ibry],k,1,length(removeVars)),

    fld_deflated_e : subst(sublist, fld_e),
    fld_deflated_c : calcInnerProdList(vars_deflated,1,basis_deflated,fld_deflated_e),


    printf(fh, "GKYL_CU_DH void deflate_zsurf_~a_~ax_~a_p~a_~a(const double *fld, double *fld_deflated) ~%{ ~%", boundaries[ibry], ndim, basisName, polyOrder, removeStr),

    writeCExprs1(fld_deflated, fld_deflated_c),

    printf(fh, " ~%"),
    printf(fh, "}~%")
  )




)$
