/* Generate kernels for the updater that computes the primitive
   moments u and vt^2 given the moments and the distribution function.
   Weak division, multiplication and dot products are employed.

   Note that this Maxima only sets the requisite matrices for the linear
   system to solve and an external *batched* linear solve is performed. */

load("modal-basis")$
load("out-scripts")$
load("nodal_operations/nodal_functions")$
load(stringproc)$
fpprec : 24$

varsCAll : [x, y, z]$

writeCExprsA(lhs, rhs) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then printf(fh,"  ~a,~a); ~%", lhs[i], expr[i])
  )
)$

writeCExprs1s(lhs, rhs) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    printf(fh, "    ~a = ~a; ~%", lhs[i-1], expr[i])
  )
)$

calcSelfPrimMomsLBO(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,NC,udim,nodes,m0_c,m0_e,vtSq_c,vtSq_e,m1_c,m1_e,m0Corners,
   m2Corners,expr,eq,cM_c,cM_e,cE_c,cE_e,u_c,u_e,N,E,Eflat,Elhs,m1RHS_c],

  if (sequal(substring(funcNm,1,7),"vlasov")) then (
    /* Vlasov-Maxwell. */
    udim     : vdim,
    vdimPhys : vdim
  ) else (
    /* Gyrokinetics. */
    udim : 1,
    vdimPhys : 2*vdim-1
  )

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),

  /* Number of basis monomials. */
  NC : length(bC),

  /* Function declaration with input/output variables. */
  printf(fh, "GKYL_CU_DH void ~a(struct gkyl_mat *A, struct gkyl_mat *rhs, const double *moms, const double *boundary_corrections) ~%{ ~%", funcNm, polyOrder),
  printf(fh, "  // A:                    Matrix to be inverted to solve Ax = rhs (set by this function). ~%"),
  printf(fh, "  // rhs:                  right-hand side of Ax = rhs (set by this function). ~%"),
  printf(fh, "  // moms:                 moments of the distribution function (Zeroth, First, and Second in single array). ~%"),
  printf(fh, "  // boundary_corrections: boundary corrections to u and vtSq. ~%"),
  printf(fh, " ~%"),

  /* In order to avoid dividing by very small, negative or zero densities
     use the cell average operations when m0,m2<0 at one of the corners. */
  printf(fh, "  // If m0 or m2 is below zero at a corner, use cell averages.~%"),
  printf(fh, "  bool notCellAvg = true;~%"),
  nodes : getNodes(basisFun, cdim, 1),
  m0in_e : doExpand(makelist(moms[NC*0+i-1],i,1,NC),bC),
  m0Corners : gcfac(float(fullratsimp( evAtNodes(m0in_e,nodes,varsC) ))),
  for i : 1 thru length(nodes) do (
    printf(fh, "  if (notCellAvg && (~a < 0)) notCellAvg = false; ~%", m0Corners[i])
  ),
  m2in_e : doExpand(makelist(moms[NC*(udim+1)+i-1],i,1,NC),bC),
  m2Corners : gcfac(float(fullratsimp( evAtNodes(m2in_e,nodes,varsC) ))),
  for i : 1 thru length(nodes) do (
    printf(fh, "  if (notCellAvg && (~a < 0)) notCellAvg = false; ~%", m2Corners[i])
  ),
  printf(fh, " ~%"),

  /* Declare new buffers where moments and boundary corrections are stored. */
  printf(fh, "  double m0r[~a] = {0.0}; ~%", NC),
  printf(fh, "  double m1r[~a] = {0.0}; ~%", udim*NC),
  printf(fh, "  double cMr[~a] = {0.0}; ~%", udim*NC),
  printf(fh, "  double cEr[~a] = {0.0}; ~%", NC),

  printf(fh, "  if (notCellAvg) { ~%"),
  /* Use the original expansion polynomial. */
  writeCExprs1s(m0r,makelist(moms[i],i,0,NC-1)),
  writeCExprs1s(m1r,makelist(moms[i+NC],i,0,udim*NC-1)),
  expr : float(expand(makelist(moms[i+NC],i,0,udim*NC-1))),
  for i : 1 thru length(expr) do (
    printf(fh,"    gkyl_mat_set(rhs,~a,0,~a); ~%", i-1, expr[i])
  ),
  writeCExprs1s(cMr,makelist(boundary_corrections[i],i,0,udim*NC-1)),
  writeCExprs1s(cEr,makelist(boundary_corrections[i+udim*NC],i,0,NC-1)),
  /* Use original M2 expansion. */
  expr : float(expand(makelist(moms[i+NC*(udim+1)],i,0,NC-1))),
  for i : 1 thru length(expr) do (
    printf(fh,"    gkyl_mat_set(rhs,~a,0,~a); ~%", i-1+udim*NC, expr[i])
  ),
  printf(fh, "  } else { ~%"),
  /* Use the cell average of m0 and m1. */
  writeCExprs1s(m0r,append([moms[0]],makelist(0.0,i,1,NC-1))),
  for vd : 1 thru udim do (
    expr : float(expand(append([moms[(vd)*NC]],makelist(0.0,i,1,NC-1)))),
    for i : 1 thru length(expr) do (
      printf(fh, "    ~a = ~a; ~%", m1r[(vd-1)*NC+i-1], expr[i])
    ),
    for i : 1 thru length(expr) do (
      printf(fh,"    gkyl_mat_set(rhs,~a,0,~a); ~%", i-1, expr[i])
    ),
    expr : float(expand(append([boundary_corrections[(vd-1)*NC]],makelist(0.0,i,1,NC-1)))),
    for i : 1 thru length(expr) do (
      printf(fh, "    ~a = ~a; ~%", cMr[(vd-1)*NC+i-1], expr[i])
    )
  ),
  writeCExprs1s(cEr,append([boundary_corrections[udim*NC]],makelist(0.0,i,1,NC-1))),
  /* Use cell average of 2nd moment. */
  expr : float(expand(append([moms[(udim+1)*NC]],makelist(0.0,i,1,NC-1)))),
  for i : 1 thru length(expr) do (
    printf(fh,"    gkyl_mat_set(rhs,~a,0,~a); ~%", i-1+udim*NC, expr[i])
  ),
  printf(fh, "  } ~%"),
  printf(fh, " ~%"),

  /* Expansion in configuration space basis and coefficients of m0. */
  m0_e : doExpand1(m0r, bC),
  m0_c : makelist(m0r[i],i,0,NC-1),
  /* Equivalently for  vtSq .*/
  vtSq_e : doExpand1(vtSq,bC),
  vtSq_c : makelist(vtSq[i],i,0,NC-1),
  /* cM and cE are the corrections to u and vtSq
     needed to preserve momentum and energy conservation. */
  cE_e : doExpand1(cEr, bC),
  cE_c : makelist(cEr[i],i,0,NC-1),

  /* N is the size of the linear problem. LHS Eigen matrix is NxN. */
  N : NC*(udim+1),

  /* Make a list of the LHS matrix assignments. */
  /* Note: Eigen defaults to Column-major order. */
  Ef[i,j] := sconcat("gkyl_mat_set(A,",i,",",j),

  m1RHS_c : [],
  for vd : 1 thru udim do (
    /* Expand u function and create a list of expansion coefficients. */
    m1_e : doExpand1(m1r, bC),
    m1_c : makelist(m1r[i],i,0,NC-1),
    u_e  : doExpand1(u,bC),
    u_c  : makelist(u[i],i,0,NC-1),
    cM_e : doExpand1(cMr, bC),
    cM_c : makelist(cMr[i],i,0,NC-1),
    /* Use the vd component of u, m1 and cM. */
    u_e : subst(makelist(u[i]=u[(vd-1)*NC+i],i,0,NC-1),u_e),
    u_c : subst(makelist(u[i]=u[(vd-1)*NC+i],i,0,NC-1),u_c),
    m1_e : subst(makelist(m1r[i]=m1r[(vd-1)*NC+i],i,0,NC-1),m1_e),
    m1_c : subst(makelist(m1r[i]=m1r[(vd-1)*NC+i],i,0,NC-1),m1_c),
    cM_e : subst(makelist(cMr[i]=cMr[(vd-1)*NC+i],i,0,NC-1),cM_e),
    cM_c : subst(makelist(cMr[i]=cMr[(vd-1)*NC+i],i,0,NC-1),cM_c),

    /*........... Matrix block from weak multiply of u and M_0 .............*/
    eq : calcInnerProdList(varsC,u_e,bC,m0_e),
    E  : fullratsimp(coefmatrix(eq,u_c)),
    /* Flatten E for WriteCExprsB. */
    Eflat : list_matrix_entries(E),
  
    Elhs : list_matrix_entries(genmatrix(Ef,vd*NC-1,vd*NC-1,(vd-1)*NC,(vd-1)*NC)),
  
    printf(fh, "  // ....... Block from weak multiply of u~a and m0  .......... // ~%", varsCAll[vd]),
    writeCExprsA(Elhs,Eflat),
    printf(fh, " ~%"),
  
    /*........... Matrix block from correction to u .............*/
    eq : -calcInnerProdList(varsC,vtSq_e,bC,cM_e),
    E  : fullratsimp(coefmatrix(eq,vtSq_c)),
    /* Flatten E for WriteCExprsB. */
    Eflat : list_matrix_entries(E),
  
    Elhs  : list_matrix_entries(genmatrix(Ef,vd*NC-1,N-1,(vd-1)*NC,(udim-1)*NC+NC)),
  
    printf(fh, "  // ....... Block from correction to u~a .......... // ~%", varsCAll[vd]),
    writeCExprsA(Elhs,Eflat),
    printf(fh, " ~%"),
  
    /*........... Matrix block from weak multiply of u and m1 .............*/
    eq    : calcInnerProdList(varsC,u_e,bC,m1_e),
    E     : fullratsimp(coefmatrix(eq,u_c)),
    /* Flatten E for WriteCExprsB. */
    Eflat : list_matrix_entries(E),
  
    Elhs  : list_matrix_entries(genmatrix(Ef,N-1,vd*NC-1,udim*NC,(vd-1)*NC)),

    printf(fh, "  // ....... Block from weak multiply of u~a and m1~a  .......... // ~%", varsCAll[vd], varsCAll[vd]),
    writeCExprsA(Elhs,Eflat),
    printf(fh, " ~%"),

    /* Vector of all m1 coefficients. */
    m1RHS_c : append(m1RHS_c,m1_c)
  ),
  
  /*........... Matrix block from correction to vtSq .............*/
  eq : calcInnerProdList(varsC,vtSq_e,bC,vdimPhys*m0_e-cE_e),
  E : fullratsimp(coefmatrix(eq,vtSq_c)),
  /* Flatten E for WriteCExprsB. */
  Eflat : list_matrix_entries(E),
  
  Elhs  : list_matrix_entries(genmatrix(Ef,N-1,N-1,udim*NC,udim*NC)),
  
  printf(fh, "  // ....... Block from correction to vtSq .......... // ~%"),
  writeCExprsA(Elhs,Eflat),
  printf(fh, " ~%"),

  printf(fh, "} ~%"),
  printf(fh, " ~%")
)$


