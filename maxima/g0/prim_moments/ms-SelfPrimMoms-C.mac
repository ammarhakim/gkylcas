load("prim_moments/SelfPrimMoms-C")$

load(stringproc)$

/* ...... USER INPUTS........ */

/* Serendipity basis. */

minPolyOrder_Ser : 2$

maxPolyOrder_Ser : 2$

minCdim_Ser : 1$

minVdim_Ser : 1$    /* but see v loop below. */
maxCdim_Ser : 3$

maxVdim_Ser : 3$

/* Tensor order basis. */

minPolyOrder_Tensor : 2$

maxPolyOrder_Tensor : 2$

minCdim_Tensor : 1$

minVdim_Tensor : 1$

maxCdim_Tensor : 0$

maxVdim_Tensor : 0$

gkVdims      : [[1,2], [2], [2]]$

/* ...... END OF USER INPUTS........ */

/* To generate other bases, just add corresponding column to arrays below. */

bName        : ["ser", "tensor"]$

minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$

maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$

minCdim      : [minCdim_Ser, minCdim_Tensor]$

minVdim      : [minVdim_Ser, minVdim_Tensor]$

maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$

maxVdim      : [maxVdim_Ser, maxVdim_Tensor]$

for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    /* Vlasov primitive moments. */
    for v : max(c,minVdim[bInd]) thru maxVdim[bInd] do (
      minPolyOrderB : minPolyOrder[bInd],
      maxPolyOrderB : maxPolyOrder[bInd],
      if (c+v>4 and maxPolyOrderB > 1) then maxPolyOrderB : 1,
      for polyOrder : minPolyOrderB thru maxPolyOrderB do (
        disp(printf(false,sconcat("Creating VmSelfPrimMoments ~ax~av ", bName[bInd], " P~a"),c,v, polyOrder)),
        fname : sconcat("~/max-out/vlasov_self_prim_moments_", c, "x", v, "v_", bName[bInd],"_p",polyOrder, ".c"),
        fh : openw(fname),
        printf(fh, "#include <gkyl_prim_lbo_vlasov_kernels.h> ~%"),
        printf(fh, " ~%"),
        funcName : sconcat("vlasov_self_prim_moments_", c, "x", v, "v_", bName[bInd],"_p",polyOrder),
        calcSelfPrimMoms(fh, funcName, c, v, bName[bInd], polyOrder),
        close(fh)
      )
    )
  )
);


