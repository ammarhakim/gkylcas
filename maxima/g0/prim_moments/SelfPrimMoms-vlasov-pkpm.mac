/* Generate kernels for the updater that sets the matrices to compute the primitive
    primitive moments vt^2 given the moments and the distribution function.
    Note this primitive moment solver for the parallel-kinetic-
    perpendicular-moment model only requires vt^2 (no u) because
    the Vlasov equation is already in the local rest frame.
    Weak multiplication and dot products are employed to set up the matrices.
    Weak division employed elsewhere to obtain final result.

   Note that this Maxima only sets the requisite matrices for the linear
   system to solve and an external *batched* linear solve is performed. */

/* In the comments we refer to the rank 3 tensor E_M. This is
   E_{M,i,j,k} = InnerProd(varsC,bC[i],bC[j],bC[k]). */

load("modal-basis");

load("out-scripts");

load("nodal_operations/node_locations");

load(stringproc)$

fpprec : 24$

VarsC : [X, Y, Z]$

varsV : [vx, vy, vz]$

writeCExprsA(lhs, rhs) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then printf(fh,"  ~a,~a); ~%", lhs[i], expr[i])
  )
)$

writeCExprsB(lhs, rhs) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then printf(fh, "  ~a = ~a; ~%", sremove("\\", ssubst(")","]",ssubst("(","[",string(lhs[i])))), expr[i])
  )
)$

writeCExprs1s(lhs, rhs) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    printf(fh, "    ~a = ~a; ~%", lhs[i-1], expr[i])
  )
)$

calcSelfPrimMoms(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block([bP,bC,NP,NC,udim,nodes,m0_c,m0_e,vtSq_c,vtSq_e,m1_c,m1_e,m0Corners,m2Corners,expr,eq,cM_c,cM_e,cE_c,cE_e,u_c,u_e,E,Eflat,Elhs,m1RHS_c],

  kill(varsC, varsP, basisC, basisP),

  /* Load basis of dimensionality requested. */
  [varsC,bC,varsP,bP] : loadPhaseBasis(basisFun, cdim, vdim, polyOrder),

  NP  : length(bP),
  NC  : length(bC),
  nodes : eval_string(sconcat("nodesSer", cdim, "xp", 1)),

  /* Function declaration with input/output variables. */
  printf(fh, "GKYL_CU_DH void ~a(struct gkyl_mat *A, struct gkyl_mat *rhs, const double *moms, const double *p_ij, const double *boundary_corrections) ~%{ ~%", funcNm, polyOrder),
  printf(fh, "  // A:                    Matrix to be inverted to solve Ax = rhs (set by this function). ~%"),
  printf(fh, "  // rhs:                  right-hand side of Ax = rhs (set by this function). ~%"),
  printf(fh, "  // moms:                 moments of the distribution function (Zeroth, vpar^2, vpar^3, only need Zeroth). ~%"),
  printf(fh, "  // p_ij:                 Fluid pressure tensor (trace of pressure tensor used to obtain vt^2). ~%"),
  printf(fh, "  // boundary_corrections: boundary corrections to vtSq. ~%"),
  printf(fh, " ~%"),

  /* In order to avoid dividing by very small, negative or zero densities
     use the cell average m0 when m0<0 at one of the corners. */
  printf(fh, "  // If a corner value is below zero, use cell average m0.~%"),
  printf(fh, "  bool cellAvg = false;~%"),
  nodesub(f):=makelist(subst(makelist(varsC[j]=nodes[i][j],j,1,length(varsC)),f),i,1,length(nodes)),
  m0Corners : gcfac(float(fullratsimp(nodesub(doExpand1(moms,bC))))),
  for i : 1 thru length(nodes) do (
    printf(fh, "  if (~a < 0) cellAvg = true; ~%", m0Corners[i])
  ),
  printf(fh, " ~%"),

  /* Get pointers to diagonal parts of pressure tensor. */
  printf(fh, "  const double *Pxx = &p_ij[~a]; ~%", 0),
  printf(fh, "  const double *Pyy = &p_ij[~a]; ~%", 3*NC),
  printf(fh, "  const double *Pzz = &p_ij[~a]; ~%", 5*NC),

  /* Declare new buffers where moments and boundary corrections are stored. */
  printf(fh, "  double m0r[~a] = {0.0}; ~%", NC),
  printf(fh, "  double cEr[~a] = {0.0}; ~%", NC),

  printf(fh, "  if (cellAvg) { ~%"),
  /* Use the cell average of m0. */
  writeCExprs1s(m0r,append([moms[0]],makelist(0.0,i,1,NC-1))),

  writeCExprs1s(cEr,append([boundary_corrections[0]],makelist(0.0,i,1,NC-1))),
  /* For higher polynomial order use cell average of 2nd moment. */
  expr : float(expand(append([Pxx[0]+Pyy[0]+Pzz[0]],makelist(0.0,i,1,NC-1)))),

  for i : 1 thru length(expr) do (
    printf(fh,"    gkyl_mat_set(rhs,~a,0,~a); ~%", i-1, expr[i])
  ),
  printf(fh, "  } else { ~%"),
  /* Use the original expansion polynomial. */
  writeCExprs1s(m0r,makelist(moms[i],i,0,NC-1)),

  writeCExprs1s(cEr,makelist(boundary_corrections[i],i,0,NC-1)),

  expr : float(expand(makelist(Pxx[i]+Pyy[i]+Pzz[i],i,0,NC-1))),
  for i : 1 thru length(expr) do (
    printf(fh,"    gkyl_mat_set(rhs,~a,0,~a); ~%", i-1, expr[i])
  ),
  printf(fh, "  } ~%"),
  printf(fh, " ~%"),

  /* Expansion in configuration space basis and coefficients of m0. */
  m0_e : doExpand1(m0r, bC),
  m0_c : makelist(m0r[i],i,0,NC-1),

  /* Equivalently for  vtSq .*/
  vtSq_e : doExpand1(vtSq,bC),
  vtSq_c : makelist(vtSq[i],i,0,NC-1),
  /* cE is the correction to vtSq
     needed to preserve energy conservation. */
  cE_e : doExpand1(cEr, bC),
  cE_c : makelist(cEr[i],i,0,NC-1),

  /* Make a list of the LHS matrix assignments. */
  /* Note: Eigen defaults to Column-major order. */
  Ef[i,j] := sconcat("gkyl_mat_set(A,",i,",",j),
  
  /*........... Matrix block from correction to vtSq .............*/
  eq : calcInnerProdList(varsC,vtSq_e,bC,3*m0_e-cE_e),

  E  : fullratsimp(coefmatrix(eq,vtSq_c)),
  /* Flatten E for WriteCExprsB. */
  Eflat : list_matrix_entries(E),
  
  Elhs     : list_matrix_entries(genmatrix(Ef,NC-1,NC-1,0,0)),
  
  printf(fh, "  // ....... Block from correction to vtSq .......... // ~%"),
  writeCExprsA(Elhs,Eflat),
  printf(fh, " ~%"),

  printf(fh, "} ~%"),
  printf(fh, " ~%")
)$


