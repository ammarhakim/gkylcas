/* Generate a header file for primitive moment kernels in the GkLBO. */

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
maxCdim_Ser : 3$

/* Tensor product basis. */
/* Note that Serendipity, p = 1, is equivalent to Tensor */
/* Thus no need to calculate p = 1 Tensor basis */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
maxCdim_Tensor : 2$

/* ...... END OF USER INPUTS........ */

bName        : ["ser","tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
minVdim      : [minVdim_Ser, minVdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$
maxVdim      : [maxVdim_Ser, maxVdim_Tensor]$

gkVdims   : [[1,2], [2], [2]]$



fh : openw("~/max-out/gkyl_prim_lbo_gyrokinetic_kernels.h")$

printf(fh, "#pragma once ~%")$
printf(fh, "#include <math.h> ~%")$
printf(fh, "#include <gkyl_mat.h> ~%")$
printf(fh, "#include <gkyl_util.h> ~%")$
printf(fh, " ~%")$
printf(fh, "EXTERN_C_BEG ~%")$
printf(fh, " ~%")$
printf(fh, "GKYL_CU_DH void prim_lbo_gyrokinetic_copy_sol(const struct gkyl_mat *rhs, const int nc, const int udim, double* GKYL_RESTRICT out); ~%")$
printf(fh, " ~%")$

for bInd : 1 thru length(bName) do (
  minPolyOrderB : minPolyOrder[bInd],
  maxPolyOrderB : maxPolyOrder[bInd],

  for ci : minCdim[bInd] thru maxCdim[bInd] do (
    for gkV : 1 thru length(gkVdims[ci]) do (
      vi : gkVdims[ci][gkV],

      if (ci+vi>4 and maxPolyOrderB > 2) then maxPolyOrderB : 2,
      for pi : minPolyOrderB thru maxPolyOrderB do (
        /* Primitive moments for self-collision terms with p>1. */
        printf(fh, "GKYL_CU_DH void gyrokinetic_self_prim_moments_~ax~av_~a_p~a(struct gkyl_mat *A, struct gkyl_mat *rhs,~%  const double *moms, const double *boundary_corrections); ~%", ci, vi, bName[bInd], pi),

        /* Primitive moments for cross-collision GkLBO terms. */
        printf(fh, "GKYL_CU_DH void gyrokinetic_cross_prim_moments_~ax~av_~a_p~a(struct gkyl_mat *A, struct gkyl_mat *rhs,~%  const double *greene, const double m_self, const double *moms_self, const double *prim_mom_self,~%  const double m_other, const double *moms_other, const double *prim_mom_other,~%  const double *boundary_corrections); ~%", ci, vi, bName[bInd], pi),

        printf(fh, "~%")
      )
    ),
    printf(fh, "~%")
  )
);

printf(fh, "EXTERN_C_END ~%")$

close(fh)$


