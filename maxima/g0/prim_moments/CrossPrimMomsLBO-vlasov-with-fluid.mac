/* Generate kernels for the updater that computes the primitive
   moments u and vt^2 given the moments and the distribution function.
   Weak division, multiplication and dot products are employed. */

/* Generate kernels for the updater that computes the primitive
   moments u_ei and vtSq_ei (or u_ie and vtSq_ie) used in the cross
   collision term, given the moments and and primitive moments
   of the electrons and ions. Weak division and multiplication
   are employed. */

/* To avoid the expensive symbolic matrix inversion in
   Maxima we use Eigen to solve the system. */

/* In the comments we refer to the rank 3 tensor E_M. This is
   E_{M,i,j,k} = InnerProd(varsC,bC[i],bC[j],bC[k]). */

load("modal-basis");
load("out-scripts");
load("nodal_operations/node_locations");
load(stringproc)$
fpprec : 24$

VarsC : [X, Y, Z]$
varsV : [vx, vy, vz]$

writeCExprsA(lhs, rhs) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then printf(fh, "  ~a,~a); ~%", lhs[i], expr[i])
  )
)$

writeCExprsB(lhs, rhs) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then printf(fh, "  ~a = ~a; ~%", sremove("\\", ssubst(")","]",ssubst("(","[",string(lhs[i])))), expr[i])
  )
)$

writeEVExprs(lhs, rhs, vd, nc, p) := block([expr],
  len   : length(rhs),
  /* vd*nc*8 is the number of coefficients from mnuM1sum. */
  /* nc*8 is the number of coefficients from mnuM2sum. */
  /* vd*nc*7 is the number of coefficients from m1Relax. */
  /* nc*7 is the number of coefficients from m2Relax. */
  /* (len-1) is the number of commas. */
  /* 2*len is the number of square brackets. */
  /* 1 is the number semi-colons? might just be an indexing thing.*/
  start : vd*nc*8+nc*8+vd*nc*7+nc*7+(len-1)+2*len+1,
  /* Number of characters indexing coefficients of mnuM1sum. */
  for k : 1 thru vd*nc do (
    start : start+slength(string(k-1))
  ),
  /* Number of characters indexing coefficients of mnuM2sum. */
  for k : 1 thru nc do (
    start : start+slength(string(k-1))
  ),
  /* Number of characters indexing coefficients of m1Relax. */
  for k : 1 thru vd*nc do (
    start : start+slength(string(k-1))
  ),
  /* Number of characters indexing coefficients of m2Relax. */
  for k : 1 thru nc do (
    start : start+slength(string(k-1))
  ),
  printf(fh, "  ~a << ~a; ~%", lhs, sremove("]",sremovefirst("[",string(rhs)),sequal,start))
)$

writeEVExprsDiv(lhs, rhs, vd, nc, p, nSlen) := block([expr],
  len   : length(rhs),
  /* nc*nSlen is the number of coefficients from variable w/ name of nSlen characters. */
  /* (len-1) is the number of commas. */
  /* 2*len is the number of square brackets. */
  /* 1 is the number semi-colons? might just be an indexing thing.*/
  start : nc*nSlen+(len-1)+2*len+1,
  /* Number of characters indexing coefficients of mnuM1sum. */
  for k : ((vd-1)*nc+0) thru (vd*nc-1) do (
    start : start+slength(string(k))
  ),
  printf(fh, "  ~a << ~a; ~%", lhs, sremove("]",sremovefirst("[",string(rhs)),sequal,start))
)$

writeCExprs1s(lhs, rhs) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    printf(fh, "    ~a = ~a; ~%", lhs[i-1], expr[i])
  )
)$

calcCrossPrimMomsLBO(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block([udim,vDegFreedom,bC,bP,NP,NC,cornerX,expr,m0_e,m0_c,m2_e,m2_c,vtsq_self_e,vtsq_self_c,vtsq_other_e,vtsq_other_c,vtSqCross_e,vtSqCross_c,cE_e,cE_c,N,bRHS_c,u_self_e,u_self_c,u_other_e,u_other_c,m1_e,m1_c,cM_e,cM_c,uCross_e,uCross_c,eq,E,Eflat,Elhs,momRHS_c,ucMSelf_c,ucMSelf_e,ucMOther_c,ucMOther_e,uM1Self_c,uM1Self_e,uM1Other_c,uM1Other_e,uSumSq_c,uSumSq_e,enRHS1_c,enRHS2_c,enRHS_c,cornerY,cornerZ,tempVars,sqCoeffs,greene],

  kill(varsC, varsP, basisC, basisP),

  if (basisFun="ser") then basisFun:"Ser",
  if (basisFun="tensor") then basisFun:"Tensor",
  load(sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v")),
  if (basisFun="Ser") then basisFun:"ser",
  if (basisFun="Tensor") then basisFun:"tensor",

  udim        : vdim,   /* Number of configuration space components of the mean flow velocity. */
  vDegFreedom : vdim,    /* Number of velocity degrees of freedom. */
    
  bC  : basisC[polyOrder],
  bP  : basisP[polyOrder],
  NP  : length(bP),
  NC  : length(bC),
  
  /* Function declaration with input/output variables. */
  printf(fh, "GKYL_CU_DH void ~a(struct gkyl_mat *A, struct gkyl_mat *rhs, const double *greene, const double m_self, const double *moms_self, const double *u_self, const double *vtsq_self, const double m_other, const double *moms_other, const double *u_other, const double *vtsq_other, const double *fluid, const double *boundary_corrections) ~%{ ~%", funcNm),
  printf(fh, "  // greene:               Greene's factor. ~%"),
  printf(fh, "  // m:                    mass. ~%"),
  printf(fh, "  // moms:                 moments of the distribution function. ~%"),
  printf(fh, "  // u,vtSq:               self primitive moments: mean flow velocity and thermal speed squared. ~%"),
  printf(fh, "  // boundary_corrections: corrections to momentum and energy conservation due to finite velocity space. ~%"),
  printf(fh, "  // uCross,vtSqCross:     cross primitive moments: mean flow velocity and thermal speed squared. ~%"),
  printf(fh, " ~%"),

  /* In order to avoid dividing by very small, negative or zero densities
     use the cell average m0 when m0<0 at one of the corners. */
  printf(fh, "  // If a corner value is below zero, use cell average m0.~%"),
  printf(fh, "  bool cellAvg = false;~%"),
  nodes : eval_string(sconcat("nodesSer", cdim, "xp", 1)),
  nodesub(f):=makelist(subst(makelist(varsC[j]=nodes[i][j],j,1,length(varsC)),f),i,1,length(nodes)),
  m0Corners : gcfac(float(fullratsimp(nodesub(doExpand1(moms_self,bC))))),
  for i : 1 thru length(nodes) do (
    printf(fh, "  if (~a < 0) cellAvg = true; ~%", m0Corners[i])
  ),
  printf(fh, " ~%"),

  /* Declare new buffers where moments are stored. */
  printf(fh, sconcat("  double m0r[~a] = {0.0}; ~%"), NC),
  printf(fh, sconcat("  double m1r[~a] = {0.0}; ~%"), udim*NC),
  printf(fh, sconcat("  double m2r[~a] = {0.0}; ~%"), NC),
  printf(fh, sconcat("  double cMr[~a] = {0.0}; ~%"), udim*NC),
  printf(fh, sconcat("  double cEr[~a] = {0.0}; ~%"), NC),
  
  printf(fh, "  if (cellAvg) { ~%"),
  /* Use the cell average of m0, m1 and m2. */
  writeCExprs1s(m0r,append([moms_self[0]],makelist(0.0,i,1,NC-1))),
  for vd : 1 thru udim do (
    expr : float(expand(append([moms_self[(vd)*NC]],makelist(0.0,i,1,NC-1)))),
    for i : 1 thru length(expr) do (
      printf(fh, "    ~a = ~a; ~%", m1r[(vd-1)*NC+i-1], expr[i])
    ),
    expr : float(expand(append([boundary_corrections[(vd-1)*NC]],makelist(0.0,i,1,NC-1)))),
    for i : 1 thru length(expr) do (
      printf(fh, "    ~a = ~a; ~%", cMr[(vd-1)*NC+i-1], expr[i])
    )
  ),
  if (vdim = 1) then (
    writeCExprs1s(m2r,append([moms_self[(udim+1)*NC]+2.0*fluid[0]],makelist(0.0,i,1,NC-1)))
  )
  else (
    writeCExprs1s(m2r,append([moms_self[(udim+1)*NC]+fluid[0]],makelist(0.0,i,1,NC-1)))
  ),
  writeCExprs1s(cEr,append([boundary_corrections[udim*NC]],makelist(0.0,i,1,NC-1))),
  printf(fh, "  } else { ~%"),
  /* Use the original expansion polynomial. */
  writeCExprs1s(m0r,makelist(moms_self[i],i,0,NC-1)),
  writeCExprs1s(m1r,makelist(moms_self[i+NC],i,0,udim*NC-1)),
  if (vdim = 1) then (
    writeCExprs1s(m2r,makelist(moms_self[i+NC*(udim+1)]+2.0*fluid[i],i,0,NC-1))
  )
  else (
    writeCExprs1s(m2r,makelist(moms_self[i+NC*(udim+1)]+fluid[i],i,0,NC-1))
  ),
  writeCExprs1s(cMr,makelist(boundary_corrections[i],i,0,udim*NC-1)),
  writeCExprs1s(cEr,makelist(boundary_corrections[i+udim*NC],i,0,NC-1)),
  printf(fh, "  } ~%"),
  printf(fh, " ~%"),

  /* Expansion in configuration space basis and coefficients of m0 and m2. */
  m0_e  : doExpand1(m0r, bC),
  m0_c  : makelist(m0r[i],i,0,NC-1),
  m2_e  : doExpand1(m2r, bC),
  m2_c  : makelist(m2r[i],i,0,NC-1),
  greene_e  : doExpand1(greene, bC),
  greene_c  : makelist(greene[i],i,0,NC-1),
  /* Equivalently for  vtSq .*/
  vtsq_self_e  : doExpand1(vtsq_self,bC),
  vtsq_self_c  : makelist(vtsq_self[i],i,0,NC-1),
  vtsq_other_e : doExpand1(vtsq_other,bC),
  vtsq_other_c : makelist(vtsq_other[i],i,0,NC-1),
  vtSqCross_e  : doExpand1(vtSqCrossSelf,bC),
  vtSqCross_c  : makelist(vtSqCrossSelf[i],i,0,NC-1),
  /* cM and cE are the corrections to u and vtSq
     needed to preserve momentum and energy conservation. */
  cE_e  : doExpand1(cEr, bC),
  cE_c  : makelist(cEr[i],i,0,NC-1),
  
  /* N is the size of the linear problem. LHS Eigen matrix is NxN. */
  N : NC*2*(udim+1),

  /* Make a list of the LHS matrix assignments. */
  /* Note: Eigen defaults to Column-major order. */
  Ef[i,j] := sconcat("gkyl_mat_set(A,",i,",",j),

  /* Variable holding addition of M1 moments for RHS vector. */
  printf(fh, "  double momRHS[~a] = {0.0}; ~%", udim*NC),
  printf(fh, " ~%"),

  bRHS_c  : [],
  for vd : 1 thru udim do (
    /* Expand u function and create a list of expansion coefficients. */
    u_self_e   : doExpand1(u_self,bC),
    u_self_c   : makelist(u_self[i],i,0,NC-1),
    u_other_e  : doExpand1(u_other,bC),
    u_other_c  : makelist(u_other[i],i,0,NC-1),
    m1_e  : doExpand1(m1r, bC),
    m1_c  : makelist(m1r[i],i,0,NC-1),
    cM_e  : doExpand1(cMr, bC),
    cM_c  : makelist(cMr[i],i,0,NC-1),
    uCross_e  : doExpand1(uCross,bC),
    uCross_c  : makelist(uCross[i],i,0,NC-1),
    /* Use the vd component of u, m1 and cM. */
    u_self_e   : subst(makelist(u_self[i]=u_self[(vd-1)*NC+i],i,0,NC-1),u_self_e),
    u_self_c   : subst(makelist(u_self[i]=u_self[(vd-1)*NC+i],i,0,NC-1),u_self_c),
    u_other_e  : subst(makelist(u_other[i]=u_other[(vd-1)*NC+i],i,0,NC-1),u_other_e),
    u_other_c  : subst(makelist(u_other[i]=u_other[(vd-1)*NC+i],i,0,NC-1),u_other_c),
    m1_e  : subst(makelist(m1r[i]=m1r[(vd-1)*NC+i],i,0,NC-1),m1_e),
    m1_c  : subst(makelist(m1r[i]=m1r[(vd-1)*NC+i],i,0,NC-1),m1_c),
    cM_e  : subst(makelist(cMr[i]=cMr[(vd-1)*NC+i],i,0,NC-1),cM_e),
    cM_c  : subst(makelist(cMr[i]=cMr[(vd-1)*NC+i],i,0,NC-1),cM_c),
    uCross_e  : subst(makelist(uCross[i]=uCross[(vd-1)*NC+i],i,0,NC-1),uCross_e),
    uCross_c  : subst(makelist(uCross[i]=uCross[(vd-1)*NC+i],i,0,NC-1),uCross_c),

    /*........... Matrix block from weak multiply of m_self, nu, M0 and uCross .............*/
    eq : calcInnerProdList(varsC,2*uCross_e,bC,m0_e),
    E  : fullratsimp(coefmatrix(eq,uCross_c)),
    /* Flatten E for WriteCExprsA. */
    Eflat : list_matrix_entries(E),
  
    Elhs  : list_matrix_entries(genmatrix(Ef,vd*NC-1,vd*NC-1,(vd-1)*NC,(vd-1)*NC)),
  
    printf(fh, "  // ... Block from weak multiply of m_self, nu, M0 and uCross~a ... // ~%", VarsC[vd]),
    writeCExprsA(Elhs,Eflat),
    printf(fh, " ~%"),
  
    /*........... Matrix block from correction to momentum conservation (self) .............*/
    eq : -calcInnerProdList(varsC,2*vtSqCross_e,bC,cM_e),
    E  : fullratsimp(coefmatrix(eq,vtSqCross_c)),
    /* Flatten E for WriteCExprsA. */
    Eflat : list_matrix_entries(E),
  
    Elhs  : list_matrix_entries(genmatrix(Ef,vd*NC-1,(udim+1)*NC-1,(vd-1)*NC,udim*NC)),
  
    printf(fh, "  // ... Block from correction to momentum conservation (self) ... // ~%"),
    writeCExprsA(Elhs,Eflat),
    printf(fh, " ~%"),
  
    /*....... Matrix block from weak multiply of m_self, nu, M1 and uCross .......*/
    eq  : calcInnerProdList(varsC,uCross_e,bC,2*m1_e - (u_self_e + u_other_e)*m0_e),
    E     : fullratsimp(coefmatrix(eq,uCross_c)),
    /* Flatten E for WriteCExprsA. */
    Eflat : list_matrix_entries(E),
  
    Elhs  : list_matrix_entries(genmatrix(Ef,(udim+1)*NC-1,vd*NC-1,udim*NC,(vd-1)*NC)),

    printf(fh, "  // ... Block from weak multiply of m_self, nu, m1~a and uCross~a ... // ~%", VarsC[vd], VarsC[vd]),
    writeCExprsA(Elhs,Eflat),
    printf(fh, " ~%"),
 
    expr : calcInnerProdList(varsC,1,bC,2*m1_e - greene_e*(u_self_e - u_other_e)),
    for i : 1 thru NC do (
      printf(fh, "  ~a += ~a; ~%", momRHS[(vd-1)*NC+i-1], float(expr[i]))
    ),
    printf(fh, " ~%"),
    momRHS_c  : makelist(momRHS[i],i,0,NC-1),
    momRHS_c  : subst(makelist(momRHS[i]=momRHS[(vd-1)*NC+i],i,0,NC-1),momRHS_c),
    bRHS_c : append(bRHS_c,momRHS_c)
  ),

/*........... Matrix block from correction to (self) 2nd moment of collision operator .............*/
  /* Need the weak dot product of u_self and cM. */
  u_self_e    : doExpand1(u_self,bC),
  u_self_e    : psubst(makelist(u_self[i]=u_self[a0+i],i,0,NC-1),u_self_e),
  u_other_e    : doExpand1(u_other,bC),
  u_other_e    : psubst(makelist(u_other[i]=u_other[a0+i],i,0,NC-1),u_other_e),
  cM_e   : doExpand1(cMr, bC),
  cM_e   : psubst(makelist(cMr[i]=cMr[a0+i],i,0,NC-1),cM_e),
  ucMSelf_c  : calcInnerProdList(varsC,u_self_e,bC,cM_e),
  ucMSelf_e  : doExpand1(ucMSelf,bC),
  ucMOther_c  : calcInnerProdList(varsC,u_other_e,bC,cM_e),
  ucMOther_e  : doExpand1(ucMOther,bC),
  printf(fh, "  double ucMSelf[~a] = {0.0}; ~%", NC),
  printf(fh, "  double ucMOther[~a] = {0.0}; ~%", NC),
  printf(fh, "  for (int vd=0; vd<~a; vd++) ~%", udim),
  printf(fh, "  { ~%"),
  printf(fh, "    int a0 = ~a; ~%",NC*vd),
  printf(fh, "    // Contribution to dot-product from weak multiplication of ~a component. ~%",vd),
  expr : float(expand(ucMSelf_c)),
  for i : 1 thru NC do (
    printf(fh, "    ~a += ~a; ~%", ucMSelf[i-1], expr[i])
  ),
  expr : float(expand(ucMOther_c)),
  for i : 1 thru NC do (
    printf(fh, "    ~a += ~a; ~%", ucMOther[i-1], expr[i])
  ),
  printf(fh, "  } ~%"),
  printf(fh, " ~%"),

  eq : calcInnerProdList(varsC,vtSqCross_e,bC,2*3*m0_e - 2*cE_e + ucMSelf_e + ucMOther_e),

  E : fullratsimp(coefmatrix(eq,vtSqCross_c)),
  /* Flatten E for WriteCExprsA. */
  Eflat : list_matrix_entries(E),
  
  Elhs  : list_matrix_entries(genmatrix(Ef,(udim+1)*NC-1,(udim+1)*NC-1,udim*NC,udim*NC)),
  
  printf(fh, "  // ... Block from correction to (self) 2nd moment of collision operator ... // ~%"),
  writeCExprsA(Elhs,Eflat),
  printf(fh, " ~%"),

  /* Need the weak dot product of u_self + u_other and M1. */
  uM1Self_c  : calcInnerProdList(varsC,u_self_e,bC,m1_e),
  uM1Self_e  : doExpand1(uM1Self,bC),
  uM1Other_c  : calcInnerProdList(varsC,u_other_e,bC,m1_e),
  uM1Other_e  : doExpand1(uM1Other,bC),
  uSumSq_c  : calcInnerProdList(varsC,u_self_e - u_other_e,bC,u_self_e - u_other_e),
  uSumSq_e  : doExpand1(uSumSq,bC),
  printf(fh, "  double uM1Self[~a] = {0.0}; ~%", NC),
  printf(fh, "  double uM1Other[~a] = {0.0}; ~%", NC),
  printf(fh, "  double uSumSq[~a] = {0.0}; ~%", NC),
  printf(fh, "  for (int vd=0; vd<~a; vd++) ~%", udim),
  printf(fh, "  { ~%"),
  printf(fh, "    int a0 = ~a; ~%",NC*vd),
  printf(fh, "    // Dot product terms in energy equation RHS. ~%"),
  expr : float(expand(uM1Self_c)),
  for i : 1 thru NC do (
    printf(fh, "    ~a += ~a; ~%", uM1Self[i-1], expr[i])
  ),
  expr : float(expand(uM1Other_c)),
  for i : 1 thru NC do (
    printf(fh, "    ~a += ~a; ~%", uM1Other[i-1], expr[i])
  ),
  tempVars : [],
  sqCoeffs : [makelist(u_self[a0+k-1],k,1,NC),makelist(u_other[a0+k-1],k,1,NC)],
  tempVars : writeCIncrExprsCollectnoPowers(uSumSq, uSumSq_c, [dx], sqCoeffs, tempVars),
  printf(fh, "  } ~%"),
  printf(fh, " ~%"),

  enRHS1_c  : calcInnerProdList(varsC,greene_e/(m_self + m_other),bC,3*(m_other*vtsq_other_e - m_self*vtsq_self_e) + 0.5*(m_other - m_self)*uSumSq_e),
  enRHS2_c  : calcInnerProdList(varsC,1,bC,2*m2_e - uM1Self_e - uM1Other_e),
  enRHS_c : enRHS1_c + enRHS2_c,
  printf(fh, "  double enRHS[~a] = {0.0}; ~%", NC),
  printf(fh, " ~%"),

  expr : float(expand(enRHS_c)),
  for i : 1 thru NC do (
    printf(fh, "  ~a = ~a; ~%", enRHS[i-1], expr[i])
  ),
  printf(fh, " ~%"),
  
  expr : float(expand(makelist(momRHS[i],i,0,udim*NC-1))),
  for i : 1 thru length(expr) do (
    printf(fh,"  gkyl_mat_set(rhs,~a,0,~a); ~%", i-1, expr[i])
  ),
  expr : float(expand(makelist(enRHS[i],i,0,NC-1))),
  for i : 1 thru length(expr) do (
    printf(fh,"  gkyl_mat_set(rhs,~a,0,~a); ~%", i-1+udim*NC, expr[i])
  ),

  printf(fh, "} ~%"),
  printf(fh, " ~%")
)$

