/* Generate kernels for the updater that computes the primitive
   moments u and vt^2 given the moments and the distribution function.
   Weak division, multiplication and dot products are employed. */

/* To avoid the expensive symbolic matrix inversion in
   Maxima we use Eigen to solve the system. */

/* In the comments we refer to the rank 3 tensor E_M. This is
   E_{M,i,j,k} = InnerProd(varsC,bC[i],bC[j],bC[k]). */

load("modal-basis");

load("out-scripts");

load(stringproc)$

load("fem-calc/femMatrices");

fpprec : 24$

VarsC : [X, Y, Z]$

varsV : [vx, vy, vz]$

writeCExprsA(lhs, rhs) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then printf(fh,"  ~a,~a); ~%", lhs[i], expr[i])
  )
)$

writeCExprsB(lhs, rhs) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then printf(fh, "  ~a = ~a; ~%", sremove("\\", ssubst(")","]",ssubst("(","[",string(lhs[i])))), expr[i])
  )
)$

writeCExprs1s(lhs, rhs) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    printf(fh, "    ~a = ~a; ~%", lhs[i-1], expr[i])
  )
)$

calcSelfPrimMoms(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block([bP,bC,NP,NC,udim,nodes,m0_c,m0_e,vtSq_c,vtSq_e,m1_c,m1_e,m0Corners,m2Corners,expr,eq,cM_c,cM_e,cE_c,cE_e,u_c,u_e,E,Eflat,Elhs,m1RHS_c],

  kill(varsC, varsP, basisC, basisP),

  if (basisFun="ser") then basisFun:"Ser",
  if (basisFun="tensor") then basisFun:"Tensor",
  load(sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v")),
  if (basisFun="Ser") then basisFun:"ser",
  if (basisFun="Tensor") then basisFun:"tensor",

  if (sequal(substring(funcNm,1,7),"vlasov")) then (
    udim : vdim
  ) else (
    udim : 1
  ),

  bC  : basisC[polyOrder],
  bP  : basisP[polyOrder],
  NP  : length(bP),
  NC  : length(bC),
  
  /* Function declaration with input/output variables. */
  printf(fh, "GKYL_CU_DH void ~a(struct gkyl_mat *A, struct gkyl_mat *rhs, const double *m0, const double *m1, const double *m2, const double *cM, const double *cE) ~%{ ~%", funcNm, polyOrder),
  printf(fh, "  // m0,m1,m2: moments of the distribution function. ~%"),
  printf(fh, "  // cM, cE:   vtSq*cM and vtSq*cE are corrections to u and vtSq, respectively. ~%"),
  printf(fh, "  // u:        velocity. ~%"),
  printf(fh, "  // vtSq:     squared thermal speed, sqrt(T/m). ~%"),
  printf(fh, " ~%"),

  /* In order to avoid dividing by very small, negative or zero densities
     use the cell average m0 when m0<0 at one of the corners. */
  printf(fh, "  // If a corner value is below zero, use cell average m0.~%"),
  printf(fh, "  bool cellAvg = false;~%"),
  nodes : eval_string(sconcat("nodes", cdim, "xp", 1)),
  nodesub(f):=makelist(subst(makelist(varsC[j]=nodes[i][j],j,1,length(varsC)),f),i,1,length(nodes)),
  m0Corners : gcfac(float(fullratsimp(nodesub(doExpand1(m0,bC))))),
  for i : 1 thru length(nodes) do (
    printf(fh, "  if (~a < 0) cellAvg = true; ~%", m0Corners[i])
  ),
  m2Corners : gcfac(float(fullratsimp(nodesub(doExpand1(m2,bC))))),
  for i : 1 thru length(nodes) do (
    printf(fh, "  if (~a < 0) cellAvg = true; ~%", m2Corners[i])
  ),
  printf(fh, " ~%"),

  /* Declare new buffers where moments, star moments and boundary corrections are stored. */
  printf(fh, "  double m0r[~a] = {0.0}; ~%", NC),
  printf(fh, "  double m1r[~a] = {0.0}; ~%", udim*NC),
  printf(fh, "  double cMr[~a] = {0.0}; ~%", udim*NC),
  printf(fh, "  double cEr[~a] = {0.0}; ~%", NC),

  printf(fh, "  if (cellAvg) { ~%"),
  /* Use the cell average of m0 and m1. */
  writeCExprs1s(m0r,append([m0[0]],makelist(0.0,i,1,NC-1))),
  for vd : 1 thru udim do (
    expr : float(expand(append([m1[(vd-1)*NC]],makelist(0.0,i,1,NC-1)))),
    for i : 1 thru length(expr) do (
      printf(fh, "    ~a = ~a; ~%", m1r[(vd-1)*NC+i-1], expr[i])
    ),
    for i : 1 thru length(expr) do (
      printf(fh,"    gkyl_mat_set(rhs,~a,0,~a); ~%", i-1, expr[i])
    ),
    expr : float(expand(append([cM[(vd-1)*NC]],makelist(0.0,i,1,NC-1)))),
    for i : 1 thru length(expr) do (
      printf(fh, "    ~a = ~a; ~%", cMr[(vd-1)*NC+i-1], expr[i])
    )
  ),
  writeCExprs1s(cEr,append([cE[0]],makelist(0.0,i,1,NC-1))),
  if (polyOrder=1) then (
    /* Piecewise linear: use cell average of star moments. */
    writeCExprs1s(m0Sr,append([m0S[0]],makelist(0.0,i,1,NC-1))),
    for vd : 1 thru udim do (
      expr : float(expand(append([m1S[(vd-1)*NC]],makelist(0.0,i,1,NC-1)))),
      for i : 1 thru length(expr) do (
        printf(fh, "    ~a = ~a; ~%", m1Sr[(vd-1)*NC+i-1], expr[i])
      )
    ),
    writeCExprs1s(m2Sr,append([m2S[0]],makelist(0.0,i,1,NC-1)))
  ) else (
    /* For higher polynomial order use cell average of 2nd moment. */
    expr : float(expand(append([m2[0]],makelist(0.0,i,1,NC-1)))),
    for i : 1 thru length(expr) do (
      printf(fh,"    gkyl_mat_set(rhs,~a,0,~a); ~%", i-1+udim*NC, expr[i])
    )
  ),
  printf(fh, "  } else { ~%"),
  /* Use the original expansion polynomial. */
  writeCExprs1s(m0r,makelist(m0[i],i,0,NC-1)),
  writeCExprs1s(m1r,makelist(m1[i],i,0,udim*NC-1)),
 expr : float(expand(makelist(m1[i],i,0,udim*NC-1))),
  for i : 1 thru length(expr) do (
    printf(fh,"    gkyl_mat_set(rhs,~a,0,~a); ~%", i-1, expr[i])
  ),
  writeCExprs1s(cMr,makelist(cM[i],i,0,udim*NC-1)),
  writeCExprs1s(cEr,makelist(cE[i],i,0,NC-1)),
  if (polyOrder=1) then (
    writeCExprs1s(m0Sr,makelist(m0S[i],i,0,NC-1)),
    writeCExprs1s(m1Sr,makelist(m1S[i],i,0,udim*NC-1)),
    writeCExprs1s(m2Sr,makelist(m2S[i],i,0,NC-1))
  ) else (
    /* For higher polynomial order use original M2 expansion. */
    expr : float(expand(makelist(m2[i],i,0,NC-1))),
    for i : 1 thru length(expr) do (
      printf(fh,"    gkyl_mat_set(rhs,~a,0,~a); ~%", i-1+udim*NC, expr[i])
    )
  ),
  printf(fh, "  } ~%"),
  printf(fh, " ~%"),

  /* Expansion in configuration space basis and coefficients of m0. */
  m0_e : doExpand1(m0r, bC),
  m0_c : makelist(m0r[i],i,0,NC-1),
  if (polyOrder=1) then (
    /* Expansion in configuration space basis and coefficients of m2. */
    m2_e : doExpand1(m2Sr, bC),
    m2_c : makelist(m2Sr[i],i,0,NC-1)
  ),
  /* Equivalently for  vtSq .*/
  vtSq_e : doExpand1(vtSq,bC),
  vtSq_c : makelist(vtSq[i],i,0,NC-1),
  /* cM and cE are the corrections to u and vtSq
     needed to preserve momentum and energy conservation. */
  cE_e : doExpand1(cEr, bC),
  cE_c : makelist(cEr[i],i,0,NC-1),

  /* N is the size of the linear problem. LHS Eigen matrix is NxN. */
  N : NC*(udim+1),

  /* Make a list of the LHS matrix assignments. */
  /* Note: Eigen defaults to Column-major order. */
  Ef[i,j] := sconcat("gkyl_mat_set(A,",i,",",j),

  m1RHS_c : [],
  for vd : 1 thru udim do (
    /* Expand u function and create a list of expansion coefficients. */
    m1_e : doExpand1(m1r, bC),
    m1_c : makelist(m1r[i],i,0,NC-1),
    u_e  : doExpand1(u,bC),
    u_c  : makelist(u[i],i,0,NC-1),
    cM_e : doExpand1(cMr, bC),
    cM_c : makelist(cMr[i],i,0,NC-1),
    /* Use the vd component of u, m1 and cM. */
    u_e : subst(makelist(u[i]=u[(vd-1)*NC+i],i,0,NC-1),u_e),
    u_c : subst(makelist(u[i]=u[(vd-1)*NC+i],i,0,NC-1),u_c),
    m1_e : subst(makelist(m1r[i]=m1r[(vd-1)*NC+i],i,0,NC-1),m1_e),
    m1_c : subst(makelist(m1r[i]=m1r[(vd-1)*NC+i],i,0,NC-1),m1_c),
    cM_e : subst(makelist(cMr[i]=cMr[(vd-1)*NC+i],i,0,NC-1),cM_e),
    cM_c : subst(makelist(cMr[i]=cMr[(vd-1)*NC+i],i,0,NC-1),cM_c),

    /*........... Matrix block from weak multiply of u and M_0 .............*/
    eq : calcInnerProdList(varsC,u_e,bC,m0_e),
    E  : fullratsimp(coefmatrix(eq,u_c)),
    /* Flatten E for WriteCExprsB. */
    Eflat : list_matrix_entries(E),
  
    /* Elhs     : list_matrix_entries(genmatrix(Ef,NC-1,NC-1,0,0)), */
    Elhs     : list_matrix_entries(genmatrix(Ef,vd*NC-1,vd*NC-1,(vd-1)*NC,(vd-1)*NC)),
  
    printf(fh, "  // ....... Block from weak multiply of u~a and m0  .......... // ~%", VarsC[vd]),
    writeCExprsA(Elhs,Eflat),
    printf(fh, " ~%"),
  
    /*........... Matrix block from correction to u .............*/
    eq : -calcInnerProdList(varsC,vtSq_e,bC,cM_e),
    E  : fullratsimp(coefmatrix(eq,vtSq_c)),
    /* Flatten E for WriteCExprsB. */
    Eflat : list_matrix_entries(E),
  
    Elhs     : list_matrix_entries(genmatrix(Ef,vd*NC-1,N-1,(vd-1)*NC,(udim-1)*NC+NC)),
  
    printf(fh, "  // ....... Block from correction to u~a .......... // ~%", VarsC[vd]),
    writeCExprsA(Elhs,Eflat),
    printf(fh, " ~%"),
  
    /*........... Matrix block from weak multiply of u and m1 .............*/
    if polyOrder=1 then (
      /* Expand m1S and use the vd component of m1S. */
      m1S_e : doExpand1(m1Sr, bC),
      m1S_e : subst(makelist(m1Sr[i]=m1Sr[(vd-1)*NC+i],i,0,NC-1),m1S_e),

      eq    : calcInnerProdList(varsC,u_e,bC,m1S_e)
    ) else (
      eq    : calcInnerProdList(varsC,u_e,bC,m1_e)
    ),
    E     : fullratsimp(coefmatrix(eq,u_c)),
    /* Flatten E for WriteCExprsB. */
    Eflat : list_matrix_entries(E),
  
    Elhs  : list_matrix_entries(genmatrix(Ef,N-1,vd*NC-1,udim*NC,(vd-1)*NC)),

    printf(fh, "  // ....... Block from weak multiply of u~a and m1~a  .......... // ~%", VarsC[vd], VarsC[vd]),
    writeCExprsA(Elhs,Eflat),
    printf(fh, " ~%"),

    /* Vector of all m1 coefficients. */
    m1RHS_c : append(m1RHS_c,m1_c)
  ),
  
  /*........... Matrix block from correction to vtSq .............*/
  if (sequal(substring(funcNm,1,7),"vlasov")) then (
    /* Vlasov-Maxwell. */
    if polyOrder=1 then (
      /* Expand m0S and use the vd component of m1S. */
      m0S_e : doExpand1(m0Sr, bC),
      eq : calcInnerProdList(varsC,vtSq_e,bC,m0S_e-cE_e)
    ) else (
      eq : calcInnerProdList(varsC,vtSq_e,bC,vdim*m0_e-cE_e)
    )
  ) else (
    /* Gyrokinetics. */
    if polyOrder=1 then (
      /* Expand m0S and use the vd component of m1S. */
      m0S_e : doExpand1(m0Sr, bC),
      eq : calcInnerProdList(varsC,vtSq_e,bC,2*(vdim-1)*m0_e+m0S_e-cE_e)
    ) else (
      eq : calcInnerProdList(varsC,vtSq_e,bC,(2*vdim-1)*m0_e-cE_e)
    )
  ),
  E  : fullratsimp(coefmatrix(eq,vtSq_c)),
  /* Flatten E for WriteCExprsB. */
  Eflat : list_matrix_entries(E),
  
  Elhs     : list_matrix_entries(genmatrix(Ef,N-1,N-1,udim*NC,udim*NC)),
  
  printf(fh, "  // ....... Block from correction to vtSq .......... // ~%"),
  writeCExprsA(Elhs,Eflat),
  printf(fh, " ~%"),

  printf(fh, "} ~%"),
  printf(fh, " ~%")
)$


