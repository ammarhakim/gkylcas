/* Generate the header file for dg_diffusion_gen kernels. */

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minDim_Ser : 2$
maxDim_Ser : 3$

/* Tensor product basis. */
/* Note that Serendipity, p = 1, is equivalent to Tensor */
/* Thus no need to calculate p = 1 Tensor basis */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minDim_Tensor : 2$
maxDim_Tensor : 0$

gkVdims : [[1,2], [2], [2]]$

/* ...... END OF USER INPUTS........ */

bName        : ["ser","tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minDim       : [minDim_Ser, minDim_Tensor]$
maxDim       : [maxDim_Ser, maxDim_Tensor]$

vars : [x,y,z]$

printPrototype(deco, ci, bStr, pi) := block([si,sj],

  printf(fh, "~adouble dg_diffusion_gen_vol_~ax_~a_p~a(const double* w, const double* dx, const double* D, const double* q, double* GKYL_RESTRICT out); ~%", deco, ci, bStr, pi),
  for si : 1 thru ci do (
    for sj : 1 thru ci do (
      printf(fh, "~adouble dg_diffusion_gen_surf~a~a_~ax_~a_p~a(const double* w, const double* dx, const double* Dij, const double* q[], double* GKYL_RESTRICT out); ~%", deco, vars[si], vars[sj], ci, bStr, pi)
    )
  ),
  printf(fh, "~%")
)$


/* ............ Write out the C header file ............ */

fh : openw("~/max-out/gkyl_dg_diffusion_gen_kernels.h")$
printf(fh, "#pragma once ~%")$
printf(fh, "#include <math.h> ~%")$
printf(fh, "#include <gkyl_util.h> ~%")$
printf(fh, "~%")$
printf(fh, "EXTERN_C_BEG ~%")$
printf(fh, "~%")$

decorator : "GKYL_CU_DH "$

for bInd : 1 thru length(bName) do (
  for c : minDim[bInd] thru maxDim[bInd] do (
    minPolyOrderB : minPolyOrder[bInd],
    maxPolyOrderB : maxPolyOrder[bInd],

    for polyOrder : minPolyOrderB thru maxPolyOrderB do (
      printPrototype(decorator, c, bName[bInd], polyOrder)
    )
  )
);

printf(fh, "EXTERN_C_END ~%")$

close(fh)$

/* ............ Finished writing out the C header file ............ */


