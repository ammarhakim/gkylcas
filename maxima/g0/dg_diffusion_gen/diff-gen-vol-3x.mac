load("recovery")$
load("modal-basis")$
load(stringproc)$
fpprec : 24$

genDiffusionGenVol3x(fh,bName,dim,polyOrder) := block([vars,ba,numBasis],
  [vars,ba] : loadBasis(bName,dim,polyOrder),
  numBasis : length(ba),

  printf(fh, "GKYL_CU_DH double~%"),
  printf(fh, sconcat("dg_diffusion_gen_vol_3x_", bName, "_p", polyOrder,
      "(const double* w, const double* dx,~%")),
  printf(fh, "  const double* Dij, const double* qIn, double* GKYL_RESTRICT out) ~%"),
  printf(fh, "{~%"),
  printf(fh, "  // w[NDIM]: Cell-center coordinates~%"),
  printf(fh, "  // dxv[NDIM]: Cell spacing~%"),
  printf(fh, "  // Dij: Diffusion coefficient in the center cell~%"),
  printf(fh, "  // q: Input field in the left cell~%"),
  printf(fh, "  // out: Incremented output~%~%"),
  printf(fh, "  const double Jxx = 4/dx[0]/dx[0];~%"),
  printf(fh, "  const double Jxy = 4/dx[0]/dx[1];~%"),
  printf(fh, "  const double Jxz = 4/dx[0]/dx[2];~%"),
  printf(fh, "  const double Jyy = 4/dx[1]/dx[1];~%"),
  printf(fh, "  const double Jyz = 4/dx[1]/dx[2];~%"),
  printf(fh, "  const double Jzz = 4/dx[2]/dx[2];~%~%"),
  
  printf(fh, "  const double* Dxx = &Dij[~a];~%", 0),
  printf(fh, "  const double* Dxy = &Dij[~a];~%", numBasis),
  printf(fh, "  const double* Dxz = &Dij[~a];~%", 2*numBasis),
  printf(fh, "  const double* Dyy = &Dij[~a];~%", 3*numBasis),
  printf(fh, "  const double* Dyz = &Dij[~a];~%", 4*numBasis),
  printf(fh, "  const double* Dzz = &Dij[~a];~%~%", 5*numBasis),
  
  printf(fh, "  return Jxx*Dxx[0] + Jxy*Dxy[0] + Jxz*Dxz[0] + Jyy*Dyy[0] + Jyz*Dyz[0] + Jzz*Dzz[0];~%"),
  printf(fh, "}~%")
)$
