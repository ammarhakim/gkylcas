load("dg_diffusion_gen/diff-gen-surfx-2x")$
load("dg_diffusion_gen/diff-gen-surfy-2x")$
load("dg_diffusion_gen/diff-gen-surfx-3x")$
load("dg_diffusion_gen/diff-gen-surfy-3x")$
load("dg_diffusion_gen/diff-gen-surfz-3x")$
load(stringproc)$

/* Generate general diffusion x surface kernels. */

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minDim_Ser : 2$
maxDim_Ser : 3$

/* Tensor product basis. */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minDim_Tensor : 2$
maxDim_Tensor : 0$

/* ...... END OF USER INPUTS........ */

bName        : ["ser","tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minDim       : [minDim_Ser, minDim_Tensor]$
maxDim       : [maxDim_Ser, maxDim_Tensor]$

for bInd : 1 thru length(bName) do (
  for c : minDim[bInd] thru maxDim[bInd] do (
    for polyOrder : minPolyOrder[bInd] thru maxPolyOrder[bInd] do (
      if c=2 then (
        genDiffusionGenSurfx2x(bName[bInd],c,polyOrder),
        genDiffusionGenSurfy2x(bName[bInd],c,polyOrder)
      ) else (
        genDiffusionGenSurfx3x(bName[bInd],c,polyOrder),
        genDiffusionGenSurfy3x(bName[bInd],c,polyOrder),
        genDiffusionGenSurfz3x(bName[bInd],c,polyOrder)
      )
    )
  )
)$

