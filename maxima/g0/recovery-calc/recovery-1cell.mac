calcRecov1CellFull(basisNm, recDir, dirs, polyOrder, C, numMomentMatch, dxlo, dxce, dxup, lo, ce, up) := block(
  /* Returns recovered polynomial defined over 1 cell with a 3-cell stencil
  Inputs:
    basisNm : name of used basis function ("Ser", "Tensor", or "Max");
      NOTE: This makes no difference for 1D recoveries so it should
      ideally be an optional input but I don't see a way around it
      now. --Petr Cagas
    recDir : direction of the recovery (x, y, or z)
    dirs : direction names, e.g. [x, y]
    C : continuity of the recovered solution (either 0 or 1)
    lo : can be one of the following
      * dg(A) : A is an array of expansion coefficients corresponding
        to logical space basis functions (in the lower cell)
      * bc(D=_, N=_, val=_) : a boundary condition definition
        D*f(x)+N*df(x)/dx=val which is used instead of expansion
        coefficients
      * dg(A, bc(D=_, N=_, val=_)) : a constrained recovery where
        expansion coefficients are used together with boundary
        conditions at the edge
    ce : dg(A), where A is an array of expansion coefficients corresponding
      to logical space basis functions (in the middle cell)
    up : similar to 'lo' but in the upper cell
  Outputs:
    recovered polynomial
  */
  [
  numDims, recDirIdx, perpDirs, recDirPolyOrder,
  vdim, cdim, jnk1, jnk2, pvars, pbasis,
  DoF, r, rLo, rUp, rExp, rSol, rSub,
  recEqList, projSubList, removeList, reducedBasis,
  varsa,
  ba, baLo1D, baCe1D, baUp1D, baLoND, baCeND, baUpND, baVars,
  dimProjLo, dimProjCe, dimProjUp, qLo1D, qCe1D, qUp1D,
  wx, wy, wz,
  shiftList,
  baCeNDw, bcExp
  ],

  numDims : length(dirs),
  for i : 1 thru numDims do
    if recDir=dirs[i] then recDirIdx : i
  ,

  perpDirs : delete(recDir, dirs),

  recDirPolyOrder : polyOrder,

  /* Get 1D basis in recovery direction. */
  /* Do things differently for hybrid because it may involve a p=2 direction. */
  vdim : length(sublist(dirs,lambda([var],charat(string(var),1)="v" or var=vpar or var=mu))),
  cdim : numDims - vdim,
  if (basisNm = "hyb") then (
    [jnk1,jnk2,pvars,pbasis] : loadPhaseBasis(basisNm, cdim, vdim, 1),
    if (charat(string(recDir),1)="v") then (
      [varsa,ba] : loadBasis("ser", 1, polyOrder+1),
      recDirPolyOrder : polyOrder+1
    )
    else (
      [varsa,ba] : loadBasis("ser", 1, 1)
    ),
    ba : subst(x=recDir, ba)
  )
  elseif (basisNm = "gkhyb") then (
    [jnk1,jnk2,pvars,pbasis,vsub] : loadGkBasis(basisNm, cdim, vdim, 1),
    ba : sqrt(2)^(numDims-1)*sublist(pbasis, lambda([b], lfreeof(perpDirs,listofvars(b)))),
    /* MF 2022/07/15: I think this is only needed when perpDirs=[]. */
    ba : subst(listofvars(ba)[1]=recDir,ba),

    if charat(string(recDir),1)="v" then
      recDirPolyOrder : polyOrder+1
  )
  else (
    [varsa,ba] : loadBasis(basisNm, 1, polyOrder),
    ba : subst(x=recDir, ba)
  ),

  baCe1D : etaDir(recDir, 0, dxce[recDirIdx], ba),
  baLo1D : etaDir(recDir, -dxce[recDirIdx]/2-dxlo[recDirIdx]/2, dxlo[recDirIdx], ba),
  baUp1D : etaDir(recDir, dxce[recDirIdx]/2+dxup[recDirIdx]/2, dxup[recDirIdx], ba),

  if numMomentMatch=-1 then
    DoF : recDirPolyOrder + 1
  else
    DoF : numMomentMatch,

  if is(op(lo)=dg) then
    DoF : DoF + 1 + C
  elseif is(op(lo)=bc) then
    DoF : DoF + 1
  elseif is(op(lo)=bcs) then
    DoF : DoF + length(args(lo)),

  if is(op(up)=dg) then
    DoF : DoF + 1 + C
  elseif is(op(up)=bc) then
    DoF : DoF + 1
  elseif is(op(up)=bcs) then
    DoF : DoF + length(args(up)),

  /* Forming and solving the equation system */
  rExp : doExpand(r, makelist(recDir^i, i, 0, DoF-1)),

  /* New solution is weakly equal to the original representation */
  if numMomentMatch=-1 then
    recEqList : calcInnerProdList([recDir], 1, baCe1D,
      rExp-doExpand(qCe1D, baCe1D))
  else (
    removeList : makelist(baCe1D[i], i, numMomentMatch+1, polyOrder+1),
    reducedBasis : baCe1D,
    for i : 1 thru length(removeList) do
      reducedBasis : delete(removeList[i], reducedBasis),
    if length(reducedBasis)>0 then
      recEqList : calcInnerProdList([recDir], 1, reducedBasis,
        rExp-doExpand(qCe1D, reducedBasis))
    else
      recEqList : []
  ),

  if is(op(lo)=dg) then (
    if length(args(lo)) > 1 then
      rLo : calcRecov2CellGenNonuniform(basisNm, recDir, [recDir], polyOrder,
        dxlo, dxce, dg(qLo1D, args(lo)[2]), dg(qCe1D))
    else
      rLo : calcRecov2CellGenNonuniform(basisNm, recDir, [recDir], polyOrder,
        dxlo, dxce, dg(qLo1D), dg(qCe1D)),
    for i : 0 thru C do
      recEqList : append(
        recEqList,
        [subst(recDir=0, diff(rLo, recDir, i))
          - subst(recDir=-dxce[recDirIdx]/2, diff(rExp, recDir, i))]
      )
  ) elseif is(op(lo)=bc) then (
    recEqList : append(
      recEqList,
      [subst(args(lo), val - D*subst(recDir=-dxce[recDirIdx]/2, rExp)
        - N*subst(recDir=-dxce[recDirIdx]/2, diff(rExp, recDir)))]
    )
  ) elseif is(op(lo)=bcs) then (
    for i : 1 thru length(args(lo)) do
      recEqList : append(
        recEqList,
        [subst(args(lo)[i], val)
          - subst(recDir=-dxce[recDirIdx]/2, diff(rExp, recDir, subst(args(lo)[i], der)))]
      )
  ),

  if is(op(up)=dg) then (
    if length(args(up)) > 1 then
      rUp : calcRecov2CellGenNonuniform(basisNm, recDir, [recDir], polyOrder,
        dxce, dxup, dg(qCe1D), dg(qUp1D, args(up)[2]))
    else
      rUp : calcRecov2CellGenNonuniform(basisNm, recDir, [recDir], polyOrder,
        dxce, dxup, dg(qCe1D), dg(qUp1D)),
    for i : 0 thru C do
      recEqList : append(
        recEqList,
        [subst(recDir=0, diff(rUp, recDir, i))
          - subst(recDir=dxce[recDirIdx]/2, diff(rExp, recDir, i))]
      )
  ) elseif is(op(up)=bc) then (
    recEqList : append(
      recEqList,
      [subst(args(up), val - D*subst(recDir=dxce[recDirIdx]/2, rExp)
        - N*subst(recDir=dxce[recDirIdx]/2, diff(rExp, recDir)))]
    )
  ) elseif is(op(up)=bcs) then (
    for i : 1 thru length(args(up)) do
      recEqList : append(
        recEqList,
        [subst(args(up)[i], val)
          - subst(recDir=dxce[recDirIdx]/2, diff(rExp, recDir, subst(args(up)[i], der)))]
      )
  ),

  rSol : linsolve(recEqList, makelist(r[i], i, 1, DoF)),
  rSub : fullratsimp(subst(rSol, rExp)),

  /* Backsubstitute the non-recovered directions if needed */
  if numDims > 1 then (
    if (basisNm="hyb") then (
      ba : basisFromVars(basisNm, dirs, polyOrder)
    )
    elseif (basisNm="gkhyb") then (
      ba : copylist(pbasis)
    )
    else (
      [varsa,ba] : loadBasis(basisNm, numDims, polyOrder),
      baVars : listofvars(ba),
      ba : psubst(makelist(baVars[i]=dirs[i],i,1,numDims), ba)
    ),

    /* rescale basis */
    shiftList : makelist(0, i, 1, numDims),
    baLoND : eta(dirs, shiftList, dxlo, ba),
    baCeND : eta(dirs, shiftList, dxce, ba),
    baUpND : eta(dirs, shiftList, dxup, ba),
    /* shift basis */
    baLoND : etaDir(recDir, -dxce[recDirIdx]/2-dxlo[recDirIdx]/2, 2, baLoND),
    baUpND : etaDir(recDir, dxce[recDirIdx]/2+dxup[recDirIdx]/2, 2, baUpND),
    /* prepare for the case where expansion coefficients at a wall are
    given; i.e., a basis function set with one less dimension is
    needed */
    baCeNDw : basisFromVars(basisNm, perpDirs, polyOrder),

    projSubList : [],
    if is(op(lo)=dg) then (
      dimProjLo : calcInnerProdListGen([recDir],
        [[-dxce[recDirIdx]/2-dxlo[recDirIdx], -dxce[recDirIdx]/2]],
        1, baLo1D, doExpand(args(lo)[1], baLoND)),
      projSubList : append (
        projSubList,
        makelist(qLo1D[i]=dimProjLo[i], i, 1, length(baCe1D))
      )
    ) elseif is(op(lo)=bc) then (
      bcExp : subst(args(lo), dg),
      if not atom(bcExp) then (
        projSubList : append(
          projSubList,
          [val=doExpand(bcExp, baCeNDw)]
        )
      )
    ),

    dimProjCe : calcInnerProdListGen([recDir], [[-dxce[recDirIdx]/2, dxce[recDirIdx]/2]],
      1, baCe1D, doExpand(args(ce)[1], baCeND)),
    projSubList : append(
      projSubList,
      makelist(qCe1D[i]=dimProjCe[i], i, 1, length(baCe1D))
    ),

    if is(op(up)=dg) then (
      dimProjUp : calcInnerProdListGen([recDir], [[dxce[recDirIdx]/2, dxce[recDirIdx]/2+dxup[recDirIdx]]],
        1, baUp1D, doExpand(args(up)[1], baUpND)),
      projSubList : append (
        projSubList,
        makelist(qUp1D[i]=dimProjUp[i], i, 1, length(baCe1D))
      )
    ) elseif is(op(up)=bc) then (
      bcExp : subst(args(up), dg),
      if not atom(bcExp) then (
        projSubList : append(
          projSubList,
          [val=doExpand(bcExp, baCeNDw)]
        )
      )
    )
  ) else (
    projSubList : [],
    if is(op(lo)=dg) then
      projSubList : append (
        projSubList,
        makelist(qLo1D[i]=args(lo)[1][i], i, 1, length(baCe1D))
      ),
    projSubList : append(
      projSubList,
      makelist(qCe1D[i]=args(ce)[1][i], i, 1, length(baCe1D))
    ),
    if is(op(up)=dg) then
      projSubList : append (
        projSubList,
        makelist(qUp1D[i]=args(up)[1][i], i, 1, length(baCe1D))
      )
  ),

  return(expand(subst(projSubList, rSub)))
) $

calcRecov1CellGenNonuniform(basisNm, recDir, dirs, polyOrder, C, dxlo, dxce, dxup, lo, ce, up) :=
  calcRecov1CellGenFull(basisNm, recDir, dirs, polyOrder, C, -1, dxlo, dxce, dxup, lo, ce, up) $

calcRecov1CellGenLim(basisNm, recDir, dirs, polyOrder, C, numMomentMatch, lo, ce, up) := block(
  [dx],
  dx : makelist(2, i, 1, length(dirs)),
  return(calcRecov1CellFull(basisNm, recDir, dirs, polyOrder, C, numMomentMatch, dx, dx, dx, lo, ce, up))
) $

calcRecov1CellGen(basisNm, recDir, dirs, polyOrder, C, lo, ce, up) := block(
  [dx],
  dx : makelist(2, i, 1, length(dirs)),
  return(calcRecov1CellFull(basisNm, recDir, dirs, polyOrder, C, -1, dx, dx, dx, lo, ce, up))
) $
