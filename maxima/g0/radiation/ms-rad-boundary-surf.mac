load("radiation/radFuncs-boundary-surf")$
load(stringproc)$

/* This script calls the functions which calculate the
   boundary surface flux radiation drag contributions */

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 1$
minCdim_Ser : 1$
maxCdim_Ser : 3$

/* Tensor order basis. No need to generate p=1. */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
maxCdim_Tensor : 0$

/* ...... END OF USER INPUTS........ */

/* To generate other bases, just add corresponding column to arrays below. */
bName        : ["ser", "tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$

gkVdims   : [[2], [2], [2]]$
varsVAll  : [vpar, mu]$

/* Generate kernels of selected types. */
for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    for gkV : 1 thru length(gkVdims[c]) do (
      v : gkVdims[c][gkV],

      maxPolyOrderB : maxPolyOrder[bInd],
      if (c=3) then maxPolyOrderB : 1, /* Only generate p=1 kernels for 3x2v */
      for polyOrder : minPolyOrder[bInd] thru maxPolyOrderB do (
      
        disp(printf(false,sconcat("Creating radiation drag boundary surface ",bName[bInd]," ~ax~av p~a"),c,v,polyOrder)),
        for dir : 1 thru v do (
          if (dir = 1) then (
            fname : sconcat("~/max-out/rad_gyrokinetic_boundary_surf", varsVAll[dir],"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder , ".c"),
            fh : openw(fname),
            funcName : sconcat("rad_gyrokinetic_boundary_surf", varsVAll[dir],"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder),
            printf(fh, "#include <gkyl_rad_gyrokinetic_kernels.h> ~%"),
            calcGkRADDragBoundaryUpdateVPar(fh, funcName, c, v, bName[bInd], polyOrder),
            close(fh)
          ) 
          else if (dir = 2) then (
            fname : sconcat("~/max-out/rad_gyrokinetic_boundary_surf", varsVAll[dir],"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder , ".c"),
            fh : openw(fname),
            funcName : sconcat("rad_gyrokinetic_boundary_surf", varsVAll[dir],"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder),
            printf(fh, "#include <gkyl_rad_gyrokinetic_kernels.h> ~%"),
            calcGkRADDragBoundaryUpdateMu(fh, funcName, c, v, bName[bInd], polyOrder),
            close(fh)
          )
        )
      )
    )
  )
);
