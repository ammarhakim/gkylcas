/* 
   Create kernels for the surface term of the radiation drag operator.
*/

load("modal-basis")$
load("out-scripts")$
load("utilities_gyrokinetic")$
load("nodal_operations/nodal_functions")$
load(stringproc)$
fpprec : 24$

calcGkRADDragUpdateVPar(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,vSub,NP,NC,pDim,vid1,vv,surfVars,
   vmap_e,vmapSq_e,vmap_prime_e,vmap_prime_fac_l,vmap_prime_fac_c,vmap_prime_fac_r,
   fl_e,fc_e,fr_e, 
   bSurf,alphaDrSurf_l_e,alphaDrSurf_r_e,
   Ghat_r_c,Ghat_l_c,Ghat_l_e,Ghat_r_e,
   incr_l,incr_r,pOrderCFL],
  
  /* Load basis of dimensionality requested. */
  [varsC,bC,varsP,bP,vSub] : loadGkBasis(basisFun, cdim, vdim, polyOrder),
  NC : length(bC),  NP : length(bP),

  surfDir  : 1,
  pDim     : cdim+vdim,
  vid1     : makelist(i,i,cdim,cdim+vdim-1),
  varsV    : makelist(varsP[d],d,cdim+1,pDim),
  vv       : varsV[surfDir],
  surfVars : delete(vv,varsP),

  printf(fh, "GKYL_CU_DH double ~a(const double *w, const double *dxv, const double *vmap,
    const double *vmap_prime_l, const double *vmap_prime_c, const double *vmap_prime_r,
    const double *nvnu_l, const double *nvnu_r, const double *nvsqnu_l, const double *nvsqnu_r, 
    const double *fl, const double *fc, const double *fr, 
    double* GKYL_RESTRICT out) ~%{ ~%", funcNm),
  printf(fh, "  // w[~a]:     cell-center coordinates. ~%", cdim+vdim),
  printf(fh, "  // dxv[~a]:   cell spacing. ~%", cdim+vdim),
  printf(fh, "  // vmap: velocity space mapping.~%"),
  printf(fh, "  // vmap_prime_l,vmap_prime_c,vmap_prime_r: velocity space mapping derivative in left, center and right cells.~%"),
  printf(fh, "  // nvnu_l: Surface expansion sum_s n_s*nu_s(v) in vparallel direction on the left.~%"),
  printf(fh, "  // nvnu_r: Surface expansion sum_s n_s*nu_s(v) in vparallel direction on the right.~%"),
  printf(fh, "  // nvsqnu_l: Surface expansion sum_s n_s*nu_s(v) in mu direction on the left.~%"),
  printf(fh, "  // nvsqnu_r: Surface expansion sum_s n_s*nu_s(v) in mu direction on the right.~%"),
  printf(fh, "  // fl/fc/fr:  distribution function in cells ~%"),
  printf(fh, "  // out:       incremented distribution function in cell ~%"),
  printf(fh, "~%"),
  
  printf(fh, "  double rdv2 = 2.0/dxv[~a]; ~%", vid1[surfDir]),
  printf(fh, "~%"),
  
  /* Expand the velocity map fields. */
  [vmap_e,vmapSq_e,vmap_prime_e] : expandVmapFields(varsP),

  vmap_prime_fac_l : subst(vmap_prime=vmap_prime_l, vmap_prime_e[surfDir]),
  vmap_prime_fac_c : subst(vmap_prime=vmap_prime_c, vmap_prime_e[surfDir]),
  vmap_prime_fac_r : subst(vmap_prime=vmap_prime_r, vmap_prime_e[surfDir]),

  /* Create expansions of f_left, f_center, and f_right in volume basis. */
  fl_e : doExpand1(fl, bP)/vmap_prime_fac_l,
  fc_e_nm : doExpand1(fc, bP),
  fc_e : doExpand1(fc, bP)/vmap_prime_fac_c,
  fr_e : doExpand1(fr, bP)/vmap_prime_fac_r,

  /* Find corner nodes and evaluate f there*/
  nodes : getNodesGkHyb(cdim, vdim),
  f_n : evAtNodes(fc_e_nm, nodes, varsP),
  numNodes : length(nodes),
  printf(fh, "  double fnod[~a];~%",numNodes),
  writeCExprs1(fnod, f_n),
  printf(fh, "~%"),
  
  /* Loop over nodes, and if f<0 don't evaluate radiation */
  printf(fh, "  // If f < 0.0 at nodes, don't evaluate radiation. ~%"),
  for i : 1 thru numNodes do (
    printf(fh, "  if (fnod[~a] < 0.0) ~%", i-1),
    printf(fh, "     return 0.0; ~%")
  ),
  printf(fh, "~%"),

  if polyOrder = 1 then (  /* Force p=1 to use hybrid basis. */
    bSurf : basisFromVars("gkhyb",surfVars,polyOrder)
  ) else (
    bSurf : basisFromVars(basisFun,surfVars,polyOrder)
  ),

  alphaDrSurf_l_e : doExpand1(nvnu_l, bSurf),
  alphaDrSurf_r_e : doExpand1(nvnu_r, bSurf),

  printf(fh, "  double Ghat_r[~a] = {0.0}; ~%", length(bSurf)),
  printf(fh, "  double Ghat_l[~a] = {0.0}; ~%", length(bSurf)),
  
  printf(fh, "  if (~a>0) {~%~%",float(expand(subst(vv=0,vmap_e[surfDir])))),

  /* Because v > 0, need right edge value */
  /* Evaluate surface projection of Ghat_r = alphaDr_r f_r. */
  Ghat_r_c : calcInnerProdList(surfVars, alphaDrSurf_r_e, bSurf, subst(vv=-1, fr_e)),
  /* Evaluate surface projection of Ghat_l = alphaDr_l f_c. */
  Ghat_l_c : calcInnerProdList(surfVars, alphaDrSurf_l_e, bSurf, subst(vv=-1, fc_e)),  

  writeCExprsNoExpand1(Ghat_l, gcfac(float(expand(Ghat_l_c)))),
  printf(fh, "~%"),
  flush_output(fh),
  writeCExprsNoExpand1(Ghat_r, gcfac(float(expand(Ghat_r_c)))),  
  printf(fh, "~%"),
  flush_output(fh),
  Ghat_l_e : doExpand1(Ghat_l, bSurf), 
  Ghat_r_e : doExpand1(Ghat_r, bSurf), 

  printf(fh, "  } else { ~%~%"),

  /* Because v < 0, need left edge value */
  /* Evaluate surface projection of Ghat_r = alphaDr_r f_c. */
  Ghat_r_c : calcInnerProdList(surfVars, alphaDrSurf_r_e, bSurf, subst(vv=1, fc_e)),
  /* Evaluate surface projection of Ghat_l = alphaDr_l f_l. */
  Ghat_l_c : calcInnerProdList(surfVars, alphaDrSurf_l_e, bSurf, subst(vv=1, fl_e)),

  writeCExprsNoExpand1(Ghat_l, gcfac(float(expand(Ghat_l_c)))),
  printf(fh, "~%"),
  flush_output(fh),
  writeCExprsNoExpand1(Ghat_r, gcfac(float(expand(Ghat_r_c)))),  
  printf(fh, "~%"),
  flush_output(fh),
  Ghat_l_e : doExpand1(Ghat_l, bSurf), 
  Ghat_r_e : doExpand1(Ghat_r, bSurf), 

  printf(fh, "  } ~%"),
  
  /* Compute surface contribution integral(phi^- Ghat) on the right. */
  incr_l : calcInnerProdList(surfVars, -1, subst(vv=-1.0, bP), Ghat_l_e),
  incr_r : calcInnerProdList(surfVars, 1, subst(vv=1.0, bP), Ghat_r_e),
  writeCIncrExprsCollect1lhsc(out, rdv2*incr_l + rdv2*incr_r),
  printf(fh, "~%"),

  /* Identify polyOrder in velocity space as p=2 for p=1 since we force p=1 to
     mean gkhybrid basis. */
  pOrderCFL : polyOrder,
  if polyOrder=1 then ( pOrderCFL : 2 ),

  printf(fh, "  double vmap_prime_min = fmin(fmin(fabs(~a),fabs(~a)),fabs(~a));~%",vmap_prime_l[surfDir-1],vmap_prime_c[surfDir-1],vmap_prime_r[surfDir-1]),
  /* Extra 1/2 factor is because we are multiplying by 2/dx and we only need 1/dx 
     Also need to divide out 1/sqrt(2^(pDim-1)) to convert 0th component of surface alpha
     expansion to cell average (so we take the surface averaged alpha as our estimate of the
     maximum velocity to compute the largest frequency) */
  printf(fh, "  double cflFreq = fmax(fabs(nvnu_l[0]/vmap_prime_min), fabs(nvnu_r[0]/vmap_prime_min)); ~%"),
  printf(fh, "  return ~a*cflFreq; ~%",float(0.5*(2*pOrderCFL+1)*rdv2*2.0^(-0.5*(pDim-1)))),
  printf(fh, "~%"),

  printf(fh, "} ~%"),
  flush_output(fh)

)$

calcGkRADDragUpdateMu(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block( 
  [varsC,bC,varsP,bP,vSub,NP,NC,pDim,vid1,vv,surfVars,
   vmap_e,vmapSq_e,vmap_prime_e,vmap_prime_fac_l,vmap_prime_fac_c,vmap_prime_fac_r,
   fl_e,fc_e,fr_e, 
   bSurf,alphaDrSurf_l_e,alphaDrSurf_r_e,
   Ghat_r_c,Ghat_l_c,Ghat_l_e,Ghat_r_e,
   incr_l,incr_r,pOrderCFL],

  /* Load basis of dimensionality requested. */
  [varsC,bC,varsP,bP,vSub] : loadGkBasis(basisFun, cdim, vdim, polyOrder),
  NC : length(bC),  NP : length(bP),

  surfDir  : 2,
  pDim     : cdim+vdim,
  vid1     : makelist(i,i,cdim,cdim+vdim-1),
  varsV    : makelist(varsP[d],d,cdim+1,pDim),
  vv       : varsV[surfDir],
  surfVars : delete(vv,varsP),

  printf(fh, "GKYL_CU_DH double ~a(const double *w, const double *dxv, const double *vmap,
    const double *vmap_prime_l, const double *vmap_prime_c, const double *vmap_prime_r,
    const double *nvnu_l, const double *nvnu_r, const double *nvsqnu_l, const double *nvsqnu_r, 
    const double *fl, const double *fc, const double *fr, 
    double* GKYL_RESTRICT out) ~%{ ~%", funcNm),
  printf(fh, "  // w[~a]:     cell-center coordinates. ~%", cdim+vdim),
  printf(fh, "  // dxv[~a]:   cell spacing. ~%", cdim+vdim),
  printf(fh, "  // vmap_prime: velocity space mapping.~%"),
  printf(fh, "  // vmap_prime_l,vmap_prime_c,vmap_prime_r: velocity space mapping derivative in left, center and right cells.~%"),
  printf(fh, "  // nvnu_l: Surface expansion sum_s n_s*nu_s(v) in vparallel direction on the left.~%"),
  printf(fh, "  // nvnu_r: Surface expansion sum_s n_s*nu_s(v) in vparallel direction on the right.~%"),
  printf(fh, "  // nvsqnu_l: Surface expansion sum_s n_s*nu_s(v) in mu direction on the left.~%"),
  printf(fh, "  // nvsqnu_r: Surface expansion sum_s n_s*nu_s(v) in mu direction on the right.~%"),
  printf(fh, "  // fl/fc/fr:  distribution function in cells ~%"),
  printf(fh, "  // out:       incremented distribution function in cell ~%"),
  printf(fh, "~%"),

  printf(fh, "  double rdv2 = 2.0/dxv[~a]; ~%", vid1[surfDir]),
  printf(fh, "~%"),

  /* Expand the velocity map fields. */
  [vmap_e,vmapSq_e,vmap_prime_e] : expandVmapFields(varsP),

  vmap_prime_fac_l : subst(vmap_prime=vmap_prime_l, vmap_prime_e[surfDir]),
  vmap_prime_fac_c : subst(vmap_prime=vmap_prime_c, vmap_prime_e[surfDir]),
  vmap_prime_fac_r : subst(vmap_prime=vmap_prime_r, vmap_prime_e[surfDir]),

  /* Create expansions of f_left, f_center, and f_right in volume basis. */
  fl_e : doExpand1(fl, bP)/vmap_prime_fac_l,
  fc_e_nm : doExpand1(fc, bP),
  fc_e : doExpand1(fc, bP)/vmap_prime_fac_c,
  fr_e : doExpand1(fr, bP)/vmap_prime_fac_r,
  
  /* Find corner nodes and evaluate f there*/
  nodes : getNodesGkHyb(cdim, vdim),
  f_n : evAtNodes(fc_e_nm, nodes, varsP),
  numNodes : length(nodes),
  printf(fh, "  double fnod[~a];~%",numNodes),
  writeCExprs1(fnod, f_n),
  printf(fh, "~%"),
  
  /* Loop over nodes, and if f<0 don't evaluate radiation */
  printf(fh, "  // If f < 0.0 at nodes, don't evaluate radiation. ~%"),
  for i : 1 thru numNodes do (
    printf(fh, "  if (fnod[~a] < 0.0) ~%", i-1),
    printf(fh, "     return 0.0; ~%")
  ),
  printf(fh, "~%"),
  
  /* Surface basis (equivalent to basis of one lower
     dimensionality without surface variable) */
  if polyOrder = 1 then (  /* Force p=1 to use hybrid basis. */
    bSurf : basisFromVars("gkhyb",surfVars,polyOrder)
  ) else (
    bSurf : basisFromVars(basisFun,surfVars,polyOrder)
  ),
  
  alphaDrSurf_l_e : doExpand1(nvsqnu_l, bSurf),
  alphaDrSurf_r_e : doExpand1(nvsqnu_r, bSurf),

  printf(fh, "  double Ghat_r[~a] = {0.0}; ~%", length(bSurf)),
  printf(fh, "  double Ghat_l[~a] = {0.0}; ~%", length(bSurf)),
  
  /* Because -vsqnu is negative definite, need right edge value */
  /* Evaluate surface projection of Ghat_r = alphaDr_r f_r. */
  Ghat_r_c : calcInnerProdList(surfVars, alphaDrSurf_r_e, bSurf, subst(vv=-1, fr_e)),
  /* Evaluate surface projection of Ghat_l = alphaDr_l f_c. */
  Ghat_l_c : calcInnerProdList(surfVars, alphaDrSurf_l_e, bSurf, subst(vv=-1, fc_e)),

  writeCExprsNoExpand1(Ghat_l, gcfac(float(expand(Ghat_l_c)))),
  printf(fh, "~%"),
  flush_output(fh),
  writeCExprsNoExpand1(Ghat_r, gcfac(float(expand(Ghat_r_c)))),  
  printf(fh, "~%"),
  flush_output(fh),
  Ghat_l_e : doExpand1(Ghat_l, bSurf), 
  Ghat_r_e : doExpand1(Ghat_r, bSurf), 
  
  /* Compute surface contribution integral(phi^- Ghat) on the right. */
  incr_l : calcInnerProdList(surfVars, -1, subst(vv=-1.0, bP), Ghat_l_e),
  incr_r : calcInnerProdList(surfVars, 1, subst(vv=1.0, bP), Ghat_r_e),
  writeCIncrExprsCollect1lhsc(out, rdv2*incr_l + rdv2*incr_r),
  printf(fh, "~%"),

  printf(fh, "  double vmap_prime_min = fmin(fmin(fabs(~a),fabs(~a)),fabs(~a));~%",vmap_prime_l[surfDir-1],vmap_prime_c[surfDir-1],vmap_prime_r[surfDir-1]),
  pOrderCFL : polyOrder,
  /* Extra 1/2 factor is because we are multiplying by 2/dx and we only need 1/dx 
     Also need to divide out 1/sqrt(2^(pDim-1)) to convert 0th component of surface alpha
     expansion to cell average (so we take the surface averaged alpha as our estimate of the
     maximum velocity to compute the largest frequency) */
  printf(fh, "  double cflFreq = fmax(fabs(nvsqnu_l[0]/vmap_prime_min), fabs(nvsqnu_r[0]/vmap_prime_min)); ~%"),
  printf(fh, "  return ~a*cflFreq; ~%",float(0.5*(2*pOrderCFL+1)*rdv2*2.0^(-0.5*(pDim-1)))),
  printf(fh, "~%"),
  flush_output(fh),
  printf(fh, "} ~%")

)$
