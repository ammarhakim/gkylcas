/* Compute the header file for gyrokinetic radiation kernels. */

/* ...... USER INPUTS........ */

/* Serendipity basis. */
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
maxCdim_Ser : 3$

/* Tensor order basis. */
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
minVdim_Tensor : 1$
maxCdim_Tensor : 0$
maxVdim_Tensor : 0$

/* Number of velocity dimensions allowed for each
   configuration-space dimension. */
gkVdims : [[2], [2], [2]]$

/* ...... END OF USER INPUTS........ */

varsC : [x, y, z]$
varsV : [vpar, mu]$

/* To generate other bases, just add corresponding column to arrays below. */
bName        : ["ser", "tensor"]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
minVdim      : [minVdim_Ser, minVdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$
maxVdim      : [maxVdim_Ser, maxVdim_Tensor]$

printPrototypes() := block([],
  for bInd : 1 thru length(bName) do (
    for c : minCdim[bInd] thru maxCdim[bInd] do (
      for gkV : 1 thru length(gkVdims[c]) do (
        v : gkVdims[c][gkV],
  
        maxPolyOrderB : maxPolyOrder[bInd],
        if (c=3) then maxPolyOrderB : 1, /* Only declare p=1 kernels for 3x2v */
        for polyOrder : 1 thru maxPolyOrderB do (

          printf(fh, "GKYL_CU_DH double rad_gyrokinetic_vol_~ax~av_~a_p~a(const double *w, const double *dxv, const double *vmap_prime, 
            const double *nvnu, const double *nvsqnu, 
            const double *f, double* GKYL_RESTRICT out); ~%", c, v, bName[bInd], polyOrder),

          printf(fh, "GKYL_CU_DH double rad_gyrokinetic_surfvpar_~ax~av_~a_p~a(const double *w, const double *dxv, const double *vmap,
            const double *vmap_prime_l, const double *vmap_prime_c, const double *vmap_prime_r, 
            const double *nvnu_l, const double *nvnu_r, const double *nvsqnu_l, const double *nvsqnu_r, 
            const double *fl, const double *fc, const double *fr, 
            double* GKYL_RESTRICT out); ~%", c, v, bName[bInd], polyOrder),

          printf(fh, "GKYL_CU_DH double rad_gyrokinetic_surfmu_~ax~av_~a_p~a(const double *w, const double *dxv, const double *vmap,
            const double *vmap_prime_l, const double *vmap_prime_c, const double *vmap_prime_r, 
            const double *nvnu_l, const double *nvnu_r, const double *nvsqnu_l, const double *nvsqnu_r, 
            const double *fl, const double *fc, const double *fr, 
            double* GKYL_RESTRICT out); ~%", c, v, bName[bInd], polyOrder),

          printf(fh, "GKYL_CU_DH double rad_gyrokinetic_boundary_surfvpar_~ax~av_~a_p~a(const double *w, const double *dxv, const double *vmap,
            const double *vmap_prime_edge, const double *vmap_prime_skin, 
            const double *nvnu_edge, const double *nvnu_skin, const double *nvsqnu_edge, const double *nvsqnu_skin, 
            const int edge, const double *fedge, const double *fskin, double* GKYL_RESTRICT out) ; ~%", c, v, bName[bInd], polyOrder),

          printf(fh, "GKYL_CU_DH double rad_gyrokinetic_boundary_surfmu_~ax~av_~a_p~a(const double *w, const double *dxv, const double *vmap,
            const double *vmap_prime_edge, const double *vmap_prime_skin, 
            const double *nvnu_edge, const double *nvnu_skin, const double *nvsqnu_edge, const double *nvsqnu_skin, 
            const int edge, const double *fedge, const double *fskin, double* GKYL_RESTRICT out) ; ~%", c, v, bName[bInd], polyOrder),

          printf(fh, "GKYL_CU_DH void rad_gyrokinetic_drag_nuvpar_~ax~av_~a_p~a(const double *dv_min, const double *vmap, const double *vmapSq,
            double charge, double mass, double a, double alpha, double beta, double gamma, double v0, 
            const double *bmag, double* GKYL_RESTRICT drag_rad_surf, double* GKYL_RESTRICT drag_rad); ~%", c, v, bName[bInd], polyOrder),

          printf(fh, "GKYL_CU_DH void rad_gyrokinetic_drag_numu_~ax~av_~a_p~a(const double *dv_min, const double *vmap, const double *vmapSq,
            double charge, double mass, double a, double alpha, double beta, double gamma, double v0, 
            const double *bmag, double* GKYL_RESTRICT drag_rad_surf, double* GKYL_RESTRICT drag_rad); ~%", c, v, bName[bInd], polyOrder), 

          printf(fh, "GKYL_CU_DH void rad_gyrokinetic_drag_nI_nu_~ax~av_~a_p~a(const double *vnu_surf, const double *vnu,
            const double *vsqnu_surf, const double *vsqnu, const double *nI, 
            double* GKYL_RESTRICT nvnu_surf, double* GKYL_RESTRICT nvnu, 
            double* GKYL_RESTRICT nvsqnu_surf, double* GKYL_RESTRICT nvsqnu); ~%", c, v, bName[bInd], polyOrder), 

          printf(fh, "~%")
        )
      )   
    )
  )
)$

fh : openw("~/max-out/gkyl_rad_gyrokinetic_kernels.h")$
printf(fh, "#pragma once~%")$
printf(fh, "~%")$
printf(fh, "#include <math.h>~%")$
printf(fh, "#include <gkyl_util.h>~%")$
printf(fh, "~%")$
printf(fh, "EXTERN_C_BEG~%")$
printf(fh, "~%")$
printPrototypes()$
printf(fh, "~%")$
printf(fh, "EXTERN_C_END~%")$
close(fh)$
