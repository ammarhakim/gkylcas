/*
   Generate kernels computing the RHS of the Poisson equation, i.e.
     \int psi_k*T*rho dV
   where T is a modal-to-nodal operation and rho is the source.
   The kernel gets modified at in skin cells depending on the BCs.

*/

load("modal-basis");
load("out-scripts");
load("nodal_operations/nodal_functions");
load("bvp_utilities/bvp-util");
load("fem/fem-util");
fpprec : 24$

generate_fem_poisson_bias_plane_src(fh, funcNm, dim, basisFun, pMax) := block(
  [coordVarS,stencilLoc,bcTypes,bcStrs,bcKey,bcCombos,currBC,stencilStr,bcStr,bN,vars,nodes,numNodes,
   src_c,dir,dirichletNodes,dirichletNodesI,bcNode,bcNodeI,sI,d,bcsInDir,i,bcI,polyOrder,dI,k],

  kill(varsC, varsP, basisC, basisP),

  load(sconcat("basis-precalc/basis", basisFun, dim, "x")),

  /* Associative list between stencil location (-1,0,1) and variable strings in kernel name. */
  coordVarS : getCoordVarS(varsC),

  /* List of stencil locations. Each entry is a dim-dimensional list
     with -1 meaning it is at a lower boundary, 1 upper boundary, or
     0 away from boundaries in that direction. */
  stencilLoc : getStencilCoords(dim),

  /* Types of boundary conditions for which to generate kernels.
       =0 periodic
       =1 nonperiodic
  */
  bcTypes : [0, 1],
  bcStrs  : ["periodic", "nonperiodic"],
  bcKey   : makelist([bcTypes[i],bcStrs[i]],i,1,length(bcTypes)),

  for sI : 1 thru length(stencilLoc) do (
    /* Exclude lower boundary kernels (ones that do not own upper cell-boundary nodes). */
    if (stencilLoc[sI]=makelist(0,d,1,dim)) or
       (length(sublist(stencilLoc[sI],lambda([x],x < 0)))=0) then (

      /* Obtain the different BC combinations for this stencil.
         Will generate a separate kernel for each. */
      bcCombos : [[0]],
      if stencilLoc[sI][1] # 0 then ( bcCombos : makelist([bcTypes[i]],i,1,length(bcTypes)) ),
      for d : 2 thru dim do (
        bcsInDir : [[0]],
        if stencilLoc[sI][d] # 0 then ( bcsInDir : makelist([bcTypes[i]],i,1,length(bcTypes)) ),
        bcCombos : listify(cartesian_product(setify(bcCombos),setify(bcsInDir))),
        for i : 1 thru length(bcCombos) do ( bcCombos[i] : flatten(bcCombos[i]) )
      ),
  
      /* Loop over BC combinations. Will create a separate kernel for each. */
      for bcI : 1 thru length(bcCombos) do (
  
        currBC : copylist(bcCombos[bcI]),
  
        /* String used in kernel name, identifying stencil location and BC. */
        stencilStr : "",
        for d : 1 thru dim do (
          bcStr : "",
          if (stencilLoc[sI][d] = 1) then (
            bcStr : sconcat("_",assoc(currBC[d],bcKey),string(varsC[d]))
          ),
          stencilStr : sconcat(stencilStr,"_",assoc(stencilLoc[sI][d],[[-1,"lo"],[0,"in"],[1,"up"]]),
                       assoc(stencilLoc[sI][d],coordVarS)[d],bcStr)
        ),
  
        for polyOrder : 1 thru pMax do (
  
          printf(fh, "GKYL_CU_DH void ~a_p~a~a(int edge, int dir, double val, const long *globalIdxs, double *bsrc) ~%{ ~%", funcNm, polyOrder, stencilStr),
          printf(fh, "  // edge: -1/+1 for lower or upper edge of the cell.~%"),
          printf(fh, "  // dir: direction perpendicular to the biased plane.~%"),
          printf(fh, "  // val: biasing value.~%"),
          printf(fh, "  // globalIdxs: global linear index of each basis function/node in current cell.~%"),
          printf(fh, "  // bsrc: global right side source vector.~%"),
          printf(fh, "~%"),
  
          bN   : getNodalBasis(basisFun, dim, polyOrder),
          vars : listofvars(bN),
  
          nodes    : args(getNodes(basisFun, dim, polyOrder)),
          numNodes : length(nodes),
  
          src_c : makelist(0,i,1,numNodes),
  
          /* Set the equation corresponding to the k-th node to phi_k = bias value.
             So we need to replace the source at this node by the boundary value. */
          for dir : 1 thru dim do (
            printf(fh, "  if (dir == ~a) {~%", dir-1),
            for edge : -1 thru 1 step 2 do (
              printf(fh, "    if (edge == ~a) {~%", edge),
              dirichletNodes : copylist(sublist(nodes,lambda([x],x[dir]=edge))),
              dirichletNodesI : sublist_indices(nodes,lambda([x],x[dir]=edge)),
              for j : 1 thru length(dirichletNodesI) do (
                k : dirichletNodesI[j],
                src_c[k] : val,
  
                /* Write out the coefficients of each basis_i*sum_j basis_j*rho_j
                   (modified by BCS) to RHS vector via triples object.*/
                printf(fh, "  #ifdef __CUDA_ARCH__~%"),
                printf(fh, "  atomicExch((unsigned long long int*) &bsrc[globalIdxs[~a]],__double_as_longlong(~a));~%",k-1,expand(float(src_c[k]))),
                printf(fh, "  #else~%"),
                printf(fh, "  bsrc[globalIdxs[~a]] = ~a;~%",k-1,expand(float(src_c[k]))),
                printf(fh, "  #endif~%")
              ),
              printf(fh, "    }~%~%")
            ),
            printf(fh, "  }~%~%")
          ),
  
          printf(fh, "}~%")
        )
      )
    )
  )
)$
