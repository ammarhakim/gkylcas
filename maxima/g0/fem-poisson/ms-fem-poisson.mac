/* Generate kernels for the various elements of a direct
   solve of the simple Poisson equation
       - L(phi) = rho
   where L is the Laplacian, using the (continuous Galerkin)
   finite element method (FEM). */

load(stringproc)$
load("fem-poisson/fem-poisson-num_nodes")$
load("fem-poisson/fem-poisson-local_matrices")$
load("fem-poisson/fem-poisson-local_to_global")$
load("fem-poisson/fem-poisson-lhs_stencil")$
load("fem-poisson/fem-poisson-src_stencil")$
load("fem-poisson/fem-poisson-sol_stencil")$

/* ...... USER INPUTS........ */

/* Serendipity basis. */
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
maxCdim_Ser : 2$

/* Tensor product basis. */
maxPolyOrder_Tensor : 1$
minCdim_Tensor : 1$
maxCdim_Tensor : 0$

/* ...... END OF USER INPUTS........ */

bName        : ["ser","tensor"]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$

/* Kernels computing the number of nodes in the global problem. */
disp(printf(false,"Creating fem_poisson_num_nodes.c"))$
fname : "~/max-out/fem_poisson_num_nodes.c"$
fh    : openw(fname)$
printf(fh, "#include <gkyl_fem_poisson_kernels.h> ~%")$
printf(fh, " ~%")$
for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    /* Number of nodes in linear problem. */
    funcName : sconcat("fem_poisson_num_nodes_global_", c, "x_", bName[bInd]),
    disp(printf(false,sconcat("Working on fem_poisson_num_nodes_global_", c, "x_", bName[bInd]))),
    generate_fem_poisson_num_nodes(fh, funcName, c, bName[bInd], maxPolyOrder[bInd])
  )
)$
close(fh)$

/* Translation from local indices to global matrix indices. */
disp(printf(false,"Creating fem_poisson_local_to_global.c"))$
fname : "~/max-out/fem_poisson_local_to_global.c"$
fh    : openw(fname)$
printf(fh, "#include <gkyl_fem_poisson_kernels.h> ~%")$
printf(fh, " ~%")$
for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    funcName : sconcat("fem_poisson_local_to_global_", c, "x_", bName[bInd]),
    disp(printf(false,sconcat("Working on fem_poisson_local_to_global_", c, "x_", bName[bInd]))),
    generate_fem_poisson_local_to_global(fh, funcName, c, bName[bInd], maxPolyOrder[bInd])
  )
)$
close(fh)$

/* Kernels computing various nodal matrices. */
disp(printf(false,"Creating fem_poisson_nodal_matrices.c"))$
fname : "~/max-out/fem_poisson_nodal_matrices.c"$
fh    : openw(fname)$
printf(fh, "#include <gkyl_fem_poisson_kernels.h> ~%")$
printf(fh, " ~%")$
for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    /* Stiffness matrices. */
    funcName : sconcat("fem_poisson_stiff_", c, "x_", bName[bInd]),
    disp(printf(false,sconcat("Working on fem_poisson_stiff_matrix_", c, "x_", bName[bInd]))),
    generate_fem_poisson_stiff(fh, funcName, c, bName[bInd], maxPolyOrder[bInd]),

    /* Mass matrix times modal-to-nodal matrix. */
    funcName : sconcat("fem_poisson_mass_times_modtonod_", c, "x_", bName[bInd]),
    disp(printf(false,sconcat("Working on fem_poisson_mass_times_modtonod_", c, "x_", bName[bInd]))),
    generate_fem_poisson_mass_times_modtonod(fh, funcName, c, bName[bInd], maxPolyOrder[bInd]),

    /* Nodal-to-modal matrix. */
    funcName : sconcat("fem_poisson_nodtomod_", c, "x_", bName[bInd]),
    disp(printf(false,sconcat("Working on fem_poisson_nodtomod_", c, "x_", bName[bInd]))),
    generate_fem_poisson_nodtomod(fh, funcName, c, bName[bInd], maxPolyOrder[bInd])
  )
)$
close(fh)$


/* LHS stencil kernels. */
disp(printf(false,"Creating fem_poisson_lhs_stencil.c"))$
fname : "~/max-out/fem_poisson_lhs_stencil.c"$
fh    : openw(fname)$
printf(fh, "#include <gkyl_fem_poisson_kernels.h> ~%")$
printf(fh, " ~%")$
for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    funcName : sconcat("fem_poisson_lhs_stencil_", c, "x_", bName[bInd]),
    disp(printf(false,sconcat("Working on fem_poisson_lhs_stencil_", c, "x_", bName[bInd]))),
    generate_fem_poisson_lhs_stencil(fh, funcName, c, bName[bInd], maxPolyOrder[bInd])
  )
)$
close(fh)$


/* RHS source stencil kernels. */
disp(printf(false,"Creating fem_poisson_src_stencil.c"))$
fname : "~/max-out/fem_poisson_src_stencil.c"$
fh    : openw(fname)$
printf(fh, "#include <gkyl_fem_poisson_kernels.h> ~%")$
printf(fh, " ~%")$
for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    funcName : sconcat("fem_poisson_src_stencil_", c, "x_", bName[bInd]),
    generate_fem_poisson_src_stencil(fh, funcName, c, bName[bInd], maxPolyOrder[bInd])
  )
)$
close(fh)$

/* Solution nodal-to-modal kernels. */
disp(printf(false,"Creating fem_poisson_sol_stencil.c"))$
fname : "~/max-out/fem_poisson_sol_stencil.c"$
fh    : openw(fname)$
printf(fh, "#include <gkyl_fem_poisson_kernels.h> ~%")$
printf(fh, " ~%")$
for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    funcName : sconcat("fem_poisson_sol_stencil_", c, "x_", bName[bInd]),
    generate_fem_poisson_sol_stencil(fh, funcName, c, bName[bInd], maxPolyOrder[bInd])
  )
)$
close(fh)$
