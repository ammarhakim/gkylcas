/*
   Generate kernels computing the LHS of the Poisson equation, i.e.
     -epsilon*\int psi_k*d(phi)/dx dS + epsilon*\int d(psi_k)/dx * d(phi)/dx dV
   where the surface term is only applied on skin cells.
*/

load("modal-basis");
load("out-scripts");
load("nodal_operations/nodal_functions");
load("bvp_utilities/bvp-util");
load("fem/fem-util");
fpprec : 24$

generate_fem_poisson_lhs_stencil(fh, funcNm, dim, basisFun, pMax) := block(
  [],

  kill(varsC, varsP, basisC, basisP),

  load(sconcat("basis-precalc/basis", basisFun, dim, "x")),

  /* Associative list between stencil location (-1,0,1) and variable strings in kernel name. */
  coordVarS : getCoordVarS(varsC),

  /* List of stencil locations. Each entry is a dim-dimensional list
     with -1 meaning it is at a lower boundary, 1 upper boundary, or
     0 away from boundaries in that direction. */
  stencilLoc : getStencilCoords(dim),

  /* Types of boundary conditions for which to generate kernels.
       =0 periodic
       =1 dirichlet
       =2 neumann
       =3 robin
  */
  bcTypes : [0, 1, 2, 3],
  bcStrs  : ["periodic", "dirichlet", "neumann", "robin"],
  bcKey   : makelist([bcTypes[i],bcStrs[i]],i,1,length(bcTypes)),

  for sI : 1 thru length(stencilLoc) do (

    /* Obtain the different BC combinations for this stencil.
       Will generate a separate kernel for each. */
    bcCombos : [[0]],
    if stencilLoc[sI][1] # 0 then ( bcCombos : makelist([bcTypes[i]],i,1,length(bcTypes)) ),
    for d : 2 thru dim do (
      bcsInDir : [[0]],
      if stencilLoc[sI][d] # 0 then ( bcsInDir : makelist([bcTypes[i]],i,1,length(bcTypes)) ),
      bcCombos : listify(cartesian_product(setify(bcCombos),setify(bcsInDir))),
      for i : 1 thru length(bcCombos) do ( bcCombos[i] : flatten(bcCombos[i]) )
    ),

    /* Loop over BC combinations. Will create a separate kernel for each. */
    for bcI : 1 thru length(bcCombos) do (

      currBC : copylist(bcCombos[bcI]),

      /* String used in kernel name, identifying stencil location and BC. */
      stencilStr : "",
      for d : 1 thru dim do (
        stencilStr : sconcat(stencilStr,"_",assoc(stencilLoc[sI][d],[[-1,"lo"],[0,"in"],[1,"up"]]),
                     assoc(stencilLoc[sI][d],coordVarS)[d],"_",assoc(currBC[d],bcKey),string(varsC[d]))
      ),

      for polyOrder : 1 thru pMax do (

        printf(fh, "void ~a_p~a~a(const double epsilon, const double *dx, const double *bcVals, const long *globalIdxs, gkyl_mat_triples *tri) ~%{ ~%", funcNm, polyOrder, stencilStr),
        printf(fh, "  // epsilon: permittivity.~%"),
        printf(fh, "  // dx: cell length in each direction.~%"),
        printf(fh, "  // bcVals[3]: values to impose as BCs, i.e. bcVals[0]*phi+bcVals[1]*d(phi)/dx=bcVals[2].~%"),
        printf(fh, "  // globalIdxs: global linear index of each basis function/node in current cell.~%"),
        printf(fh, "  // tri: triples object (i,j,val), i.e. contribute val to i,j element of the global matrix.~%"),
        printf(fh, "~%"),

        bN   : getNodalBasis(basisFun, dim, polyOrder),
        numB : length(bN),
        vars : listofvars(bN),

        nodes    : args(getNodes(basisFun, dim, polyOrder)),
        numNodes : length(nodes),

        /* Calculate the volume term. */
        printf(fh, "  double rdx2Sq[~a];~%", dim),
        for d : 1 thru dim do (
          printf(fh, "  rdx2Sq[~a] = 4.0/(dx[~a]*dx[~a]);~%", d-1, d-1, d-1)
        ),
        printf(fh, "~%"),

        phi_c : makelist(phi[k-1],k,1,numB),
        phi_e : doExpand(phi_c,bN),

        vol_c : makelist(0,k,1,numB),
        for d : 1 thru dim do (
          vol_c : vol_c+epsilon*rdx2Sq[d-1]*calcInnerProdList(vars,1,diff(bN,vars[d]),diff(phi_e,vars[d]))
        ),

        /* For Dirichlet BCs we'll simply set the equation corresponding to the
           k-th node to phi_k = bcVals[2]. */
        insertVal : makelist(false,k,1,numB),
        dirichletDirs : append([], sublist_indices(currBC, lambda([x],x = 1))),
        for dI : 1 thru length(dirichletDirs) do (
          dir : dirichletDirs[dI],
          dirichletBoundaryNodes :  copylist(sublist(nodes,lambda([x],x[dir]=stencilLoc[sI][dir]))),
          dirichletBoundaryNodesI : sublist_indices(nodes,lambda([x],x[dir]=stencilLoc[sI][dir])),
          for k : 1 thru length(dirichletBoundaryNodes) do (
            vol_c[dirichletBoundaryNodesI[k]] : phi_c[dirichletBoundaryNodesI[k]],
            insertVal[dirichletBoundaryNodesI[k]] : true
          )
        ),

        /* Write out the coefficients of each basis_i*basis_j pair to matrix
           via triples object.*/
        for k : 1 thru numB do (
          vals_k : coefmatrix([vol_c[k]],phi_c),
          if insertVal[k] then (triplesStr : "insert") else (triplesStr : "accum"),
          for m : 1 thru numB do (
            val : vals_k[1][m],
            printf(fh, "  gkyl_mat_triples_~a(tri, globalIdxs[~a], globalIdxs[~a], ~a);~%",triplesStr,k-1,m-1,float(val))
          )
        ),
        printf(fh, "~%"),

        printf(fh, "}~%")

      )
    )

  )

)$
