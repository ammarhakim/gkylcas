/**
 * Create kernels which translate DG coefficients of a field into the DG
 * coefficients of a nother field of a different dimensionality. Currently
 * it is meant for:
 *   - x     -> x,y
 *   - x,y   -> x,y,z
 * 
 *   - x,y   -> y
 *   - x,y   -> x
 *   - x,y,z -> y,z
 *   - x,y,z -> x,z
 *   - x,y,z -> x,y
 *
 *   - 1x2v z,vpar,mu -> 2x2v x,z,vpar,mu
 *   - 1x2v z,vpar,mu -> 3x2v x,y,z,vpar,mu
 *   - 2x2v x,z,vpar,mu -> 3x2v x,y,z,vpar,mu
 *
 * When down projecting, we create kernels for evaluating
 * the removed direction at -1,0 or 1).
 */
load("translate_dim/trans_dim.mac")$

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 1$
minCdim_Ser : 1$
maxCdim_Ser : 3$

/* Tensor order basis. No need to generate p=1. */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
maxCdim_Tensor : 0$

/* Vdim possibilities for each of Cdim=[1,2,3]. */
gkVdims : [[1,2], [2], [2]]$

/* ...... END OF USER INPUTS........ */

/* To generate other bases, just add corresponding column to arrays below. */
bName        : ["ser", "tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$

for bInd : 1 thru length(bName) do (
  /* Generate kernels that translate conf-space fields. */
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    maxPolyOrderB : maxPolyOrder[bInd],
    if (c=3) then maxPolyOrderB : 1, /* Only generate p=1 kernels for 3x2v */
    for polyOrder : minPolyOrder[bInd] thru maxPolyOrderB do (
      fname : sconcat("~/max-out/translate_dim_", c, "x_", bName[bInd], "_p", polyOrder, ".c"),
      disp(printf(false,"Creating file: ~a",fname)),
  
      fh : openw(fname),
      printf(fh, "#include <gkyl_translate_dim_kernels.h> ~%"),
      printf(fh, "~%"),

      funcName : sconcat("translate_dim_", c, "x_", bName[bInd], "_p", polyOrder),
      gen_trans_dim_kernel(fh, funcName, c, bName[bInd], polyOrder),
      close(fh)
    )
  ),

  /* Generate kernels that translate GK distributions. */
  for c : max(2,minCdim[bInd]) thru maxCdim[bInd] do (
    for gkV : 1 thru length(gkVdims[c]) do (
      v : gkVdims[c][gkV],

      maxPolyOrderB : maxPolyOrder[bInd],
      if (c=3) then maxPolyOrderB : 1, /* Only generate p=1 kernels for 3x2v */
      for polyOrder : minPolyOrder[bInd] thru maxPolyOrderB do (
        fname : sconcat("~/max-out/translate_dim_gyrokinetic_", c, "x", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
        disp(printf(false,"Creating file: ~a",fname)),
  
        fh : openw(fname),
        printf(fh, "#include <gkyl_translate_dim_kernels.h> ~%"),
        printf(fh, "~%"),

        funcName : sconcat("translate_dim_gyrokinetic_", c, "x", v, "v_", bName[bInd], "_p", polyOrder),
        gen_trans_dim_gk_kernel(fh, funcName, c, v, bName[bInd], polyOrder),
        close(fh)
      )
    )
  )
)$
