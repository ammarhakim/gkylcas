/**
 * Create kernels which translate DG coefficients of a low-dimensional field
 * into the DG coefficients of our current (higher dimensional) field.
 *
 */
load("modal-basis");
load("out-scripts");
fpprec : 24$

gen_trans_dim_gk_kernel(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [vdim_low,polyOrder_low,varsC,bC,varsP,bP,vSub,cdim_low,varsC_low,
   bC_low,varsP_low,bP_low,vSub_low,flow_e,fout_c],

  /* Assume vdim and polyOrder remain the same. */
  vdim_low : vdim,
  polyOrder_low : polyOrder,

  /* Get desired basis. */
  [varsC,bC,varsP,bP,vSub] : loadGkBasis(basisFun, cdim, vdim, polyOrder),

  for cdim_low : 1 thru cdim-1 do (

    printf(fh, "GKYL_CU_DH void ~a_from_~ax~av_p~a(const double *flow, double *fout) ~%{ ~%", funcNm, cdim_low, vdim_low, polyOrder_low),
    printf(fh, "  // flow: lower dimensional field to get DG coefficients from.~%"),
    printf(fh, "  // fout: field whose DG coefficients to populate.~%"),
    printf(fh, "~%"),

    /* Load low-dimensional basis. */
    [varsC_low,bC_low,varsP_low,bP_low,vSub_low] : loadGkBasis(basisFun, cdim_low, vdim_low, polyOrder_low),
    /* In 1x2v x is actually z */
    if (cdim_low = 1) then (
      varsC_low  : subst(x=z,varsC_low),
      bC_low     : subst(x=z,bC_low   ),
      varsP_low  : subst(x=z,varsP_low),
      bP_low     : subst(x=z,bP_low   )
    ),

    flow_e : doExpand1(flow,bP_low),

    fout_c : calcInnerProdList(varsP,1,bP,flow_e),
    writeCExprsWithZeros1(fout, fout_c),

    printf(fh, "}~%"),
    printf(fh, "~%")
  )

)$
