/* Create kernels to compute the sheath potential and the potential
   everywhere via quadrature assuming ambipolar sheath fluxes
   and electron adiabaticity. */
load("ambi_bolt_potential/ambi_bolt_potential_funcs")$
load(stringproc)$

/* ...... USER INPUTS........ */

/* Serendipity basis. */
maxPolyOrder_Ser : 2$
minDim_Ser : 1$
maxDim_Ser : 3$

/* Tensor basis. */
maxPolyOrder_Tensor : 2$
minDim_Tensor : 1$
maxDim_Tensor : 0$

/* ...... END OF USER INPUTS........ */

/* To generate other bases, just add corresponding column to arrays below. */
bName        : ["ser","tensor"]$
maxPolyOrder : [maxPolyOrder_Ser,maxPolyOrder_Tensor]$
minDim       : [minDim_Ser,minDim_Tensor]$
maxDim       : [maxDim_Ser,maxDim_Tensor]$

for bInd : 1 thru length(bName) do (
  for cD : minDim[bInd] thru maxDim[bInd] do (
    maxPolyOrderB : maxPolyOrder[bInd],

    for polyOrder : 1 thru maxPolyOrderB do (

      disp(printf(false,sconcat("Creating a sheath_potential_ ~ax p~a ",bName[bInd]),cD,polyOrder)),

      fname : sconcat("~/max-out/ambi_bolt_potential_", cD, "x_p", polyOrder, "_", bName[bInd], ".c"),
      fh : openw(fname),
      printf(fh, "#include <gkyl_ambi_bolt_potential_kernels.h>~%~%"),

      funcName : sconcat("ambi_bolt_potential_sheath_calc_~a_", cD, "x_", bName[bInd], "_p", polyOrder),
      genSheathCalcKernel(fh, funcName, cD, bName[bInd], polyOrder),

      funcName : sconcat("ambi_bolt_potential_phi_calc_", cD, "x_", bName[bInd], "_p", polyOrder),
      genPhiCalcKernel(fh, funcName, cD, bName[bInd], polyOrder),

      close(fh)
    )
  )
);
