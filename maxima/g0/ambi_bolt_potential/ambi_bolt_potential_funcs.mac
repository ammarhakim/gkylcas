/*
  Functions to generate kernels that compute the sheath potential, the
  sheath entrance ion density, and the potential in the whole domain,
  assume ambipolar fluxes and Boltzmann electrons.
*/

load("modal-basis");
load("out-scripts");
load(stringproc)$
load("nodal_operations/quadrature_functions")$
load("utilities_gyrokinetic")$
fpprec : 24$

genSheathCalcKernel(fh, funcNm, dim, basisNm, polyOrder) := block(
  /* Compute the sheath entrance potential using Gaussian quadrature. */
  [numQuad,vars,basis,numB,bmagBasis,sheathDir,sheathVar,sheathSurfVars,varsLowD,basisLowD,numBLowD,
   boundaryStr,ghostEvSign,skinEvSign,GammaJacIon_e,GammaJacIonB_c,
   cmag_e,jacobtotInv_e,x3HalfMomJacElc_e,x3HalfMomJacElcB_c,x3HalfMomJacElcB_e,x3HalfMomJacElcB_n,
   GammaJacIonB_e,m0JacIon_e,m0JacIonB_c,m0JacIonB_e,phiSlowD_c,
   phiSlowD_e,phiS_c,expr,jacInv_e,m0Ion_c,m0Ion_e,m0IonS_c],

  numQuad : polyOrder+1, /* Number of quarature points in 1D. */

  [vars, basis] : loadBasis(basisNm, dim, polyOrder),
  numB : length(basis),
  bmagBasis : getAxisymmetricConfBasis(basis),

  sheathDir : dim,  /* Assume the last dimension is the sheath direction. */
  sheathVar : vars[sheathDir],
  sheathSurfVars : delete(sheathVar, vars),

  /* Load a basis of one fewer dimension for projecting onto sheath surface. */
  if dim>1 then (
    [varsLowD, basisLowD] : loadBasis(basisNm, dim-1, polyOrder),
    subList   : makelist(varsLowD[i]=sheathSurfVars[i],i,1,dim-1),
    varsLowD  : psubst(subList, varsLowD),
    basisLowD : psubst(subList, basisLowD)
  ) else (
    varsLowD : [x],  basisLowD : [1/innerProd(varsLowD,1,1,1)]
  ),
  numBLowD : length(basisLowD),

  /* Get the Gaussian quadrature weights and ordinates (in [-1,1] space) for
     quadrature in one dimension lower. */
  if dim>1 then (
    [normOrds, weights] : gaussOrdWeight(numQuad,dim-1),
    ordNum : length(normOrds)
  ),

  boundaryStr : ["lower","upper"],
  ghostEvSign : [1, -1],  skinEvSign  : [-1, 1],

  for bS : 1 thru 2 do ( /* One kernel for each of lower and upper boundaries. */
    printf(fh,sconcat("GKYL_CU_DH void ",funcNm,"(double sheathDirDx, double q_e, double m_e, double T_e, const double *jacInv, const double *cmag, const double *jacobtotInv, const double *GammaJac_i, const double *m0JacIon, double *out) ~%{ ~%"), boundaryStr[bS]),
    printf(fh,"  // sheathDirDx: cell length in direction of the sheath.~%"),
    printf(fh,"  // q_e:         electron change.~%"),
    printf(fh,"  // m_e:         electron mass.~%"),
    printf(fh,"  // T_e:         electron temperature.~%"),
    printf(fh,"  // jacInv:      reciprocal of the geometry Jacobian (1/J).~%"),
    printf(fh,"  // cmag:        Clebsch function in definition of magnetic field.~%"),
    printf(fh,"  // jacobtotInv: reciprocal of the phase-space and conf-space Jacobians (1/(J*B)).~%"),
    printf(fh,"  // GammaJac_i:  ion particle flux (times the Jacobian) through sheath entrance.~%"),
    printf(fh,"  // m0JacIon:    ion density (times the geometry Jacobian).~%"),
    printf(fh,"  // out:         ion density and electrostatic potential at the sheath entrance.~%"),
    printf(fh,"~%"),

    /* Density at the sheath entrance. */
    m0JacIon_e : doExpand1(m0JacIon, basis),
    jacInv_e : doExpand1(jacInv,bmagBasis),
    m0Ion_c : calcInnerProdList(vars, jacInv_e, basis, m0JacIon_e),
    m0Ion_e : doExpand(m0Ion_c,basis),

    m0IonS_c : calcInnerProdList(vars, 1, basis, subst(sheathVar=skinEvSign[bS],m0Ion_e)),
    printf(fh,"  // Particle number density evaluate at the sheath entrance~%"),
    expr : float(m0IonS_c),
    for i : 1 thru length(expr) do (
      if expr[i] # 0.0 then printf(fh, "  ~a = ~a; ~%", out[i-1], gcfac(expr[i]))
    ),
    printf(fh,"~%"),

    /* Particle flux expanded in basis. Need to multiply by an extra dx/2
       because of the way the boundary fluxes are computed. */
    GammaJacIon_e : (sheathDirDx/2)*doExpand1(GammaJac_i, basis),
    /* Evaluate the (ghost cell) flux at the boundary surface. */
    GammaJacIonB_c : calcInnerProdList(varsLowD,1,basisLowD,subst(sheathVar=ghostEvSign[bS], GammaJacIon_e)),
    printf(fh,"  double GammaJacIonB[~a];~%", numBLowD),
    writeCExprs1(GammaJacIonB, GammaJacIonB_c),
    printf(fh,"~%"),
    GammaJacIonB_c : makelistNoZeros1(GammaJacIonB_c, GammaJacIonB),
    GammaJacIonB_e : doExpand(GammaJacIonB_c,basisLowD),

    /*
      Evaluate the x^3 half moment (over positive or negative vpar) of the electrons,
      where x^3=C*vpar/(J*B), and assume quasineutrality so n_i appears instead of n_e.
    */
    cmag_e : doExpand1(cmag, bmagBasis),
    jacobtotInv_e : doExpand1(jacobtotInv, bmagBasis),
    x3HalfMomJacElc_e : (1/sqrt(2*%pi))*cmag_e*jacobtotInv_e*m0JacIon_e*sqrt(T_e/m_e),
    x3HalfMomJacElcB_c : calcInnerProdList(varsLowD,1,basisLowD,subst(sheathVar=skinEvSign[bS], x3HalfMomJacElc_e)),
    printf(fh,"  double x3HalfMomJacElcB[~a];~%", numBLowD),
    writeCExprs1(x3HalfMomJacElcB, x3HalfMomJacElcB_c),
    printf(fh,"~%"),
    x3HalfMomJacElcB_c : makelistNoZeros1(x3HalfMomJacElcB_c, x3HalfMomJacElcB),
    x3HalfMomJacElcB_e : doExpand(x3HalfMomJacElcB_c,basisLowD),

    /* Evaluate the (skin cell) ion density at the boundary surface. */
    m0JacIonB_c : calcInnerProdList(varsLowD,1,basisLowD,subst(sheathVar=skinEvSign[bS], m0JacIon_e)),
    printf(fh,"  double m0JacIonB[~a];~%", numBLowD),
    writeCExprs1(m0JacIonB, m0JacIonB_c),
    printf(fh,"~%"),
    m0JacIonB_c : makelistNoZeros1(m0JacIonB_c, m0JacIonB),
    m0JacIonB_e : doExpand(m0JacIonB_c,basisLowD),

    /* Compute the sheath potential
         phiS = (T_e/q_e)*log( GammaJac_i/((1/sqrt(2*pi))*(c/(J*B))*n_i*sqrt(T_e/m_e)) )
       using quadrature. If dim=1 no quadrature is needed. */
    phiSlowD_c : makelist(0,i,1,numBLowD),
    if dim=1 then (

      printf(fh,"  double phiS_qp[1];~%"),
      phiSlowD_c : [(T_e/q_e)*log(GammaJacIonB_e/x3HalfMomJacElcB_e)],
      printf(fh,"  if ((isfinite(~a)) && (~a>0.) && (~a>0.)) {~%",GammaJacIonB_e,GammaJacIonB_e,m0JacIonB_e),
      printf(fh,"    phiS_qp[0] = ~a;~%",float(expand(phiSlowD_c[1]))),
      printf(fh,"  } else {~%"),
      printf(fh,"    phiS_qp[0] = 0.0;~%"),
      printf(fh,"  }~%"),
      printf(fh,"~%"),
      phiSlowD_e : phiS_qp[0]

    ) else (

      m0JacIonB_n : makelist(0,i,1,ordNum),
      GammaJacIonB_n : makelist(0,i,1,ordNum),
      x3HalfMomJacElcB_n : makelist(0,i,1,ordNum),
      for i : 1 thru ordNum do (
        nOrd : normOrds[i],
        cSub : makelist(varsLowD[d]=normOrds[i][d],d,1,dim-1),

        m0JacIonB_n[i] : subst(cSub, m0JacIonB_e),
        GammaJacIonB_n[i] : subst(cSub, GammaJacIonB_e),
        x3HalfMomJacElcB_n[i] : subst(cSub, x3HalfMomJacElcB_e)
      ),

      printf(fh,"  double phiS_qp[~a];~%", ordNum),
      phiS_n : makelist(0,i,1,ordNum),
      for i : 1 thru ordNum do (
        phiS_n[i] : (T_e/q_e)*log(GammaJacIonB_n[i]/x3HalfMomJacElcB_n[i]),
        printf(fh,"  if ((isfinite(~a)) && (~a>0.) && (~a>0.)) {~%",float(GammaJacIonB_n[i]),float(GammaJacIonB_n[i]),float(m0JacIonB_n[i])),
        printf(fh,"    phiS_qp[~a] = ~a;~%",i-1,float(expand(phiS_n[i]))),
        printf(fh,"  } else {~%"),
        printf(fh,"    phiS_qp[~a] = 0.0;~%",i-1),
        printf(fh,"  }~%")
      ),
      printf(fh,"~%"),

      phiSlowD_c : makelist(0,i,1,numBLowD),
      for i : 1 thru ordNum do (
        nOrd : normOrds[i],
        /* Add contribution to each DG coefficient. */
        for k : 1 thru numBLowD do (
          phiSlowD_c[k] : phiSlowD_c[k]+weights[i]*subst(makelist(varsLowD[d]=nOrd[d],d,1,dim-1),basisLowD[k])*phiS_qp[i-1]
        )
      ),
      phiSlowD_e : doExpand(phiSlowD_c, basisLowD)

    ),

    phiS_c : calcInnerProdList(vars, 1, basis, phiSlowD_e),
    printf(fh,"  // Sheath potential~%"),
    expr : float(phiS_c),
    for i : 1 thru length(expr) do (
      if expr[i] # 0.0 then printf(fh, "  ~a = ~a; ~%", out[numB+i-1], gcfac(expr[i]))
    ),
    printf(fh,"~%"),

    printf(fh, "}~%"),
    printf(fh, "~%")
  )
)$

genPhiCalcKernel(fh, funcNm, dim, basisNm, polyOrder) := block(
  /* Compute the potential in the domain volume using Gaussian quadrature. */
  [numQuad,vars,basis,numB,bmagBasis,normOrds,weights,ordNum,m0JacIon_e,
  jacInv_e,m0Ion_c,m0Ion_e,m0IonS_e,phiS_e,m0Ion_n,m0IonS_n,
  phiS_n,nOrd,cSub,phi_n,phi_c],

  numQuad : polyOrder+1, /* Number of quarature points in 1D. */

  [vars, basis] : loadBasis(basisNm, dim, polyOrder),
  numB : length(basis),

  bmagBasis : getAxisymmetricConfBasis(basis),

  /* Get the Gaussian quadrature weights and ordinates (in [-1,1] space) */
  [normOrds, weights] : gaussOrdWeight(numQuad,dim),
  ordNum : length(normOrds),

  printf(fh,sconcat("GKYL_CU_DH void ",funcNm,"(double q_e, double T_e, const double *jacInv, const double *m0JacIon, const double *sheathvals, double *phi) ~%{ ~%")),
  printf(fh,"  // q_e:        electron change.~%"),
  printf(fh,"  // T_e:        electron temperature.~%"),
  printf(fh,"  // jacInv:     reciprocal of the geometry Jacobian (1/J).~%"),
  printf(fh,"  // m0JacIon:   ion density.~%"),
  printf(fh,"  // sheathvals: ion density and electrostatic potential at the sheath entrance.~%"),
  printf(fh,"  // phi:        electrostatic potential in domain volume.~%"),
  printf(fh,"~%"),

  m0JacIon_e : doExpand1(m0JacIon, basis),

  jacInv_e : doExpand1(jacInv,bmagBasis),
  m0Ion_c : calcInnerProdList(vars, jacInv_e, basis, m0JacIon_e),
  m0Ion_e : doExpand(m0Ion_c,basis),
  printf(fh,"  double m0Ion[~a];~%", numB),
  writeCExprs1(m0Ion, m0Ion_c),
  printf(fh,"~%"),
  m0Ion_c : makelistNoZeros1(m0Ion_c, m0Ion),
  m0Ion_e : doExpand(m0Ion_c,basis),

  m0IonS_e : doExpand(makelist(sheathvals[i-1],i,1,numB), basis),
  phiS_e   : doExpand(makelist(sheathvals[numB+i-1],i,1,numB), basis),

  m0Ion_n  : makelist(0,i,1,ordNum),
  m0IonS_n : makelist(0,i,1,ordNum),
  phiS_n   : makelist(0,i,1,ordNum),
  for i : 1 thru ordNum do (
    nOrd : normOrds[i],
    cSub : makelist(vars[d]=normOrds[i][d],d,1,dim),

    m0Ion_n[i]  : subst(cSub, m0Ion_e),
    /* In principle the following two should be evaluated at the boundary like
         m0IonS_n[i] : subst(cSub, subst(sheathVar=skinEvSign[bS],m0IonS_e)),
       but the second DG coefficient in m0IonS_e (for 1x p=1) is zero anyway. */
    m0IonS_n[i] : subst(cSub, m0IonS_e),
    phiS_n[i]   : subst(cSub, phiS_e)
  ),

  phi_n : makelist(0,i,1,ordNum),
  for i : 1 thru ordNum do (
    phi_n[i] : phiS_n[i] - (T_e/q_e)*log(m0Ion_n[i]/m0IonS_n[i])
  ),
  printf(fh,"  double phi_qp[~a];~%", ordNum),
  writeCExprs1(phi_qp, phi_n),
  printf(fh,"~%"),

  phi_c : makelist(0,i,1,numB),
  for i : 1 thru ordNum do (
    nOrd : normOrds[i],
    /* Add contribution to each DG coefficient. */
    for k : 1 thru numB do (
      phi_c[k] : phi_c[k]+weights[i]*subst(makelist(vars[d]=nOrd[d],d,1,dim),basis[k])*phi_qp[i-1]
    )
  ),

  writeCExprsNoExpand1(phi, phi_c),
  printf(fh, "}~%"),
  printf(fh, "~%")
)$
