/* This script generates the kernels for limiting the fluid equations in DG. 
   Limiter is a characteristic limiter that computes the waves and 
   limits the slopes based on the characteristic variables. */

load("modal-basis")$
load("out-scripts")$
fpprec : 24$

calcEulerLimiter(dir, fh, funcNm, cdim, basisFun, polyOrder) := block(
  [varsC, bC, NC],

  kill(varsC, bC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),

  /* Number of basis monomials. */
  NC : length(bC),

  printf(fh, "#include <gkyl_euler_kernels.h> ~%"),
  printf(fh, "GKYL_CU_DH void ~a(double limiter_fac, const struct gkyl_wv_eqn *wv_eqn, 
  const struct gkyl_wave_cell_geom *geom, 
  double *fluid_l, double *fluid_c, double *fluid_r)~%{ ~%", funcNm),
  printf(fh, "  // limiter_fac:            Factor for relationship between cell slopes and cell average differences (by default: 1/sqrt(3)).~%"),
  printf(fh, "  // wv_eqn:                 Wave equation for computing waves for limiting characteristics.~%"),
  printf(fh, "  // geom:                   Geometry on the left (*only works with Cartesian components*).~%"),
  printf(fh, "  // fluid_l/c/r: [rho, rho ux, rho uy, rho uz, energy], Fluid input state vector in left/center/right cells.~%"),
  printf(fh, "~%"),

  printf(fh, "  const double *norm = geom->norm[~a]; ~%", dir-1),
  printf(fh, "  const double *tau1 = geom->tau1[~a]; ~%", dir-1),
  printf(fh, "  const double *tau2 = geom->tau2[~a]; ~%", dir-1),
  printf(fh, "~%"),

  printf(fh, "  double *rho_l = &fluid_l[~a]; ~%", 0*NC),
  printf(fh, "  double *rhoux_l = &fluid_l[~a]; ~%", 1*NC),
  printf(fh, "  double *rhouy_l = &fluid_l[~a]; ~%", 2*NC),
  printf(fh, "  double *rhouz_l = &fluid_l[~a]; ~%", 3*NC),
  printf(fh, "  double *energy_l = &fluid_l[~a]; ~%", 4*NC),
  printf(fh, "~%"),

  printf(fh, "  double *rho_c = &fluid_c[~a]; ~%", 0*NC),
  printf(fh, "  double *rhoux_c = &fluid_c[~a]; ~%", 1*NC),
  printf(fh, "  double *rhouy_c = &fluid_c[~a]; ~%", 2*NC),
  printf(fh, "  double *rhouz_c = &fluid_c[~a]; ~%", 3*NC),
  printf(fh, "  double *energy_c = &fluid_c[~a]; ~%", 4*NC),  
  printf(fh, "~%"),

  printf(fh, "  double *rho_r = &fluid_r[~a]; ~%", 0*NC),
  printf(fh, "  double *rhoux_r = &fluid_r[~a]; ~%", 1*NC),
  printf(fh, "  double *rhouy_r = &fluid_r[~a]; ~%", 2*NC),
  printf(fh, "  double *rhouz_r = &fluid_r[~a]; ~%", 3*NC),
  printf(fh, "  double *energy_r = &fluid_r[~a]; ~%", 4*NC),
  printf(fh, "~%"),

  /* State vector from cell averages on left, center, and right */
  printf(fh, "  double q_avg_l[5] = {0.0}; ~%"),
  printf(fh, "  q_avg_l[0] = rho_l[0]; ~%"),
  printf(fh, "  q_avg_l[1] = rhoux_l[0]; ~%"),
  printf(fh, "  q_avg_l[2] = rhouy_l[0]; ~%"),
  printf(fh, "  q_avg_l[3] = rhouz_l[0]; ~%"),
  printf(fh, "  q_avg_l[4] = energy_l[0]; ~%"),

  printf(fh, "  double q_avg_c[5] = {0.0}; ~%"),
  printf(fh, "  q_avg_c[0] = rho_c[0]; ~%"),
  printf(fh, "  q_avg_c[1] = rhoux_c[0]; ~%"),
  printf(fh, "  q_avg_c[2] = rhouy_c[0]; ~%"),
  printf(fh, "  q_avg_c[3] = rhouz_c[0]; ~%"),
  printf(fh, "  q_avg_c[4] = energy_c[0]; ~%"),

  printf(fh, "  double q_avg_r[5] = {0.0}; ~%"),
  printf(fh, "  q_avg_r[0] = rho_r[0]; ~%"),
  printf(fh, "  q_avg_r[1] = rhoux_r[0]; ~%"),
  printf(fh, "  q_avg_r[2] = rhouy_r[0]; ~%"),
  printf(fh, "  q_avg_r[3] = rhouz_r[0]; ~%"),
  printf(fh, "  q_avg_r[4] = energy_r[0]; ~%"),

  /* Rotate to local coordinates */
  printf(fh, "  double q_l_local[5] = {0.0}; ~%"),
  printf(fh, "  double q_c_local[5] = {0.0}; ~%"),
  printf(fh, "  double q_r_local[5] = {0.0}; ~%"),
  printf(fh, "  rot_to_local(wv_eqn, tau1, tau2, norm, q_avg_l, q_l_local); ~%"),
  printf(fh, "  rot_to_local(wv_eqn, tau1, tau2, norm, q_avg_c, q_c_local); ~%"),
  printf(fh, "  rot_to_local(wv_eqn, tau1, tau2, norm, q_avg_r, q_r_local); ~%"),
  printf(fh, "~%"),

  /* Compute jumps for calculating fluctuations */
  printf(fh, "  double delta_l[5] = {0.0}; ~%"),
  printf(fh, "  double delta_c[5] = {0.0}; ~%"),
  printf(fh, "  double delta_r[5] = {0.0}; ~%"),

  printf(fh, "  delta_l[0] = limiter_fac*(q_c_local[0] - q_l_local[0]); ~%"),
  printf(fh, "  delta_l[1] = limiter_fac*(q_c_local[1] - q_l_local[1]); ~%"),
  printf(fh, "  delta_l[2] = limiter_fac*(q_c_local[2] - q_l_local[2]); ~%"),
  printf(fh, "  delta_l[3] = limiter_fac*(q_c_local[3] - q_l_local[3]); ~%"),
  printf(fh, "  delta_l[4] = limiter_fac*(q_c_local[4] - q_l_local[4]); ~%"),

  printf(fh, "  delta_c[0] = rho_c[~a]; ~%", dir),
  printf(fh, "  delta_c[1] = rhoux_c[~a]; ~%", dir),
  printf(fh, "  delta_c[2] = rhouy_c[~a]; ~%", dir),
  printf(fh, "  delta_c[3] = rhouz_c[~a]; ~%", dir),
  printf(fh, "  delta_c[4] = energy_c[~a]; ~%", dir),

  printf(fh, "  delta_r[0] = limiter_fac*(q_r_local[0] - q_c_local[0]); ~%"),
  printf(fh, "  delta_r[1] = limiter_fac*(q_r_local[1] - q_c_local[1]); ~%"),
  printf(fh, "  delta_r[2] = limiter_fac*(q_r_local[2] - q_c_local[2]); ~%"),
  printf(fh, "  delta_r[3] = limiter_fac*(q_r_local[3] - q_c_local[3]); ~%"),
  printf(fh, "  delta_r[4] = limiter_fac*(q_r_local[4] - q_c_local[4]); ~%"), 
  printf(fh, "~%"),

  /* Rotate the slopes into the local coordinate system */
  printf(fh, "  double delta_c_local[5] = {0.0}; ~%"),
  printf(fh, "  rot_to_local(wv_eqn, tau1, tau2, norm, delta_c, delta_c_local); ~%"),
  printf(fh, "~%"),

  /* Compute local waves and speeds at interface */
  printf(fh, "  double waves_slope_l[15] = {0.0}; ~%"),
  printf(fh, "  double waves_slope_c[15] = {0.0}; ~%"),  
  printf(fh, "  double waves_slope_r[15] = {0.0}; ~%"),  
  printf(fh, "  double speeds[3] = {0.0}; ~%"),
  printf(fh, "  double my_max_speed_l = wave_roe(wv_eqn, delta_l, q_c_local, q_c_local, waves_slope_l, speeds); ~%"),
  printf(fh, "  double my_max_speed_c = wave_roe(wv_eqn, delta_c_local, q_c_local, q_c_local, waves_slope_c, speeds); ~%"),
  printf(fh, "  double my_max_speed_r = wave_roe(wv_eqn, delta_r, q_c_local, q_c_local, waves_slope_r, speeds); ~%"), 
  printf(fh, "~%"),

  printf(fh, "  double mm[15] = {0.0}; ~%"),
  printf(fh, "  double slope[5] = {0.0}; ~%"), 

  printf(fh, "  for (int i = 0; i < 3; ++i) { ~%"),

  printf(fh, "    mm[5*i] = gkyl_minmod(waves_slope_c[5*i], waves_slope_l[5*i], waves_slope_r[5*i]); ~%"), 
  printf(fh, "    mm[5*i+1] = gkyl_minmod(waves_slope_c[5*i+1], waves_slope_l[5*i+1], waves_slope_r[5*i+1]); ~%"), 
  printf(fh, "    mm[5*i+2] = gkyl_minmod(waves_slope_c[5*i+2], waves_slope_l[5*i+2], waves_slope_r[5*i+2]); ~%"),
  printf(fh, "    mm[5*i+3] = gkyl_minmod(waves_slope_c[5*i+3], waves_slope_l[5*i+3], waves_slope_r[5*i+3]); ~%"), 
  printf(fh, "    mm[5*i+4] = gkyl_minmod(waves_slope_c[5*i+4], waves_slope_l[5*i+4], waves_slope_r[5*i+4]); ~%"), 
  printf(fh, "    slope[0] += mm[5*i]; ~%"), 
  printf(fh, "    slope[1] += mm[5*i+1]; ~%"), 
  printf(fh, "    slope[2] += mm[5*i+2]; ~%"), 
  printf(fh, "    slope[3] += mm[5*i+3]; ~%"), 
  printf(fh, "    slope[4] += mm[5*i+4]; ~%"), 
  printf(fh, "  } ~%"),
  printf(fh, "~%"),

  printf(fh, "  // Rotate limited slope back to global coordinates ~%"), 
  printf(fh, "  rho_c[~a] = slope[0]; ~%", dir), 
  printf(fh, "  rhoux_c[~a] = slope[1]*norm[0] + slope[2]*tau1[0] + slope[3]*tau2[0]; ~%", dir), 
  printf(fh, "  rhouy_c[~a] = slope[1]*norm[1] + slope[2]*tau1[1] + slope[3]*tau2[1]; ~%", dir), 
  printf(fh, "  rhouz_c[~a] = slope[1]*norm[2] + slope[2]*tau1[2] + slope[3]*tau2[2]; ~%", dir), 
  printf(fh, "  energy_c[~a] = slope[4]; ~%", dir), 

  if (polyOrder > 1 or cdim > 1) then (
    printf(fh, "  for (int i = 0; i < 3; ++i) { ~%"),

    printf(fh, "    if (mm[5*i] != waves_slope_c[5*i]) { ~%"), 
    for j : 1 thru (NC-1-cdim) do (
      printf(fh, "      rho_c[~a] = 0.0; ~%", j+cdim)
    ),
    printf(fh, "    } ~%"), 

    printf(fh, "    if (mm[5*i+1] != waves_slope_c[5*i+1]) { ~%"), 
    for j : 1 thru (NC-1-cdim) do (
      printf(fh, "      rhoux_c[~a] = 0.0; ~%", j+cdim)
    ),
    printf(fh, "    } ~%"), 

    printf(fh, "    if (mm[5*i+2] != waves_slope_c[5*i+2]) { ~%"), 
    for j : 1 thru (NC-1-cdim) do (
      printf(fh, "      rhouy_c[~a] = 0.0; ~%", j+cdim)
    ),
    printf(fh, "    } ~%"), 

    printf(fh, "    if (mm[5*i+3] != waves_slope_c[5*i+3]) { ~%"), 
    for j : 1 thru (NC-1-cdim) do (
      printf(fh, "      rhouz_c[~a] = 0.0; ~%", j+cdim)
    ),
    printf(fh, "    } ~%"), 

    printf(fh, "    if (mm[5*i+4] != waves_slope_c[5*i+4]) { ~%"), 
    for j : 1 thru (NC-1-cdim) do (
      printf(fh, "      energy_c[~a] = 0.0; ~%", j+cdim)
    ),
    printf(fh, "    } ~%"), 

    printf(fh, "  } ~%")
  ),
  printf(fh, "} ~%")
)$
