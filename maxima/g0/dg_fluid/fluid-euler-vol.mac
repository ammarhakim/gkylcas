/* This script generates the kernels for the volume term of Euler's equations */

/* This script generates the kernels for the volume terms of Euler's equations */

load("modal-basis")$
load("out-scripts")$
fpprec : 24$

lhs : [outrho, outrhoux, outrhouy, outrhouz, outenergy]$
dx1 : [dx10, dx11, dx12]$

calcEulerVolUpdater(fh, funcNm, cdim, basisFun, polyOrder) := block(
  [varsC,bC,NC,cflPt,cid,
   rho_e,rhoux_e,rhouy_e,rhouz_e,energy_e,
   ux_e,uy_e,uz_e,u_e,p_e, 
   umid,pmid,rhomid,t1,t2,t3,t4,t5,volTerms,vol,expr],

  kill(varsC, bC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),

  /* Number of basis monomials. */
  NC : length(bC),

  printf(fh, "#include <gkyl_euler_kernels.h> ~%"),

  /* specify a point to evaluate maximum speed at for use in computing CFL */
  cflPt : makelist(varsC[d]=0, d, 1, length(varsC)),

  printf(fh, "GKYL_CU_DH double ~a_p~a(const double *w, const double *dxv, double gas_gamma, 
    const double *u, const double *p, const double *fluid, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, polyOrder),
  printf(fh, "  // w[NDIM]:   Cell-center coordinates.~%"),
  printf(fh, "  // dxv[NDIM]: Cell spacing.~%"),
  printf(fh, "  // gas_gamma: Adiabatic index.~%"),
  printf(fh, "  // u:         Input flow velocity [ux, uy, uz].~%"),
  printf(fh, "  // p:         Input pressure .~%"),
  printf(fh, "  // fluid:     [rho, rho ux, rho uy, rho uz, E], Fluid input state vector.~%"),
  printf(fh, "  // out:       Incremented output.~%"),
  printf(fh, "~%"),
  for dir : 1 thru cdim do (
    printf(fh, "  double dx1~a = 2./dxv[~a]; ~%", dir-1, dir-1)
  ),
  printf(fh, "~%"),

  printf(fh, "  const double *rho = &fluid[~a]; ~%", 0*NC),
  printf(fh, "  const double *rhoux = &fluid[~a]; ~%", 1*NC),
  printf(fh, "  const double *rhouy = &fluid[~a]; ~%", 2*NC),
  printf(fh, "  const double *rhouz = &fluid[~a]; ~%", 3*NC),
  printf(fh, "  const double *energy = &fluid[~a]; ~%", 4*NC),
  printf(fh, "~%"),

  /* access flow velocity data */
  printf(fh, "  const double *ux = &u[~a]; ~%", 0*NC),
  printf(fh, "  const double *uy = &u[~a]; ~%", 1*NC),
  printf(fh, "  const double *uz = &u[~a]; ~%", 2*NC),
  printf(fh, "~%"),

  printf(fh, "  double *outrho = &out[~a]; ~%", 0*NC),
  printf(fh, "  double *outrhoux = &out[~a]; ~%", 1*NC),
  printf(fh, "  double *outrhouy = &out[~a]; ~%", 2*NC),
  printf(fh, "  double *outrhouz = &out[~a]; ~%", 3*NC),
  printf(fh, "  double *outenergy = &out[~a]; ~%", 4*NC),
  printf(fh, "~%"),

  /* cflFreq_mid is our approximation of sum_i max(abs(alpha_i))/(dx_i/(2p+1)) */
  printf(fh, "  double cflFreq_mid = 0.0; ~%"),

  rho_e : doExpand1(rho, bC),
  rhoux_e : doExpand1(rhoux, bC),
  rhouy_e : doExpand1(rhouy, bC),
  rhouz_e : doExpand1(rhouz, bC),
  rhou_e : [rhoux_e,rhouy_e,rhouz_e],
  energy_e : doExpand1(energy, bC),

  /* Expand flow, u_i, and pressure tensor, P_ij, in configuration space basis */
  ux_e : doExpand1(ux, bC),
  uy_e : doExpand1(uy, bC),
  uz_e : doExpand1(uz, bC),
  u_e : [ux_e, uy_e, uz_e],

  p_e : doExpand1(p, bC),

  /* compute stable time step, max speed = |u| + sqrt(gas_gamma*p/rho) */
  for dir : 1 thru cdim do (
    /* evaluate velocity at center of cell */
    umid : gcfac(float(expand(subst(cflPt, u_e[dir])))),
    pmid : gcfac(float(expand(subst(cflPt, p_e)))),
    rhomid : gcfac(float(expand(subst(cflPt, rho_e)))),
    printf(fh, "  cflFreq_mid += 0.5*~a*(fabs(~a) + sqrt(gas_gamma*~a/(~a))); ~%", float(2*polyOrder+1)*dx1[dir], umid, pmid, rhomid)
  ),
  printf(fh, "~%"),

  /* Density update, flux = rho*u */
  t1 : (t1 : 0, for dir : 1 thru cdim do (
     t1 : t1 + dx1[dir]*calcInnerProdList(varsC, 1, diff(bC, varsC[dir]), rhou_e[dir])
     ),
  t1),
  /* Momentum update, flux = rho*u*u + pI, where I is the identity matrix */
  t2 : (t2 : 0, for dir : 1 thru cdim do (
     if (dir = 1) then (t2 : t2 + dx1[dir]*calcInnerProdList(varsC, 1, diff(bC, varsC[dir]), rhoux_e*ux_e + p_e)),
     if (dir = 2) then (t2 : t2 + dx1[dir]*calcInnerProdList(varsC, 1, diff(bC, varsC[dir]), rhoux_e*uy_e)),
     if (dir = 3) then (t2 : t2 + dx1[dir]*calcInnerProdList(varsC, 1, diff(bC, varsC[dir]), rhoux_e*uz_e))
     ),
  t2),
  t3 : (t3 : 0, for dir : 1 thru cdim do (
     if (dir = 1) then (t3 : t3 + dx1[dir]*calcInnerProdList(varsC, 1, diff(bC, varsC[dir]), rhouy_e*ux_e)),
     if (dir = 2) then (t3 : t3 + dx1[dir]*calcInnerProdList(varsC, 1, diff(bC, varsC[dir]), rhouy_e*uy_e + p_e)),
     if (dir = 3) then (t3 : t3 + dx1[dir]*calcInnerProdList(varsC, 1, diff(bC, varsC[dir]), rhouy_e*uz_e))
     ),
  t3),
  t4 : (t4 : 0, for dir : 1 thru cdim do (
     if (dir = 1) then (t4 : t4 + dx1[dir]*calcInnerProdList(varsC, 1, diff(bC, varsC[dir]), rhouz_e*ux_e)),
     if (dir = 2) then (t4 : t4 + dx1[dir]*calcInnerProdList(varsC, 1, diff(bC, varsC[dir]), rhouz_e*uy_e)),
     if (dir = 3) then (t4 : t4 + dx1[dir]*calcInnerProdList(varsC, 1, diff(bC, varsC[dir]), rhouz_e*uz_e + p_e))
     ),
  t4),
  /* Energy update, flux = (E + p)*u */
  t5 : (t5 : 0, for dir : 1 thru cdim do (
     t5 : t5 + dx1[dir]*calcInnerProdList(varsC, 1, diff(bC, varsC[dir]), (energy_e + p_e)*u_e[dir])
     ),
  t5),
  volTerms : [t1,t2,t3,t4,t5],
  for m : 1 thru 5 do (
    vol : volTerms[m],
    writeCIncrExprs1(lhs[m], vol),
    printf(fh, "~%")
  ),

  printf(fh, "  return cflFreq_mid; ~%"),
  printf(fh, "} ~%")

)$
