load("dg_fluid/fluid-vars-u")$
load(stringproc)$
/* This script calls the functions which generate the kernels for calculating the flow 
   velocity using weak division required to update DG fluid systems. */


/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
maxCdim_Ser : 3$

/* Tensor product basis. */
/* Note that Serendipity, p = 1, is equivalent to Tensor */
/* Thus no need to calculate p = 1 Tensor basis */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 2$
maxCdim_Tensor : 2$

/* ...... END OF USER INPUTS........ */

bName        : ["ser", "tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$

for bInd : 1 thru length(bName) do (
  for d : minCdim[bInd] thru maxCdim[bInd] do (
    minPolyOrderB : minPolyOrder[bInd],
    maxPolyOrderB : maxPolyOrder[bInd],
    if (d>1 and bName[bInd] = "ser") then maxPolyOrderB : 1,

    for polyOrder : minPolyOrderB thru maxPolyOrderB do (
      disp(printf(false,sconcat("Creating pkpm prim vars funcs ",bName[bInd]," ~axp~a"),d,polyOrder)),

      fname : sconcat("~/max-out/fluid_vars_u_set_", d, "x_", bName[bInd], "_p", polyOrder, ".c"),
      fh : openw(fname),
      funcName : sconcat("fluid_vars_u_set_",  d, "x_", bName[bInd], "_p", polyOrder),
      if (polyOrder = 1) then (
        setFluidUVars_p1(fh, funcName, d, bName[bInd], polyOrder)
      )
      else (
        setFluidUVars(fh, funcName, d, bName[bInd], polyOrder)
      ),
      close(fh),

      fname : sconcat("~/max-out/fluid_vars_u_copy_", d, "x_", bName[bInd], "_p", polyOrder, ".c"),
      fh : openw(fname),
      funcName : sconcat("fluid_vars_u_copy_",  d, "x_", bName[bInd], "_p", polyOrder),
      copyFluidUVars(fh, funcName, d, bName[bInd], polyOrder),
      close(fh)
    )
  )
);
