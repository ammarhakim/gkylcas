/* Generate the header file for euler equation kernels. */

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
maxCdim_Ser : 3$

/* Tensor product basis. */
/* Note that Serendipity, p = 1, is equivalent to Tensor */
/* Thus no need to calculate p = 1 Tensor basis */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 2$
maxCdim_Tensor : 2$

/* ...... END OF USER INPUTS........ */

cvars : [x, y, z]$

bName        : ["ser", "tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$

printPrototype(deco, ci, bStr, pi) := block([si],

  printf(fh, "~avoid fluid_vars_pressure_~ax_~a_p~a(double param, const double *fluid, const double *u, double* GKYL_RESTRICT p, double* GKYL_RESTRICT p_surf); ~%", deco, ci, bStr, pi),
  printf(fh, "~aint fluid_vars_u_set_~ax_~a_p~a(int count, struct gkyl_nmat *A, struct gkyl_nmat *rhs, const double *fluid); ~%", deco, ci, bStr, pi),
  printf(fh, "~avoid fluid_vars_u_copy_~ax_~a_p~a(int count, struct gkyl_nmat *x, double* GKYL_RESTRICT u, double* GKYL_RESTRICT u_surf); ~%", deco, ci, bStr, pi),
  printf(fh, "~adouble euler_vol_~ax_~a_p~a(const double *w, const double *dxv, double gas_gamma, const double *u, const double *p, const double *fluid, double* GKYL_RESTRICT out); ~%", deco, ci, bStr, pi),
  for si : 1 thru ci do (
    printf(fh, "~avoid fluid_vars_limiter~a_~ax_~a_p~a(double limiter_fac, const struct gkyl_wv_eqn *wv_eqn, double *fluid_l, double *fluid_c, double *fluid_r); ~%", deco, cvars[si], ci, bStr, pi),
    printf(fh, "~adouble euler_surf~a_~ax_~a_p~a(const double *w, const double *dxv, const struct gkyl_wv_eqn *wv_eqn, 
    const struct gkyl_wave_cell_geom *geom_l, const struct gkyl_wave_cell_geom *geom_r, 
    const double *u_surf_l, const double *u_surf_c, const double *u_surf_r, 
    const double *p_surf_l, const double *p_surf_c, const double *p_surf_r, 
    const double *fluid_l, const double *fluid_c, const double *fluid_r, double* GKYL_RESTRICT out); ~%", deco, cvars[si], ci, bStr, pi)
  ),
  printf(fh, "~avoid fluid_vars_integrated_~ax_~a_p~a(const double *fluid, const double* u_i, const double* p_ij, double* GKYL_RESTRICT int_fluid_vars); ~%", deco, ci, bStr, pi),
  printf(fh, "~avoid fluid_vars_source_~ax_~a_p~a(const double* qmem, const double* fluid, const double* p_ij, double* GKYL_RESTRICT out); ~%", deco, ci, bStr, pi),
  printf(fh, "~%")
)$

/* ............ Write out the C header file ............ */
fh : openw("~/max-out/gkyl_euler_kernels.h")$

printf(fh, "#pragma once ~%")$
printf(fh, "#include <math.h> ~%")$
printf(fh, "#include <gkyl_mat.h> ~%")$
printf(fh, "#include <gkyl_wave_geom.h> ~%")$
printf(fh, "#include <gkyl_wv_eqn.h> ~%")$
printf(fh, "#include <gkyl_util.h> ~%")$
printf(fh, "EXTERN_C_BEG ~%")$
printf(fh, "~%")$

decorator : "GKYL_CU_DH "$
for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (

    minPolyOrderB : minPolyOrder[bInd],
    maxPolyOrderB : maxPolyOrder[bInd],
    if (c>1 and bName[bInd] = "ser") then maxPolyOrderB : 1,
    for polyOrder : minPolyOrderB thru maxPolyOrderB do (
      printPrototype(decorator, c, bName[bInd], polyOrder)
    )
  )
);
printf(fh, "EXTERN_C_END ~%")$
close(fh)$
/* ............ Finished writing out the C header file ............ */
