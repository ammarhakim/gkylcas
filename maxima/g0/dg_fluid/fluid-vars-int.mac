/* This script generates the kernels for integrating the fluid variables
   for diagnostic purposed. Integrates rho, rhoux, rhouy, rhouz, rhou^2, p */

load("modal-basis")$
load("out-scripts")$
fpprec : 24$

calcEulerIntVars(fh, funcNm, cdim, basisFun, polyOrder) := block(
  [varsC, bC, NC, 
   rho_e, rhoux_e, rhouy_e, rhouz_e, ux_e, uy_e, uz_e, p_e, 
   int_rho_c, int_rhoux_c, int_rhouy_c, int_rhouz_c, int_rhou2_c, int_p_c],

  kill(varsC, bC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),

  /* Number of basis monomials. */
  NC : length(bC),

  printf(fh, "#include <gkyl_euler_kernels.h> ~%"),
  printf(fh, "GKYL_CU_DH void ~a(const double *fluid, const double* u_i, const double* p_ij, double* GKYL_RESTRICT int_fluid_vars) ~%{ ~%", funcNm),
  printf(fh, "  // fluid:          [rho, rho ux, rho uy, rho uz...], Fluid input state vector.~%"),
  printf(fh, "  // u_i:            [ux, uy, uz], Input flow velocity.~%"),
  printf(fh, "  // p_ij:           Input pressure (scalar for Euler/5 moment, tensor for 10 moment).~%"),
  printf(fh, "  // int_fluid_vars: Output integrated variables.~%"),
  printf(fh, "~%"),

  printf(fh, "  const double *rho = &fluid[~a]; ~%", 0*NC),
  printf(fh, "  const double *rhoux = &fluid[~a]; ~%", 1*NC),
  printf(fh, "  const double *rhouy = &fluid[~a]; ~%", 2*NC),
  printf(fh, "  const double *rhouz = &fluid[~a]; ~%", 3*NC), 
  printf(fh, "~%"),

  printf(fh, "  const double *ux = &u_i[~a]; ~%", 0*NC),
  printf(fh, "  const double *uy = &u_i[~a]; ~%", 1*NC),
  printf(fh, "  const double *uz = &u_i[~a]; ~%", 2*NC),
  printf(fh, "~%"),

  /* Expansion of mass, momentum density, flow velocity, and pressure */
  rho_e : doExpand1(rho, bC),
  rhoux_e : doExpand1(rhoux, bC),
  rhouy_e : doExpand1(rhouy, bC),
  rhouz_e : doExpand1(rhouz, bC),
  ux_e : doExpand1(ux, bC),
  uy_e : doExpand1(uy, bC),
  uz_e : doExpand1(uz, bC),
  p_e : doExpand1(p_ij, bC),

  int_rho_c : calcInnerProdList(varsC, 1, [1], rho_e), 
  int_rhoux_c : calcInnerProdList(varsC, 1, [1], rhoux_e), 
  int_rhouy_c : calcInnerProdList(varsC, 1, [1], rhouy_e), 
  int_rhouz_c : calcInnerProdList(varsC, 1, [1], rhouz_e), 
  int_rhou2_c : calcInnerProdList(varsC, 1, [1], rhoux_e*ux_e + rhouy_e*uy_e + rhouz_e*uz_e), 
  int_p_c : calcInnerProdList(varsC, 1, [1], p_e), 

  printf(fh, "  // Order of integrated variables is (rho, rhoux, rhouy, rhouz, rhou^2, p) ~%"),
  printf(fh, "  int_fluid_vars[0] += ~a; ~%", float(expand(int_rho_c[1]))),
  printf(fh, "  int_fluid_vars[1] += ~a; ~%", float(expand(int_rhoux_c[1]))),
  printf(fh, "  int_fluid_vars[2] += ~a; ~%", float(expand(int_rhouy_c[1]))),
  printf(fh, "  int_fluid_vars[3] += ~a; ~%", float(expand(int_rhouz_c[1]))),
  printf(fh, "  int_fluid_vars[4] += ~a; ~%", float(expand(int_rhou2_c[1]))),
  printf(fh, "  int_fluid_vars[5] += ~a; ~%", float(expand(int_p_c[1]))),

  printf(fh, "} ~%")
)$
