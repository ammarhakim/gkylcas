/* This script generates the kernels for calculating the pressure for updating
   fluid equations. Pressure different for each equation system: 
   Isothermal Euler -> p = vth*rho 
   Euler -> p = (gas_gamma - 1)*(E - 1/2 rho u^2)*/

load("modal-basis")$
load("out-scripts")$
load(stringproc)$
load("scifac")$
fpprec : 24$

calcFluidPressure(fh, funcNm, cdim, basisFun, polyOrder) := block(
  [varsC, bC, NC, surfVarsx, bSurfx, surfVarsy, bSurfy, surfVarsz, bSurfz, NSurf, 
   p_e, p_xl_c, p_xr_c, p_yl_c, p_yr_c, p_zl_c, p_zr_c],

  kill(varsC, bC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),
  surfVarsx : delete(x,varsC),
  bSurfx : basisFromVars(basisFun,surfVarsx,polyOrder),
  if (cdim > 1) then (
    surfVarsy : delete(y,varsC),
    bSurfy : basisFromVars(basisFun,surfVarsy,polyOrder)
  ),
  if (cdim = 3) then (
    surfVarsz : delete(z,varsC),
    bSurfz : basisFromVars(basisFun,surfVarsz,polyOrder)
  ),

  /* Number of basis monomials. */
  NC : length(bC),
  if (cdim = 1) then (
    NSurf : 1
  )
  else (
    NSurf : length(bSurfx)
  ),

  printf(fh, "#include <gkyl_euler_kernels.h> ~%"),
  printf(fh, "#include <gkyl_binop_mul_ser.h> ~%"),
  printf(fh, "GKYL_CU_DH void ~a(double param, const double *fluid, const double *u, 
    double* GKYL_RESTRICT p, double* GKYL_RESTRICT p_surf) ~%{ ~%", funcNm, polyOrder),
  printf(fh, "  // param:  Input parameter needed for pressure computation.~%"),
  printf(fh, "  //         vth for isothermal Euler, gas_gamma for Euler ~%"),
  printf(fh, "  // fluid:  [rho, rho ux, rho uy, rho uz...], Fluid input state vector.~%"),
  printf(fh, "  // u:      Input volume expansion of flow velocity: [ux, uy, uz]. ~%"),
  printf(fh, "  // p:      Output volume expansion of pressure.~%"),
  printf(fh, "  // p_surf: Output surface expansion of pressure.~%"),
  printf(fh, "  //         [p_xl, p_xr, p_yl, p_yr, p_zl, p_zr] ~%"),
  printf(fh, "~%"),

  /* Fetch pointers needed to compute pressure from other fluid variables
     Either p = vth*rho or p = (gas_gamma - 1)*(E - 1/2 rho u^2) */
  printf(fh, "  const double *rho = &fluid[~a]; ~%", 0*NC),
  printf(fh, "  const double *rhoux = &fluid[~a]; ~%", 1*NC),
  printf(fh, "  const double *rhouy = &fluid[~a]; ~%", 2*NC),
  printf(fh, "  const double *rhouz = &fluid[~a]; ~%", 3*NC),
  printf(fh, "  const double *energy = &fluid[~a]; ~%", 4*NC),
  printf(fh, "~%"),
  printf(fh, "  const double *ux = &u[~a]; ~%", 0*NC),
  printf(fh, "  const double *uy = &u[~a]; ~%", 1*NC),
  printf(fh, "  const double *uz = &u[~a]; ~%", 2*NC),
  printf(fh, "~%"),

  /* First construct volume expansion of rhou^2 */
  printf(fh, "  double rhoux2[~a] = {0.0}; ~%", NC),
  printf(fh, "  binop_mul_~ad_~a_p~a(rhoux, ux, rhoux2); ~%", cdim, basisFun, polyOrder),
  printf(fh, " ~%"),
  printf(fh, "  double rhouy2[~a] = {0.0}; ~%", NC),
  printf(fh, "  binop_mul_~ad_~a_p~a(rhouy, uy, rhouy2); ~%", cdim, basisFun, polyOrder),
  printf(fh, " ~%"),
  printf(fh, "  double rhouz2[~a] = {0.0}; ~%", NC),
  printf(fh, "  binop_mul_~ad_~a_p~a(rhouz, uz, rhouz2); ~%", cdim, basisFun, polyOrder),
  printf(fh, " ~%"),

  /* Compute pressure from energy */
  for i : 1 thru NC do (
    printf(fh, "  p[~a] = (param - 1.0)*(energy[~a] - 0.5*(rhoux2[~a] + rhouy2[~a] + rhouz2[~a])); ~%", i-1, i-1, i-1, i-1, i-1)
  ),

  /* Now compute needed surface expansions */
  /* Expand p */
  p_e : doExpand1(p, bC),

  printf(fh, "  double *p_xl = &p_surf[~a]; ~%", 0*NSurf),
  printf(fh, "  double *p_xr = &p_surf[~a]; ~%", 1*NSurf),
  printf(fh, "~%"),
  if (cdim > 1) then (
    printf(fh, "  double *p_yl = &p_surf[~a]; ~%", 2*NSurf),
    printf(fh, "  double *p_yr = &p_surf[~a]; ~%", 3*NSurf),
    printf(fh, " ~%")
  ),
  if (cdim = 3) then (
    printf(fh, "  double *p_zl = &p_surf[~a]; ~%", 4*NSurf),
    printf(fh, "  double *p_zr = &p_surf[~a]; ~%", 5*NSurf),
    printf(fh, " ~%")
  ),
  if (cdim = 1) then (
    printf(fh, "  p_xl[0] = ~a; ~%", float(expand(subst(x=-1, p_e)))),
    printf(fh, "  p_xr[0] = ~a; ~%", float(expand(subst(x=1, p_e)))),
    printf(fh, " ~%")
  )
  else (
    p_xl_c : calcInnerProdList(surfVarsx, 1, bSurfx, subst(x=-1, p_e)),
    writeCExprs1(p_xl, p_xl_c), 
    printf(fh, " ~%"), 

    p_xr_c : calcInnerProdList(surfVarsx, 1, bSurfx, subst(x=1, p_e)),
    writeCExprs1(p_xr, p_xr_c), 
    printf(fh, " ~%")
  ),
  if (cdim > 1) then (
    p_yl_c : calcInnerProdList(surfVarsy, 1, bSurfy, subst(y=-1, p_e)),
    writeCExprs1(p_yl, p_yl_c), 
    printf(fh, " ~%"), 

    p_yr_c : calcInnerProdList(surfVarsy, 1, bSurfy, subst(y=1, p_e)),
    writeCExprs1(p_yr, p_yr_c), 
    printf(fh, " ~%")
  ),
  if (cdim = 3) then (
    p_zl_c : calcInnerProdList(surfVarsz, 1, bSurfz, subst(z=-1, p_e)),
    writeCExprs1(p_zl, p_zl_c), 
    printf(fh, " ~%"), 

    p_zr_c : calcInnerProdList(surfVarsz, 1, bSurfz, subst(z=1, p_e)),
    writeCExprs1(p_zr, p_zr_c), 
    printf(fh, " ~%")
  ),
  printf(fh, "} ~%")
)$
