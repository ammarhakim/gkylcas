load("modal-basis")$
load("recovery") $
load("out-scripts");
load("utilities")$
load(stringproc)$
fpprec : 24$

/* Generate kernels for a fluid diffusion volume term. It only computes the CFL frequency.
   Supports diffusion types: d^(n/2)(D_i(x)* d^(n/2)(f)/dx_i^n)dx_i^(n/2) (summation
   implied) for n=2,4,6. */

genDGdiffFluidKernelVolInDir(fh, funcNm, dim, basisType, polyOrder, diffOrder, dir, constCoeff) := block(
  [vars,basis,coeffType,coeffSig,coeffAv,coeff_c,coeff_e,pOrderFact],

  [vars, basis] : loadBasis(basisType, dim, polyOrder),
  numB : length(basis),

  if constCoeff then (
    coeffType : "const",
    coeffAv   : coeff[dir-1]
  ) else (
    coeffType : "var",
    coeff_c   : makelist(coeff[(dir-1)*numB+i-1],i,1,numB),
    coeff_e   : doExpand(coeff_c,basis),
    coeffAv   : fullratsimp(innerProd(vars,1,1,coeff_e)/innerProd(vars,1,1,1))
  ),
  
  printf(fh, "GKYL_CU_DH double ~a_~acoeff_diff~a(const double *w, const double *dx, const double *coeff, const double *q, double* GKYL_RESTRICT out) ~%{~%", funcNm, coeffType, vars[dir]),
  printf(fh, "  // w[NDIM]: Cell-center coordinates~%"),
  printf(fh, "  // dx[NDIM]: Cell spacing~%"),
  printf(fh, "  // coeff: Diffusion coefficient vector~%"),
  printf(fh, "  // q: Input field~%"),
  printf(fh, "  // out: Incremented output~%~%"),

  printf(fh, "  const double rdx2 = 2.0/dx[~a]; ~%", dir-1),

  pOrderFact : (polyOrder+1)^diffOrder,

  printf(fh, "  return ~a*pow(rdx2, ~a.0); ~%", float(pOrderFact*coeffAv), diffOrder),
  printf(fh, "}~%")
)$

getDirCombos(varsIn) := block([pss,ps,combos],
  pss    : listify(powerset(setify(varsIn))),
  ps     : makelist(listify(pss[i]),i,1,length(pss)),
  combos : sublist(ps, lambda([x], length(x)>0)),
  return(combos)
)$

genDGdiffFluidKernelVol(fh, funcNm, dim, basisType, polyOrder, diffOrder) := block(
  [vars,basis,diffDirCombos,cI,dir,diffDirs,diffDirNum,diffDirInP,diffDirsStr,dI],

  printf(fh, "#include <gkyl_dg_diffusion_fluid_kernels.h>~%"),
  printf(fh, "~%"),

  [vars, basis] : loadBasis(basisType, dim, polyOrder),

  /* Combinations of directions in which to apply diffusion. */
  diffDirCombos : getDirCombos(vars),

  /* Loop over const/var diffusion coefficient. */
  for cI in [true, false] do (
    if cI then (
      coeffType : "const"
    ) else (
      coeffType : "var"
    ),

    /* Print functions with volume contribution from each direction. */
    for dir : 1 thru dim do (
      genDGdiffFluidKernelVolInDir(fh, funcNm, dim, basisType, polyOrder, diffOrder, dir, cI),
      printf(fh, "~%")
    ),
    
    for diffDirs in diffDirCombos do (
  
      diffDirNum : length(diffDirs),
      diffDirInP : makelist(sublist_indices(vars,lambda([x], x=diffDirs[i]))[1],i,1,diffDirNum),
  
      diffDirsStr :"",
      for dI in diffDirInP do (diffDirsStr : sconcat(diffDirsStr,string(vars[dI]))),
  
      printf(fh, "GKYL_CU_DH double ~a_~acoeff_diffdirs~a(const double *w, const double *dx, const double *coeff, const double *q, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, coeffType, diffDirsStr),
  
      printf(fh, "  double cflFreq = 0.;~%"),
      printf(fh, "  ~%"),
  
      /* Add contribution from diffusion in each direction. */
      for dI in diffDirInP do (
        printf(fh, "  cflFreq += ~a_~acoeff_diff~a(w, dx, coeff, q, out);~%", funcNm, coeffType, vars[dI])
      ),
      printf(fh, "~%"),
  
      printf(fh, "  return cflFreq;~%"),
      printf(fh, "}~%"),
      printf(fh, "~%")
    )
  )
)$
