kill(all)$
load("dg_diffusion_fluid/diffFuncs-fluid-vol")$

/* Generate kernels for a fluid diffusion volume term. It only computes the CFL frequency.
   Supports diffusion types: D_i*d^n f/dx_i^n (summation implied) for n=2,4,6.
   Note: volume kernels only compute the CFL frequency. */

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
maxCdim_Ser : 3$

/* Tensor order basis. No need to generate p=1. */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
maxCdim_Tensor : 0$

/* ...... END OF USER INPUTS........ */

/* To generate other bases, just add corresponding column to arrays below. */
bName        : ["ser", "tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$

for bInd : 1 thru length(bName) do (
  for d : minCdim[bInd] thru maxCdim[bInd] do (
    minPolyOrderB : minPolyOrder[bInd],
    maxPolyOrderB : maxPolyOrder[bInd],

    for polyOrder : minPolyOrderB thru maxPolyOrderB do (
      disp(printf(false,sconcat("Creating volume diffusion",bName[bInd]," ~axp~a"),d,polyOrder)),
      fname : sconcat("~/max-out/dg_diffusion_fluid_order2_vol_",  d, "x_", bName[bInd], "_p", polyOrder, ".c"),
      fh : openw(fname),
      funcName : sconcat("dg_diffusion_fluid_order2_vol_", d, "x_", bName[bInd], "_p", polyOrder),
      genDGdiffFluidKernelVol(fh, funcName, d, bName[bInd], polyOrder, 2),
      close(fh),

      disp(printf(false,sconcat("Creating volume hyper 4th order diffusion",bName[bInd]," ~axp~a"),d,polyOrder)),
      fname : sconcat("~/max-out/dg_diffusion_fluid_order4_vol_",  d, "x_", bName[bInd], "_p", polyOrder, ".c"),
      fh : openw(fname),
      funcName : sconcat("dg_diffusion_fluid_order4_vol_", d, "x_", bName[bInd], "_p", polyOrder),
      genDGdiffFluidKernelVol(fh, funcName, d, bName[bInd], polyOrder, 4),
      close(fh),

      if polyOrder > 1 then (
        disp(printf(false,sconcat("Creating volume hyper 6th order diffusion",bName[bInd]," ~axp~a"),d,polyOrder)),
        fname : sconcat("~/max-out/dg_diffusion_fluid_order6_vol_",  d, "x_", bName[bInd], "_p", polyOrder, ".c"),
        fh : openw(fname),
        funcName : sconcat("dg_diffusion_fluid_order6_vol_", d, "x_", bName[bInd], "_p", polyOrder),
        genDGdiffFluidKernelVol(fh, funcName, d, bName[bInd], polyOrder, 6),
        close(fh)
      )
    )
  )
);
