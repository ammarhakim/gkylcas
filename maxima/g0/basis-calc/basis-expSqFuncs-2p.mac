/* Generate kernels for squared expandsion of a DG field where the resulting
   expansion is of order 2*p and thus exactly represented. */

load("modal-basis");
load("out-scripts");
load(stringproc)$
fpprec : 24$

calcDGExpSq_2p(fh, funcNm, cdim, polyOrder) := block([bC, NC, 
  A_e, A_c, eq, 
  subList, newTempVar, lhsS, det_ES,
  expr, ep, outStr],

  kill(varsC, bC),
  kill(varsC, bC_2p),

  /* Load basis of dimensionality requested. Loads a basis of order p and p/2*/
  [varsC,bC] : loadBasis("Tensor", cdim, 1),
  [varsC,bC_2p] : loadBasis("Tensor", cdim, polyOrder),

  /* Number of basis monomials. */
  NC : length(bC),
  NC_2p : length(bC_2p),

  /* Function declaration with input/output variables. */
  printf(fh, "GKYL_CU_DH static inline void ~%"),
  printf(fh, "~a(const double *A, double *ASq) ~%{ ~%", funcNm),
  printf(fh, "  // A:   Input DG field. ~%"),
  printf(fh, "  // ASq: Output DG field (expansion of A^2). ~%"),
  printf(fh, " ~%"),

  A_e : doExpand1(A, bC),
  A_c : makelist(A[i],i,0,NC-1),

  /*........... Matrix for inverse to compute A .............*/
  eq : calcInnerProdList(varsC,1,bC_2p,A_e*A_e),

  /* Eliminate the exponents as needed. */
  subList     : [],
  maxExponent : 2,
  for eI : 1 thru length(A_c) do (
    /* Maximum number of elements of A_c (e.g. A_c[0], A_c[1], ...) whose
       powers to search for. */

    for f : 2 thru maxExponent do (
      /* Define a separate variable. */
      newTempVar : sconcat(string(op(A_c[eI])),args(A_c[eI])[1],"R",f),
      lhsS : sconcat("  const double ",newTempVar),
      det_ES : sconcat("pow(",string(A_c[eI]),",",f,");~%"),
      printf(fh, sconcat(lhsS," = ",det_ES)),
      /* Add to the string substitution list, used in writing file. */
      subList : append(subList,[[sconcat(string(A_c[eI]), "^",f), sconcat(sconcat(string(op(A_c[eI])),args(A_c[eI])[1]),"R",f)]])
    )
  ),
  printf(fh, "~%"),

  expr : float(expand(eq)),
  for i : 1 thru NC_2p do (

    ep : string(expr[i]),

    outStr : ssubst(subList[1][2],subList[1][1],ep),
    for s : 2 thru length(subList) do (
      outStr : ssubst(subList[s][2],subList[s][1],outStr)
    ),
    printf(fh, "  ~a = ~a; ~%", ASq[i-1], outStr)
  ),

  printf(fh, "} ~%"),
  printf(fh, " ~%")
)$
