/* Generate kernels for squared expandsion of a DG field. */

load("modal-basis");
load("out-scripts");
load(stringproc)$
load("nodal_operations/nodal_functions")$
fpprec : 24$

calcDGExpSqrt(fh, funcNm, cdim, basisFun, polyOrder) := block([bC, NC, 
  A_e, A_c, eq, 
  subList, newTempVar, lhsS, det_ES,
  expr, ep, outStr],

  kill(varsC, basisC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),

  NC  : length(bC),

  /* Function declaration with input/output variables. */
  printf(fh, "GKYL_CU_DH static inline void ~%"),
  printf(fh, "~a(const double *A, double *ASqrt) ~%{ ~%", funcNm),
  printf(fh, "  // A:     Input DG field. ~%"),
  printf(fh, "  // ASqrt: Output DG field (expansion of sqrt(A)). ~%"),
  printf(fh, " ~%"),

  /* Surface nodes given by tensor product of Gauss-Legendre quadrature points */
  nodes : gaussOrd(polyOrder+1, cdim),
  numNodes : length(nodes),  
  A_e : doExpand1(A, bC),

  AOrd_n : gcfac(float(evAtNodes(A_e,nodes,varsC))),
  printf(fh, "  double AOrd[~a] = {0.0}; ~%~%", numNodes),
  printf(fh, "  double temp = 0.0; ~%"),
  for i : 1 thru numNodes do (
    printf(fh, "  temp = ~a; ~%", AOrd_n[i]),
    printf(fh, "  if (~a < 0.0) { ~%", temp),
    printf(fh, "  AOrd[~a] = 0.0; ~%", i-1),
    printf(fh, "  } else { ~%"),
    printf(fh, "  AOrd[~a] = sqrt(~a); ~%", i-1, temp),
    printf(fh, "  } ~%")
  ),
  flush_output(fh),

  /* Make nodal expansions in tensor nodal basis where nodes are Gauss-Legendre quadrature points */
  basisNodal  : getVarsNodalBasisWithNodes("Tensor", cdim, polyOrder, varsC, nodes),
  AOrdNodal_e : doExpand1(AOrd,basisNodal),
  /* Project nodal basis back onto modal basis */
  AOrdModProj_e : fullratsimp(calcInnerProdList(varsC, 1, bC, AOrdNodal_e)),

  writeCExprs1(ASqrt, AOrdModProj_e),
  printf(fh, "~%"),
  flush_output(fh),

  printf(fh, "} ~%"),
  printf(fh, " ~%")
)$