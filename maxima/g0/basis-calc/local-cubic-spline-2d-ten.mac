load("basis-precalc/basisTensor2x")$
load("modal-basis")$

bc3 : basisC[3]$
nodes : [ [-1,-1], [-1,1], [1,-1], [1,1] ]$

getExpansion(hval,hxval,hyval,hxyval) := block([gh,eqnList,sol,__g__],
  gh : doExpand(__g__,bc3),
  eqnList : append(
    makelist(subst([x=nodes[i][1],y=nodes[i][2]], gh=hval[i]), i,1,4),
    makelist(subst([x=nodes[i][1],y=nodes[i][2]], diff(gh,x)=hxval[i]),i,1,4),
    makelist(subst([x=nodes[i][1],y=nodes[i][2]], diff(gh,y)=hyval[i]),i,1,4),
    makelist(subst([x=nodes[i][1],y=nodes[i][2]], diff(diff(gh,y),x)=hxyval[i]),i,1,4)
    ),
  sol : linsolve(eqnList, makelist(__g__[i],i,1,16)),
  return (subst(sol, gh))
  )$

fval : [ f[0], f[1], f[2], f[3] ]$
fxval : [ fx[0], fx[1], fx[2], fx[3] ]$
fyval : [ fy[0], fy[1], fy[2], fy[3] ]$
fxyval : [ fxy[0], fxy[1], fxy[2], fxy[3] ]$

fexp : getExpansion(fval,fxval,fyval,fxyval)$
pDg : calcInnerProdList([x,y],1,bc3,fexp)$

fh : openw("~/max-out/local-cubic-split-2d.c")$
for i : 1 thru 16 do (
  printf(fh, "coeff[~a] = ~a; ~%", i-1, float(expand(pDg[i])))
)$
close(fh)$

/* Some tests */

/* Left cell */
fval : [ f[1], f[2], f[3], f[4] ]$
fxval : [ fx[1], fx[2], fx[3], fx[4] ]$
fyval : [ fy[1], fy[2], fy[3], fy[4] ]$
fxyval : [ fxy[1], fxy[2], fxy[3], fxy[4] ]$

/* Right cell (note shared values and slopes) */
gval : [ f[3], f[4], g[3], g[4] ]$
gxval : [ fx[3], fx[4], gx[3], gx[4] ]$
gyval : [ fy[3], fy[4], gy[3], gy[4] ]$
gxyval : [ fxy[3], fxy[4], gxy[3], gxy[4] ]$

leftSol : getExpansion(fval,fxval,fyval,fxyval)$
rightSol : getExpansion(gval,gxval,gyval,gxyval)$

leftSolRightEdge : subst([x=1],leftSol)$
rightSolLeftEdge : subst([x=-1],rightSol)$
isZero : expand(leftSolRightEdge-rightSolLeftEdge)$

leftSolRightEdgeX : subst([x=1],diff(leftSol,x))$
rightSolLeftEdgeX : subst([x=-1],diff(rightSol,x))$
isZeroX : expand(leftSolRightEdgeX-rightSolLeftEdgeX)$

leftSolRightEdgeY : subst([x=1],diff(leftSol,y))$
rightSolLeftEdgeY : subst([x=-1],diff(rightSol,y))$
isZeroY : expand(leftSolRightEdgeY-rightSolLeftEdgeY)$

val : [ 1.0, 2.0, 3.0, 4.0 ]$
gradx : [ -1.0, -2.0, -3.0, -4.0 ]$
grady : [ 1.0, 2.0, 3.0, 4.0 ]$
gradxy : [ 1.5, 2.5, 3.5, 4.5 ]$
fexp : getExpansion(val,gradx,grady,gradxy)$
wxdraw3d(
  surface_hide=true, color=red,
  explicit(fexp,x,-1,1,y,-1,1)
  )$

bc1 : basisC[1]$
gh : doExpand(gg,bc1)$
eqnList : makelist(subst([x=nodes[i][1],y=nodes[i][2]], gh=hval[i-1]), i,1,4)$
sol : linsolve(eqnList, makelist(gg[i],i,1,4))$
ghpol : subst(sol, gh)$
