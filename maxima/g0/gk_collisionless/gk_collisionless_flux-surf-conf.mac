load("modal-basis")$
load("out-scripts")$
load(stringproc)$
load("scifac")$
load("utilities_gyrokinetic")$
load("nodal_operations/nodal_functions")$
fpprec : 24$

buildGKFluxConfESKernel(surfDir, fh, funcNm, cdim, vdim, basisFun, polyOrder, no_by, edge, mb_bound) := block(
  [pDim,varsC,bC,varsP,bP,vSub,numC,numP,surfVar,varLabel,dirLabel,surfIntVars,surf_cvars,surf_vvars,
   surfNodes,nodeVars,bSurf,basisNodal,surfConfigNodes,numSurfNodes,numSurfConfigNodes,numVelNodes,
   numMuNodes,numVparNodes,d,rdx2vec,rdv2vec,rdSurfVar2,bmagBasis,phi_e,bmagSurf_e,vmap_e,vmapSq_e,
   vmap_prime_e,evPoint,hamil_e,hamil_c,replaceList,hamilNoZero_c,JfL_e,JfR_e,JfL_c,JfR_c,
   jacobgeo_surfL_e,jacobgeo_inv_surfR_e,jacobgeo_inv_surfL_e,jacobgeo_surfR_e,JfL_nodes,JfR_nodes,
   vmap_prime_nodes,vpardim,dH_dz_nodes,mvpar_nodes,di3,i,j,j0index,j1index,vparindex,vpar0index,pOrderCFL
   ],

  kill(varsC,varsP,bC,bP),
  pDim : cdim+vdim,

  [varsC,bC,varsP,bP,vSub] : loadGkBasis(basisFun, cdim, vdim, polyOrder),
  numC : length(bC),  numP : length(bP), 

  surfVar  : varsP[surfDir],         /* Surface variable. */
  varLabel : makelist(string(varsP[d]),d,1,pDim),
  dirLabel : varLabel[surfDir],

  surfIntVars : delete(surfVar,varsP), 
  surf_cvars  : delete(surfVar, makelist(varsP[i],i,1,cdim)),
  surf_vvars  : delete(surfVar, makelist(varsP[cdim+i],i,1,vdim)),

  surfIntVarsC : delete(surfVar,varsC), 
  bSurfC       : basisFromVars(basisFun,surfIntVarsC,polyOrder),
  
  if polyOrder = 1 then (  /* Force p=1 to use hybrid basis. */
    surfNodes : gaussOrdGkHyb(1+1, surf_cvars, surf_vvars),
    nodeVars  : surfIntVars, 
    bSurf     : basisFromVars("gkhyb",surfIntVars,polyOrder),
    basisNodal  : getVarsNodalBasisWithNodesHyb("gkhyb", cdim-1, vdim, surfIntVars, surfNodes)
  ) else (
    surfNodes : gaussOrd(polyOrder+1, pDim-1),
    nodeVars  : surfIntVars,
    bSurf     : basisFromVars(basisFun,surfIntVars,polyOrder)
  ),
  if cdim = 1 then (
    surfConfigNodes : [1]
  )
  else (
    surfConfigNodes : gaussOrd(polyOrder+1, cdim-1)
  ),
  numSurfNodes : length(surfNodes),  
  numSurfConfigNodes : length(surfConfigNodes), 
  numVelNodes : numSurfNodes/numSurfConfigNodes, 
  numMuNodes : 1,
  if vdim > 1 then ( numMuNodes : 2),
  numVparNodes : numVelNodes/numMuNodes,

  print("Working on ", funcNm),
  printf(fh, "GKYL_CU_DH double ~a(
    const double *w, const double *dxv,
    const double *vmap, const double *vmapSq, const double q_, const double m_,
    const struct gkyl_dg_surf_geom *dgs, const struct gkyl_gk_dg_surf_geom *gkdgs, 
    const double *bmag, const double *jacobgeo_surfL, const double *jacobgeo_surfR,
    const double *jacobgeo_inv_surfL, const double *jacobgeo_inv_surfR, const double *phi,
    const double *JfL, const double *JfR, double* GKYL_RESTRICT flux_surf) ~%{ ~%", funcNm),
  printf(fh, "  // w[NDIM]: cell-center.~%"),
  printf(fh, "  // dxv[NDIM]: cell length.~%"),
  printf(fh, "  // vmap: velocity space mapping.~%"),
  printf(fh, "  // vmapSq: velocity space mapping squared.~%"),
  printf(fh, "  // q_,m_: species charge and mass.~%"),
  printf(fh, "  // dgs: surface DG geometry.~%"),
  printf(fh, "  // gkdgs: gyrokinetic surface DG geometry.~%"),
  printf(fh, "  // bmag: bmag represented on the surface.~%"),
  printf(fh, "  // jacobgeo_surfL: Surface conf-space Jacobian in left cell.~%"),
  printf(fh, "  // jacobgeo_surfR: Surface conf-space Jacobian in right cell.~%"),
  printf(fh, "  // jacobgeo_inv_surfL: Reciprocal surface conf-space Jacobian in left cell.~%"),
  printf(fh, "  // jacobgeo_inv_surfR: Reciprocal surface conf-space Jacobian in right cell.~%"),
  printf(fh, "  // phi: electrostatic potential.~%"),
  printf(fh, "  // JfL: distribution times total jacobian in left cell.~%"),
  printf(fh, "  // JfR: distribution times total jacobian in right cell.~%"),
  printf(fh, "  // flux_surf: output surface phase space flux in each direction (cdim + 1 components).~%"),
  printf(fh, "  //            Note: Each cell owns their *lower* edge surface evaluation.~%"),
  printf(fh, "~%"),

  /* Declare cell-center variables and variables multiplying gradients. */
  for d : 1 thru cdim+1 do (
    printf(fh, "  double rd~a2 = 2.0/dxv[~a];~%", varLabel[d], d-1)
  ),
  printf(fh, "~%"),
  rdx2vec : makelist(eval_string(sconcat("rd",varLabel[i],"2")),i,1,cdim),
  rdv2vec : makelist(eval_string(sconcat("rd",varLabel[i],"2")),i,cdim+1,pDim),
  rdSurfVar2 : eval_string(sconcat("rd",dirLabel,"2")),

  /* Axisymmetric basis (independent of y). */
  bmagBasis : getAxisymmetricConfBasis(bC),

  /* Expand input fields for Hamiltonian calculation */
  phi_e     : doExpand1(phi,bC),
  bmagSurf_e : doExpand1(bmag, bmagBasis),

  /* Velocity mapping fields. */
  [vmap_e,vmapSq_e,vmap_prime_e] : expandVmapFields(varsP),

  /* Redefine vmap_prime to exploit the relationship between it and vmap. */
  /*vmap_prime_e : makelist((2/dxv[cdim+d-1])*diff(vmap_e[d],varsP[cdim+d]),d,1,vdim),*/
  vmap_prime_e : makelist(diff(vmap_e[d],varsP[cdim+d]),d,1,vdim),

  if edge = true then (
    evPoint : 1
  ) else (
    evPoint : -1
  ),

  /* Finally write out the hamiltonian*/
  hamil_e : q_*phi_e + (1/2)*m_*vmapSq_e[1],
  if vdim > 1 then ( hamil_e : hamil_e + vmap_e[2]*bmagSurf_e ),
  hamil_c : calcInnerProdList(surfIntVars, 1, bSurf, subst(surfVar=evPoint,hamil_e)),
  printf(fh, "  double hamil[~a] = {0.}; ~%", numP),
  replaceList : [wvpar^2=wvparSq, rdvpar2^2=rdvpar2Sq, rdx2^2=rdx2Sq, m_^2=mSq, q_^2=qSq],
  hamilCvar : eval_string(sconcat("hamil")),
  writeCExprsNoExpand1(hamilCvar, gcfac(float(expand(subst(replaceList, hamil_c))))),
  printf(fh, "~%"),
  flush_output(fh),
  hamilNoZero_c : makelistNoZeros1(hamil_c, hamilCvar),
  /* Expand projected Hamiltonian on basis. */
  hamil_e : hamilNoZero_c . bSurf,

  /* fl and fr */
  JfL_e : doExpand1(JfL, bP),
  JfR_e : doExpand1(JfR, bP),
  JfL_c : calcInnerProdList(surfIntVars, 1, bSurf, subst(surfVar=1,JfL_e)),
  JfR_c : calcInnerProdList(surfIntVars, 1, bSurf, subst(surfVar=-1,JfR_e)),
  JfL_e : JfL_c . bSurf,
  JfR_e : JfR_c . bSurf,

  if (mb_bound = true) then (
    /* Rescale ghost cell by ratio of the Jacobians at multiblock boundaries. */

    if (edge = true) then (
      /* Upper boundary. */
      jacobgeo_surfL_e     : doExpand1(jacobgeo_surfL, bSurfC),
      jacobgeo_inv_surfR_e : doExpand1(jacobgeo_inv_surfR, bSurfC),

      JfR_c : calcInnerProdList(surfIntVars, jacobgeo_inv_surfR_e*jacobgeo_surfL_e, bSurf, JfR_e),
      printf(fh, "  double JRatfR[~a] = {0.}; ~%", length(bSurf)),
      writeCExprsNoExpand1(JRatfR, fullratsimp(JfR_c)),
      printf(fh, "~%"),
      JfR_c : makelistNoZeros1(JfR_c, JRatfR),
      JfR_e : doExpand(JfR_c, bSurf)
    ) else (
      /* Lower boundary. */
      jacobgeo_inv_surfL_e : doExpand1(jacobgeo_inv_surfL, bSurfC),
      jacobgeo_surfR_e     : doExpand1(jacobgeo_surfR, bSurfC),

      JfL_c : calcInnerProdList(surfIntVars, jacobgeo_inv_surfL_e*jacobgeo_surfR_e, bSurf, JfL_e),
      printf(fh, "  double JRatfL[~a] = {0.}; ~%", length(bSurf)),
      writeCExprsNoExpand1(JRatfL, fullratsimp(JfL_c)),
      printf(fh, "~%"),
      JfL_c : makelistNoZeros1(JfL_c, JRatfL),
      JfL_e : doExpand(JfL_c, bSurf)
    )
  ),

  JfL_nodes : gcfac(float(expand(evAtNodes(JfL_e,surfNodes,surfIntVars)))),
  JfR_nodes : gcfac(float(expand(evAtNodes(JfR_e,surfNodes,surfIntVars)))),

  vmap_prime_nodes : float(evAtNodes(vmap_prime_e[1],surfNodes,surfIntVars)),

  vpardim : pDim-1,
  if vdim = 1 then ( vpardim : pDim ),
  dH_dz_nodes : makelist(0, i, 1, pDim),  
  for i : 1 thru vpardim do (
    if i = vpardim then (
      dH_dz_nodes[i] : float(evAtNodes(diff(hamil_e,varsP[i]),surfNodes,surfIntVars))/vmap_prime_nodes
    )
    else (
      dH_dz_nodes[i] : float(evAtNodes(diff(hamil_e*rdx2vec[i],varsP[i]),surfNodes,surfIntVars))
    )
  ),

  mvpar_nodes : [],
  for i : 1 thru numVparNodes do (
    mvpar_nodes : append(mvpar_nodes, [dH_dz_nodes[vpardim][i]])
  ),

  if surfDir = cdim then(
    di3 : true
  )
   else (
    di3 : false
  ),

  /* Now calculate flux at all quadrature nodes */
  /*printf(fh, "  double flux_surf_nodal[~a]= {0.0}; ~%", numSurfNodes),*/
  printf(fh, "  double *flux_surf_nodal = &flux_surf[~a]; ~%", length(bSurf)*(surfDir-1)),
  printf(fh, "  double cfl = 0.0; ~%"),
  printf(fh, "  double bmag_quad = 0.0; ~%"),
  printf(fh, "  double Jc_quad = 0.0; ~%"),
  printf(fh, "  double B3_quad = 0.0; ~%"),
  printf(fh, "  double normcurlbhat_quad = 0.0; ~%"),
  printf(fh, "  double area_elem_quad = 0.0; ~%"),
  printf(fh, "  double bhat_quad[3] = {0.0}; ~%"),

  printf(fh, "  double alpha_quad = 0.0; ~%"),
  printf(fh, "  double JfL_quad = 0.0; ~%"),
  printf(fh, "  double JfR_quad = 0.0; ~%"),
  printf(fh, "  double Jfavg_quad = 0.0; ~%"),
  printf(fh, "  double Jfjump_quad = 0.0; ~%"),

  printf(fh, "  double mvpar_quad[3] = {0.0}; ~%"),
  for i : 1 thru numVparNodes do (
    printf(fh, "  mvpar_quad[~a] = ~a; ~%", i-1, mvpar_nodes[i])
  ),

  printf(fh, "  double mvparsq_quad[3] = {0.0}; ~%"),
  for i : 1 thru numVparNodes do (
    printf(fh, "  mvparsq_quad[~a] = mvpar_quad[~a]*mvpar_quad[~a]/m_; ~%", i-1, i-1,i-1)
  ),
  printf(fh, "~%"),

  for i : 1 thru numSurfConfigNodes do (
    printf(fh, "  bmag_quad = gkdgs[~a].bmag; ~%", i-1), 
    printf(fh, "  Jc_quad = gkdgs[~a].Jc; ~%", i-1), 
    printf(fh, "  B3_quad = gkdgs[~a].B3; ~%", i-1), 
    printf(fh, "  normcurlbhat_quad = gkdgs[~a].normcurlbhat; ~%", i-1), 
    printf(fh, "  bhat_quad[0] = gkdgs[~a].bhat.x[0]; ~%", i-1), 
    printf(fh, "  bhat_quad[1] = gkdgs[~a].bhat.x[1]; ~%", i-1), 
    printf(fh, "  bhat_quad[2] = gkdgs[~a].bhat.x[2]; ~%", i-1), 
    printf(fh, "  area_elem_quad = dgs[~a].area_elem; ~%", i-1), 
    printf(fh, "~%"),
    for j : 1 thru numVelNodes do (
      j0index : j-1+(i-1)*numVelNodes,
      j1index : j+(i-1)*numVelNodes,
      vparindex : mod(j-1, numVparNodes) + 1,
      vpar0index : mod(j-1, numVparNodes),
      printf(fh, "~%"),
      if no_by = true then (
        if di3 = true then (
          printf(fh, "  alpha_quad = (mvpar_quad[~a]*B3_quad/(m_*bmag_quad))*area_elem_quad/Jc_quad; ~%", vpar0index)
        )
        else (
          printf(fh, "  alpha_quad = 0.0; ~%")
        )
      ),
      if no_by = false then (
        /*printf(fh, "  alpha_quad += mvparsq_quad[~a]*normcurlbhat_quad/(bmag_quad*q_) ;~%", vpar0index),*/
        if cdim = 3 then (
           if surfDir = 1 then(
             printf(fh, "  alpha_quad = (mvparsq_quad[~a]*normcurlbhat_quad/(bmag_quad*q_) + 1/(q_*bmag_quad*area_elem_quad) * (bhat_quad[1]*(~a) - bhat_quad[2]*(~a)))*area_elem_quad/Jc_quad; ~%", vpar0index, dH_dz_nodes[3][j1index], dH_dz_nodes[2][j1index])
           ),
           if surfDir = 2 then(
             printf(fh, "  alpha_quad = (mvparsq_quad[~a]*normcurlbhat_quad/(bmag_quad*q_) + 1/(q_*bmag_quad*area_elem_quad) * (bhat_quad[2]*(~a) - bhat_quad[0]*(~a)))*area_elem_quad/Jc_quad; ~%", vpar0index, dH_dz_nodes[1][j1index], dH_dz_nodes[3][j1index])
           ),
           if surfDir = 3 then(
             printf(fh, "  alpha_quad = (mvpar_quad[~a]*B3_quad/(m_*bmag_quad) + mvparsq_quad[~a]*normcurlbhat_quad/(bmag_quad*q_) + 1/(q_*bmag_quad*area_elem_quad) * (bhat_quad[0]*(~a) - bhat_quad[1]*(~a)))*area_elem_quad/Jc_quad; ~%", vpar0index, vpar0index, dH_dz_nodes[2][j1index], dH_dz_nodes[1][j1index])
           )
        ),
        if cdim = 2 then (
           if surfDir = 1 then(
             printf(fh, "  alpha_quad = (mvparsq_quad[~a]*normcurlbhat_quad/(bmag_quad*q_) + 1/(q_*bmag_quad*area_elem_quad) * bhat_quad[1]*(~a))*area_elem_quad/Jc_quad; ~%", vpar0index, dH_dz_nodes[2][j1index])
           ),
           if surfDir = 2 then(
             printf(fh, "  alpha_quad = (mvpar_quad[~a]*B3_quad/(m_*bmag_quad) + mvparsq_quad[~a]*normcurlbhat_quad/(bmag_quad*q_) + 1/(q_*bmag_quad*area_elem_quad) * -bhat_quad[1]*(~a))*area_elem_quad/Jc_quad;~%", vpar0index, vpar0index, dH_dz_nodes[1][j1index])
           )
        ),
        if cdim = 1 then (
          printf(fh, "  alpha_quad = (mvpar_quad[~a]*B3_quad/(m_*bmag_quad))*area_elem_quad/Jc_quad; ~%", vpar0index)
        )
      ),

      printf(fh, "~%"),
      /*printf(fh, "  alpha_quad = alpha_quad*area_elem_quad/Jc_quad; ~%"),*/
      printf(fh, "  cfl = fmax(fabs(alpha_quad), fabs(cfl)); ~%"),
      printf(fh, "  JfL_quad = ~a; ~%", JfL_nodes[j1index]),
      printf(fh, "  JfR_quad = ~a; ~%", JfR_nodes[j1index]),
      printf(fh, "  Jfavg_quad = (JfL_quad + JfR_quad)/2.0; ~%"),
      printf(fh, "  Jfjump_quad = (JfR_quad - JfL_quad)/2.0; ~%"),
      printf(fh, "  flux_surf_nodal[~a] = alpha_quad*Jfavg_quad - fabs(alpha_quad)*Jfjump_quad; ~%", j0index)
    ),
    printf(fh, "~%")
  ),

  /* Do the quad nodal to modal ops directly here*/ 
  /*printf(fh, "~%"),
  printf(fh, "  double *fmodal = &flux_surf[~a]; ~%", length(bSurf)*(surfDir-1)),
  flux_surf_nodal_e : doExpand1(flux_surf_nodal,basisNodal),
  fmodproj_e : fullratsimp(calcInnerProdList(surfIntVars, 1, bSurf, flux_surf_nodal_e)),

  for i : 1 thru length(fmodproj_e) do (
    printf(fh, "  fmodal[~a] = ~a; ~%", i-1, float(expand(fmodproj_e[i])))
  ),

  printf(fh, "~%"),*/

  /*Calculate the cfl*/
  pOrderCFL : polyOrder,
  printf(fh, "~%"),
  printf(fh, "  return cfl*~a; ~%", float(0.5*(2*pOrderCFL+1)*rdSurfVar2)),

  printf(fh, "~%"),
  flush_output(fh),
  printf(fh, "} ~%")

)$
