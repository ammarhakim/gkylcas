/*
  Generate the kernel for surface expansions of the phase space characteristics.

  The functions called in this file are in gkFuncs-alpha-surf.mac.
*/
load("gk_collisionless/gk_collisionless_flux-surf-conf")$
load("gk_collisionless/gk_collisionless_flux-surf-vpar")$

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 1$
minCdim_Ser : 1$
maxCdim_Ser : 3$

/* Tensor order basis. No need to generate p=1. */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
maxCdim_Tensor : 0$

/* ...... END OF USER INPUTS........ */

/* Vdim possibilities for each of Cdim=[1,2,3]. */
gkVdims : [[1,2], [2], [2]]$

/* To generate other bases, just add corresponding column to arrays below. */
bName        : ["ser", "tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$

clabels : ["x","y","z"]$
vlabels : ["vpar","mu"]$

/* Possible combinations of variable dependence of background magnetic field.
   with [] = const. Note that we assume axisymmetry, which means B cannot depend on y. */
bVarsList : [x,z]$

/* Options for writing kernels with and without toroidal field (b_y=0), one per
   dimension. */
byOpt : [[false], [false, true], [false, true]]$
byStr : ["", "no_by_"]$

/* Generate kernels of selected types. */
for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    for gkV : 1 thru length(gkVdims[c]) do (
      v : gkVdims[c][gkV],

      maxPolyOrderB : maxPolyOrder[bInd],
      if (c=3) then maxPolyOrderB : 1, /* Only generate p=1 kernels for 3x2v */
      for polyOrder : minPolyOrder[bInd] thru maxPolyOrderB do (
        /* Surface flux in direction dir in configuration space.*/
        for byI : 1 thru length(byOpt[c]) do (
          no_by : byOpt[c][byI],
          no_byStr : byStr[byI],

          for dir : 1 thru c do (

            fname : sconcat("~/max-out/gk_collisionless_flux_",no_byStr,"surf",clabels[dir],"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
            disp(printf(false,"Creating flux surf~a ~a file: ~a",clabels[dir],no_byStr,fname)),
      
            fh : openw(fname),
            printf(fh, "#include <gkyl_gk_collisionless_flux_kernels.h> ~%"),
  
            funcName : sconcat("gk_collisionless_flux_",no_byStr,"surf",clabels[dir],"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder),
            buildGKFluxConfESKernel(dir, fh, funcName, c, v, bName[bInd], polyOrder, bVarsList, no_by, false),
            close(fh),
  
            fname : sconcat("~/max-out/gk_collisionless_flux_",no_byStr,"edge_surf",clabels[dir],"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
            disp(printf(false,"Creating flux edge surf~a ~a file: ~a",clabels[dir],no_byStr,fname)),
      
            fh : openw(fname),
            printf(fh, "#include <gkyl_gk_collisionless_flux_kernels.h> ~%"),
  
            funcName : sconcat("gk_collisionless_flux_",no_byStr,"edge_surf",clabels[dir],"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder),
            buildGKFluxConfESKernel(dir, fh, funcName, c, v, bName[bInd], polyOrder, bVarsList, no_by, true),
            close(fh)
          ),

          /* Surface flux in vparallel direction.*/
          fname : sconcat("~/max-out/gk_collisionless_flux_",no_byStr,"surf",vlabels[1],"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
          disp(printf(false,"Creating flux surfvpar ~a file: ~a",no_byStr,fname)),
  
          fh : openw(fname),
          printf(fh, "#include <gkyl_gk_collisionless_flux_kernels.h> ~%"),

          funcName : sconcat("gk_collisionless_flux_",no_byStr,"surf",vlabels[1],"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder),
          buildGKFluxVparESKernel(c+1, fh, funcName, c, v, bName[bInd], polyOrder, bVarsList, no_by, false),
          close(fh)
        )
      )
    )
  )
)$
