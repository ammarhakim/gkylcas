/*
  Generate kernels for the updater which shifts the distribution
  to make it positive at positivity control points.
*/
load("positivity_shift_gk/pos_shift_gk.mac")$

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 1$
minCdim_Ser : 1$
maxCdim_Ser : 3$

/* Tensor order basis. No need to generate p=1. */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
maxCdim_Tensor : 0$

/* Vdim possibilities for each of Cdim=[1,2,3]. */
gkVdims : [[1,2], [2], [2]]$

/*
Chose the nodes to enforce positivity at, options:
  - positivity
  - gauss_legendre
*/
nodeType : "gauss_legendre"$

/* ...... END OF USER INPUTS........ */

/* To generate other bases, just add corresponding column to arrays below. */
bName        : ["ser", "tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$

/* Generate kernels of selected types. */
for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    for gkV : 1 thru length(gkVdims[c]) do (
      v : gkVdims[c][gkV],

      maxPolyOrderB : maxPolyOrder[bInd],
      if (c=3) then maxPolyOrderB : 1, /* Only generate p=1 kernels for 3x2v */
      for polyOrder : minPolyOrder[bInd] thru maxPolyOrderB do (
        fname : sconcat("~/max-out/positivity_shift_gyrokinetic_", c, "x", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
        disp(printf(false,"Creating volume file: ~a",fname)),
  
        fh : openw(fname),
        printf(fh, "#include <gkyl_positivity_shift_gyrokinetic_kernels.h> ~%"),
        printf(fh, "~%"),

        funcName : sconcat("positivity_shift_gyrokinetic_", c, "x", v, "v_", bName[bInd], "_p", polyOrder),
        genPosShiftGKkernel(fh, funcName, c, v, bName[bInd], polyOrder, nodeType),
        close(fh)
      )
    )
  )
)$
