load("modal-basis");
load("out-scripts");
load(stringproc)$
load("scifac")$
load("nodalOperations/nodalFunctions")$
fpprec : 24$

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
minVdim_Ser : 1$    /* see begining of v loop below though. */
maxCdim_Ser : 3$
maxVdim_Ser : 3$

/* Tensor product basis. */
/* Note that Serendipity, p = 1, is equivalent to Tensor */
/* Thus no need to calculate p = 1 Tensor basis */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
minVdim_Tensor : 1$    /* see begining of v loop below though. */
maxCdim_Tensor : 2$
maxVdim_Tensor : 3$

/* ...... END OF USER INPUTS........ */

bName        : ["ser","tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
minVdim      : [minVdim_Ser, minVdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$
maxVdim      : [maxVdim_Ser, maxVdim_Tensor]$

/* Compute the surface contribution in velocity space from the acceleration term */
for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    for v : max(c,minVdim[bInd]) thru maxVdim[bInd] do (

      minPolyOrderB : minPolyOrder[bInd],
      maxPolyOrderB : maxPolyOrder[bInd],
      if (c+v>4 and maxPolyOrderB > 1) then maxPolyOrderB : 1,
      for polyOrder : minPolyOrderB thru maxPolyOrderB do (
        disp(printf(false,sconcat("Creating phase space surface quadrature evaluation ",bName[bInd]," ~ax~av_p~a"),c,v,polyOrder)),
        kill(varsC, varsP, basisC, basisP),
        load(sconcat("basis-precalc/basis", bName[bInd], c, "x", v, "v")),
        bP    : basisP[polyOrder],
        bC    : basisC[polyOrder],
        varsC : slcn(varsP, c),
        numC  : length(bC),
        numP  : length(bP),
        pDim  : length(varsP),
        /* Scale nodes of the nodal basis by corresponding factors to obtain the Gauss-Legendre quadrature points */
        surfNodes : getNodes("Tensor", pDim-1, polyOrder),
        if polyOrder=1 then (surfNodes:surfNodes*(1/sqrt(3))) elseif polyOrder=2 then (surfNodes:surfNodes*sqrt(3/5)),
        numNodes : length(surfNodes),

        f_e : doExpand1(f, bP),
        for dir : 1 thru pDim do (
          /* xv = variable in direction of surface update. */
          xv : varsP[dir],
          /* Surface variables to integrate over. */
          surfVars : delete(xv,varsP),
          /* Evaluate f at surface quadrature nodes. */
          /* Need evaluation on left (-1) and right (+1) */
          fOrdR_n : gcfac(float(evAtNodes(subst(xv=+1,f_e),surfNodes,surfVars))),
          fOrdL_n : gcfac(float(evAtNodes(subst(xv=-1,f_e),surfNodes,surfVars))),

          fname : sconcat("~/max-out/gkyl_basis_",bName[bInd],"_", c, "x", v, "v_p", polyOrder, "_surf", xv, "_quad", ".h"),
          fh : openw(fname),

          for n : 1 thru length(fOrdR_n) do (
            printf(fh, "GKYL_CU_DH static inline double ~%"),
            printf(fh, "~a_~ax~av_p~a_surf~a_quad_~a(int side, const double* GKYL_RESTRICT f) { ~%", bName[bInd], c, v, polyOrder, xv, n-1),
            printf(fh, "  if (side == 1) ~%"),
            printf(fh, "    return ~a; ~%", fOrdR_n[n]),
            printf(fh, "  else ~%"),
            printf(fh, "    return ~a; ~%", fOrdL_n[n]),
            printf(fh, "} ~%")
          ),
          close(fh)
        )
      )
    ),
    minPolyOrderB : minPolyOrder[bInd],
    maxPolyOrderB : maxPolyOrder[bInd],
    /* if only 1D, don't generate configurations space upwind quadrature evaluation, since no surface to specify quad points on */
    if (c=1 and maxPolyOrderB > 1) then maxPolyOrderB : 0,
    if (c=3 and maxPolyOrderB > 1) then maxPolyOrderB : 1,
    for polyOrder : minPolyOrderB thru maxPolyOrderB do (
      disp(printf(false,sconcat("Creating configuration space surface quadrature evaluation ",bName[bInd]," ~ax_p~a"),c,polyOrder)),
      kill(varsC, basisC,surfNodes,surfVars),
      load(sconcat("basis-precalc/basis", bName[bInd], c, "x")),
      bC : basisC[polyOrder],
      numC  : length(bC),
      /* Scale nodes of the nodal basis by corresponding factors to obtain the Gauss-Legendre quadrature points */
      surfNodes : getNodes("Tensor", c-1, polyOrder),
      if polyOrder=1 then (surfNodes:surfNodes*(1/sqrt(3))) elseif polyOrder=2 then (surfNodes:surfNodes*sqrt(3/5)),
      numNodes : length(surfNodes),    
      f_e : doExpand1(f, bC),
      for dir : 1 thru c do (
        /* xv = variable in direction of surface update. */
        cv : varsC[dir],
        /* Surface variables to integrate over. */
        surfVars : delete(cv,varsC),
        /* Evaluate f at surface quadrature nodes. */
        /* Need evaluation on left (-1) and right (+1) */
        fOrdR_n : gcfac(float(evAtNodes(subst(cv=+1,f_e),surfNodes,surfVars))),
        fOrdL_n : gcfac(float(evAtNodes(subst(cv=-1,f_e),surfNodes,surfVars))),

        fname : sconcat("~/max-out/gkyl_basis_",bName[bInd],"_", c, "x_", "p", polyOrder, "_surf", cv, "_quad", ".h"),
        fh : openw(fname),

        for n : 1 thru length(fOrdR_n) do (
          printf(fh, "GKYL_CU_DH static inline double ~%"),
          printf(fh, "~a_~ax_p~a_surf~a_quad_~a(int side, const double* GKYL_RESTRICT f) { ~%", bName[bInd], c, polyOrder, cv, n-1),
          printf(fh, "  if (side == 1) ~%"),
          printf(fh, "    return ~a; ~%", fOrdR_n[n]),
          printf(fh, "  else ~%"),
          printf(fh, "    return ~a; ~%", fOrdL_n[n]),
          printf(fh, "} ~%")
        ),
        close(fh)
      )
    )
  )
);