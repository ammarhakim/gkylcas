/* Functions to work with nodes and nodal expansions,
   and to interface modal algorithms with nodal ones. */
load("nodal_operations/node_locations")$
load("modal-basis")$
load("out-scripts")$
load(stringproc)$
fpprec : 24$
load("eigen")$
load("scifac")$
load("utilities")$

doMakeExprLst(vals, S)  := makelist(if vals[i] # 0 then S[i-1] else 0, i, 1, length(vals))$

/* Given a set of an expression and a set of nodes, evaluate the expression at the nodes.
   Must also provide the variables of the functional space exprIn is defined in. */
evAtNodes(exprIn, nodesIn, varsIn) := block([dim,numNodes],
  dim         : length(varsIn),
  numNodes    : length(nodesIn),
  exprAtNodes : makelist(subst(makelist(varsIn[j]=nodesIn[i][j], j, 1, dim),exprIn),i,1,numNodes),
  return(exprAtNodes)
)$

/* ....................................................................................................
   The following functions calculate nodal-to-modal transformation   
   matrix, A, which transforms the nodal basis.                      
   The matrix that transforms the nodal coefficients is V=(A^T)^{-1}.
   .................................................................................................... */

/* Given a 'modalBasis', in the variables 'vars'. */
calcBasisNodToModWithNodesAndBasis(nodes, modalBasis, vars) := block(
  [numNodes, dim, basisNodToMod, i, col, d],
  numNodes : length(nodes),
  dim      : length(vars),
  basisNodToMod : (
    for i : 1 thru numNodes do (
      col : copylist(modalBasis),
      for d : 1 thru dim do (
        col : subst(nodes[i][d],vars[d],col)
      ),
      col : columnvector(col),
      if i = 1 then basisNodToMod:col else basisNodToMod:addcol(basisNodToMod, col)
    ),
    basisNodToMod
  ),
  return(basisNodToMod)
)$

/* Given a set of nodes. */
calcBasisNodToModWithNodes(basisType, dim, p, nodes) := block(
  [basis, vars, basisNodToMod, varsC, varsP, basisC, basisP],
  if (dim < 4) then (
    load(sconcat("basis-precalc/basis", basisType, dim, "x")),
    basis : basisC[p],
    vars  : varsC
  ) else (
    load(sconcat("basis-precalc/basis", basisType, dim-3, "x3v")),
    basis : basisP[p],
    vars  : varsP
  ),
  basisNodToMod : calcBasisNodToModWithNodesAndBasis(nodes, basis, vars),
  return(basisNodToMod)
)$
calcBasisNodToModWithNodesHyb(basisType, cdim, vdim, nodes) := block(
  [varsC,bC,basis,vars,basisNodToMod],
  if basisType = "hyb" then (
    [varsC,bC,vars,basis] : loadPhaseBasis("ser", cdim, vdim, 1)
  ) elseif basisType = "gkhyb" then (
    [varsC,bC,vars,basis,vSub] : loadGkBasis("ser", cdim, vdim, 1)
  ),
  basisNodToMod : calcBasisNodToModWithNodesAndBasis(nodes, basis, vars),
  return(basisNodToMod)
)$

/* For standard bases saved in modal-basis and nodes in nodeLocations. */
calcBasisNodToMod(basisType, dim, p) := block([basis, vars, nodes, numNodes, basisNodToMod, varsC, varsP, basisC, basisP],
  nodes         : getNodes(basisType, dim, p),
  basisNodToMod : calcBasisNodToModWithNodes(basisType, dim, p, nodes),
  return(basisNodToMod)
)$

/* ....................................................................................................
   The following functions calculate nodal-to-modal transformation
   matrix, V=(A^T)^{-1}, which transforms the nodal coefficients.
   .................................................................................................... */

/* Given a 'modalBasis', in the variables 'vars'. */
calcNodToModWithNodesAndBasis(nodes, modalBasis, vars) := block([basisNodToMod],
  basisNodToMod : calcBasisNodToModWithNodesAndBasis(nodes, modalBasis, vars),
  return(invert(transpose(basisNodToMod)))
)$

/* Given a set of nodes. */
calcNodToModWithNodes(basisType, dim, p, nodes) := block([basisNodToMod],
  basisNodToMod : calcBasisNodToModWithNodes(basisType, dim, p, nodes),
  return(invert(transpose(basisNodToMod)))
)$
calcNodToModWithNodesHyb(basisType, cdim, vdim, nodes) := block([basisNodToMod],
  basisNodToMod : calcBasisNodToModWithNodesHyb(basisType, cdim, vdim, nodes),
  return(invert(transpose(basisNodToMod)))
)$

/* For standard bases saved in modal-basis and nodes in nodeLocations. */
calcNodToMod(basisType, dim, p) := block([basisNodToMod],
  basisNodToMod : calcBasisNodToMod(basisType, dim, p),
  return(invert(transpose(basisNodToMod)))
)$

/* ....................................................................................................
   The following functions calculate modal-to-nodal transformation
   matrix, A^{-1}, which transforms the modal basis.
   The matrix that transforms the modal coefficients is U=(A^T).
   .................................................................................................... */

/* Given a 'modalBasis', in the variables 'vars'. */
calcBasisModToNodWithNodesAndBasis(nodes, modalBasis, vars) := block([basisNodToMod],
  basisNodToMod : fullratsimp(calcBasisNodToModWithNodesAndBasis(nodes, modalBasis, vars)),
  return(invert(basisNodToMod))
)$

/* Given a set of nodes. */
calcBasisModToNodWithNodes(basisType, dim, p, nodes) := block([basisNodToMod],
  basisNodToMod : calcBasisNodToModWithNodes(basisType, dim, p, nodes),
  return(invert(basisNodToMod))
)$

/* For standard bases saved in modal-basis and nodes in nodeLocations. */
calcBasisModToNod(basisType, dim, p) := block([basisNodToMod],
  basisNodToMod : calcBasisNodToMod(basisType, dim, p),
  return(invert(basisNodToMod))
)$

/* ....................................................................................................
   The following functions calculate modal-to-nodal transformation
   matrix, U=A^T, which transforms the modal coefficients.
   .................................................................................................... */

/* Given a 'modalBasis', in the variables 'vars'. */
calcModToNodWithNodesAndBasis(nodes, modalBasis, vars) := block([basisNodToMod],
  basisNodToMod : calcBasisNodToModWithNodesAndBasis(nodes, modalBasis, vars),
  return(transpose(basisNodToMod))
)$

/* Given a set of nodes. */
calcModToNodWithNodes(basisType, dim, p, nodes) := block([basisNodToMod],
  basisNodToMod : calcBasisNodToModWithNodes(basisType, dim, p, nodes),
  return(transpose(basisNodToMod))
)$

/* For standard bases saved in modal-basis and nodes in nodeLocations. */
calcModToNod(basisType, dim, p) := block([basisNodToMod],
  basisNodToMod : calcBasisNodToMod(basisType, dim, p),
  return(transpose(basisNodToMod))
)$

/* ....................................................................................................
   The following functions obtain a nodal basis.
   .................................................................................................... */

/* Given a modal basis and a set of nodes. */
getNodalBasisWithNodesAndBasis(nodes, modalBasis, vars) := block(
  [basisModToNod,basisNodToMod,unknowns,eqLHS,eq,sol],
  if length(modalBasis) < 50 then (
    basisModToNod : calcBasisModToNodWithNodesAndBasis(nodes, modalBasis, vars),
    return(fullratsimp(list_matrix_entries(basisModToNod . modalBasis)))
  ) else (
    /* We found that for large number of basis monomials (~100) the invert
       method in calcBasisModToNodWithNodesAndBasis took too long. Here we use
       linsolve instead, which is faster. */
    basisNodToMod : fullratsimp(calcBasisNodToModWithNodesAndBasis(nodes, modalBasis, vars)),
    unknowns      : makelist(w[i],i,1,length(basisModToNod)),
    eqLHS : basisNodToMod . unknowns,
    eq    : makelist(eqLHS[i][1] = modalBasis[i], i, 1, length(modalBasis)),
    sol   : linsolve(eq, unknowns),
    return(fullratsimp(makelist(rhs(sol[i]),i,1,length(sol))))
  )
)$

/* Given a set of nodes. */
getNodalBasisWithNodes(basisType, dim, p, nodes) := block(
  [basis,vars,nodalBasis],
  if (dim < 4) then (
    load(sconcat("basis-precalc/basis", basisType, dim, "x")),
    basis : basisC[p],
    vars  : varsC
  ) else (
    load(sconcat("basis-precalc/basis", basisType, dim-3, "x3v")),
    basis : basisP[p],
    vars  : varsP
  ),
  nodalBasis : getNodalBasisWithNodesAndBasis(nodes, basis, vars),
  return(nodalBasis)
)$

/* Given a set of nodes and variable list. */
getVarsNodalBasisWithNodes(basisType, dim, p, varsIn, nodes) := block(
  [basis,vars,replaceList,nodalBasis],
  dimIn : length(varsIn),
  if (dim < 4) then (
    load(sconcat("basis-precalc/basis", basisType, dim, "x")),
    basis : basisC[p],
    vars  : varsC
  ) else (
    load(sconcat("basis-precalc/basis", basisType, dim-3, "x3v")),
    basis : basisP[p],
    vars  : varsP
  ),
  replaceList : makelist(vars[i]=varsIn[i],i,1,dimIn),
  basis : psubst(replaceList,basis),
  nodalBasis : getNodalBasisWithNodesAndBasis(nodes, basis, varsIn),
  return(nodalBasis)
)$
getVarsNodalBasisWithNodesHyb(basisType, cdim, vdim, varsIn, nodes) := block(
  /* Same as getVarsNodalBasisWithNodes but for hybrid bases.
     For now we assuse this is just used for expanding quadrature node values,
     so we use Tensor basis (or Ser when p=1, as in conf space). */
  [dimIn,basis,vars,replaceList,nodalBasis],
  dimIn : length(varsIn),
  if vdim=0 then (
    load(sconcat("basis-precalc/basisSer", cdim, "x")),
    basis : basisC[1],  vars : varsC
  ) else (
    if basisType="hyb" then (
      if cdim=0 then (
        load(sconcat("basis-precalc/basisTensor", vdim, "x")),
        basis : subst([x=vx,y=vy,z=vz],basisC[2]),  vars : subst([x=vx,y=vy,z=vz],varsC)
      ) else (
        load(sconcat("basis-precalc/basisTensorHybrid", cdim, "x", vdim, "v")),
        basis : basisP[1],  vars : varsP
      )
    ) elseif basisType="gkhyb" then (
      /* gkhyb is tricker because it's p=2 only in vpar. */      
      [vars, basis] : loadGkHybBasisFromVars(varsIn)
    )
  ),
  replaceList : makelist(vars[i]=varsIn[i],i,1,dimIn),
  basis : psubst(replaceList,basis),
  nodalBasis : getNodalBasisWithNodesAndBasis(nodes, basis, varsIn),
  return(nodalBasis)
)$

/* For standard bases saved in modal-basis and nodes in nodeLocations. */
getNodalBasis(basisType, dim, p) := block(
  [nodes,nodalBasis],
  nodes      : getNodes(basisType, dim, p),
  nodalBasis : getNodalBasisWithNodes(basisType, dim, p, nodes),
  return(nodalBasis)
)$

