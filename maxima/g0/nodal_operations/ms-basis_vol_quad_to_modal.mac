/* Generate kernels that take a function f at Gauss-Legendre quadrature nodes,
   and do a nodal-to-modal transformation to yield the modal DG coefficients of f. */
load("nodal_operations/basis_vol_quad_to_modal")$
load(stringproc)$

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minDim_Ser : 1$
maxDim_Ser : 6$

/* Tensor product basis. */
/* Note that Serendipity, p = 1, is equivalent to Tensor */
/* Thus no need to calculate p = 1 Tensor basis */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minDim_Tensor : 2$
maxDim_Tensor : 4$

/* Hybrid basis. */
minCdim_hyb : 1$
maxCdim_hyb : 3$
vDims_hyb : [[1,2,3], [1,2,3], [1,2,3]]$  /* Vdim for each of Cdim. */

/* Tensor-Hybrid basis. */
minCdim_tenhyb : 1$
maxCdim_tenhyb : 3$
vDims_tenhyb : [[1,2,3], [1,2,3], [1,2,3]]$  /* Vdim for each of Cdim. */

/* GK hybrid basis. */
minCdim_gkhyb : 1$
maxCdim_gkhyb : 3$
vDims_gkhyb : [[1,2], [2], [2]]$  /* Vdim for each of Cdim. */

/* ...... END OF USER INPUTS........ */

bName : ["ser","tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minDim : [minDim_Ser, minDim_Tensor]$
maxDim : [maxDim_Ser, maxDim_Tensor]$

bNameHyb   : ["tenhyb","hyb","gkhyb"]$
minCdimHyb : [minCdim_tenhyb, minCdim_hyb, minCdim_gkhyb]$
maxCdimHyb : [maxCdim_tenhyb, maxCdim_hyb, maxCdim_gkhyb]$
vDims      : [vDims_tenhyb, vDims_hyb, vDims_gkhyb]$

/* Generate kernels that take the f at Gauss-Legendre quadrature nodes,
   and do a nodal-to-modal transformation to yield the modal DG coefficients of f. */
for bInd : 1 thru length(bName) do (
  fname : sconcat("~/max-out/basis_quad_to_modal_", bName[bInd], ".c"),
  fh : openw(fname),
  printf(fh, "#include <gkyl_basis_~a_kernels.h> ~%", bName[bInd]),

  for d : minDim[bInd] thru maxDim[bInd] do (
    minPolyOrderB : minPolyOrder[bInd],
    maxPolyOrderB : maxPolyOrder[bInd],
    if (d>5 and maxPolyOrderB > 1) then maxPolyOrderB : 1,
    for polyOrder : minPolyOrderB thru maxPolyOrderB do (
      disp(printf(false,sconcat("Creating quad_to_modal ",bName[bInd]," ~ax_p~a"), d, polyOrder)),   
      genQuadToModalKernel(fh, d, bName[bInd], polyOrder)
    )
  ),
  close(fh)
)$

/* Generate the hybrid basis kernels. */
for bInd : 1 thru length(bNameHyb) do (
  fname : sconcat("~/max-out/basis_quad_to_modal_", bNameHyb[bInd], ".c"),
  fh : openw(fname), 
  printf(fh, "#include <gkyl_basis_~a_kernels.h> ~%", bNameHyb[bInd]),

  for c : minCdimHyb[bInd] thru maxCdimHyb[bInd] do (
    vmin : xreduce(min,vDims[bInd][c]),
    vmax : xreduce(max,vDims[bInd][c]),
    for v : vmin thru vmax do (
      disp(printf(false,sconcat("Creating quad_to_modal ",bNameHyb[bInd]," ~ax~av_p1"),c,v)),     
      genQuadToModalKernelHyb(fh, c, v, bNameHyb[bInd])
    )
  ),
  close(fh)
)$
