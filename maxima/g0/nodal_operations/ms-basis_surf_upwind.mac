load("modal-basis");
load("out-scripts");
load(stringproc)$
load("scifac")$
load("nodal_operations/nodal_functions")$
fpprec : 24$

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
minVdim_Ser : 1$    /* see begining of v loop below though. */
maxCdim_Ser : 3$
maxVdim_Ser : 3$

/* Tensor product basis. */
/* Note that Serendipity, p = 1, is equivalent to Tensor */
/* Thus no need to calculate p = 1 Tensor basis */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
minVdim_Tensor : 1$    /* see begining of v loop below though. */
maxCdim_Tensor : 2$
maxVdim_Tensor : 3$

/* ...... END OF USER INPUTS........ */

bName        : ["ser","tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
minVdim      : [minVdim_Ser, minVdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$
maxVdim      : [maxVdim_Ser, maxVdim_Tensor]$

/* Compute the surface contribution in velocity space from the acceleration term */
for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    for v : max(c,minVdim[bInd]) thru maxVdim[bInd] do (

      minPolyOrderB : minPolyOrder[bInd],
      maxPolyOrderB : maxPolyOrder[bInd],
      if (c+v>4 and maxPolyOrderB > 1) then maxPolyOrderB : 1,
      for polyOrder : minPolyOrderB thru maxPolyOrderB do (
        disp(printf(false,sconcat("Creating phase space surface quadrature evaluation ",bName[bInd]," ~ax_p~a"),c+v,polyOrder)),
        kill(bP, surfVars, surfNodes, numNodes, f_e, bSurf, basisNodal, fHatNodal_e, fHatModProj_e),
        load(sconcat("basis-precalc/basis", bName[bInd], c, "x", v, "v")),
        bP    : basisP[polyOrder],
        pDim  : length(varsP),

        /* Surface nodes given by tensor product of Gauss-Legendre quadrature points */
        surfNodes : gaussOrd(polyOrder+1, pDim-1),
        numNodes : length(surfNodes),

        f_e : doExpand1(f, bP),

        /* xv = variable in direction of surface update.
                Note that which variable is deleted for this operation is irrelevant.
                The projection from the surface (tensor) nodal basis to the modal basis
                only depends on dimensionality  */
        xv : varsP[c],
        /* Surface variables to integrate over. */
        surfVars : delete(xv,varsP),
        /* Generate surface basis. this produces the ndim-1 orthogonal basis with no xv dependence. */
        bSurf : sqrt(2)*delete(0,fullratsimp(innerProd(varsP,1,bP,subst([xv^2=var2,var2=1/3,xv=0],bP)))*bP),

        fname : sconcat("~/max-out/gkyl_basis_",bName[bInd],"_", c+v, "x_p", polyOrder, "_upwind_quad_to_modal", ".h"),
        fh : openw(fname),
        printf(fh, "GKYL_CU_DH static inline void ~%"),
        printf(fh, "~a_~ax_p~a_upwind_quad_to_modal(const double* fUpwindQuad, double* GKYL_RESTRICT fUpwind) { ~%", bName[bInd], c+v, polyOrder),

        /* Make nodal expansions in tensor nodal basis where nodes are Gauss-Legendre quadrature points */
        basisNodal : getVarsNodalBasisWithNodes("Tensor", pDim-1, polyOrder, surfVars, surfNodes),
        fHatNodal_e : sum(fUpwindQuad[i-1]*basisNodal[i], i, 1, length(basisNodal)),
        /* Project nodal basis back onto modal basis */
        fHatModProj_e : fullratsimp(calcInnerProdList(surfVars, 1, bSurf, fHatNodal_e)),

        /* Write out projection of tensor nodal basis onto modal basis */
        /* Clever factorization is possible for polyOrder = 1, but for higher
           polynomial orders, factorization is *too* clever and can lead to 
           deeply nested parentheses, not ideal for compiler optimizations */
        if (polyOrder = 1) then (
          writeCExprsNoExpand1(fUpwind, fHatModProj_e)
        ) else (
          writeCExprs1(fUpwind, fHatModProj_e)
        ),
        printf(fh, "~%"),
        flush_output(fh),

        printf(fh, "} ~%"),
        close(fh)
      )
    )
  )
);
