/* Generate kernels that take a function f at Gauss-Legendre quadrature nodes,
   and do a nodal-to-modal transformation to yield the modal DG coefficients of f. */
load("modal-basis");
load("out-scripts");
load(stringproc)$
load("scifac")$
load("nodal_operations/nodal_functions")$
fpprec : 24$

genQuadToModalKernel(fh, pdim, basisName, pOrder) := block(
  [vars,basis,nodes,numNodes,
  basisNodal,fHatNodal_e,fHatModProj_e],

  [vars,basis] : loadBasis(basisName, pdim, pOrder),

  /* Nodes given by tensor product of Gauss-Legendre quadrature points. */
  nodes : gaussOrd(pOrder+1, pdim),
  numNodes  : length(nodes),

  printf(fh, "GKYL_CU_DH ~%"), 
  printf(fh, "void ~%"),
  printf(fh, "quad_to_modal_~ad_~a_p~a(const double* fquad, double* GKYL_RESTRICT fmodal, long linc2) { ~%", pdim, basisName, pOrder),

  /* Make nodal expansions in tensor nodal basis where nodes are Gauss-Legendre quadrature points */
  if (pOrder = 1) then (
    /* Serendipity and Tensor are identical for p=1 */
    basisNodal  : getVarsNodalBasisWithNodes("Ser", pdim, pOrder, vars, nodes)
  )
  else (
    basisNodal  : getVarsNodalBasisWithNodes("Tensor", pdim, pOrder, vars, nodes)
  ),
  fHatNodal_e : doExpand1(fquad,basisNodal),
  /* Project nodal basis back onto modal basis */
  fHatModProj_e : fullratsimp(calcInnerProdList(vars, 1, basis, fHatNodal_e)),

  printf(fh, "  switch (linc2) { ~%"), 
  for i : 1 thru length(fHatModProj_e) do (
    printf(fh, "    case ~a: ~%", i-1),
    /* polynomial order 1 can be cleverly factorized with radcan */
    if (pOrder = 1) then (
      printf(fh, "      fmodal[~a] = ~a; ~%", i-1, float(radcan(fHatModProj_e[i])))
    )
    else (
      printf(fh, "      fmodal[~a] = ~a; ~%", i-1, float(expand(fHatModProj_e[i])))
    ), 
    printf(fh, "    break; ~%"),  
    printf(fh, "~%")
  ),
  printf(fh, "  } ~%"), 
  flush_output(fh),

  printf(fh, "} ~%")
)$

genQuadToModalKernelHyb(fh, cdim, vdim, basisName) := block(
  [pdim,varsc,basisc,varsp,basisp,varsv,nodes,numNodes,
   basisNodal,fHatNodal_e,fHatModProj_e],

  pdim : cdim+vdim,

  if basisName = "hyb" then (
    [varsc,basisc,varsp,basisp] : loadPhaseBasis(basisName, cdim, vdim, 1),
    nodes : gaussOrdHyb(1+1, cdim, vdim)
  ) elseif basisName = "gkhyb" then (
    [varsc,basisc,varsp,basisp,vsub] : loadGkBasis(basisName, cdim, vdim, 1),
    varsv : listify(setdifference(setify(varsp),setify(varsc))),
    nodes : gaussOrdGkHyb(1+1, varsc, varsv)
  ),

  numNodes : length(nodes),

  printf(fh, "GKYL_CU_DH ~%"), 
  printf(fh, "void ~%"),
  printf(fh, "quad_to_modal_~ax~av_~a_p1(const double* fquad, double* GKYL_RESTRICT fmodal, long linc2) { ~%", cdim, vdim, basisName),

  /* Make nodal expansions in tensor nodal basis where nodes are Gauss-Legendre quadrature points */
  basisNodal  : getVarsNodalBasisWithNodesHyb(basisName, cdim, vdim, varsp, nodes),
  fHatNodal_e : doExpand1(fquad,basisNodal),
  /* Project nodal basis back onto modal basis */
  fHatModProj_e : fullratsimp(calcInnerProdList(varsp, 1, basisp, fHatNodal_e)),

  /* Write out projection of tensor nodal basis onto modal basis. */
  printf(fh, "  switch (linc2) { ~%"), 
  for i : 1 thru length(fHatModProj_e) do (
    printf(fh, "    case ~a: ~%", i-1),
    printf(fh, "      fmodal[~a] = ~a; ~%", i-1, float(expand(fHatModProj_e[i]))), 
    printf(fh, "    break; ~%"),  
    printf(fh, "~%")
  ),
  printf(fh, "  } ~%"), 
  flush_output(fh),

  printf(fh, "} ~%"),
  printf(fh, "~%")
)$
