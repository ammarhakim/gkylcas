
/*
/* This first section produces accepted results for the test of header files evaluating at quad nodes on surface. */
*/

kill(all);

load("modal-basis");
load("nodal_operations/nodal_functions");

polyOrder : 1$
cdim : 1$
vdim : 2$
basisFun : "GkHybrid"$
surfDir : 3$
evAtSide : 1$ /* -1 for left, 1 for right */
load(sconcat("basis-precalc/basis",basisFun,cdim,"x",vdim,"v"));

pDim : cdim+vdim$
bP : basisP[polyOrder]$
surfVar     : varsP[surfDir]$
surfIntVars : delete(surfVar,varsP)$
surf_cvars : delete(surfVar, makelist(varsP[i],i,1,cdim))$
surf_vvars : delete(surfVar, makelist(varsP[cdim+i],i,1,vdim))$
if polyOrder = 1 then (
  surfNodes : gaussOrdGkHyb(1+1, surf_cvars, surf_vvars),
  bSurf     : basisFromVars("gkhyb",surfIntVars,polyOrder)
) else (
  surfNodes : gaussOrd(polyOrder+1, pDim-1),
  bSurf     : basisFromVars(basisFun,surfIntVars,polyOrder)
)$
numNodes  : length(surfNodes)$

f_e : doExpand1(fin,bP)$
fOrdL_n : gcfac(float(evAtNodes(subst(surfVar=evAtSide,f_e),surfNodes,surfIntVars)));

/*
/* This second section produces accepted results for the test of header files transforming surface nodal coefficients to surface modal coefficients. */
*/

kill(all);

load("modal-basis");
load("nodal_operations/nodal_functions");

polyOrder : 1$
cdim : 1$
vdim : 2$
basisFun : "GkHybrid"$
surfDir : 2$
load(sconcat("basis-precalc/basis",basisFun,cdim,"x",vdim,"v"));

pDim : cdim+vdim$
bP : basisP[polyOrder]$
surfVar     : varsP[surfDir]$
surfIntVars : delete(surfVar,varsP)$
surf_cvars : delete(surfVar, makelist(varsP[i],i,1,cdim))$
surf_vvars : delete(surfVar, makelist(varsP[cdim+i],i,1,vdim))$
if polyOrder = 1 then (
  surfNodes : gaussOrdGkHyb(1+1, surf_cvars, surf_vvars),
  bSurf     : basisFromVars("gkhyb",surfIntVars,polyOrder)
) else (
  surfNodes : gaussOrd(polyOrder+1, pDim-1),
  bSurf     : basisFromVars(basisFun,surfIntVars,polyOrder)
)$
numNodes  : length(surfNodes)$

f_e : doExpand1(fin,bP)$
fOrdL_n : gcfac(float(evAtNodes(subst(surfVar=-1,f_e),surfNodes,surfIntVars)))$
if polyOrder = 1 then (
  surf_cdim : length(surf_cvars),
  surf_vdim : length(surf_vvars),
  basisNodal : getVarsNodalBasisWithNodesHyb("gkhyb", surf_cdim, surf_vdim, surfIntVars, surfNodes)
) else (
  basisNodal : getVarsNodalBasisWithNodes("tensor", pDim-1, polyOrder, surfIntVars, surfNodes)
)$

fpprec : 24$
fNodal_e : doExpand(fOrdL_n,basisNodal)$
f_c : float(expand(fullratsimp(calcInnerProdList(surfIntVars, 1, bSurf, fNodal_e))));

