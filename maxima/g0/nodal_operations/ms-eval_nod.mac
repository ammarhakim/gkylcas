load("modal-basis");
load("out-scripts");
load(stringproc)$
load("scifac")$
load("nodal_operations/nodal_functions")$
fpprec : 24$

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 0$
maxPolyOrder_Ser : 2$
minDim_Ser : 1$
maxDim_Ser : 6$

/* Tensor product basis. */
/* Note that Serendipity, p = 1, is equivalent to Tensor */
/* Thus no need to calculate p = 1 Tensor basis */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minDim_Tensor : 2$
maxDim_Tensor : 5$

/* Hybrid basis. */
minCdim_hyb : 1$
maxCdim_hyb : 3$
vDims_hyb : [[1,2,3], [1,2,3], [1,2,3]]$  /* Vdim for each of Cdim. */

/* Tensor-Hybrid basis. */
minCdim_tenhyb : 1$
maxCdim_tenhyb : 3$
vDims_tenhyb : [[1,2,3], [1,2,3], [1,2,3]]$  /* Vdim for each of Cdim. */

/* GK hybrid basis. */
minCdim_gkhyb : 1$
maxCdim_gkhyb : 3$
vDims_gkhyb : [[1,2], [2], [2]]$  /* Vdim for each of Cdim. */

/* ...... END OF USER INPUTS........ */

bName        : ["ser","tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minDim       : [minDim_Ser, minDim_Tensor]$
maxDim       : [maxDim_Ser, maxDim_Tensor]$

bNameHyb   : ["tenhyb","hyb","gkhyb"]$
minCdimHyb : [minCdim_tenhyb, minCdim_hyb, minCdim_gkhyb]$
maxCdimHyb : [maxCdim_tenhyb, maxCdim_hyb, maxCdim_gkhyb]$
vDims      : [vDims_tenhyb, vDims_hyb, vDims_gkhyb]$

writeNodeCoordsKernel(dim, basisName, pOrder) := block([nodes,numNodes,n,dir],
  printf(fh, "GKYL_CU_DH~%"),
  printf(fh, "void~%"),
  printf(fh, "node_coords_~ad_~a_p~a(double *node_coords)~%", dim, basisName, pOrder),
  printf(fh, "{~%"),
  /* Get equi-distant node locations */
  if (dim = 6 and pOrder = 1) then (
    nodes : getNodes("tensor", dim, pOrder)
  ) else (
    nodes : getNodes(basisName, dim, pOrder)
  ),
  numNodes : length(nodes),

  for n : 1 thru numNodes do (
    for dir : 1 thru dim do (
      printf(fh, "  node_coords[~a] = ~a;~%", (n-1)*dim + dir-1, nodes[n][dir])
    )
  ),
  printf(fh, "}~%~%")
)$

writeNodeCoordsKernelHyb(cdim, vdim, basisName) := block([nodes,numNodes,n,dir],
  printf(fh, "GKYL_CU_DH~%"),
  printf(fh, "void~%"),
  printf(fh, "node_coords_~ax~av_~a_p1(double *node_coords)~%", cdim, vdim, basisName),
  printf(fh, "{~%"),

  /* Get equi-distant node locations */
  if basisName = "hyb" then (
    nodes : getNodesHyb(cdim, vdim)
  ) elseif basisName = "tenhyb" then (
    nodes : getNodesTenHyb(cdim, vdim)
  ) elseif basisName = "gkhyb" then (
    nodes : getNodesGkHyb(cdim, vdim)
  ),
  numNodes : length(nodes),

  pdim : cdim+vdim,

  for n : 1 thru numNodes do (
    for dir : 1 thru pdim do (
      printf(fh, "  node_coords[~a] = ~a;~%", (n-1)*pdim + dir-1, nodes[n][dir])
    )
  ),
  printf(fh, "}~%~%")
)$

/* Generate a file for regular bases. */
for bInd : 1 thru length(bName) do (
  fname : sconcat("~/max-out/basis_node_coords_",bName[bInd], ".c"),
  fh : openw(fname),
  printf(fh, "#include <gkyl_basis_~a_kernels.h>~%", bName[bInd]),

  for d : minDim[bInd] thru maxDim[bInd] do (
    minPolyOrderB : minPolyOrder[bInd],
    maxPolyOrderB : maxPolyOrder[bInd],
    if (d>5 and maxPolyOrderB > 1) then maxPolyOrderB : 1,
    for polyOrder : minPolyOrderB thru maxPolyOrderB do (
      writeNodeCoordsKernel(d, bName[bInd], polyOrder)
    )
  ),
  close(fh)
);

/* Generate a file for hybrid basis. */
for bInd : 1 thru length(bNameHyb) do (
  fname : sconcat("~/max-out/basis_node_coords_",bNameHyb[bInd], ".c"),
  fh : openw(fname),
  printf(fh, "#include <gkyl_basis_~a_kernels.h>~%", bNameHyb[bInd]),

  for c : minCdimHyb[bInd] thru maxCdimHyb[bInd] do (
    vmin : xreduce(min,vDims[bInd][c]),
    vmax : xreduce(max,vDims[bInd][c]),
    for v : vmin thru vmax do (
      writeNodeCoordsKernelHyb(c, v, bNameHyb[bInd])
    )
  ),
  close(fh)
);
