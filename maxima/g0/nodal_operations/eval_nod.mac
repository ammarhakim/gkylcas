load("modal-basis");
load("out-scripts");
load(stringproc)$
load("scifac")$
load("g0/nodal_operations/nodal_functions")$
fpprec : 24$

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 0$
maxPolyOrder_Ser : 2$
minDim_Ser : 1$
maxDim_Ser : 6$

/* Tensor product basis. */
/* Note that Serendipity, p = 1, is equivalent to Tensor */
/* Thus no need to calculate p = 1 Tensor basis */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minDim_Tensor : 2$
maxDim_Tensor : 4$

/* ...... END OF USER INPUTS........ */

bName        : ["ser","tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minDim      : [minDim_Ser, minDim_Tensor]$
maxDim      : [maxDim_Ser, maxDim_Tensor]$

/* Compute the surface contribution in velocity space from the acceleration term */
for bInd : 1 thru length(bName) do (
  fname : sconcat("~/max-out/basis_node_coords_",bName[bInd], ".c"),
  fh : openw(fname),
  printf(fh, "#include <gkyl_basis_~a_kernels.h>~%", bName[bInd]),

  for d : minDim[bInd] thru maxDim[bInd] do (
    minPolyOrderB : minPolyOrder[bInd],
    maxPolyOrderB : maxPolyOrder[bInd],
    if (d>5 and maxPolyOrderB > 1) then maxPolyOrderB : 1,
    for polyOrder : minPolyOrderB thru maxPolyOrderB do (
      kill(vars, basis),
      printf(fh, "GKYL_CU_DH~%"),
      printf(fh, "void~%"),
      printf(fh, "node_coords_~ad_~a_p~a(double *node_coords)~%", d, bName[bInd], polyOrder),
      printf(fh, "{~%"),
      /* Get equi-distant node locations */
      if (d = 6 and polyOrder = 1) then (
        nodes : getNodes("tensor", d, polyOrder)
      )
      else (
        nodes : getNodes(bName[bInd], d, polyOrder)
      ),
      numNodes : length(nodes),

      for n : 1 thru numNodes do (
        for dir : 1 thru d do (
          printf(fh, "  node_coords[~a] = ~a;~%", (n-1)*d + dir-1, nodes[n][dir])
        )
      ),
      printf(fh, "}~%~%")
    )
  ),
  close(fh)
);