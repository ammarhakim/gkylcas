/* Generate kernels that take modal DG expansion of a function f 
   and evaluate that function at Gauss-Legendre quadrature nodes of order p+1. */
load("modal-basis");
load("out-scripts");
load(stringproc)$
load("scifac")$
load("nodal_operations/nodal_functions")$
fpprec : 24$

genModalToQuadKernel(fh, pdim, basisName, pOrder) := block(
  [vars,basis,nodes,numNodes,f_e,
  basisNodal,fHatNodal_e,fHatModProj_e],

  [vars,basis] : loadBasis(basisName, pdim, pOrder),

  /* Nodes given by tensor product of Gauss-Legendre quadrature points. */
  nodes : gaussOrd(pOrder+1, pdim),
  numNodes  : length(nodes),

  f_e : doExpand1(fmodal, basis),

  printf(fh, "GKYL_CU_DH ~%"), 
  printf(fh, "void ~%"),
  printf(fh, "modal_to_quad_~ad_~a_p~a(const double* fmodal, double* GKYL_RESTRICT fquad, long linc2) { ~%", pdim, basisName, pOrder),

  /* Evaluate f at quadrature nodes. */
  fOrdR_n : evAtNodes(f_e,nodes,vars),

  printf(fh, "  switch (linc2) { ~%"), 
  for i : 1 thru numNodes do (
    printf(fh, "    case ~a: ~%", i-1),
    printf(fh, "      fquad[~a] = ~a; ~%", i-1, float(expand(fOrdR_n[i]))), 
    printf(fh, "    break; ~%"),  
    printf(fh, "~%")
  ),
  printf(fh, "  } ~%"), 
  flush_output(fh),

  printf(fh, "} ~%")
)$

genModalToQuadKernelHyb(fh, cdim, vdim, basisName) := block(
  [pdim,varsc,basisc,varsp,basisp,varsv,nodes,numNodes,
   f_e,basisNodal,fHatNodal_e,fHatModProj_e],

  pdim : cdim+vdim,

  if basisName = "hyb" then (
    [varsc,basisc,varsp,basisp] : loadPhaseBasis(basisName, cdim, vdim, 1),
    nodes : gaussOrdHyb(1+1, cdim, vdim)
  ) elseif basisName = "gkhyb" then (
    [varsc,basisc,varsp,basisp,vsub] : loadGkBasis(basisName, cdim, vdim, 1),
    varsv : listify(setdifference(setify(varsp),setify(varsc))),
    nodes : gaussOrdGkHyb(1+1, varsc, varsv)
  ),

  f_e : doExpand1(fmodal, basisp),

  numNodes : length(nodes),

  printf(fh, "GKYL_CU_DH ~%"), 
  printf(fh, "void ~%"),
  printf(fh, "modal_to_quad_~ax~av_~a_p1(const double* fmodal, double* GKYL_RESTRICT fquad, long linc2) { ~%", cdim, vdim, basisName),

  /* Evaluate f at quadrature nodes. */
  fOrdR_n : evAtNodes(f_e,nodes,varsp),

  printf(fh, "  switch (linc2) { ~%"), 
  for i : 1 thru numNodes do (
    printf(fh, "    case ~a: ~%", i-1),
    printf(fh, "      fquad[~a] = ~a; ~%", i-1, float(expand(fOrdR_n[i]))), 
    printf(fh, "    break; ~%"),  
    printf(fh, "~%")
  ),
  printf(fh, "  } ~%"), 
  flush_output(fh),

  printf(fh, "} ~%"),
  printf(fh, "~%")
)$
