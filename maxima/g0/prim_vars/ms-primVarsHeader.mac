load("prim_vars/primVarsFuncs")$
load(stringproc)$
/*  Generate kernels for: 
    1. Vlasov prim_vars: udrift = M1/M0, vtSq = 1/vdim*(M2/M0 - udrift.udrift)
    2. GK prim_vars: upar = M1/M0, vtSq = 1/vdim*(M2/M0 - upar^2), where vdim = 1 or 3. */

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 1$
minCdim_Ser : 1$
maxCdim_Ser : 3$
minVdim_Ser : 1$
maxVdim_Ser : 3$
minGkVdim_Ser : 1$
maxGkVdim_Ser : 2$


/* ...... END OF USER INPUTS........ */

bName        : ["ser"]$
minPolyOrder : [minPolyOrder_Ser]$
maxPolyOrder : [maxPolyOrder_Ser]$
minCdim      : [minCdim_Ser]$
maxCdim      : [maxCdim_Ser]$
minVdim      : [minVdim_Ser]$
maxVdim      : [maxVdim_Ser]$
minGkVdim      : [minVdim_Ser]$
maxGkVdim      : [maxVdim_Ser]$

printPrototypeVlasov(deco, ci, vi, bStr, pi) := block([si],
  /* Primitive vars for vlasov objects. */
  printf(fh, "~avoid vlasov_prim_vars_~ax~av_~a_p~a(const double *moms, double* prim_vars); ~%", deco, ci, vi, bStr, pi),
  printf(fh, "~avoid vlasov_prim_vars_u_i_~ax~av_~a_p~a(const double *moms, double* prim_vars); ~%", deco, ci, vi, bStr, pi),
  printf(fh, "~avoid vlasov_prim_vars_vtSq_~ax~av_~a_p~a(const double *moms, double* prim_vars); ~%", deco, ci, vi, bStr, pi),
  printf(fh, "~%"),
  printf(fh, "~avoid transform_prim_vars_vlasov_~ax~av_~a_p~a(const double *b_i, const double *moms, double* prim_vars); ~%", deco, ci, vi, bStr, pi),
  printf(fh, "~avoid transform_u_par_i_~ax~av_~a_p~a(const double *b_i, const double *moms, double* u_par_i); ~%", deco, ci, vi, bStr, pi),
  printf(fh, "~%")
)$

printPrototypeGK(deco, ci, vi, bStr, pi) := block([si],
  /* Primitive vars for GK objects. */
  printf(fh, "~avoid gyrokinetic_prim_vars_~ax~av_~a_p~a(const double *moms, double* prim_vars); ~%", deco, ci, vi, bStr, pi),
  printf(fh, "~avoid gyrokinetic_prim_vars_upar_~ax~av_~a_p~a(const double *moms, double* prim_vars); ~%", deco, ci, vi, bStr, pi),
  printf(fh, "~avoid gyrokinetic_prim_vars_vtSq_~ax~av_~a_p~a(const double *moms, double* prim_vars); ~%", deco, ci, vi, bStr, pi),
  printf(fh, "~%"), 
  printf(fh, "~avoid transform_prim_vars_gk_~ax~av_~a_p~a(const double *b_i, const double *moms, double* prim_vars); ~%", deco, ci, vi, bStr, pi),
  printf(fh, "~avoid transform_u_par_~ax~av_~a_p~a(const double *b_i, const double *moms, double* u_par); ~%", deco, ci, vi, bStr, pi),
  printf(fh, "~%")					 
)$

fh : openw("~/max-out/gkyl_dg_prim_vars_kernels.h")$
printf(fh, "#pragma once ~%")$
printf(fh, "#include <math.h> ~%")$
printf(fh, "#include <gkyl_mat.h> ~%")$
printf(fh, "#include <gkyl_util.h> ~%")$
printf(fh, " ~%")$
printf(fh, "EXTERN_C_BEG ~%")$
printf(fh, "~%")$

decorator : "GKYL_CU_DH "$
for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    minPolyOrderB : minPolyOrder[bInd],
    maxPolyOrderB : maxPolyOrder[bInd],
    for v : c thru maxVdim[bInd] do (
      if (c=3 and maxPolyOrderB > 1) then maxPolyOrderB : 1,

      for polyOrder : minPolyOrderB thru maxPolyOrderB do (
        printPrototypeVlasov(decorator, c, v, bName[bInd], polyOrder)
      )
    )
  )
);

printf(fh, "~%")$
for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    minPolyOrderB : minPolyOrder[bInd],
    maxPolyOrderB : maxPolyOrder[bInd],
    if c=1 then (
      for vgk : minGkVdim[bInd] thru maxGkVdim[bInd] do (
        for polyOrder : minPolyOrderB thru maxPolyOrderB do (
          printPrototypeGK(decorator, c, vgk, bName[bInd], polyOrder)
	      )
      )
    ),
    for polyOrder : minPolyOrderB thru maxPolyOrderB do (
      printPrototypeGK(decorator, c, 2, bName[bInd], polyOrder)
    )
  )
);
printf(fh, "EXTERN_C_END ~%")$
close(fh)$

/* gkyl_dg_prim_vars_kernels.h */