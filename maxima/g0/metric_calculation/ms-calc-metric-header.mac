load(stringproc)$
load("bvp_utilities/bvp-util");
load("fem/fem-util");
/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 1$
minCdim_Ser : 3$
maxCdim_Ser : 3$

/* ...... END OF USER INPUTS........ */

bName        : ["Ser","Tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$


fName : "~/max-out/gkyl_calc_metric_kernels.h"$
fh : openw(fName)$
printf(fh, "#pragma once ~%")$
printf(fh, "#include <math.h> ~%")$
printf(fh, "#include <gkyl_util.h> ~%")$
printf(fh, "EXTERN_C_BEG ~%")$
printf(fh, "~%")$

sloc_namelist : ["lo", "in", "up"],

for bInd : 1 thru 1 do (
  for cD : minCdim[bInd] thru maxCdim[bInd] do (
      stencilLoc : getStencilCoords(cD),
      disp(stencilLoc),
      for polyOrder : minPolyOrder[bInd] thru maxPolyOrder[bInd] do (
          disp(printf(false,sconcat("Creating header entry for gij_",bName[bInd]," ~axp~a"),cD,polyOrder)),
          printf(fh, "GKYL_CU_DH void gij_~ax_~a_p~a( const double **xyz, double *gij); ~%", cD, bName[bInd], polyOrder),

          for sI : 1 thru length(stencilLoc) do(
            sloc : stencilLoc[sI],
            printf(fh, "GKYL_CU_DH void gij_~ax_~ay_~az_~ax_~a_p~a( const double **xyz, double *gij); ~%", sloc_namelist[sloc[1]+2], sloc_namelist[sloc[2]+2], sloc_namelist[sloc[3]+2], cD, bName[bInd], polyOrder)
          )

      )
  )
);

printf(fh, "EXTERN_C_END ~%")$
close(fh)$
