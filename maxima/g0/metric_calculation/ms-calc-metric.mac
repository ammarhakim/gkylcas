/* Create kernels to project a Maxwellian onto the DG basis using quadrature. */
load("metric_calculation/calc-metric.mac")$
load("metric_calculation/calc-metric-skin.mac")$
load(stringproc)$


/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 1$
minCdim_Ser : 3$
maxCdim_Ser : 3$

/* ...... END OF USER INPUTS........ */

bName        : ["Ser","Tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$

skinDirs : [[1], [2], [3], [1,2], [1,3], [2,3], [1,2,3]]$
EdgeList : ["lo", "up"]$

for bInd : 1 thru 1 do (
  for cD : minCdim[bInd] thru maxCdim[bInd] do (
      for polyOrder : minPolyOrder[bInd] thru maxPolyOrder[bInd] do (
          disp(printf(false,sconcat("Creating gij_calc_",bName[bInd]," ~axp~a"),cD,polyOrder)),
          fName : sconcat("~/max-out/gij_calc_", bName[bInd], "_", cD, "x_",  "p", polyOrder, ".c"),
          fh : openw(fName),
          printf(fh, "#include \"gkyl_calc_metric_kernels.h\"~%~%"),
          calcMetricCoeffs(fh, cD, bName[bInd], polyOrder),

          /*Begin new skin loop*/
          for sNum : 1 thru length(skinDirs) do(
            sDirList : skinDirs[sNum],
            edges : ["None", "None", "None"],
            sDirNum : length(sDirList),
            for edgeNum1 : 1 thru 2 do(
              edges[sDirList[1]] : EdgeList[edgeNum1],
              if sDirNum=1 then calcMetricCoeffsSkin(fh, cD, bName[bInd], polyOrder, edges, sDirList),
              if sDirNum>1 then(
                for edgeNum2 : 1 thru 2 do(
                  edges[sDirList[2]] : EdgeList[edgeNum2],
                  if sDirNum=2 then calcMetricCoeffsSkin(fh, cD, bName[bInd], polyOrder, edges, sDirList),
                  if sDirNum >2 then(
                    for edgeNum3 : 1 thru 2 do(
                      edges[sDirList[3]] : EdgeList[edgeNum3],
                      if sDirNum=3 then calcMetricCoeffsSkin(fh, cD, bName[bInd], polyOrder, edges, sDirList)
                    )
                  )
                )
              )
            )
         ),
         /*End new skin loop*/
         close(fh)
    )
  )
);
