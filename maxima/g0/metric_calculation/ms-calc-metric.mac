load("metric_calculation/calc-metric.mac")$
load("metric_calculation/calc-metric-skin.mac")$
load(stringproc)$

load("bvp_utilities/bvp-util");
load("fem/fem-util");


/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 1$
minCdim_Ser : 3$
maxCdim_Ser : 3$

/* ...... END OF USER INPUTS........ */

bName        : ["Ser","Tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$


for bInd : 1 thru 1 do (
  for cD : minCdim[bInd] thru maxCdim[bInd] do (
      stencilLoc : getStencilCoords(cD),
      for polyOrder : minPolyOrder[bInd] thru maxPolyOrder[bInd] do (
          disp(printf(false,sconcat("Creating gij_calc_",bName[bInd]," ~axp~a"),cD,polyOrder)),
          fName : sconcat("~/max-out/gij_calc_", bName[bInd], "_", cD, "x_",  "p", polyOrder, ".c"),
          fh : openw(fName),
          printf(fh, "#include \"gkyl_calc_metric_kernels.h\"~%~%"),
          for sI : 1 thru length(stencilLoc) do(
            calcMetricCoeffsSkin(fh, cD, bName[bInd], polyOrder, stencilLoc[sI])
          ),

         close(fh)
    )
  )
);
