/* This script generates the kernels for the surface terms in the diffusion equation
   with 1-cell recovery. Supported diffusion types: isotropic diffusion, grad^2, grad^4, and grad^6 */

load("modal-basis");
load("out-scripts");
load(stringproc)$
load("scifac")$
load("recovery")$
fpprec : 24$
cvars : [x, y, z]$

calcDiffSurfUpdater(dir, fh, funcNm, cdim, basisFun, polyOrder, order, numComp) := block(
  [varsC, bC, NC, cv, surfVars, 
   lst_q0_l, lst_q0_c, lst_q0_r, q0_rec, 
   lst_q1_l, lst_q1_c, lst_q1_r, q1_rec, 
   lst_q2_l, lst_q2_c, lst_q2_r, q2_rec,  
   lst_q3_l, lst_q3_c, lst_q3_r, q3_rec,  
   lst_q4_l, lst_q4_c, lst_q4_r, q4_rec, 
   q_rec, out_c],

  kill(varsC, bC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),

  /* Number of basis monomials. */
  NC : length(bC),

  /* cv = variable to perform recovery in. */
  cv : varsC[dir],
  /* Surface variables to integrate over. */
  surfVars : delete(cv,varsC),

  /* We support diffusion on up to a 5 component array 
     (PKPM 3 components, Isothermal Euler 4 components, Euler 5 components)
     so make a bunch of lists and loop through them based on the number of components */
  lst_q0_l : makelist(q0l[i], i, 0, NC-1),
  lst_q0_c : makelist(q0c[i], i, 0, NC-1),
  lst_q0_r : makelist(q0r[i], i, 0, NC-1),

  q0_rec : calcRecov1CellGen(basisFun, cv, varsC, polyOrder, order - 1, 
    dg(lst_q0_l), dg(lst_q0_c), dg(lst_q0_r)),

  lst_q1_l : makelist(q1l[i], i, 0, NC-1),
  lst_q1_c : makelist(q1c[i], i, 0, NC-1),
  lst_q1_r : makelist(q1r[i], i, 0, NC-1),

  q1_rec : calcRecov1CellGen(basisFun, cv, varsC, polyOrder, order - 1, 
    dg(lst_q1_l), dg(lst_q1_c), dg(lst_q1_r)),

  lst_q2_l : makelist(q2l[i], i, 0, NC-1),
  lst_q2_c : makelist(q2c[i], i, 0, NC-1),
  lst_q2_r : makelist(q2r[i], i, 0, NC-1),

  q2_rec : calcRecov1CellGen(basisFun, cv, varsC, polyOrder, order - 1, 
    dg(lst_q2_l), dg(lst_q2_c), dg(lst_q2_r)),

  lst_q3_l : makelist(q3l[i], i, 0, NC-1),
  lst_q3_c : makelist(q3c[i], i, 0, NC-1),
  lst_q3_r : makelist(q3r[i], i, 0, NC-1),

  q3_rec : calcRecov1CellGen(basisFun, cv, varsC, polyOrder, order - 1, 
    dg(lst_q3_l), dg(lst_q3_c), dg(lst_q3_r)),

  lst_q4_l : makelist(q4l[i], i, 0, NC-1),
  lst_q4_c : makelist(q4c[i], i, 0, NC-1),
  lst_q4_r : makelist(q4r[i], i, 0, NC-1),

  q4_rec : calcRecov1CellGen(basisFun, cv, varsC, polyOrder, order - 1, 
    dg(lst_q4_l), dg(lst_q4_c), dg(lst_q4_r)),

  q_rec : [q0_rec, q1_rec, q2_rec, q3_rec, q4_rec],

  printf(fh, "GKYL_CU_DH void ~a~a_~ax_~a_p~a(const double* w, const double* dx, double D, 
  const double *ql, const double *qc, const double *qr, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, cvars[dir], cdim, basisFun, polyOrder),
  printf(fh, "  // w[NDIM]: Cell-center coordinates~%"),
  printf(fh, "  // dxv[NDIM]: Cell spacing~%"),
  printf(fh, "  // D: Diffusion coefficient in the center cell~%"),
  printf(fh, "  // ql: Input field in the left cell~%"),
  printf(fh, "  // qc: Input field in the center cell~%"),
  printf(fh, "  // qr: Input field in the right cell~%"),
  printf(fh, "  // out: Incremented output~%~%"),

  printf(fh, "  const double dx1 = 2.0/dx[~a]; ~%", dir-1),
  /* 4th order hyperdiffusion has an overall minus sign */
  if order = 4 then (
    printf(fh, "  const double J = -1.0*pow(dx1, ~a.0);~%", order)
  )
  else (
    printf(fh, "  const double J = pow(dx1, ~a.0);~%", order)
  ),  
  printf(fh, "~%"),

  for i : 1 thru numComp do (
    printf(fh, "  const double *q~al = &ql[~a]; ~%", i-1, (i-1)*NC), 
    printf(fh, "  const double *q~ac = &qc[~a]; ~%", i-1, (i-1)*NC), 
    printf(fh, "  const double *q~ar = &qr[~a]; ~%", i-1, (i-1)*NC),  
    printf(fh, "  double *out~a = &out[~a]; ~%", i-1, (i-1)*NC), 
    printf(fh, "~%"),
    out_c : calcInnerProdList(varsC, 1, bC, diff(q_rec[i], cv, order)),
    for j : 1 thru NC do (
      printf(fh, "  out~a[~a] += J*D*(~a); ~%", i-1, j-1, float(expand(out_c[j])))
    ),
    printf(fh, "~%")
  ),
  printf(fh, "} ~%")
);
