load("dg_diffusion/diff-volFuncs-C")$
load(stringproc)$
/* This script calls the functions which calculate the kernels for the diffusion volume
   kernel of an isotropic diffusion equation. It only computes the CFL frequency.
   Supported diffusion types: grad^2, grad^4, grad^6 
   Note: because kernels only compute the CFL frequency, kernels are independent of
   basis type (e.g., Serendipity vs Tensor) and equation system (e.g., Euler vs. PKPM) */

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
maxCdim_Ser : 3$

/* ...... END OF USER INPUTS........ */

bName        : ["ser"]$
minPolyOrder : [minPolyOrder_Ser]$
maxPolyOrder : [maxPolyOrder_Ser]$
minCdim      : [minCdim_Ser]$
maxCdim      : [maxCdim_Ser]$

for bInd : 1 thru length(bName) do (
  for d : minCdim[bInd] thru maxCdim[bInd] do (
    minPolyOrderB : minPolyOrder[bInd],
    maxPolyOrderB : maxPolyOrder[bInd],

    for polyOrder : minPolyOrderB thru maxPolyOrderB do (
      disp(printf(false,sconcat("Creating volume diffusion",bName[bInd]," ~axp~a"),d,polyOrder)),
      fname : sconcat("~/max-out/dg_diffusion_vol_",  d, "x_", bName[bInd], "_p", polyOrder, ".c"),
      fh : openw(fname),
      funcName : sconcat("dg_diffusion_vol_", d, "x_", bName[bInd], "_p", polyOrder),
      calcDiffVolUpdater(fh, funcName, d, bName[bInd], polyOrder, 2),
      close(fh),

      disp(printf(false,sconcat("Creating volume hyper 4th order diffusion",bName[bInd]," ~axp~a"),d,polyOrder)),
      fname : sconcat("~/max-out/dg_diffusion4_vol_",  d, "x_", bName[bInd], "_p", polyOrder, ".c"),
      fh : openw(fname),
      funcName : sconcat("dg_diffusion4_vol_", d, "x_", bName[bInd], "_p", polyOrder),
      calcDiffVolUpdater(fh, funcName, d, bName[bInd], polyOrder, 4),
      close(fh),

      if polyOrder > 1 then (
        disp(printf(false,sconcat("Creating volume hyper 6th order diffusion",bName[bInd]," ~axp~a"),d,polyOrder)),
        fname : sconcat("~/max-out/dg_diffusion6_vol_",  d, "x_", bName[bInd], "_p", polyOrder, ".c"),
        fh : openw(fname),
        funcName : sconcat("dg_diffusion6_vol_", d, "x_", bName[bInd], "_p", polyOrder),
        calcDiffVolUpdater(fh, funcName, d, bName[bInd], polyOrder, 6),
        close(fh)
      )      
    )
  )
);