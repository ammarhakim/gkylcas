/* Generate the header file for diffusion equation kernels. */

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
maxCdim_Ser : 3$

/* Tensor product basis. */
/* Note that Serendipity, p = 1, is equivalent to Tensor */
/* Thus no need to calculate p = 1 Tensor basis */
/* Also in 1D there is no difference between Serendipity and Tensor */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 2$
maxCdim_Tensor : 3$

/* ...... END OF USER INPUTS........ */

cvars : [x, y, z]$

bName        : ["ser", "tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$

printVolPrototype(deco, ci, pi) := block([si],
  printf(fh, "~adouble dg_diffusion_vol_~ax_ser_p~a(const double *w, const double *dxv, double D, const double *q, double* GKYL_RESTRICT out); ~%", deco, ci, pi),
  printf(fh, "~adouble dg_diffusion4_vol_~ax_ser_p~a(const double *w, const double *dxv, double D, const double *q, double* GKYL_RESTRICT out); ~%", deco, ci, pi),
  printf(fh, "~adouble dg_diffusion6_vol_~ax_ser_p~a(const double *w, const double *dxv, double D, const double *q, double* GKYL_RESTRICT out); ~%", deco, ci, pi),
  printf(fh, "~%")
)$

printSurfPrototype(deco, ci, bStr, pi) := block([si],
  for si : 1 thru ci do (
    printf(fh, "~avoid dg_diffusion_surf~a_~ax_~a_p~a(const double *w, const double *dxv, 
      double D, const double *ql, const double *qc, const double *qr, double* GKYL_RESTRICT out); ~%", deco, cvars[si], ci, bStr, pi),
    printf(fh, "~avoid dg_diffusion4_surf~a_~ax_~a_p~a(const double *w, const double *dxv, 
      double D, const double *ql, const double *qc, const double *qr, double* GKYL_RESTRICT out); ~%", deco, cvars[si], ci, bStr, pi),
    printf(fh, "~avoid dg_diffusion6_surf~a_~ax_~a_p~a(const double *w, const double *dxv, 
      double D, const double *ql, const double *qc, const double *qr, double* GKYL_RESTRICT out); ~%", deco, cvars[si], ci, bStr, pi),
    printf(fh, "~%"),

    printf(fh, "~avoid dg_diffusion_pkpm_surf~a_~ax_~a_p~a(const double *w, const double *dxv, 
      double D, const double *ql, const double *qc, const double *qr, double* GKYL_RESTRICT out); ~%", deco, cvars[si], ci, bStr, pi),
    printf(fh, "~avoid dg_diffusion4_pkpm_surf~a_~ax_~a_p~a(const double *w, const double *dxv, 
      double D, const double *ql, const double *qc, const double *qr, double* GKYL_RESTRICT out); ~%", deco, cvars[si], ci, bStr, pi),
    printf(fh, "~avoid dg_diffusion6_pkpm_surf~a_~ax_~a_p~a(const double *w, const double *dxv, 
      double D, const double *ql, const double *qc, const double *qr, double* GKYL_RESTRICT out); ~%", deco, cvars[si], ci, bStr, pi),
    printf(fh, "~%"),

    printf(fh, "~avoid dg_diffusion_iso_euler_surf~a_~ax_~a_p~a(const double *w, const double *dxv, 
      double D, const double *ql, const double *qc, const double *qr, double* GKYL_RESTRICT out); ~%", deco, cvars[si], ci, bStr, pi),
    printf(fh, "~avoid dg_diffusion4_iso_euler_surf~a_~ax_~a_p~a(const double *w, const double *dxv, 
      double D, const double *ql, const double *qc, const double *qr, double* GKYL_RESTRICT out); ~%", deco, cvars[si], ci, bStr, pi),
    printf(fh, "~avoid dg_diffusion6_iso_euler_surf~a_~ax_~a_p~a(const double *w, const double *dxv, 
      double D, const double *ql, const double *qc, const double *qr, double* GKYL_RESTRICT out); ~%", deco, cvars[si], ci, bStr, pi),
    printf(fh, "~%"),

    printf(fh, "~avoid dg_diffusion_euler_surf~a_~ax_~a_p~a(const double *w, const double *dxv, 
      double D, const double *ql, const double *qc, const double *qr, double* GKYL_RESTRICT out); ~%", deco, cvars[si], ci, bStr, pi),
    printf(fh, "~avoid dg_diffusion4_euler_surf~a_~ax_~a_p~a(const double *w, const double *dxv, 
      double D, const double *ql, const double *qc, const double *qr, double* GKYL_RESTRICT out); ~%", deco, cvars[si], ci, bStr, pi),
    printf(fh, "~avoid dg_diffusion6_euler_surf~a_~ax_~a_p~a(const double *w, const double *dxv, 
      double D, const double *ql, const double *qc, const double *qr, double* GKYL_RESTRICT out); ~%", deco, cvars[si], ci, bStr, pi),
    printf(fh, "~%")
  )
)$

/* ............ Write out the C header file ............ */
fh : openw("~/max-out/gkyl_dg_diffusion_kernels.h")$

printf(fh, "#pragma once ~%")$
printf(fh, "#include <math.h> ~%")$
printf(fh, "#include <gkyl_util.h> ~%")$
printf(fh, "EXTERN_C_BEG ~%")$
printf(fh, "~%")$

decorator : "GKYL_CU_DH "$
for c : minCdim[1] thru maxCdim[1] do (
  minPolyOrderB : minPolyOrder[1],
  maxPolyOrderB : maxPolyOrder[1],
  for polyOrder : minPolyOrderB thru maxPolyOrderB do (
    printVolPrototype(decorator, c, polyOrder)
  )
);

for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    minPolyOrderB : minPolyOrder[bInd],
    maxPolyOrderB : maxPolyOrder[bInd],
    for polyOrder : minPolyOrderB thru maxPolyOrderB do (
      printSurfPrototype(decorator, c, bName[bInd], polyOrder)
    )
  )
);
printf(fh, "EXTERN_C_END ~%")$
close(fh)$
/* ............ Finished writing out the C header file ............ */