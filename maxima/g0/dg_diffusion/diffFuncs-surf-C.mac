kill(all) $
load("modal-basis")$
load("recovery") $
load(stringproc)$
fpprec : 24$

genDGdiffKernelSurf(fh, dim, basisType, polyOrder, dir) := block(
  [vars,basis,ba,numBasis,subList,De,qRec,kernel,i],
      
  [vars, basis] : loadBasis(basisType, dim, polyOrder),
  ba : basis,
  numBasis : length(ba),

  subList : append(
    makelist(Dxx[i]=D[i-1], i, 1, numBasis),
    makelist(Dyy[i]=D[i-1+numBasis], i, 1, numBasis),
    makelist(Dzz[i]=D[i-1+2*numBasis], i, 1, numBasis),
    makelist(ql[i]=ql[i-1], i, 1, numBasis),
    makelist(qr[i]=qr[i-1], i, 1, numBasis),
    makelist(qc[i]=qc[i-1], i, 1, numBasis)
    ),
  De : [doExpand(Dxx, ba), doExpand(Dyy, ba), doExpand(Dzz, ba)], 

  qRec : calcRecov1CellGen("Ser", vars[dir], vars, polyOrder, 1, dg(ql), dg(qc), dg(qr)),
  kernel : calcInnerProdList(vars, 1, ba, diff(De[dir]*diff(qRec, vars[dir]), vars[dir])),
  
  printf(fh, "#include <gkyl_dg_diffusion_kernels.h>~%~%"),
  printf(fh, "GKYL_CU_DH double~%"),
  printf(fh, sconcat("dg_diffusion_surf", vars[dir],"_", dim, "x_", basisType, "_p", polyOrder,
    "(const double* w, const double* dx,~%")),
  printf(fh, "  const double* D,~%"),
  printf(fh, "  const double* ql, const double* qc, const double* qr,~%"),
  printf(fh, "  double* GKYL_RESTRICT out) ~%"),
  printf(fh, "{~%"),
  printf(fh, "  // w[NDIM]: Cell-center coordinates~%"),
  printf(fh, "  // dxv[NDIM]: Cell spacing~%"),
  printf(fh, "  // D: Diffusion coefficient in the center cell~%"),
  printf(fh, "  // ql: Input field in the left cell~%"),
  printf(fh, "  // qc: Input field in the center cell~%"),
  printf(fh, "  // qr: Input field in the right cell~%"),
  printf(fh, "  // out: Incremented output~%~%"),
  printf(fh, "  const double J = 4/dx[~a]/dx[~a];~%~%", dir-1, dir-1),

  for i : 1 thru numBasis do (
    printf(fh, "  out[~a] += J*(~a);~%", i-1, float(expand(psubst(subList, kernel[i]))))
  ),
  printf(fh, "~%"),

  printf(fh, "  return 0.;~%"),
  printf(fh, "~%"),
  printf(fh, "}~%")
)$
