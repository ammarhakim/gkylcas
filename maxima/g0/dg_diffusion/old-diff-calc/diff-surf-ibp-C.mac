kill(all) $
load("recovery") $
load("basis-precalc/basisSer1x") $
load ("modal-basis") $
load(stringproc)$

minPolyOrder : 1 $
maxPolyOrder : 2 $

d : 1 $
bName : "ser" $

subList : append(
  makelist(D[i]=D[i-1], i, 1, maxPolyOrder+1),
  makelist(ql[i]=ql[i-1], i, 1, maxPolyOrder+1),
  makelist(qr[i]=qr[i-1], i, 1, maxPolyOrder+1),
  makelist(qc[i]=qc[i-1], i, 1, maxPolyOrder+1)
  ) $

for polyOrder : minPolyOrder thru maxPolyOrder do (
  ba : basisC[polyOrder],
  qRecR : calcRecov2CellGen("Ser", x, [x], polyOrder, dg(qc), dg(qr)),
  qRecL : calcRecov2CellGen("Ser", x, [x], polyOrder, dg(ql), dg(qc)),
  De : doExpand(D, ba),
  kernelR : subst(x=0, diff(qRecR,x))*subst(x=1,De*ba) - subst(x=0, qRecR)*subst(x=1,De*diff(ba,x)),
  kernelL : subst(x=0, diff(qRecL,x))*subst(x=-1,De*ba) - subst(x=0, qRecL)*subst(x=-1,De*diff(ba,x)),
  surf : kernelR - kernelL,
  
  fname : sconcat("~/max-out/dg_diffusion_surfx_", d, "x_", bName, "_p", polyOrder, ".c"),
  fh : openw(fname),
  printf(fh, "#include <gkyl_dg_diffusion_kernels.h>~%~%"),
  printf(fh, "GKYL_CU_DH double~%"),
  printf(fh, sconcat("dg_diffusion_surfx_", d, "x_", bName, "_p", polyOrder, "(const double* w, const double* dx,~%")),
  printf(fh, "  const double* D,~%"),
  printf(fh, "  const double* ql, const double* qc, const double* qr,~%"),
  printf(fh, "  double* GKYL_RESTRICT out) ~%"),
  printf(fh, "{~%"),
  printf(fh, "  // w[NDIM]: Cell-center coordinates~%"),
  printf(fh, "  // dxv[NDIM]: Cell spacing~%"),
  printf(fh, "  // D: Diffusion coefficient in the center cell~%"),
  printf(fh, "  // ql: Input field in the left cell~%"),
  printf(fh, "  // qc: Input field in the center cell~%"),
  printf(fh, "  // qr: Input field in the right cell~%"),
  printf(fh, "  // out: Incremented output~%~%"),
  printf(fh, "  const double J = 4/dx[0]/dx[0];~%~%"),

  for i : 1 thru polyOrder + 1 do (
    printf(fh, "  out[~a] += (~a)*J;~%", i-1, float(expand(psubst(subList, surf[i]))))
    ),
  printf(fh, "}~%"),
  close(fh)
  ) $
