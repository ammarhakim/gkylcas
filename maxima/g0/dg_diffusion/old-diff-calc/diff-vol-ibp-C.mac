kill(all) $
load("recovery") $
load("basis-precalc/basisSer1x") $
load ("modal-basis") $
load(stringproc)$

minPolyOrder : 1 $
maxPolyOrder : 2 $

d : 1 $
bName : "ser" $

subList : append(
  makelist(D[i]=D[i-1], i, 1, maxPolyOrder+1),
  makelist(q[i]=q[i-1], i, 1, maxPolyOrder+1)
  ) $

for polyOrder : minPolyOrder thru maxPolyOrder do (
  ba : basisC[polyOrder],
  De : doExpand(D, ba),
  vol : integrate(doExpand(q, ba)*diff(De*diff(ba,x),x), x, -1, 1),
  
  fname : sconcat("~/max-out/dg_diffusion_vol_", d, "x_", bName, "_p", polyOrder, ".c"),
  fh : openw(fname),
  printf(fh, "#include <gkyl_dg_diffusion_kernels.h>~%~%"),
  printf(fh, "GKYL_CU_DH double~%"),
  printf(fh, sconcat("dg_diffusion_vol_", d, "x_", bName, "_p", polyOrder, "(const double* w, const double* dx,~%")),
  printf(fh, "  const double* D, const double* q, double* GKYL_RESTRICT out) ~%"),
  printf(fh, "{~%"),
  printf(fh, "  // w[NDIM]: Cell-center coordinates~%"),
  printf(fh, "  // dxv[NDIM]: Cell spacing~%"),
  printf(fh, "  // D: Diffusion tensor~%"),
  printf(fh, "  // q: Input field~%"),
  printf(fh, "  // out: Incremented output~%~%"),
  printf(fh, "  const double J = 4/dx[0]/dx[0];~%~%"),

  for i : 1 thru polyOrder + 1 do (
    printf(fh, "  out[~a] += (~a)*J;~%", i-1, float(expand(psubst(subList, vol[i]))))
    ),
  printf(fh, "~%  return D[0]*J;~%"),
  printf(fh, "}~%"),
  close(fh)
  ) $