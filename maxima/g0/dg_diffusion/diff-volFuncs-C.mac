load("modal-basis")$
load("out-scripts");
load("utilities")$
load(stringproc)$
fpprec : 24$

/* This script generates the kernels for the diffusion volume
   kernel of an isotropic diffusion equation. It only computes the CFL frequency.
   Supported diffusion types: grad^2, grad^4, grad^6 
   Note: because kernels only compute the CFL frequency, kernels are independent of
   basis type (e.g., Serendipity vs Tensor) and equation system (e.g., Euler vs. PKPM) */

calcDiffVolUpdater(fh, funcNm, cdim, basisFun, polyOrder, order) := block(
  [varsC, bC, NC, polyOrderFact],

  printf(fh, "#include <gkyl_dg_diffusion_kernels.h> ~%"),

  kill(varsC, bC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),

  /* Number of basis monomials. */
  NC : length(bC),

  printf(fh, "GKYL_CU_DH double ~a(const double* w, const double* dx, double D, const double *q, double* GKYL_RESTRICT out) ~%{ ~%", funcNm),
  printf(fh, "  // w[NDIM]: Cell-center coordinates~%"),
  printf(fh, "  // dxv[NDIM]: Cell spacing~%"),
  printf(fh, "  // D: Diffusion coefficient~%"),
  printf(fh, "  // q: Input field~%"),
  printf(fh, "  // out: Incremented output~%~%"),

  polyOrderFact : (polyOrder+1)^order,
  /* Just getting the CFL from (p+1)^order/dx^order. *However* there is an
     *unknown* additional factor for stability. For convenience we use the additional
     factor which typically shows up converting from computational to physical coordinates.
     *But* it is just a coincidence. */
  for i : 1 thru cdim do (
    printf(fh, "  const double dx~a = 2.0/dx[~a]; ~%", i-1, i-1)
  ),
  printf(fh, "  double J = 0.0; ~%", order),
  for i : 1 thru cdim do (
    printf(fh, "  J += pow(dx~a, ~a.0); ~%", i-1, order)
  ),
  printf(fh, "~%  return ~a*D*J; ~%", float(polyOrderFact)),
  printf(fh, "} ~%")
);
