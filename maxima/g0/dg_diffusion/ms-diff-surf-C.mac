load("dg_diffusion/diff-surfFuncs-C")$
load(stringproc)$
/* This script calls the functions which calculate the
   surface kernels for isotropic diffusion. */

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
maxCdim_Ser : 3$

/* Tensor product basis. */
/* Note that Serendipity, p = 1, is equivalent to Tensor */
/* Thus no need to calculate p = 1 Tensor basis */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 2$
maxCdim_Tensor : 3$

/* ...... END OF USER INPUTS........ */

bName        : ["ser", "tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$

cvars : [x, y, z]$

for bInd : 1 thru length(bName) do (
  for d : minCdim[bInd] thru maxCdim[bInd] do (
    minPolyOrderB : minPolyOrder[bInd],
    maxPolyOrderB : maxPolyOrder[bInd],

    for polyOrder : minPolyOrderB thru maxPolyOrderB do (
      disp(printf(false,sconcat("Creating euler pkpm recovery ",bName[bInd]," ~axp~a"),d,polyOrder)),
      for dir : 1 thru d do ( 
        fname : sconcat("~/max-out/dg_diffusion_surf", cvars[dir], "_", d, "x_", bName[bInd], "_p", polyOrder, ".c"),
        fh : openw(fname),
        funcName : sconcat("dg_diffusion_surf"),
        printf(fh, "#include <gkyl_dg_diffusion_kernels.h> ~%"),
        calcDiffSurfUpdater(dir, fh, funcName, d, bName[bInd], polyOrder, 2, 1),
        close(fh),

        fname : sconcat("~/max-out/dg_diffusion_pkpm_surf", cvars[dir], "_", d, "x_", bName[bInd], "_p", polyOrder, ".c"),
        fh : openw(fname),
        funcName : sconcat("dg_diffusion_pkpm_surf"),
        printf(fh, "#include <gkyl_dg_diffusion_kernels.h> ~%"),
        calcDiffSurfUpdater(dir, fh, funcName, d, bName[bInd], polyOrder, 2, 3),
        close(fh),

        fname : sconcat("~/max-out/dg_diffusion_iso_euler_surf", cvars[dir], "_", d, "x_", bName[bInd], "_p", polyOrder, ".c"),
        fh : openw(fname),
        funcName : sconcat("dg_diffusion_iso_euler_surf"),
        printf(fh, "#include <gkyl_dg_diffusion_kernels.h> ~%"),
        calcDiffSurfUpdater(dir, fh, funcName, d, bName[bInd], polyOrder, 2, 4),
        close(fh),

        fname : sconcat("~/max-out/dg_diffusion_euler_surf", cvars[dir], "_", d, "x_", bName[bInd], "_p", polyOrder, ".c"),
        fh : openw(fname),
        funcName : sconcat("dg_diffusion_euler_surf"),
        printf(fh, "#include <gkyl_dg_diffusion_kernels.h> ~%"),
        calcDiffSurfUpdater(dir, fh, funcName, d, bName[bInd], polyOrder, 2, 5),
        close(fh),

        fname : sconcat("~/max-out/dg_diffusion4_surf", cvars[dir], "_", d, "x_", bName[bInd], "_p", polyOrder, ".c"),
        fh : openw(fname),
        funcName : sconcat("dg_diffusion4_surf"),
        printf(fh, "#include <gkyl_dg_diffusion_kernels.h> ~%"),
        calcDiffSurfUpdater(dir, fh, funcName, d, bName[bInd], polyOrder, 4, 1),
        close(fh),

        fname : sconcat("~/max-out/dg_diffusion4_pkpm_surf", cvars[dir], "_", d, "x_", bName[bInd], "_p", polyOrder, ".c"),
        fh : openw(fname),
        funcName : sconcat("dg_diffusion4_pkpm_surf"),
        printf(fh, "#include <gkyl_dg_diffusion_kernels.h> ~%"),
        calcDiffSurfUpdater(dir, fh, funcName, d, bName[bInd], polyOrder, 4, 3),
        close(fh),

        fname : sconcat("~/max-out/dg_diffusion4_iso_euler_surf", cvars[dir], "_", d, "x_", bName[bInd], "_p", polyOrder, ".c"),
        fh : openw(fname),
        funcName : sconcat("dg_diffusion4_iso_euler_surf"),
        printf(fh, "#include <gkyl_dg_diffusion_kernels.h> ~%"),
        calcDiffSurfUpdater(dir, fh, funcName, d, bName[bInd], polyOrder, 4, 4),
        close(fh),

        fname : sconcat("~/max-out/dg_diffusion4_euler_surf", cvars[dir], "_", d, "x_", bName[bInd], "_p", polyOrder, ".c"),
        fh : openw(fname),
        funcName : sconcat("dg_diffusion4_euler_surf"),
        printf(fh, "#include <gkyl_dg_diffusion_kernels.h> ~%"),
        calcDiffSurfUpdater(dir, fh, funcName, d, bName[bInd], polyOrder, 4, 5),
        close(fh),

        if polyOrder > 1 then (
          fname : sconcat("~/max-out/dg_diffusion6_surf", cvars[dir], "_", d, "x_", bName[bInd], "_p", polyOrder, ".c"),
          fh : openw(fname),
          funcName : sconcat("dg_diffusion6_surf"),
          printf(fh, "#include <gkyl_dg_diffusion_kernels.h> ~%"),
          calcDiffSurfUpdater(dir, fh, funcName, d, bName[bInd], polyOrder, 6, 1),
          close(fh),

          fname : sconcat("~/max-out/dg_diffusion6_pkpm_surf", cvars[dir], "_", d, "x_", bName[bInd], "_p", polyOrder, ".c"),
          fh : openw(fname),
          funcName : sconcat("dg_diffusion6_pkpm_surf"),
          printf(fh, "#include <gkyl_dg_diffusion_kernels.h> ~%"),
          calcDiffSurfUpdater(dir, fh, funcName, d, bName[bInd], polyOrder, 6, 3),
          close(fh),

          fname : sconcat("~/max-out/dg_diffusion6_iso_euler_surf", cvars[dir], "_", d, "x_", bName[bInd], "_p", polyOrder, ".c"),
          fh : openw(fname),
          funcName : sconcat("dg_diffusion6_iso_euler_surf"),
          printf(fh, "#include <gkyl_dg_diffusion_kernels.h> ~%"),
          calcDiffSurfUpdater(dir, fh, funcName, d, bName[bInd], polyOrder, 6, 4),
          close(fh),

          fname : sconcat("~/max-out/dg_diffusion6_euler_surf", cvars[dir], "_", d, "x_", bName[bInd], "_p", polyOrder, ".c"),
          fh : openw(fname),
          funcName : sconcat("dg_diffusion6_euler_surf"),
          printf(fh, "#include <gkyl_dg_diffusion_kernels.h> ~%"),
          calcDiffSurfUpdater(dir, fh, funcName, d, bName[bInd], polyOrder, 6, 5),
          close(fh)
        )
      )
    )
  )
);
