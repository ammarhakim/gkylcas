kill(all)$
load("dg_diffusion/diffFuncs-surf")$

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
maxCdim_Ser : 3$
vDims_vlasov_Ser : [[1,2,3], [2,3], []]$
vDims_gk_Ser     : [[1,2], [2], [2]]$

/* Tensor order basis. No need to generate p=1. */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
maxCdim_Tensor : 0$
vDims_vlasov_Tensor : [[], [], []]$
vDims_gk_Tensor     : [[], [], []]$

/* ...... END OF USER INPUTS........ */

/* To generate other bases, just add corresponding column to arrays below. */
bName        : ["ser", "tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser     , minCdim_Tensor     ]$
maxCdim      : [maxCdim_Ser     , maxCdim_Tensor     ]$
vDims        : [ [[[0],[0],[0]], vDims_vlasov_Ser, vDims_gk_Ser], [[[0],[0],[0]], vDims_vlasov_Tensor, vDims_gk_Tensor] ]$
vspaces      : ["", "vlasov", "gyrokinetic"]$
dirVars      : [ [[[x]],[[x,y]],[[x,y,z]]],
                 [[[x,vx],[x,vx,vy],[x,vx,vy,vz]],[[x,y,vx,vy],[x,y,vx,vy,vz]],[[x,y,z,vx,vy,vz]]],
                 [[[x,vpar],[x,vpar,mu]],[[x,y,vpar,mu]],[[x,y,z,vpar,mu]]]  ]$

for bInd : 1 thru length(bName) do (
  for polyOrder : minPolyOrder[bInd] thru maxPolyOrder[bInd] do (
    for cdim : minCdim[bInd] thru maxCdim[bInd] do (
      vDimLst : vDims[bInd],
      for vTidx : 1 thru length(vDimLst) do (
        for vI : 1 thru length(vDimLst[vTidx][cdim]) do (
          vdim : vDimLst[vTidx][cdim][vI],
          /* To apply applying diffusion in velocity space replace cdim with
             cdim+vdim in the loop upper limit below. If you wish the diffusion
             coefficient to depend on velocity space, make that change in the
             function that generates the kernel too. */
          for dir : 1 thru cdim do (
            dirVar : dirVars[vTidx][cdim][vI][dir], 
            vdimStr : "",  vspaceStr : "",
            if vdim > 0 then (
              vdimStr : sconcat(vdim,"v"),
              vspaceStr : sconcat("_",vspaces[vTidx])
            ),

            fname : sconcat("~/max-out/dg_diffusion_order2",vspaceStr,"_surf", dirVar,"_", cdim, "x", vdimStr,"_", bName[bInd], "_p", polyOrder, ".c"),
            funcName : sconcat("dg_diffusion_order2",vspaceStr,"_surf", dirVar,"_", cdim, "x", vdimStr,"_", bName[bInd], "_p", polyOrder),
            fh : openw(fname),
            print("Generating:", fname),
            genDGdiffKernelSurf(fh, funcName, cdim, vdim, bName[bInd], polyOrder, vspaces[vTidx], dir, 2),
            close(fh),

            fname : sconcat("~/max-out/dg_diffusion_order4",vspaceStr,"_surf", dirVar,"_", cdim, "x", vdimStr,"_", bName[bInd], "_p", polyOrder, ".c"),
            funcName : sconcat("dg_diffusion_order4",vspaceStr,"_surf", dirVar,"_", cdim, "x", vdimStr,"_", bName[bInd], "_p", polyOrder),
            fh : openw(fname),
            print("Generating:", fname),
            genDGdiffKernelSurf(fh, funcName, cdim, vdim, bName[bInd], polyOrder, vspaces[vTidx], dir, 4),
            close(fh),

            if polyOrder > 1 then (
              fname : sconcat("~/max-out/dg_diffusion_order6",vspaceStr,"_surf", dirVar,"_", cdim, "x", vdimStr,"_", bName[bInd], "_p", polyOrder, ".c"),
              funcName : sconcat("dg_diffusion_order6",vspaceStr,"_surf", dirVar,"_", cdim, "x", vdimStr,"_", bName[bInd], "_p", polyOrder),
              fh : openw(fname),
              print("Generating:", fname),
              genDGdiffKernelSurf(fh, funcName, cdim, vdim, bName[bInd], polyOrder, vspaces[vTidx], dir, 6),
              close(fh)
            )
          )
        )
      )
    )
  )
)$
