/**
 * Compute the polarization density given n_0, m, B and phi.
 * 
 */
load("modal-basis");
load("out-scripts");
fpprec : 24$

gen_pol_den_kernel(fh, funcNm, dim, basisFun, polyOrder) := block(
  [vars,basis_p,numB_p,basis,numB,phi_e,dimPerp,varsPerp,varCombos,epsSup_l,
   eps,eps_e,i,j,varsSorted,epsNew,isNew,k,rdx_ij,ijSorted,pol_den_c],

  /* Load a higher order tensor basis to represent phi. */
  [vars, basis_p] : loadBasis("tensor", dim, polyOrder+1),
  numB_p : length(basis_p),

  /* Load basis to represent other quantities. */
  [vars, basis] : loadBasis(basisFun, dim, polyOrder),
  numB : length(basis),

  printf(fh, "void ~a(const double *dx, const double *epsilon, const double *phi, double *out) ~%{ ~%", funcNm),
  printf(fh, "  // dx: cell lengths.~%"),
  printf(fh, "  // epsilon: polarization weight, sum_s jacobgeo*(n_s*m_s/B^2)*g^{ij}.~%"),
  printf(fh, "  // phi: electrostatic potential.~%"),
  printf(fh, "  // out: polarization density.~%~%"),

  phi_e : doExpand1(phi, basis_p),

  dimPerp : max(1,dim-1),
  varsPerp : makelist(vars[i],i,1,dimPerp),

  /* Pointers to components of (symmetric) permittivity tensor. */
  varCombos : listify(cartesian_product(setify(varsPerp),setify(varsPerp))),
  epsSup_l  : unique(makelist(sort(varCombos[i]),i,1,length(varCombos))),
  eps : [],  eps_e : [],
  for i : 1 thru dimPerp do (
    eps   : endcons([],eps),
    eps_e : endcons([],eps_e),
    for j : 1 thru dimPerp do (
      varsSorted : sort([varsPerp[i],varsPerp[j]]),
      epsNew : eval_string(simplode(["eps",varsSorted[1],varsSorted[2]])),
      isNew : true,
      for k : 1 thru length(eps) do (
        if (isNew) and (length(sublist(eps[k], lambda([x], x=epsNew)))>0) then ( isNew : false )
      ),
      eps[i] : endcons(epsNew,eps[i]),
      if isNew then (
        idx : sublist_indices(epsSup_l, lambda([w], w=varsSorted))[1],
        printf(fh, "  const double *~a = &epsilon[~a];~%", eps[i][j], (idx-1)*numB)
      ),
      eps_c : makelist(eps[i][j][k-1],k,1,numB),
      eps_e[i] : endcons(doExpand(eps_c,basis), eps_e[i])
    )
  ),
  printf(fh, "~%"),

  /* Calculate the volume term. */
  rdx_ij : [],
  for i : 1 thru dimPerp do (
    rdx_ij : endcons([],rdx_ij),
    for j : 1 thru dimPerp do (
      ijSorted : sort([i-1,j-1]),
      rdxNew : eval_string(simplode([rdx,ijSorted[1],ijSorted[2]])),
      isNew : true,
      for k : 1 thru length(rdx_ij) do (
        if (isNew) and (length(sublist(rdx_ij[k], lambda([x], x=rdxNew)))>0) then ( isNew : false )
      ),
      rdx_ij[i] : endcons(rdxNew,rdx_ij[i]),
      if isNew then (
        printf(fh, "  double ~a = 4.0/(dx[~a]*dx[~a]);~%", rdx_ij[i][j], i-1, j-1)
      )
    )
  ),
  printf(fh, "~%"),

  pol_den_c : makelist(0,k,1,numB),
  for i : 1 thru dimPerp do (
    for j : 1 thru dimPerp do (
      pol_den_e : -diff(eps_e[i][j]*diff(phi_e,vars[j]),vars[i]),
      pol_den_c : pol_den_c+rdx_ij[i][j]*calcInnerProdList(vars,1,basis,pol_den_e)
    )
  ),

  writeCExprs1(out, pol_den_c),
  printf(fh, "~%"),

  printf(fh, "}~%"),
  printf(fh, "~%")

)$
