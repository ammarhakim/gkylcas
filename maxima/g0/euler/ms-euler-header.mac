/* Generate the header file for euler equation kernels. */

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
maxCdim_Ser : 3$

/* Tensor product basis. */
/* Note that Serendipity, p = 1, is equivalent to Tensor */
/* Thus no need to calculate p = 1 Tensor basis */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
maxCdim_Tensor : 3$

/* ...... END OF USER INPUTS........ */

cvars : [x, y, z]$

bName        : ["ser", "tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$

printPrototype(deco, ci, vi, bStr, pi) := block([si],

  printf(fh, "~avoid euler_pressure_~ax_~a_p~a(const double gas_gamma, const double *uvar, const double *statevec, double* pressure); ~%", deco, ci, bStr, pi),
  printf(fh, "~adouble euler_vol_~ax_~a_p~a(const double *w, const double *dxv, const double gas_gamma, const double *uvar, const double *pvar, const double *statevec, double* GKYL_RESTRICT out); ~%", deco, ci, bStr, pi),
  for si : 1 thru ci do (
    printf(fh, "~avoid euler_surf~a_~ax_~a_p~a(const double *w, const double *dxv, const double gas_gamma, const double *ul, const double *uc, const double *ur, const double *pl, const double *pc, const double *pr, const double *statevecl, const double *statevecc, const double *statevecr, double* GKYL_RESTRICT out); ~%", deco, cvars[si], ci, bStr, pi)
  ),

  printf(fh, "~%"),

  printf(fh, "~adouble euler_iso_vol_~ax_~a_p~a(const double *w, const double *dxv, const double vth, const double *uvar, const double *statevec, double* GKYL_RESTRICT out); ~%", deco, ci, bStr, pi),
  for si : 1 thru ci do (
    printf(fh, "~avoid euler_iso_surf~a_~ax_~a_p~a(const double *w, const double *dxv, const double vth, const double *uvarl, const double *uvarc, const double *uvarr, const double *statevecl, const double *statevecc, const double *statevecr, double* GKYL_RESTRICT out); ~%", deco, cvars[si], ci, bStr, pi)
  ),

  printf(fh, "~%"),

  printf(fh, "~avoid euler_pkpm_prim_vars_~ax_~a_p~a(const double *bvar, const double *vlasov_pkpm_moms, const double *statevec, 
  double* u_i, double* p_ij, double* T_ij, double* rho_inv, double* T_perp_over_m, double* T_perp_over_m_inv); ~%", deco, ci, bStr, pi),
  printf(fh, "~avoid euler_pkpm_source_~ax_~a_p~a(const double *qmem, const double *vlasov_pkpm_moms, const double *euler_pkpm, double* out); ~%", deco, ci, bStr, pi),
  printf(fh, "~adouble euler_pkpm_vol_~ax_~a_p~a(const double *w, const double *dxv, const double *u_i, const double *div_p, const double *statevec, double* GKYL_RESTRICT out); ~%", deco, ci, bStr, pi),
  printf(fh, "~avoid pkpm_dist_mirror_force_~ax1v_~a_p~a(const double* T_perp_over_m, const double* T_perp_over_m_inv, const double* f, const double* F_k_p_1, 
  double* g_dist_source, double* F_k_m_1); ~%", deco, ci, bStr, pi),
  for si : 1 thru ci do (
    printf(fh, "~avoid euler_pkpm_recovery_~a_~ax_~a_p~a(const double *dxv, double nuHyp, 
  const double *bvarl, const double *bvarc, const double *bvarr, 
  const double *u_il, const double *u_ic, const double *u_ir, 
  const double *p_ijl, const double *p_ijc, const double *p_ijr, 
  const double *vlasov_pkpm_momsl, const double *vlasov_pkpm_momsc, const double *vlasov_pkpm_momsr, 
  const double *statevecl, const double *statevecc, const double *statevecr, 
  const double *rho_inv, const double *T_perp_over_m, const double *T_perp_over_m_inv, 
  const double *nu, const double *nu_vthsq, 
  double* div_p, double* pkpm_accel_vars); ~%", deco, cvars[si], ci, bStr, pi),  
    printf(fh, "~avoid euler_pkpm_surf~a_~ax_~a_p~a(const double *w, const double *dxv, 
  const double *u_il, const double *u_ic, const double *u_ir, 
  const double *T_ijl, const double *T_ijc, const double *T_ijr, 
  const double *statevecl, const double *statevecc, const double *statevecr, double* GKYL_RESTRICT out); ~%", deco, cvars[si], ci, bStr, pi)
  ),

  printf(fh, "~%")
)$

/* ............ Write out the C header file ............ */
fh : openw("~/max-out/gkyl_euler_kernels.h")$

printf(fh, "#pragma once ~%")$
printf(fh, "#include <math.h> ~%")$
printf(fh, "#include <gkyl_util.h> ~%")$
printf(fh, "EXTERN_C_BEG ~%")$
printf(fh, "~%")$

decorator : "GKYL_CU_DH "$
for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (

    minPolyOrderB : minPolyOrder[bInd],
    maxPolyOrderB : maxPolyOrder[bInd],

    for polyOrder : minPolyOrderB thru maxPolyOrderB do (
      printPrototype(decorator, c, v, bName[bInd], polyOrder)
    )
  )
);
printf(fh, "EXTERN_C_END ~%")$
close(fh)$
/* ............ Finished writing out the C header file ............ */