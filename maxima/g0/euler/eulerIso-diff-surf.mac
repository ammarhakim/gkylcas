kill(all) $
load("recovery") $
load ("modal-basis") $
load(stringproc)$

minPolyOrder : 1 $
maxPolyOrder : 2 $

dirs : [[x], [x,y], [x,y,z]] $
bName : "ser" $

for polyOrder : minPolyOrder thru maxPolyOrder do (
  for ndim : 1 thru length(dirs) do (
    load(sconcat("basis-precalc/basisSer", ndim, "x")),
    ba : basisC[polyOrder],
    numBasis : length(ba),
    subList : append(
      makelist(Dxx[i]=D[i-1+1*numbasis], i, 1, numBasis),
      makelist(Dyy[i]=D[i-1+2*numBasis], i, 1, numBasis),
      makelist(Dzz[i]=D[i-1+3*numBasis], i, 1, numBasis),
      makelist(uvarxl[i]=uvarxl[i-1], i, 1, numBasis),
      makelist(uvarxr[i]=uvarxr[i-1], i, 1, numBasis),
      makelist(uvarxc[i]=uvarxc[i-1], i, 1, numBasis),
      makelist(uvaryl[i]=uvaryl[i-1], i, 1, numBasis),
      makelist(uvaryr[i]=uvaryr[i-1], i, 1, numBasis),
      makelist(uvaryc[i]=uvaryc[i-1], i, 1, numBasis),
      makelist(uvarzl[i]=uvarzl[i-1], i, 1, numBasis),
      makelist(uvarzr[i]=uvarzr[i-1], i, 1, numBasis),
      makelist(uvarzc[i]=uvarzc[i-1], i, 1, numBasis)
      ),
    De : [doExpand(Dxx, ba), doExpand(Dyy, ba), doExpand(Dzz, ba)],
    for dir : 1 thru ndim do (
      fname : sconcat("~/max-out/dg_euleriso_diffusion_surf", dirs[ndim][dir],"_",
        ndim, "x_", bName, "_p", polyOrder, ".c"),
      print("Generating:", fname),

      if(ndim >= 1) then (uxRecX : calcRecov1CellGen("Ser", x, dirs[ndim], polyOrder,
        1, dg(uvarxl), dg(uvarxc), dg(uvarxr))),
      if(ndim >= 2) then (uxRecY : calcRecov1CellGen("Ser", y, dirs[ndim], polyOrder,
        1, dg(uvaryl), dg(uvaryc), dg(uvaryr))),
      if(ndim >= 3) then (uxRecZ : calcRecov1CellGen("Ser", z, dirs[ndim], polyOrder,
        1, dg(uvarzl), dg(uvarzc), dg(uvarzr))),

      if(ndim = 1) then (tmp : diff(uxRecX, x, 2)),
      if(ndim = 2) then (tmp : diff(uxRecX, x, 2) + diff(uxRecY, y, 2)),
      if(ndim = 3) then (tmp : diff(uxRecX, x, 2) + diff(uxRecY, y, 2) + diff(uxRecZ, z, 2)),
      kernel : mu*calcInnerProdList(dirs[ndim], 1, ba, tmp),
      /* kernel : 4*mu*calcInnerProdList([x,y,z], 1, ba, tmp), */

      fh : openw(fname),
      printf(fh, "#include <dg_euleriso_diffusion_kernels.h>~%~%"),
      printf(fh, "GKYL_CU_DH void~%"),
      printf(fh, sconcat("dg_euleriso_diffusion_surf", dirs[ndim][dir],"_",
          ndim, "x_", bName, "_p", polyOrder,
          "(const double* w, const double* dx,~%")),
      printf(fh, "  const double* D_in,~%"),
      printf(fh, "  const double* uvarl, const double* uvarc, const double* uvarr,~%"),
      printf(fh, "  const double* statevecl, const double* statevecc, const double* statevecr,~%"),
      printf(fh, "  double* GKYL_RESTRICT out) ~%"),
      printf(fh, "{~%"),
      printf(fh, "  // w[NDIM]: Cell-center coordinates~%"),
      printf(fh, "  // dx[NDIM]: Cell spacing~%"),
      printf(fh, "  // D: Diffusion coefficient in the center cell~%"),
      printf(fh, "  // uvarl: Input velocity in the left cell~%"),
      printf(fh, "  // uvarc: Input velocity in the center cell~%"),
      printf(fh, "  // uvarr: Input velocity in the right cell~%"),
      printf(fh, "  // statevecl: Input field in the left cell~%"),
      printf(fh, "  // statevecc: Input field in the center cell~%"),
      printf(fh, "  // statevecr: Input field in the right cell~%"),
      printf(fh, "  // out: Incremented output~%~%"),
      printf(fh, "  const double J = 4/dx[~a]/dx[~a];~%", dir-1, dir-1),
      printf(fh, "  const double *D = &D_in[~a]; ~%", 1*numBasis), /*statevec is [rho rhoux, rhouy, rhouz] so diff kernel is 4x3, however advection eq has no diffusion, so we just work with part of the matrix*/
      printf(fh, "  double mu = D[0]; ~%"),
      printf(fh, "  const double *uvarxl = &uvarl[~a]; ~%", 0*numBasis),
      printf(fh, "  const double *uvaryl = &uvarl[~a]; ~%", 1*numBasis),
      printf(fh, "  const double *uvarzl = &uvarl[~a]; ~%", 2*numBasis),
      printf(fh, "  const double *uvarxc = &uvarc[~a]; ~%", 0*numBasis),
      printf(fh, "  const double *uvaryc = &uvarc[~a]; ~%", 1*numBasis),
      printf(fh, "  const double *uvarzc = &uvarc[~a]; ~%", 2*numBasis),
      printf(fh, "  const double *uvarxr = &uvarr[~a]; ~%", 0*numBasis),
      printf(fh, "  const double *uvaryr = &uvarr[~a]; ~%", 1*numBasis),
      printf(fh, "  const double *uvarzr = &uvarr[~a]; ~%", 2*numBasis),


      /*Note: state vec is [rho, rhoux, rhouy, rhouz] and diffusion only occurs for momentum, so we skip first numBasis idxs*/
      if(ndim >= 1) then(
        for i : 1 thru numBasis do (
          if (is (float(expand(psubst(subList, kernel[i]))) # 0.0)) then (
            printf(fh, "  out[~a] += J*(~a);~%",i+numBasis-1, float(expand(psubst(subList, kernel[i]))))
          )
        )
      ),

      if(ndim >= 2) then(
        for i : 1 thru numBasis do (
          if (is (float(expand(psubst(subList, kernel[i]))) # 0.0)) then (
            printf(fh, "  out[~a] += J*(~a);~%",i+2*numBasis-1, float(expand(psubst(subList, kernel[i]))))
          )
        )
      ),

      if(ndim >= 3) then(
        for i : 1 thru numBasis do (
          if (is (float(expand(psubst(subList, kernel[i]))) # 0.0)) then (
            printf(fh, "  out[~a] += J*(~a);~%",i+3*numBasis-1, float(expand(psubst(subList, kernel[i]))))
          )
        )
      ),

      printf(fh, "}~%"),
      close(fh)
      )
    )
  ) $
