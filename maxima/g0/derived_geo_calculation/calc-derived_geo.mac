load("modal-basis")$
load("recovery")$
load("nodal_operations/nodal_functions")$
load(stringproc)$
load("out-scripts")$

/* Taking DG fields g_ij and |B| as inputs, this kernel will calculate the other geometric quantities
J = det(g_ij))
b_i = g_iz/sqrt(g_zz)
*/

calcDerivedGeo(fh, ndim,basisName, polyOrder) := block(
  /* Get nodes and nodal basis */
/*fh:openw("~/max-out/derived_geo_Ser_3x_p1.c");
ndim:3;
basisName:"Ser";
polyOrder:1;*/

  evNodes : getNodes(basisName, ndim, polyOrder),
  numCoeffs : length(evNodes),


  kill(varsC, varsP, basisC, basisP),
  load(sconcat("basis-precalc/basis", basisName, ndim, "x")),
  [vars,basis] : [varsC, basisC[polyOrder]],


  N2M : calcNodToModWithNodes(basisName, ndim, polyOrder, evNodes),

  calcModCoeff(gij) := float(
    N2M. transpose( makelist(gij[k] , k, 1, numCoeffs))
    ),

  zc_all : [x,y,z],
  zc : makelist(zc_all[k],k,1,ndim),

  mkzlist(S,N) := makelist(S[i],i,0,N-1),


  for i : 1 thru ndim do (
    for j : i  thru ndim do (
      gij_zl: mkzlist(concat(g,i,j), numCoeffs),
      gij_e[i,j]: doExpand(gij_zl, basis)
    )
  ),

  bmag_zl: mkzlist(bmag, numCoeffs),
  bmag_e: doExpand(bmag_zl, basis),

  /* set up for the adjusting function as well*/
  cmag_zl: mkzlist(cmag, numCoeffs),
  cmag_e: doExpand(cmag_zl, basis),
  cmag_ref_zl: mkzlist(cmag_ref, numCoeffs),
  cmag_ref_e: doExpand(cmag_ref_zl, basis),
  J_zl: mkzlist(J, numCoeffs),
  J_e: doExpand(J_zl, basis),
  gzz_zl: mkzlist(gzz, numCoeffs),
  gzz_e: doExpand(gzz_zl, basis),
  /* Done with adjustment setup*/



  sublist : makelist(makelist(zc[m] = evNodes[k][m], m,1,ndim),k,1,numCoeffs),

  numEvNodes : matrix_size(evNodes)[1],

  trimfloat(flt) := if abs(flt) < 1e-15 then 0 else flt ,
  flt(expr) := float(expand(expr)),


  /*Construct g matrix for calculation*/
  /*symmetric_sublist : [[g12_n,g21_n], [g13_n,g31_n], [g23_n,g32_n]];*/
  for n : 1 thru numEvNodes do(
    gmat : zeromatrix (ndim, ndim),
    for i:1 thru ndim do(
      for j:1 thru ndim do(
        gmat[i, j] : concat(g,i,j, "_n")[n-1]
      )
    ),
    /*for i : 1 thru length(symmetric_sublist) do(
      gij : subst(symmetric_sublist[i][1], symmetric_sublist[i][2],gij)
    ),*/
    /*gij_n[n] : gij,*/
    Jsq_ni[n] : determinant(gmat),
    for i:1 thru 3 do(
      for j:1 thru 3 do(
        gr_ni[i,j,n] : fullratsimp(invert(gmat)*determinant(gmat))[i,j]
      )
    ),
    /*New part where we do gzz adjustment*/
    /*disp(determinant(gmat)),*/
    tempz : solve(determinant(gmat)*Bsq_n[n-1]/g33_n[n-1] = Csq_n[n-1], g33_n[n-1]),
    gzz_adjust_ni[n] : rhs(tempz[1])
  ),
  Jsq_ne : makelist(Jsq_ni[i], i, 1, numEvNodes),
  gzz_adjust_ne : makelist(gzz_adjust_ni[i], i, 1, numEvNodes),

  for i:1 thru ndim do(
    for j:1 thru ndim do(
    gr_ne[i,j] : makelist(gr_ni[i,j,k],k,1,numEvNodes)
    )
  ),

  /*Construct expressions for b_i*/
  for i:1 thru ndim do(
    bi_ne[i] : makelist(concat(g,i,3,"_n")[k-1]/sqrt(concat(g,3,3,"_n")[k-1]),k,1,numEvNodes)
  ),

  /*Construct expression for cmag*/
  cmag_ne : makelist((concat(J,"_n")[k-1]*concat(bmag,"_n")[k-1])/sqrt(concat(g,3,3,"_n")[k-1]),k,1,numEvNodes),

  /*disp(cmag_ne),*/

  /* construct expression for adjusting gzz*/
  /*gzz_adjust_ne : rhs(solve(determinant(gmat)*Bsq/g33_n = Csq, g33_n)[1]),*/
  /*disp(gzz_adjust_ne[1]),*/
  /*disp(gmat),*/



  /*printf(fh, "GKYL_CU_DH void derived_geo_~ax_~a_p~a(const double *gij, const double *bmag, double *J, double *Jinv, double *grij, double *bi, double *cmag) ~%{ ~%", ndim, basisName, polyOrder);*/
  /*printf(fh, "#include \"gkyl_calc_derived_geo_kernels.h\"~%~%"),*/
  printf(fh, "GKYL_CU_DH void derived_geo_~ax_~a_p~a(const double *gij, const double *bmag, double *J, double *Jinv, double *grij, double *bi, double *cmag, double *Jtot, double *Jtotinv, double *gxxJ, double *gxyJ, double *gyyJ, double *gxzJ, double *eps2) ~%{ ~%", ndim, basisName, polyOrder),


  /*separate gFld*/
  counter : 0,
  for i : 1 thru ndim do (
    for j : i  thru ndim do (
      printf(fh, "const double *g~a~a  = &gij[~a * ~a];~%", i,j, counter, numCoeffs),
      counter : counter + 1
    )
  ),

  /*separate grFld*/
  counter : 0,
  for i : 1 thru ndim do (
    for j : i  thru ndim do (
      printf(fh, "double *gr~a~a  = &grij[~a * ~a];~%", i,j, counter, numCoeffs),
      counter : counter + 1
    )
  ),

  /*separate bi*/
  for i : 1 thru ndim do (
      printf(fh, "double *b~a  = &bi[~a * ~a];~%", i, i-1, numCoeffs)
  ),

  /*allocate nodal bi, g_ij and g^ij*/
  for i : 1 thru ndim do (
    printf(fh, "double b~a_n[~a]; ~%", i, numEvNodes),
    for j : i  thru ndim do (
      printf(fh, "double g~a~a_n[~a]; ~%", i, j, numEvNodes),
      printf(fh, "double gr~a~a_n[~a]; ~%", i, j, numEvNodes)
    )
  ),

  /*allocate other nodal quantities*/
  printf(fh, "double Jsq_n[~a]; ~%", numEvNodes),
  printf(fh, "double J_n[~a]; ~%", numEvNodes),
  printf(fh, "double Jinv_n[~a]; ~%", numEvNodes),
  printf(fh, "double bmag_n[~a]; ~%", numEvNodes),
  printf(fh, "double cmag_n[~a]; ~%", numEvNodes),
  printf(fh, "double Jtot_n[~a]; ~%", numEvNodes),
  printf(fh, "double Jtotinv_n[~a]; ~%", numEvNodes),
  printf(fh, "double bmaginv_n[~a]; ~%", numEvNodes),
  printf(fh, "double bmaginvsq_n[~a]; ~%", numEvNodes),

  printf(fh, "double gxxJ_n[~a]; ~%", numEvNodes),
  printf(fh, "double gxyJ_n[~a]; ~%", numEvNodes),
  printf(fh, "double gyyJ_n[~a]; ~%", numEvNodes),
  printf(fh, "double gxzJ_n[~a]; ~%", numEvNodes),
  printf(fh, "double eps2_n[~a]; ~%", numEvNodes),

  /* Now make off diagnoal metric coeffs point to their counterpart*/
  for i : 1 thru ndim do (
    for j : 1  thru i do (
      if not(i=j) then(
        printf(fh, "double *g~a~a_n = g~a~a_n; ~%", i, j, j, i)
      )
    )
  ),

  /*Calculate g at nodes*/
  printf(fh, "// Calculate g_ij at nodes ~%"),
  for i : 1 thru ndim do (
    for j : i  thru ndim do (
      for n : 1 thru numEvNodes do (
        printf(fh, " g~a~a_n[~a] = ~a; ~%", i,j,n-1, flt(subst(sublist[n], gij_e[i,j])))
      )
    )
  ),

  /*Calculate bmag at nodes*/
  printf(fh, "// Calculate bmag at nodes ~%"),
  for n : 1 thru numEvNodes do (
    printf(fh, " bmag_n[~a] = ~a; ~%", n-1, flt(subst(sublist[n], bmag_e)))
  ),



  /*Now calculate J at nodes*/
  /*J_ne[1] : subst ("^"=lambda([a, b], pow(a, b)), J_ne[1]);*/
  /*for n : 1 thru numEvNodes do(
    for i : 1 thru length(symmetric_sublist) do(
      J_ne[n] : subst(symmetric_sublist[i][1], symmetric_sublist[i][2],J_ne[n])
    )
  );*/
  printf(fh, "// Calculate Jsq at nodes ~%"),
  writeCExprsNoExpand1(Jsq_n, Jsq_ne),
  printf(fh, "// Jsq at nodes cannot be less than 0 ~%"),
  printf(fh, "for (int k=0; k<~a; k++){ Jsq_n[k] =fmax(Jsq_n[k],0); } ~%", numEvNodes),
  /* Take the square root*/
  printf(fh, "// Take the square root to get J at nodes ~%"),
  for n : 1 thru numEvNodes do(
    printf(fh, "J_n[~a] = sqrt(Jsq_n[~a]); ~%", n-1, n-1)
  ),

  printf(fh, "// Convert nodal to modal for J ~%"),
  temp:calcModCoeff(mkzlist(J_n,numEvNodes)),
  temp2 : makelist(temp[k][1],k,1,numEvNodes),
  writeCExprs1(concat(J),temp2),


  printf(fh, "// Calculate Jinv at nodes ~%"),
  for n : 1 thru numEvNodes do(
    printf(fh, "Jinv_n[~a] = 1.0/J_n[~a]; ~%", n-1, n-1)
  ),
  printf(fh, "// Convert nodal to modal for Jinv ~%"),
  temp:calcModCoeff(mkzlist(Jinv_n,numEvNodes)),
  temp2 : makelist(temp[k][1],k,1,numEvNodes),
  writeCExprs1(concat(Jinv),temp2),


  printf(fh, "// Calculate Jtot at nodes ~%"),
  for n : 1 thru numEvNodes do(
    printf(fh, "Jtot_n[~a] = bmag_n[~a]*J_n[~a]; ~%", n-1, n-1, n-1)
  ),
  printf(fh, "// Convert nodal to modal for Jtot ~%"),
  temp:calcModCoeff(mkzlist(Jtot_n,numEvNodes)),
  temp2 : makelist(temp[k][1],k,1,numEvNodes),
  writeCExprs1(concat(Jtot),temp2),


  printf(fh, "// Calculate Jtotinv at nodes ~%"),
  for n : 1 thru numEvNodes do(
    printf(fh, "Jtotinv_n[~a] = 1/Jtot_n[~a]; ~%", n-1, n-1)
  ),
  printf(fh, "// Convert nodal to modal for Jtotinv ~%"),
  temp:calcModCoeff(mkzlist(Jtotinv_n,numEvNodes)),
  temp2 : makelist(temp[k][1],k,1,numEvNodes),
  writeCExprs1(concat(Jtotinv),temp2),


  printf(fh, "// Calculate bmaginv at nodes ~%"),
  for n : 1 thru numEvNodes do(
    printf(fh, "bmaginv_n[~a] = 1.0/bmag_n[~a]; ~%", n-1, n-1)
  ),

  printf(fh, "// Calculate bmaginvsq at nodes ~%"),
  for n : 1 thru numEvNodes do(
    printf(fh, "bmaginvsq_n[~a] = bmaginv_n[~a]*bmaginv_n[~a]; ~%", n-1, n-1, n-1)
  ),



  printf(fh, "// Calculate g^ij at nodes without factor of 1/det~%"),
  for i : 1 thru ndim do (
    for j : i  thru ndim do (
        writeCExprsNoExpand1(concat(gr,i,j,"_n"), gr_ne[i,j])
    )
  ),
  printf(fh, "// multiply by 1/det~%"),
  for i : 1 thru ndim do (
    for j : i  thru ndim do (
      for n : 1 thru numEvNodes do(
        printf(fh, "gr~a~a_n[~a] = gr~a~a_n[~a]/Jsq_n[~a]; ~%", i, j, n-1, i, j, n-1,n-1)
      )
    )
  ),
  
  printf(fh, "// Convert nodal to modal for g^ij ~%"),
  for i : 1 thru ndim do (
    for j : i thru ndim do (
      temp :  calcModCoeff(mkzlist(concat(gr,i,j,"_n"),numEvNodes)),
      temp2 : makelist(temp[k][1],k,1,numCoeffs),
      writeCExprs1(concat(gr,i,j), temp2),
      printf(fh, "~%")
    )
  ),

  printf(fh, "// Calculate b_i at nodes ~%"),
  for i : 1 thru ndim do (
        writeCExprsNoExpand1(concat(b,i,"_n"), bi_ne[i])
  ),

  printf(fh, "// Convert nodal to modal for b_i ~%"),
  for i : 1 thru ndim do (
      temp :  calcModCoeff(mkzlist(concat(b,i,"_n"),numEvNodes)),
      temp2 : makelist(temp[k][1],k,1,numCoeffs),
      writeCExprs1(concat(b,i), temp2),
      printf(fh, "~%")
  ),


  printf(fh, "// Calculate cmag at nodes ~%"),
  writeCExprsNoExpand1(concat(cmag,"_n"), cmag_ne),
  printf(fh, "// Convert nodal to modal for cmag ~%"),
  temp:calcModCoeff(mkzlist(cmag_n,numEvNodes)),
  temp2 : makelist(temp[k][1],k,1,numEvNodes),
  writeCExprs1(concat(cmag),temp2),


  printf(fh, "// Calculate gxxJ at nodes ~%"),
  for n : 1 thru numEvNodes do(
    printf(fh, "gxxJ_n[~a] = gr11_n[~a]*J_n[~a]; ~%", n-1, n-1, n-1)
  ),
  printf(fh, "// Convert nodal to modal for gxxJ ~%"),
  temp:calcModCoeff(mkzlist(gxxJ_n,numEvNodes)),
  temp2 : makelist(temp[k][1],k,1,numEvNodes),
  writeCExprs1(concat(gxxJ),temp2),

  printf(fh, "// Calculate gxyJ at nodes ~%"),
  for n : 1 thru numEvNodes do(
    printf(fh, "gxyJ_n[~a] = gr12_n[~a]*J_n[~a]; ~%", n-1, n-1, n-1)
  ),
  printf(fh, "// Convert nodal to modal for gxyJ ~%"),
  temp:calcModCoeff(mkzlist(gxyJ_n,numEvNodes)),
  temp2 : makelist(temp[k][1],k,1,numEvNodes),
  writeCExprs1(concat(gxyJ),temp2),

  printf(fh, "// Calculate gyyJ at nodes ~%"),
  for n : 1 thru numEvNodes do(
    printf(fh, "gyyJ_n[~a] = gr22_n[~a]*J_n[~a]; ~%", n-1, n-1, n-1)
  ),
  printf(fh, "// Convert nodal to modal for gyyJ ~%"),
  temp:calcModCoeff(mkzlist(gyyJ_n,numEvNodes)),
  temp2 : makelist(temp[k][1],k,1,numEvNodes),
  writeCExprs1(concat(gyyJ),temp2),

  printf(fh, "// Calculate gxzJ at nodes ~%"),
  for n : 1 thru numEvNodes do(
    printf(fh, "gxzJ_n[~a] = gr13_n[~a]*J_n[~a]; ~%", n-1, n-1, n-1)
  ),
  printf(fh, "// Convert nodal to modal for gxzJ ~%"),
  temp:calcModCoeff(mkzlist(gxzJ_n,numEvNodes)),
  temp2 : makelist(temp[k][1],k,1,numEvNodes),
  writeCExprs1(concat(gxzJ),temp2),


  printf(fh, "// Calculate gzzJ - J/g_zz at nodes ~%"),
  for n : 1 thru numEvNodes do(
    printf(fh, "eps2_n[~a] = gr33_n[~a]*J_n[~a] - J_n[~a]/g33_n[~a]; ~%", n-1, n-1, n-1, n-1, n-1)
  ),
  printf(fh, "// Convert nodal to modal for eps2 ~%"),
  temp:calcModCoeff(mkzlist(eps2_n,numEvNodes)),
  temp2 : makelist(temp[k][1],k,1,numEvNodes),
  writeCExprs1(concat(eps2),temp2),

  printf(fh, " ~%"),
  printf(fh, "}~%"),


  /* do the adjustment of gzz*/
  printf(fh, "GKYL_CU_DH void adjust_gzz_~ax_~a_p~a(const double *cmag, const double *cmag_ref, double *gzz, const double *J, const double *bmag, double* gij) ~%{ ~%", ndim, basisName, polyOrder),


  /*separate gFld*/
  counter : 0,
  for i : 1 thru ndim do (
    for j : i  thru ndim do (
      printf(fh, "  const double *g~a~a  = &gij[~a * ~a];~%", i,j, counter, numCoeffs),
      counter : counter + 1
    )
  ),

  /*allocate nodal g_ij*/
  for i : 1 thru ndim do (
    for j : i  thru ndim do (
      printf(fh, "  double g~a~a_n[~a]; ~%", i, j, numEvNodes)
    )
  ),
  /* Now make off diagnoal metric coeffs point to their counterpart*/
  for i : 1 thru ndim do (
    for j : 1  thru i do (
      if not(i=j) then(
        printf(fh, "  double *g~a~a_n = g~a~a_n; ~%", i, j, j, i)
      )
    )
  ),

  /*Calculate g at nodes*/
  printf(fh, "  // Calculate g_ij at nodes ~%"),
  for i : 1 thru ndim do (
    for j : i  thru ndim do (
      for n : 1 thru numEvNodes do (
        printf(fh, "  g~a~a_n[~a] = ~a; ~%", i,j,n-1, flt(subst(sublist[n], gij_e[i,j])))
      )
    )
  ),

  /*allocate nodal quantities*/
  printf(fh, "  double cmag_n[~a]; ~%", numEvNodes),
  printf(fh, "  double cmag_ref_n[~a]; ~%", numEvNodes),
  printf(fh, "  double gzz_n[~a]; ~%", numEvNodes),
  printf(fh, "  double J_n[~a]; ~%", numEvNodes),
  printf(fh, "  double bmag_n[~a]; ~%", numEvNodes),

  /*Calculate inputs at nodes*/
  printf(fh, "  // Calculate inputs at nodes ~%"),
  for n : 1 thru numEvNodes do (
    printf(fh, "  cmag_n[~a] = ~a; ~%", n-1, flt(subst(sublist[n], cmag_e))),
    printf(fh, "  cmag_ref_n[~a] = ~a; ~%", n-1, flt(subst(sublist[n], cmag_ref_e))),
    /*printf(fh, " gzz_n[~a] = ~a; ~%", n-1, flt(subst(sublist[n], gzz_e))),*/
    printf(fh, "  bmag_n[~a] = ~a; ~%", n-1, flt(subst(sublist[n], bmag_e))),
    printf(fh, "  J_n[~a] = ~a; ~%", n-1, flt(subst(sublist[n], J_e)))
  ),

  /*Check if adjustment is needed*/
  printf(fh, "  bool adjustment = false; ~%"),
  printf(fh, "  for (int i = 0; i <~a; i++){ ~%", numEvNodes),
  printf(fh, "    if (fabs(cmag_n[i] - cmag_ref_n[i])>1e-5){  ~%"),
  printf(fh, "      adjustment = true; ~%"),
  printf(fh, "    } ~%"),
  printf(fh, "  } ~%"),
  printf(fh, "  if  (adjustment ==false) {  ~%"),
  printf(fh, "    return; ~%"),
  printf(fh, "  } ~%"),

  /* Calculate the adjusted bmag*/
  /*printf(fh, "// Adjust bmag at nodes ~%"),
  for n : 1 thru numEvNodes do(
    printf(fh, "bmag_n[~a] = cmag_n[~a] * sqrt(gzz_n[~a]) / J_n[~a]; ~%", n-1, n-1, n-1, n-1)
  ),*/


  /*printf(fh, "// Convert nodal to modal for bmag ~%"),
  temp:calcModCoeff(mkzlist(bmag_n,numEvNodes)),
  temp2 : makelist(temp[k][1],k,1,numEvNodes),
  writeCExprs1(concat(bmag),temp2),*/

  /*Get the temp vars bmag_sq and cmag_sq*/
  printf(fh, "double Bsq_n[~a]; ~%", numEvNodes),
  printf(fh, "double Csq_n[~a]; ~%", numEvNodes),
  printf(fh, "for(int i = 0; i <~a; i++){ ~%", numEvNodes),
  printf(fh, "Bsq_n[~a] = bmag_n[~a]*bmag_n[~a]; ~%",i,i,i  ),
  printf(fh, "Csq_n[~a] = cmag_ref_n[~a]*cmag_ref_n[~a]; ~%",i,i,i ),
  printf(fh, "} ~%", numEvNodes),


  printf(fh, "// Calculate gzz at nodes ~%"),
  writeCExprsNoExpand1(gzz_n, gzz_adjust_ne),

  printf(fh, "// Convert nodal to modal for gzz ~%"),
  temp:calcModCoeff(mkzlist(gzz_n,numEvNodes)),
  temp2 : makelist(temp[k][1],k,1,numEvNodes),
  writeCExprs1(concat(gzz),temp2),

  /*Close adjusting function*/
  printf(fh, " ~%"),
  printf(fh, "}~%")

)$
