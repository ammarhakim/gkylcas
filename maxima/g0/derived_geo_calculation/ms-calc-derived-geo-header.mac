/* Create kernels to project a Maxwellian onto the DG basis using quadrature. */
load(stringproc)$
/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 3$
maxCdim_Ser : 3$

/* ...... END OF USER INPUTS........ */

bName        : ["Ser","Tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$

fName : "~/max-out/gkyl_calc_derived_geo_kernels.h"$
fh : openw(fName)$
printf(fh, "#pragma once ~%")$
printf(fh, "#include <math.h> ~%")$
printf(fh, "#include <stdbool.h> ~%")$
printf(fh, "#include <gkyl_util.h> ~%")$
printf(fh, "EXTERN_C_BEG ~%")$
printf(fh, "~%")$
for bInd : 1 thru 1 do (
  for cD : minCdim[bInd] thru maxCdim[bInd] do (
    for polyOrder : minPolyOrder[bInd] thru maxPolyOrder[bInd] do (
      disp(printf(false,sconcat("Creating header entry for derived_geo_",bName[bInd]," ~axp~a"),cD,polyOrder)),
      printf(fh, "GKYL_CU_DH void derived_geo_~ax_~a_p~a(const double *gij, const double *bmag, double *J, double *Jinv, double *grij, double *bi, double *cmag, double *Jtot, double *Jtotinv, double *gxxJ, double *gxyJ, double *gyyJ, double *gxzJ, double *eps2); ~%", cD, bName[bInd], polyOrder)
    )
  )
);

printf(fh, "EXTERN_C_END ~%")$
close(fh)$
