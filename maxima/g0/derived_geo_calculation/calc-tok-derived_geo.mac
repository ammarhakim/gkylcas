load("modal-basis")$
load("recovery")$
load("nodal_operations/nodal_functions")$
load(stringproc)$
load("out-scripts")$

/* Taking DG fields g_ij and |B| as inputs, this kernel will calculate the other 
geometric quantities such as b_i = g_iz/sqrt(g_zz)
*/

calcDerivedGeo(fh, ndim,basisName, polyOrder) := block(
  [evNodes, numCoeffs, vars, basis, N2M, zc_all, zc, i, j, gij_zl, gij_e,
   bmag_zl, bmag_e, J_zl, J_e, sublist, numEvNodes, n, gmat, Jsq_i, gr_ni, Jsq_ne, gr_ne,
   bi_ne, cmag_ne, counter, temp, temp2],

  evNodes : getNodes(basisName, ndim, polyOrder),
  numCoeffs : length(evNodes),

  load(sconcat("basis-precalc/basis", basisName, ndim, "x")),
  [vars,basis] : [varsC, basisC[polyOrder]],


  N2M : calcNodToModWithNodes(basisName, ndim, polyOrder, evNodes),

  calcModCoeff(gij) := float(
    N2M. transpose( makelist(gij[k] , k, 1, numCoeffs))
    ),

  zc_all : [x,y,z],
  zc : makelist(zc_all[k],k,1,ndim),

  mkzlist(S,N) := makelist(S[i],i,0,N-1),


  for i : 1 thru ndim do (
    for j : i  thru ndim do (
      gij_zl: mkzlist(concat(g,i,j), numCoeffs),
      gij_e[i,j]: doExpand(gij_zl, basis)
    )
  ),

  bmag_zl: mkzlist(bmag, numCoeffs),
  bmag_e: doExpand(bmag_zl, basis),

  J_zl: mkzlist(J, numCoeffs),
  J_e: doExpand(J_zl, basis),

  sublist : makelist(makelist(zc[m] = evNodes[k][m], m,1,ndim),k,1,numCoeffs),

  numEvNodes : matrix_size(evNodes)[1],

  trimfloat(flt) := if abs(flt) < 1e-15 then 0 else flt ,
  flt(expr) := float(expand(expr)),

  /*Construct g matrix for calculation*/
  for n : 1 thru numEvNodes do(
    gmat : zeromatrix (ndim, ndim),
    for i:1 thru ndim do(
      for j:1 thru ndim do(
        gmat[i, j] : concat(g,i,j, "_n")[n-1]
      )
    ),
    Jsq_ni[n] : determinant(gmat),
    for i:1 thru 3 do(
      for j:1 thru 3 do(
        gr_ni[i,j,n] : fullratsimp(invert(gmat)*determinant(gmat))[i,j]
      )
    )
  ),
  Jsq_ne : makelist(Jsq_ni[i], i, 1, numEvNodes),

  for i:1 thru ndim do(
    for j:1 thru ndim do(
    gr_ne[i,j] : makelist(gr_ni[i,j,k],k,1,numEvNodes)
    )
  ),

  /*Construct expressions for b_i*/
  for i:1 thru ndim do(
    bi_ne[i] : makelist(concat(g,i,3,"_n")[k-1]/sqrt(concat(g,3,3,"_n")[k-1]),k,1,numEvNodes)
  ),

  /*Construct expression for cmag*/
  cmag_ne : makelist((concat(J,"_n")[k-1]*concat(bmag,"_n")[k-1])/sqrt(concat(g,3,3,"_n")[k-1]),k,1,numEvNodes),

  printf(fh, "GKYL_CU_DH void tok_derived_geo_~ax_~a_p~a(const double *gij, const double *bmag, const double *J, double *Jinv, double *grij, double *bi, double *cmag, double *Jtot, double *Jtotinv, double *gxxJ, double *gxyJ, double *gyyJ, double *gxzJ, double *eps2) ~%{ ~%", ndim, basisName, polyOrder),

  /*separate gFld*/
  counter : 0,
  for i : 1 thru ndim do (
    for j : i  thru ndim do (
      printf(fh, "const double *g~a~a  = &gij[~a * ~a];~%", i,j, counter, numCoeffs),
      counter : counter + 1
    )
  ),

  /*separate grFld*/
  counter : 0,
  for i : 1 thru ndim do (
    for j : i  thru ndim do (
      printf(fh, "double *gr~a~a  = &grij[~a * ~a];~%", i,j, counter, numCoeffs),
      counter : counter + 1
    )
  ),

  /*separate bi*/
  for i : 1 thru ndim do (
      printf(fh, "double *b~a  = &bi[~a * ~a];~%", i, i-1, numCoeffs)
  ),

  /*allocate nodal bi, g_ij and g^ij*/
  for i : 1 thru ndim do (
    printf(fh, "double b~a_n[~a]; ~%", i, numEvNodes),
    for j : i  thru ndim do (
      printf(fh, "double g~a~a_n[~a]; ~%", i, j, numEvNodes),
      printf(fh, "double gr~a~a_n[~a]; ~%", i, j, numEvNodes)
    )
  ),

  /*allocate other nodal quantities*/
  printf(fh, "double Jsq_n[~a]; ~%", numEvNodes),
  printf(fh, "double J_n[~a]; ~%", numEvNodes),
  printf(fh, "double Jinv_n[~a]; ~%", numEvNodes),
  printf(fh, "double bmag_n[~a]; ~%", numEvNodes),
  printf(fh, "double cmag_n[~a]; ~%", numEvNodes),
  printf(fh, "double Jtot_n[~a]; ~%", numEvNodes),
  printf(fh, "double Jtotinv_n[~a]; ~%", numEvNodes),
  printf(fh, "double bmaginv_n[~a]; ~%", numEvNodes),
  printf(fh, "double bmaginvsq_n[~a]; ~%", numEvNodes),

  printf(fh, "double gxxJ_n[~a]; ~%", numEvNodes),
  printf(fh, "double gxyJ_n[~a]; ~%", numEvNodes),
  printf(fh, "double gyyJ_n[~a]; ~%", numEvNodes),
  printf(fh, "double gxzJ_n[~a]; ~%", numEvNodes),
  printf(fh, "double eps2_n[~a]; ~%", numEvNodes),

  /* Now make off diagnoal metric coeffs point to their counterpart*/
  for i : 1 thru ndim do (
    for j : 1  thru i do (
      if not(i=j) then(
        printf(fh, "double *g~a~a_n = g~a~a_n; ~%", i, j, j, i)
      )
    )
  ),

  /*Calculate g at nodes*/
  printf(fh, "// Calculate g_ij at nodes ~%"),
  for i : 1 thru ndim do (
    for j : i  thru ndim do (
      for n : 1 thru numEvNodes do (
        printf(fh, " g~a~a_n[~a] = ~a; ~%", i,j,n-1, flt(subst(sublist[n], gij_e[i,j])))
      )
    )
  ),

  /*Calculate bmag at nodes*/
  printf(fh, "// Calculate bmag at nodes ~%"),
  for n : 1 thru numEvNodes do (
    printf(fh, " bmag_n[~a] = ~a; ~%", n-1, flt(subst(sublist[n], bmag_e)))
  ),

  /*Calculate J at nodes*/
  printf(fh, "// Calculate J at nodes ~%"),
  for n : 1 thru numEvNodes do (
    printf(fh, " J_n[~a] = ~a; ~%", n-1, flt(subst(sublist[n], J_e)))
  ),


  /* Take the square */
  printf(fh, "// Take the square to get Jsq at nodes ~%"),
  for n : 1 thru numEvNodes do(
    printf(fh, "Jsq_n[~a] = J_n[~a]*J_n[~a]; ~%", n-1, n-1, n-1)
  ),

  printf(fh, "// Calculate Jinv at nodes ~%"),
  for n : 1 thru numEvNodes do(
    printf(fh, "Jinv_n[~a] = 1.0/J_n[~a]; ~%", n-1, n-1)
  ),
  printf(fh, "// Convert nodal to modal for Jinv ~%"),
  temp:calcModCoeff(mkzlist(Jinv_n,numEvNodes)),
  temp2 : makelist(temp[k][1],k,1,numEvNodes),
  writeCExprs1(concat(Jinv),temp2),

  printf(fh, "// Calculate Jtot at nodes ~%"),
  for n : 1 thru numEvNodes do(
    printf(fh, "Jtot_n[~a] = bmag_n[~a]*J_n[~a]; ~%", n-1, n-1, n-1)
  ),
  printf(fh, "// Convert nodal to modal for Jtot ~%"),
  temp:calcModCoeff(mkzlist(Jtot_n,numEvNodes)),
  temp2 : makelist(temp[k][1],k,1,numEvNodes),
  writeCExprs1(concat(Jtot),temp2),

  printf(fh, "// Calculate Jtotinv at nodes ~%"),
  for n : 1 thru numEvNodes do(
    printf(fh, "Jtotinv_n[~a] = 1/Jtot_n[~a]; ~%", n-1, n-1)
  ),
  printf(fh, "// Convert nodal to modal for Jtotinv ~%"),
  temp:calcModCoeff(mkzlist(Jtotinv_n,numEvNodes)),
  temp2 : makelist(temp[k][1],k,1,numEvNodes),
  writeCExprs1(concat(Jtotinv),temp2),

  printf(fh, "// Calculate bmaginv at nodes ~%"),
  for n : 1 thru numEvNodes do(
    printf(fh, "bmaginv_n[~a] = 1.0/bmag_n[~a]; ~%", n-1, n-1)
  ),

  printf(fh, "// Calculate bmaginvsq at nodes ~%"),
  for n : 1 thru numEvNodes do(
    printf(fh, "bmaginvsq_n[~a] = bmaginv_n[~a]*bmaginv_n[~a]; ~%", n-1, n-1, n-1)
  ),

  printf(fh, "// Calculate g^ij at nodes without factor of 1/det~%"),
  for i : 1 thru ndim do (
    for j : i  thru ndim do (
        writeCExprsNoExpand1(concat(gr,i,j,"_n"), gr_ne[i,j])
    )
  ),
  printf(fh, "// multiply by 1/det~%"),
  for i : 1 thru ndim do (
    for j : i  thru ndim do (
      for n : 1 thru numEvNodes do(
        printf(fh, "gr~a~a_n[~a] = gr~a~a_n[~a]/Jsq_n[~a]; ~%", i, j, n-1, i, j, n-1,n-1)
      )
    )
  ),
  
  printf(fh, "// Convert nodal to modal for g^ij ~%"),
  for i : 1 thru ndim do (
    for j : i thru ndim do (
      temp :  calcModCoeff(mkzlist(concat(gr,i,j,"_n"),numEvNodes)),
      temp2 : makelist(temp[k][1],k,1,numCoeffs),
      writeCExprs1(concat(gr,i,j), temp2),
      printf(fh, "~%")
    )
  ),

  printf(fh, "// Calculate b_i at nodes ~%"),
  for i : 1 thru ndim do (
        writeCExprsNoExpand1(concat(b,i,"_n"), bi_ne[i])
  ),

  printf(fh, "// Convert nodal to modal for b_i ~%"),
  for i : 1 thru ndim do (
      temp :  calcModCoeff(mkzlist(concat(b,i,"_n"),numEvNodes)),
      temp2 : makelist(temp[k][1],k,1,numCoeffs),
      writeCExprs1(concat(b,i), temp2),
      printf(fh, "~%")
  ),

  printf(fh, "// Calculate cmag at nodes ~%"),
  writeCExprsNoExpand1(concat(cmag,"_n"), cmag_ne),
  printf(fh, "// Convert nodal to modal for cmag ~%"),
  temp:calcModCoeff(mkzlist(cmag_n,numEvNodes)),
  temp2 : makelist(temp[k][1],k,1,numEvNodes),
  writeCExprs1(concat(cmag),temp2),

  printf(fh, "// Calculate gxxJ at nodes ~%"),
  for n : 1 thru numEvNodes do(
    printf(fh, "gxxJ_n[~a] = gr11_n[~a]*J_n[~a]; ~%", n-1, n-1, n-1)
  ),
  printf(fh, "// Convert nodal to modal for gxxJ ~%"),
  temp:calcModCoeff(mkzlist(gxxJ_n,numEvNodes)),
  temp2 : makelist(temp[k][1],k,1,numEvNodes),
  writeCExprs1(concat(gxxJ),temp2),

  printf(fh, "// Calculate gxyJ at nodes ~%"),
  for n : 1 thru numEvNodes do(
    printf(fh, "gxyJ_n[~a] = gr12_n[~a]*J_n[~a]; ~%", n-1, n-1, n-1)
  ),
  printf(fh, "// Convert nodal to modal for gxyJ ~%"),
  temp:calcModCoeff(mkzlist(gxyJ_n,numEvNodes)),
  temp2 : makelist(temp[k][1],k,1,numEvNodes),
  writeCExprs1(concat(gxyJ),temp2),

  printf(fh, "// Calculate gyyJ at nodes ~%"),
  for n : 1 thru numEvNodes do(
    printf(fh, "gyyJ_n[~a] = gr22_n[~a]*J_n[~a]; ~%", n-1, n-1, n-1)
  ),
  printf(fh, "// Convert nodal to modal for gyyJ ~%"),
  temp:calcModCoeff(mkzlist(gyyJ_n,numEvNodes)),
  temp2 : makelist(temp[k][1],k,1,numEvNodes),
  writeCExprs1(concat(gyyJ),temp2),

  printf(fh, "// Calculate gxzJ at nodes ~%"),
  for n : 1 thru numEvNodes do(
    printf(fh, "gxzJ_n[~a] = gr13_n[~a]*J_n[~a]; ~%", n-1, n-1, n-1)
  ),
  printf(fh, "// Convert nodal to modal for gxzJ ~%"),
  temp:calcModCoeff(mkzlist(gxzJ_n,numEvNodes)),
  temp2 : makelist(temp[k][1],k,1,numEvNodes),
  writeCExprs1(concat(gxzJ),temp2),

  printf(fh, "// Calculate gzzJ - J/g_zz at nodes ~%"),
  for n : 1 thru numEvNodes do(
    printf(fh, "eps2_n[~a] = gr33_n[~a]*J_n[~a] - J_n[~a]/g33_n[~a]; ~%", n-1, n-1, n-1, n-1, n-1)
  ),
  printf(fh, "// Convert nodal to modal for eps2 ~%"),
  temp:calcModCoeff(mkzlist(eps2_n,numEvNodes)),
  temp2 : makelist(temp[k][1],k,1,numEvNodes),
  writeCExprs1(concat(eps2),temp2),

  printf(fh, " ~%"),
  printf(fh, "}~%")

)$

/* Taking DG fields g_ij and |B| as inputs, this kernel will calculate the other 
geometric quantities such as b_i = g_iz/sqrt(g_zz) using evaluation at quadrature nodes
*/

calcDerivedGeo_quad(fh, ndim,basisName, polyOrder) := block(
  [evNodes, numCoeffs, vars, basis, N2M, zc_all, zc, i, j, gij_zl, gij_e,
   bmag_zl, bmag_e, J_zl, J_e, sublist, numEvNodes, n, gmat, Jsq_i, gr_ni, Jsq_ne, gr_ne,
   bi_ne, cmag_ne, counter, temp, temp2],

  evNodes : apply('matrix,getQuadNodes(3,polyOrder)),
  numCoeffs : length(evNodes),

  load(sconcat("basis-precalc/basis", basisName, ndim, "x")),
  [vars,basis] : [varsC, basisC[polyOrder]],


  N2M : calcNodToModWithNodes(basisName, ndim, polyOrder, evNodes),

  calcModCoeff(gij) := float(
    N2M. transpose( makelist(gij[k] , k, 1, numCoeffs))
    ),

  zc_all : [x,y,z],
  zc : makelist(zc_all[k],k,1,ndim),

  mkzlist(S,N) := makelist(S[i],i,0,N-1),


  for i : 1 thru ndim do (
    for j : i  thru ndim do (
      gij_zl: mkzlist(concat(g,i,j), numCoeffs),
      gij_e[i,j]: doExpand(gij_zl, basis)
    )
  ),

  bmag_zl: mkzlist(bmag, numCoeffs),
  bmag_e: doExpand(bmag_zl, basis),

  J_zl: mkzlist(J, numCoeffs),
  J_e: doExpand(J_zl, basis),

  sublist : makelist(makelist(zc[m] = evNodes[k][m], m,1,ndim),k,1,numCoeffs),

  numEvNodes : matrix_size(evNodes)[1],

  trimfloat(flt) := if abs(flt) < 1e-15 then 0 else flt ,
  flt(expr) := float(expand(expr)),

  /*Construct g matrix for calculation*/
  for n : 1 thru numEvNodes do(
    gmat : zeromatrix (ndim, ndim),
    for i:1 thru ndim do(
      for j:1 thru ndim do(
        gmat[i, j] : concat(g,i,j, "_n")[n-1]
      )
    ),
    Jsq_ni[n] : determinant(gmat),
    for i:1 thru 3 do(
      for j:1 thru 3 do(
        gr_ni[i,j,n] : fullratsimp(invert(gmat)*determinant(gmat))[i,j]
      )
    )
  ),
  Jsq_ne : makelist(Jsq_ni[i], i, 1, numEvNodes),

  for i:1 thru ndim do(
    for j:1 thru ndim do(
    gr_ne[i,j] : makelist(gr_ni[i,j,k],k,1,numEvNodes)
    )
  ),

  /*Construct expressions for b_i*/
  for i:1 thru ndim do(
    bi_ne[i] : makelist(concat(g,i,3,"_n")[k-1]/sqrt(concat(g,3,3,"_n")[k-1]),k,1,numEvNodes)
  ),

  /*Construct expression for cmag*/
  cmag_ne : makelist((concat(J,"_n")[k-1]*concat(bmag,"_n")[k-1])/sqrt(concat(g,3,3,"_n")[k-1]),k,1,numEvNodes),

  printf(fh, "GKYL_CU_DH void tok_derived_geo_quad_~ax_~a_p~a(const double *gij, const double *bmag, const double *J, double *Jinv, double *grij, double *bi, double *cmag, double *Jtot, double *Jtotinv, double *gxxJ, double *gxyJ, double *gyyJ, double *gxzJ, double *eps2) ~%{ ~%", ndim, basisName, polyOrder),

  /*separate gFld*/
  counter : 0,
  for i : 1 thru ndim do (
    for j : i  thru ndim do (
      printf(fh, "const double *g~a~a  = &gij[~a * ~a];~%", i,j, counter, numCoeffs),
      counter : counter + 1
    )
  ),

  /*separate grFld*/
  counter : 0,
  for i : 1 thru ndim do (
    for j : i  thru ndim do (
      printf(fh, "double *gr~a~a  = &grij[~a * ~a];~%", i,j, counter, numCoeffs),
      counter : counter + 1
    )
  ),

  /*separate bi*/
  for i : 1 thru ndim do (
      printf(fh, "double *b~a  = &bi[~a * ~a];~%", i, i-1, numCoeffs)
  ),

  /*allocate nodal bi, g_ij and g^ij*/
  for i : 1 thru ndim do (
    printf(fh, "double b~a_n[~a]; ~%", i, numEvNodes),
    for j : i  thru ndim do (
      printf(fh, "double g~a~a_n[~a]; ~%", i, j, numEvNodes),
      printf(fh, "double gr~a~a_n[~a]; ~%", i, j, numEvNodes)
    )
  ),

  /*allocate other nodal quantities*/
  printf(fh, "double Jsq_n[~a]; ~%", numEvNodes),
  printf(fh, "double J_n[~a]; ~%", numEvNodes),
  printf(fh, "double Jinv_n[~a]; ~%", numEvNodes),
  printf(fh, "double bmag_n[~a]; ~%", numEvNodes),
  printf(fh, "double cmag_n[~a]; ~%", numEvNodes),
  printf(fh, "double Jtot_n[~a]; ~%", numEvNodes),
  printf(fh, "double Jtotinv_n[~a]; ~%", numEvNodes),
  printf(fh, "double bmaginv_n[~a]; ~%", numEvNodes),
  printf(fh, "double bmaginvsq_n[~a]; ~%", numEvNodes),

  printf(fh, "double gxxJ_n[~a]; ~%", numEvNodes),
  printf(fh, "double gxyJ_n[~a]; ~%", numEvNodes),
  printf(fh, "double gyyJ_n[~a]; ~%", numEvNodes),
  printf(fh, "double gxzJ_n[~a]; ~%", numEvNodes),
  printf(fh, "double eps2_n[~a]; ~%", numEvNodes),

  /* Now make off diagnoal metric coeffs point to their counterpart*/
  for i : 1 thru ndim do (
    for j : 1  thru i do (
      if not(i=j) then(
        printf(fh, "double *g~a~a_n = g~a~a_n; ~%", i, j, j, i)
      )
    )
  ),

  /*Calculate g at nodes*/
  printf(fh, "// Calculate g_ij at nodes ~%"),
  for i : 1 thru ndim do (
    for j : i  thru ndim do (
      for n : 1 thru numEvNodes do (
        printf(fh, " g~a~a_n[~a] = ~a; ~%", i,j,n-1, flt(subst(sublist[n], gij_e[i,j])))
      )
    )
  ),

  /*Calculate bmag at nodes*/
  printf(fh, "// Calculate bmag at nodes ~%"),
  for n : 1 thru numEvNodes do (
    printf(fh, " bmag_n[~a] = ~a; ~%", n-1, flt(subst(sublist[n], bmag_e)))
  ),

  /*Calculate J at nodes*/
  printf(fh, "// Calculate J at nodes ~%"),
  for n : 1 thru numEvNodes do (
    printf(fh, " J_n[~a] = ~a; ~%", n-1, flt(subst(sublist[n], J_e)))
  ),


  /* Take the square */
  printf(fh, "// Take the square to get Jsq at nodes ~%"),
  for n : 1 thru numEvNodes do(
    printf(fh, "Jsq_n[~a] = J_n[~a]*J_n[~a]; ~%", n-1, n-1, n-1)
  ),

  printf(fh, "// Calculate Jinv at nodes ~%"),
  for n : 1 thru numEvNodes do(
    printf(fh, "Jinv_n[~a] = 1.0/J_n[~a]; ~%", n-1, n-1)
  ),
  printf(fh, "// Convert nodal to modal for Jinv ~%"),
  temp:calcModCoeff(mkzlist(Jinv_n,numEvNodes)),
  temp2 : makelist(temp[k][1],k,1,numEvNodes),
  writeCExprs1(concat(Jinv),temp2),

  printf(fh, "// Calculate Jtot at nodes ~%"),
  for n : 1 thru numEvNodes do(
    printf(fh, "Jtot_n[~a] = bmag_n[~a]*J_n[~a]; ~%", n-1, n-1, n-1)
  ),
  printf(fh, "// Convert nodal to modal for Jtot ~%"),
  temp:calcModCoeff(mkzlist(Jtot_n,numEvNodes)),
  temp2 : makelist(temp[k][1],k,1,numEvNodes),
  writeCExprs1(concat(Jtot),temp2),

  printf(fh, "// Calculate Jtotinv at nodes ~%"),
  for n : 1 thru numEvNodes do(
    printf(fh, "Jtotinv_n[~a] = 1/Jtot_n[~a]; ~%", n-1, n-1)
  ),
  printf(fh, "// Convert nodal to modal for Jtotinv ~%"),
  temp:calcModCoeff(mkzlist(Jtotinv_n,numEvNodes)),
  temp2 : makelist(temp[k][1],k,1,numEvNodes),
  writeCExprs1(concat(Jtotinv),temp2),

  printf(fh, "// Calculate bmaginv at nodes ~%"),
  for n : 1 thru numEvNodes do(
    printf(fh, "bmaginv_n[~a] = 1.0/bmag_n[~a]; ~%", n-1, n-1)
  ),

  printf(fh, "// Calculate bmaginvsq at nodes ~%"),
  for n : 1 thru numEvNodes do(
    printf(fh, "bmaginvsq_n[~a] = bmaginv_n[~a]*bmaginv_n[~a]; ~%", n-1, n-1, n-1)
  ),

  printf(fh, "// Calculate g^ij at nodes without factor of 1/det~%"),
  for i : 1 thru ndim do (
    for j : i  thru ndim do (
        writeCExprsNoExpand1(concat(gr,i,j,"_n"), gr_ne[i,j])
    )
  ),
  printf(fh, "// multiply by 1/det~%"),
  for i : 1 thru ndim do (
    for j : i  thru ndim do (
      for n : 1 thru numEvNodes do(
        printf(fh, "gr~a~a_n[~a] = gr~a~a_n[~a]/Jsq_n[~a]; ~%", i, j, n-1, i, j, n-1,n-1)
      )
    )
  ),
  
  printf(fh, "// Convert nodal to modal for g^ij ~%"),
  for i : 1 thru ndim do (
    for j : i thru ndim do (
      temp :  calcModCoeff(mkzlist(concat(gr,i,j,"_n"),numEvNodes)),
      temp2 : makelist(temp[k][1],k,1,numCoeffs),
      writeCExprs1(concat(gr,i,j), temp2),
      printf(fh, "~%")
    )
  ),

  printf(fh, "// Calculate b_i at nodes ~%"),
  for i : 1 thru ndim do (
        writeCExprsNoExpand1(concat(b,i,"_n"), bi_ne[i])
  ),

  printf(fh, "// Convert nodal to modal for b_i ~%"),
  for i : 1 thru ndim do (
      temp :  calcModCoeff(mkzlist(concat(b,i,"_n"),numEvNodes)),
      temp2 : makelist(temp[k][1],k,1,numCoeffs),
      writeCExprs1(concat(b,i), temp2),
      printf(fh, "~%")
  ),

  printf(fh, "// Calculate cmag at nodes ~%"),
  writeCExprsNoExpand1(concat(cmag,"_n"), cmag_ne),
  printf(fh, "// Convert nodal to modal for cmag ~%"),
  temp:calcModCoeff(mkzlist(cmag_n,numEvNodes)),
  temp2 : makelist(temp[k][1],k,1,numEvNodes),
  writeCExprs1(concat(cmag),temp2),

  printf(fh, "// Calculate gxxJ at nodes ~%"),
  for n : 1 thru numEvNodes do(
    printf(fh, "gxxJ_n[~a] = gr11_n[~a]*J_n[~a]; ~%", n-1, n-1, n-1)
  ),
  printf(fh, "// Convert nodal to modal for gxxJ ~%"),
  temp:calcModCoeff(mkzlist(gxxJ_n,numEvNodes)),
  temp2 : makelist(temp[k][1],k,1,numEvNodes),
  writeCExprs1(concat(gxxJ),temp2),

  printf(fh, "// Calculate gxyJ at nodes ~%"),
  for n : 1 thru numEvNodes do(
    printf(fh, "gxyJ_n[~a] = gr12_n[~a]*J_n[~a]; ~%", n-1, n-1, n-1)
  ),
  printf(fh, "// Convert nodal to modal for gxyJ ~%"),
  temp:calcModCoeff(mkzlist(gxyJ_n,numEvNodes)),
  temp2 : makelist(temp[k][1],k,1,numEvNodes),
  writeCExprs1(concat(gxyJ),temp2),

  printf(fh, "// Calculate gyyJ at nodes ~%"),
  for n : 1 thru numEvNodes do(
    printf(fh, "gyyJ_n[~a] = gr22_n[~a]*J_n[~a]; ~%", n-1, n-1, n-1)
  ),
  printf(fh, "// Convert nodal to modal for gyyJ ~%"),
  temp:calcModCoeff(mkzlist(gyyJ_n,numEvNodes)),
  temp2 : makelist(temp[k][1],k,1,numEvNodes),
  writeCExprs1(concat(gyyJ),temp2),

  printf(fh, "// Calculate gxzJ at nodes ~%"),
  for n : 1 thru numEvNodes do(
    printf(fh, "gxzJ_n[~a] = gr13_n[~a]*J_n[~a]; ~%", n-1, n-1, n-1)
  ),
  printf(fh, "// Convert nodal to modal for gxzJ ~%"),
  temp:calcModCoeff(mkzlist(gxzJ_n,numEvNodes)),
  temp2 : makelist(temp[k][1],k,1,numEvNodes),
  writeCExprs1(concat(gxzJ),temp2),

  printf(fh, "// Calculate gzzJ - J/g_zz at nodes ~%"),
  for n : 1 thru numEvNodes do(
    printf(fh, "eps2_n[~a] = gr33_n[~a]*J_n[~a] - J_n[~a]/g33_n[~a]; ~%", n-1, n-1, n-1, n-1, n-1)
  ),
  printf(fh, "// Convert nodal to modal for eps2 ~%"),
  temp:calcModCoeff(mkzlist(eps2_n,numEvNodes)),
  temp2 : makelist(temp[k][1],k,1,numEvNodes),
  writeCExprs1(concat(eps2),temp2),

  printf(fh, " ~%"),
  printf(fh, "}~%")

)$
