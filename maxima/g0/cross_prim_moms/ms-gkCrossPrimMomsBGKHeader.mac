load("cross_prim_moms/gkCrossPrimMomsBGKFuncs")$
load(stringproc)$

/* Generate a header file for cross primitive moments kernels in the GkBGK. */

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
maxCdim_Ser : 3$
minVdim_Ser : 1$
maxVdim_Ser : 3$
minGkVdim_Ser : 1$
maxGkVdim_Ser : 2$


/* ...... END OF USER INPUTS........ */

bName        : ["ser"]$
minPolyOrder : [minPolyOrder_Ser]$
maxPolyOrder : [maxPolyOrder_Ser]$
minCdim      : [minCdim_Ser]$
maxCdim      : [maxCdim_Ser]$
minVdim      : [minVdim_Ser]$
maxVdim      : [maxVdim_Ser]$
minGkVdim      : [minGkVdim_Ser]$
maxGkVdim      : [maxGkVdim_Ser]$

printPrototypeGK(deco, ci, vi, bStr, pi) := block([si],
  printf(fh, "~avoid gyrokinetic_cross_prim_moms_bgk_~ax~av_~a_p~a(const double beta, const double m_self, const double *prim_moms_self, const double m_other, const double *prim_moms_other, const double *nu_sr, const double *nu_rs, double *prim_moms_cross); ~%", deco, ci, vi, bStr, pi),
  printf(fh, "~%") 
)$

fh : openw("~/max-out/cross_prim_moms/gkyl_gyrokinetic_cross_prim_moms_bgk_kernels.h")$
printf(fh, "#pragma once ~%")$
printf(fh, "#include <math.h> ~%")$
printf(fh, "#include <gkyl_mat.h> ~%")$
printf(fh, "#include <gkyl_util.h> ~%")$
printf(fh, " ~%")$
printf(fh, "EXTERN_C_BEG ~%")$
printf(fh, "~%")$

decorator : "GKYL_CU_DH "$
for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    minPolyOrderB : minPolyOrder[bInd],
    maxPolyOrderB : maxPolyOrder[bInd],
    if c=1 then (
      for vgk : minGkVdim[bInd] thru maxGkVdim[bInd] do (
        for polyOrder : minPolyOrderB thru maxPolyOrderB do (
          printPrototypeGK(decorator, c, vgk, bName[bInd], polyOrder)
	    )
      )
    ) else (
      for polyOrder : minPolyOrderB thru maxPolyOrderB do (
        printPrototypeGK(decorator, c, 2, bName[bInd], polyOrder)
      )
    )
  )
);
printf(fh, "EXTERN_C_END ~%")$
close(fh)$

/* gkyl_gyrokinetic_cross_prim_moms_bgk_kernels.h */
