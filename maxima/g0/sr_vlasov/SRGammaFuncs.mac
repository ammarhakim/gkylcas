/*  Generate kernels for 
    1. u_i^2 (vdim components)
    2. GammaV^2 = 1 + |u_i|^2,
    3. GammaV = sqrt(1 + |u_i|^2),
    where u_i are the spatial components of the four-velocity GammaV*V_drift.
    Uses basis_exp_sq (obtain expansion of A^2 for a DG field A),
    basis_sqrt (obtain expansion of sqrt(A) for a DG field A) */

load("modal-basis");
load("out-scripts");
load("nodal_operations/nodal_functions")$
load(stringproc)$
fpprec : 24$

calc_gammaV_vars(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [bC, NC, VxSq_e, VySq_e, VzSq_e, denom_e],

  kill(varsC, basisC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),

  NC  : length(bC),

  printf(fh, "#include <gkyl_sr_Gamma_kernels.h> ~%"),
  printf(fh, "#include <gkyl_basis_~a_~ax_p~a_exp_sq.h> ~%", basisFun, cdim, polyOrder),
  printf(fh, "#include <gkyl_basis_~a_~ax_p~a_sqrt.h> ~%", basisFun, cdim, polyOrder),
  /* Function declaration with input/output variables. */
  printf(fh, "GKYL_CU_DH void ~a(const double *u_i, double* GKYL_RESTRICT u_i_sq, double* GKYL_RESTRICT GammaV, double* GKYL_RESTRICT GammaV_sq) ~%{ ~%", funcNm),
  printf(fh, "  // u_i:       Input spatial components of bulk four-velocity = GammaV*V_drift. ~%"),
  printf(fh, "  // u_i_sq:    Output squared spatial components of bulk four-velocity = u_i^2. ~%"),
  printf(fh, "  // GammaV:    Output bulk four-velocity Lorentz factor = sqrt(1 + |u_i|^2). ~%"),
  printf(fh, "  // GammaV_sq: Output squared bulk four-velocity Lorentz factor = 1 + |u_i|^2. ~%"),
  printf(fh, " ~%"),

  /* Get pointers to components of velocity (based on how many components are present). */
  for dir : 1 thru vdim do (
    printf(fh, "  const double *V_~a = &u_i[~a]; ~%", dir-1, (dir-1)*NC),
    printf(fh, "  double *V_~a_sq = &u_i_sq[~a]; ~%", dir-1, (dir-1)*NC),
    printf(fh, "  ~a_~ax_p~a_exp_sq(V_~a, V_~a_sq); ~%", basisFun, cdim, polyOrder, dir-1, dir-1),
    printf(fh, " ~%")
  ),

  VxSq_e : doExpand1(V_0_sq, bC),
  VySq_e : doExpand1(V_1_sq, bC),
  VzSq_e : doExpand1(V_2_sq, bC),

  if (vdim = 1) then (  
    denom_e : calcInnerProdList(varsC, 1, bC, 1 + VxSq_e)
  )
  elseif (vdim = 2) then (
    denom_e : calcInnerProdList(varsC, 1, bC, 1 + VxSq_e + VySq_e)
  )
  else (
    denom_e : calcInnerProdList(varsC, 1, bC, 1 + VxSq_e + VySq_e + VzSq_e)
  ),

  writeCExprs1(GammaV_sq, denom_e),
  printf(fh, "~%"),
  flush_output(fh),
  printf(fh, "  ~a_~ax_p~a_sqrt(GammaV_sq, GammaV); ~%", basisFun, cdim, polyOrder),

  printf(fh, "} ~%"),
  printf(fh, " ~%")
)$