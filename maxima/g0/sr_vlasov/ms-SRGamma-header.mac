/* Generate the header file for the relativistic auxiliary variables
   1. Computing the rest-frame density n = GammaV_inv*M0 where 
      GammaV_inv = sqrt(1 - |V_drift|^2)
   2. Computing the bulk four-velocity (GammaV, GammaV*V_drift) using weak division
      of the lab-frame moments M0, M1i and the rest-frame density n. 
   3. Computing the rest-frame pressure = n*T as a velocity moment
   4. Computing the particle Lorentz boost factors gamma = sqrt(1 + p^2) and its inverse. */

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
minVdim_Ser : 1$    /* see begining of v loop below though. */
maxCdim_Ser : 3$
maxVdim_Ser : 3$

/* Tensor product basis. */
/* Note that Serendipity, p = 1, is equivalent to Tensor */
/* Thus no need to calculate p = 1 Tensor basis */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
minVdim_Tensor : 1$    /* see begining of v loop below though. */
maxCdim_Tensor : 0$
maxVdim_Tensor : 0$

/* ...... END OF USER INPUTS........ */

bName        : ["ser","tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
minVdim      : [minVdim_Ser, minVdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$
maxVdim      : [maxVdim_Ser, maxVdim_Tensor]$

printPrototype(deco, ci, vi, bStr, pi) := block([si],
  printf(fh, "~avoid sr_vars_n_set_~ax~av_~a_p~a(int count, struct gkyl_nmat *A, struct gkyl_nmat *rhs, const double *M0, const double *M1i); ~%", deco, ci, vi, bStr, pi),
  printf(fh, "~avoid sr_vars_n_copy_~ax~av_~a_p~a(int count, struct gkyl_nmat *x, const double *M0, double* GKYL_RESTRICT n); ~%", deco, ci, vi, bStr, pi),
  printf(fh, "~avoid sr_vars_GammaV_~ax~av_~a_p~a(const double *u_i, double* GKYL_RESTRICT u_i_sq, double* GKYL_RESTRICT GammaV, double* GKYL_RESTRICT GammaV_sq); ~%", deco, ci, vi, bStr, pi),
  printf(fh, "~avoid sr_vars_pressure_~ax~av_~a_p~a(const double *w, const double *dxv, const double *gamma, const double *gamma_inv, const double *u_i, const double *u_i_sq, const double *GammaV, const double *GammaV_sq, const double *f, double* GKYL_RESTRICT sr_pressure); ~%", deco, ci, vi, bStr, pi),
  printf(fh, "~%") 
)$

printPrototypeLorentz(deco, vi, bStr, pi) := block([si],
  /* Variations of the Lorentz boost factor. */
  printf(fh, "~avoid sr_vars_lorentz_~av_~a_p~a(const double *w, const double *dxv, double* GKYL_RESTRICT gamma, double* GKYL_RESTRICT gamma_inv); ~%", deco, vi, bStr, pi),
  printf(fh, "~%")  
)$

fh : openw("~/max-out/gkyl_sr_Gamma_kernels.h")$
printf(fh, "#pragma once ~%")$
printf(fh, "#include <math.h> ~%")$
printf(fh, "#include <gkyl_mat.h> ~%")$
printf(fh, "#include <gkyl_util.h> ~%")$
printf(fh, "EXTERN_C_BEG ~%")$
printf(fh, "~%")$

decorator : "GKYL_CU_DH "$
for bInd : 1 thru length(bName) do (
  minPolyOrderB : minPolyOrder[bInd],
  maxPolyOrderB : maxPolyOrder[bInd],

  for c : minCdim[bInd] thru maxCdim[bInd] do (
    for v : max(c,minVdim[bInd]) thru maxVdim[bInd] do (
      if (c+v>5 and maxPolyOrderB > 1) then maxPolyOrderB : 1,

      for polyOrder : minPolyOrderB thru maxPolyOrderB do (
        printPrototype(decorator, c, v, bName[bInd], polyOrder)
      )
    )
  ),
  /* Only quadratic particle Lorentz boost kernels for now */
  for v : 1 thru maxVdim[bInd] do ( 
    printPrototypeLorentz(decorator, v, bName[bInd], 2) 
  )
);
printf(fh, "EXTERN_C_END ~%")$
close(fh)$
/* ............ Finished writing out the C header file ............ */
