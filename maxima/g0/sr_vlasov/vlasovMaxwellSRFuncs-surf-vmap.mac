/* This script generates the kernels for the surface term of the v . grad(f) 
   and E + v x B . grad_p(f) advection in configuration and velocity space 
   for the relativistic Vlasov equation where v = d/dp (gamma) = p/gamma and 
   gamma = sqrt(1 + p^2) is the particle Lorentz boost factor. */

load("modal-basis");
load("out-scripts");
load(stringproc)$
load("scifac")$
load("nodal_operations/nodal_functions")$
fpprec : 24$

varsV : [vx, vy, vz]$
cvars : [x, y, z]$
vvars : [vx, vy, vz]$

pVsub : [x=vx,y=vy,z=vz]$

dvdx  : [dv0dx0, dv1dx1, dv2dx2]$
wdx   : [w0dx0, w1dx1, w2dx2]$
dx11 : [dx10, dx11, dx12]$
dv11 : [dv10, dv11, dv12]$

Efld : [E0, E1, E2]$
Bfld : [B0, B1, B2]$

cidx(cdim)      := makelist(i,i,0,cdim-1)$
vidx(cdim,vdim) := makelist(i,i,cdim,cdim+vdim-1)$

/* Helper functions for expanding in basis functions a quantity we know should be sparse  */
/* For example, alpha, the phase space flow only depends on a few phase space coordinates */
doMakeExprLst_a0(vals, S)  := makelist(if vals[i] # 0 then S[a0+i-1] else 0, i, 1, length(vals))$
doMakeExprLst(vals, S)  := makelist(if vals[i] # 0 then S[i-1] else 0, i, 1, length(vals))$
doExpandLst(lst, basis) := sum(lst[i]*basis[i], i, 1, length(basis))$

calcVlasovSRStreamUpdateInDir(dir, fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC, bC, varsP, bP, varsV, bV, NC, NP, NV, 
   cid, vid, cv, vv, surfVars, bSurf, NSurf,
   gamma_e, p_over_gamma_c, p_over_gamma_NoZero, p_over_gamma_NoZero_e, 
   alpha_c, alphaNoZero, alpha_e, fl_e, fc_e, fr_e, 
   Ghat_r_c, GhatNoZero_r, Ghat_r_e, Ghat_l_c, GhatNoZero_l, Ghat_l_e,  
   incr_l, incr_r],

  /* Load the specific desired basis, including the loading of the hybrid basis if p=1 */
  [varsC,bC,varsP,bP] : loadPhaseBasis(basisFun, cdim, vdim, polyOrder),
  /* Number of basis monomials. */
  NP : length(bP),
  NC : length(bC),

  /* polyOrder in velocity space is p=2 for p=1 since we force p=1 to
     mean hybrid basis. */
  if polyOrder=1 then ( 
    [varsV, bV] : loadBasis(basisFun, vdim, 2)
  ) 
  else (
    [varsV, bV] : loadBasis(basisFun, vdim, polyOrder)
  ), 
  bV : subst(pVsub, copylist(bV)),  
  varsV : subst(pVsub, copylist(varsV)), 
  NV : length(bV),

  printf(fh, "GKYL_CU_DH double ~a(const double *w, const double *dxv, const double *jacob_vel_inv, const double *gamma, const double *fl, const double *fc, const double *fr, double* GKYL_RESTRICT out) ~%{ ~%", funcNm),
  printf(fh, "  // w[NDIM]:             Cell-center coordinates.~%"),
  printf(fh, "  // dxv[NDIM]:           Cell spacing.~%"),
  printf(fh, "  // jacob_vel_inv[VDIM]: Inverse velocity space Jacobian in each direction.~%"),
  printf(fh, "  // gamma:               Particle Lorentz boost factor sqrt(1 + p^2).~%"),
  printf(fh, "  // fl/fc/fr:            Input Distribution function in left/center/right cells.~%"),
  printf(fh, "  // out:                 Incremented distribution function in center cell.~%"),

  /* Surface contribution is defined as integral(phi^- Ghat) over the surface. */
  /* cv = variable in direction of surface update. */
  cv : varsP[dir],
  vv : varsV[dir],

  /* Surface variables to integrate over. */
  surfVars : delete(cv,varsP),

  /* Load basis sets for inverse Jacobian in corresponding surface direction, 
     which is p=2 in that one velocity dimension (derivative of cubic C^1 mapping) */
  [varsV_1D, bV_1D] :  loadBasis(basisFun, 1, 2), 
  bV_1D : subst(x=vv, copylist(bV_1D)), 
  NV_1D : length(bV_1D),

  /* Generate surface basis. this produces the ndim-1 orthogonal basis with no vv dependence. */
  if polyOrder=1 then (  /* Force p=1 to use hybrid basis. */
    bSurf : basisFromVars("hyb",surfVars,polyOrder)
  ) else (
    bSurf : basisFromVars(basisFun,surfVars,polyOrder)
  ),
  NSurf : length(bSurf), 

  cid : cidx(cdim),
  vid : vidx(cdim,vdim),
  printf(fh, "  const double dx1~a = 2.0/dxv[~a]; ~%", dir-1, cid[dir]),
  printf(fh, "  const double dv1~a = 2.0/dxv[~a]; ~%", dir-1, vid[dir]),
  printf(fh, "  const double wv = w[~a]; ~%", vid[dir], vid[dir]),
  printf(fh, "  const double *jacob_vel_inv_dir = &jacob_vel_inv[~a]; ~%", NV_1D*(dir-1)),
  printf(fh, "~%"),

  /* Expand inverse velocity space Jacobian in corresponding coordinate */
  jacob_vel_inv_e : doExpand1(jacob_vel_inv_dir, bV_1D), 

  /* Compute p/gamma from input gamma, p/gamma = d/dp gamma */
  gamma_e : doExpand1(gamma, bV), 
  printf(fh, "  double p_over_gamma[~a] = {0.0}; ~%", NV), 
  p_over_gamma_c : calcInnerProdList(varsV, 1, bV, jacob_vel_inv_e*dv11[dir]*diff(gamma_e, vv)), 
  writeCExprs1(p_over_gamma, p_over_gamma_c), 
  /* zero out components of px/gamma which are empty due to derivative */
  p_over_gamma_NoZero : doMakeExprLst(p_over_gamma_c, p_over_gamma),
  p_over_gamma_NoZero_e : doExpandLst(p_over_gamma_NoZero, bV), 

  /* alpha is the phase space flux at the surface. */
  printf(fh, "  double alpha[~a] = {0.0}; ~%", NSurf),
  /* Project alpha_v on the left and right onto surface basis, and print resulting coefficients. */
  alpha_c : fullratsimp(calcInnerProdList(surfVars, 1, bSurf, p_over_gamma_NoZero_e)),
  writeCExprs1(alpha, alpha_c),
  printf(fh, "~%"),
  flush_output(fh),
  /* Zero out components of alpha which are empty. */
  alphaNoZero : doMakeExprLst(alpha_c, alpha),
  alpha_e : doExpandLst(alphaNoZero, bSurf),

  /* Create expansions of f_left, f_center, and f_right on volume basis. */
  fl_e : doExpand1(fl, bP),
  fc_e : doExpand1(fc, bP),
  fr_e : doExpand1(fr, bP),
  printf(fh, "  double Ghat_r[~a]; ~%", NSurf),
  printf(fh, "  double Ghat_l[~a]; ~%", NSurf),
  
  printf(fh, "  if (~a>0) { ~%~%",wv),

  /* Because v > 0, need left edge value */
  /* Evaluate surface projection of Ghat_r = v f_c. */
  Ghat_r_c : calcInnerProdList(surfVars, alpha_e, bSurf, subst(cv=1, fc_e)),
  writeCExprsCollect1lhsc(Ghat_r, Ghat_r_c),
  printf(fh, "~%"),
  flush_output(fh),
  /* Zero out components of Ghat which are empty. */
  GhatNoZero_r : makelistNoZeros1(Ghat_r_c, Ghat_r),
  Ghat_r_e     : doExpand(GhatNoZero_r, bSurf),

  /* Evaluate surface projection of Ghat_l = v f_l. */
  Ghat_l_c : calcInnerProdList(surfVars, alpha_e, bSurf, subst(cv=1, fl_e)),
  writeCExprsCollect1lhsc(Ghat_l, Ghat_l_c),
  printf(fh, "~%"),
  flush_output(fh),
  /* Zero out components of Ghat which are empty. */
  GhatNoZero_l : makelistNoZeros1(Ghat_l_c, Ghat_l),
  Ghat_l_e     : doExpand(GhatNoZero_l, bSurf),

  printf(fh, "  } else { ~%~%"),
  
  /* Because v < 0, need right edge value */
  /* Evaluate surface projection of Ghat_r = v f_r. */
  Ghat_r_c : calcInnerProdList(surfVars, alpha_e, bSurf, subst(cv=-1, fr_e)),
  writeCExprs1(Ghat_r, Ghat_r_c), 
  printf(fh, "~%"),
  flush_output(fh),

  /* Zero out components of Ghat which are empty. */
  GhatNoZero_r : makelistNoZeros1(Ghat_r_c, Ghat_r),
  Ghat_r_e     : doExpand(GhatNoZero_r, bSurf),

  /* Evaluate surface projection of Ghat_l = v f_c. */
  Ghat_l_c : calcInnerProdList(surfVars, alpha_e, bSurf, subst(cv=-1, fc_e)),
  writeCExprs1(Ghat_l, Ghat_l_c), 
  printf(fh, "~%"),
  flush_output(fh),

  /* Zero out components of Ghat which are empty. */
  GhatNoZero_l : makelistNoZeros1(Ghat_l_c, Ghat_l),
  Ghat_l_e     : doExpand(GhatNoZero_l, bSurf),
  
  printf(fh, "  } ~%"),
  /* Compute surface contribution integral(phi^- Ghat) on the right. */
  incr_l : calcInnerProdList(surfVars, 1, subst(cv=-1.0, bP), Ghat_l_e),
  incr_r : calcInnerProdList(surfVars, -1, subst(cv=1.0, bP), Ghat_r_e),
  writeCIncrExprsCollect1lhsc(out, dx11[dir]*incr_l + dx11[dir]*incr_r),    
  printf(fh, "~%"),

  printf(fh, "  return 0.;~%"), /* Return CFL frequency in volume kernel. */
  printf(fh, "~%"),

  printf(fh, "} ~%")
);

calcVlasovSRLorentzUpdateInDir(dir, fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC, bC, varsP, bP, varsV, bV, NC, NP, NV],

  /* Load the specific desired basis, including the loading of the hybrid basis if p=1 */
  [varsC,bC,varsP,bP] : loadPhaseBasis(basisFun, cdim, vdim, polyOrder),
  /* Number of basis monomials. */
  NP : length(bP),
  NC : length(bC),
  pDim : length(varsP),

  /* Identify polyOrder in velocity space as p=2 for p=1 since we force p=1 to
     mean hybrid basis. */
  if polyOrder=1 then ( 
    [varsV, bV] : loadBasis(basisFun, vdim, 2)
  ) 
  else (
    [varsV, bV] : loadBasis(basisFun, vdim, polyOrder)
  ), 
  bV : subst(pVsub, copylist(bV)),  
  varsV : subst(pVsub, copylist(varsV)), 
  NV : length(bV),

  /* Load basis sets for inverse Jacobian in each direction, 
     which are p=2 in one velocity dimension (derivative of cubic C^1 mapping) */
  [varsV_1D, bV_1D] :  loadBasis(basisFun, 1, 2), 
  bV_vx : subst(x=vx, copylist(bV_1D)), 
  bV_vy : subst(x=vy, copylist(bV_1D)), 
  bV_vz : subst(x=vz, copylist(bV_1D)), 
  NV_1D : length(bV_1D),

  printf(fh, "GKYL_CU_DH double ~a(const double *w, const double *dxv, const double *jacob_vel_inv, const double *gamma, const double *qmem, const double *fl, const double *fc, const double *fr, double* GKYL_RESTRICT out) ~%{ ~%", funcNm),
  printf(fh, "  // w[NDIM]:             Cell-center coordinates.~%"),
  printf(fh, "  // dxv[NDIM]:           Cell spacing.~%"),
  printf(fh, "  // jacob_vel_inv[VDIM]: Inverse velocity space Jacobian in each direction.~%"),
  printf(fh, "  // gamma:               Particle Lorentz boost factor sqrt(1 + p^2).~%"),
  printf(fh, "  // qmem:                q/m*EM fields.~%"),
  printf(fh, "  // fl/fc/fr:            Input Distribution function in left/center/right cells ~%"),
  printf(fh, "  // out:                 Output distribution function in center cell ~%"),

  cid : cidx(cdim),
  vid : vidx(cdim,vdim),

  /* vv = variable in direction of surface update. */
  vv : varsV[dir],
  /* Surface variables to integrate over. */
  surfVars : delete(vv,varsP),
  surfVarsV : delete(vv,varsV),

  /* Generate surface basis. this produces the ndim-1 orthogonal basis with no vv dependence. */
  /* Also generate necessary basis strings and surface nodes given by tensor product of Gauss-Legendre quadrature points */
  if (polyOrder=1 and basisFun="ser") then (  /* Force p=1 Serendipity to use hybrid basis. */
    bSurf : basisFromVars("hyb", surfVars, polyOrder),
    bSurfV : basisFromVars(basisFun, surfVarsV, 2),

    surf_cdim : cdim,  surf_vdim : vdim-1,
    surfNodes : gaussOrdHyb(1+1, surf_cdim, surf_vdim),

    basisStr : sconcat("hyb_", cdim, "x", vdim, "v", "_p", polyOrder)
  ) else (
    bSurf : basisFromVars(basisFun, surfVars, polyOrder), 
    bSurfV : basisFromVars(basisFun, surfVarsV, polyOrder),

    surfNodes : gaussOrd(polyOrder+1, pDim-1),

    basisStr : sconcat(basisFun, "_", cdim+vdim, "x", "_p", polyOrder)
  ),
  NSurf : length(bSurf),
  NSurfV : length(bSurfV),
  numNodes : length(surfNodes),

  for i : 1 thru vdim do (
    printf(fh, "  const double dv1~a = 2.0/dxv[~a]; ~%", i-1, vid[i])
  ),
  printf(fh, "  const double *E~a = &qmem[~a]; ~%", dir-1, NC*(dir-1)),
  if (vdim = 1) then (
    acc_l_e : doExpand1(Efld[1],bC), 
    acc_r_e : doExpand1(Efld[1],bC)
  ), 

  for dir : 1 thru vdim do (
    printf(fh, "  const double *jacob_vel_inv~a = &jacob_vel_inv[~a]; ~%", dir-1, NV_1D*(dir-1))
  ),

  /* Expand inverse velocity space Jacobian in corresponding coordinate */
  jacob_vel_inv_vx : doExpand1(jacob_vel_inv0, bV_vx), 
  jacob_vel_inv_vy : doExpand1(jacob_vel_inv1, bV_vy), 
  jacob_vel_inv_vz : doExpand1(jacob_vel_inv2, bV_vz),
  jacob_vel_inv_fld : [jacob_vel_inv_vx, jacob_vel_inv_vy, jacob_vel_inv_vz],  

  gamma_e : doExpand1(gamma, bV), 
  gamma_surf_l : subst(vv=-1, gamma_e), 
  gamma_surf_r : subst(vv=1, gamma_e), 
  if (vdim > 1) then (
    if (dir = 1) then (
      printf(fh, "  double p1_over_gamma_l[~a] = {0.0}; ~%", NSurfV), 
      printf(fh, "  double p1_over_gamma_r[~a] = {0.0}; ~%", NSurfV), 
      py_over_gamma_l_c : calcInnerProdList(surfVarsV, 1, bSurfV, jacob_vel_inv_fld[2]*dv11[2]*diff(gamma_surf_l, vy)), 
      py_over_gamma_r_c : calcInnerProdList(surfVarsV, 1, bSurfV, jacob_vel_inv_fld[2]*dv11[2]*diff(gamma_surf_r, vy)), 
      writeCExprs1(p1_over_gamma_l, py_over_gamma_l_c), 
      writeCExprs1(p1_over_gamma_r, py_over_gamma_r_c), 
      printf(fh, "~%"),

      /* zero out components of py/gamma at the surface which are empty due to derivative */
      py_over_gamma_l_NoZero : doMakeExprLst(py_over_gamma_l_c, p1_over_gamma_l),
      py_over_gamma_l_NoZero_e : doExpandLst(py_over_gamma_l_NoZero, bSurfV), 
      py_over_gamma_r_NoZero : doMakeExprLst(py_over_gamma_r_c, p1_over_gamma_r),
      py_over_gamma_r_NoZero_e : doExpandLst(py_over_gamma_r_NoZero, bSurfV), 

      acc_l_e : doExpand1(Efld[1],bC) + py_over_gamma_l_NoZero_e*doExpand1(Bfld[3],bC), 
      acc_r_e : doExpand1(Efld[1],bC) + py_over_gamma_r_NoZero_e*doExpand1(Bfld[3],bC), 

      if (vdim = 3) then (
        printf(fh, "  double p2_over_gamma_l[~a] = {0.0}; ~%", NSurfV), 
        printf(fh, "  double p2_over_gamma_r[~a] = {0.0}; ~%", NSurfV), 
        pz_over_gamma_l_c : calcInnerProdList(surfVarsV, 1, bSurfV, jacob_vel_inv_fld[3]*dv11[3]*diff(gamma_surf_l, vz)), 
        pz_over_gamma_r_c : calcInnerProdList(surfVarsV, 1, bSurfV, jacob_vel_inv_fld[3]*dv11[3]*diff(gamma_surf_r, vz)), 
        writeCExprs1(p2_over_gamma_l, pz_over_gamma_l_c), 
        writeCExprs1(p2_over_gamma_r, pz_over_gamma_r_c), 
        printf(fh, "~%"),

        /* zero out components of pz/gamma at the surface which are empty due to derivative */
        pz_over_gamma_l_NoZero : doMakeExprLst(pz_over_gamma_l_c, p2_over_gamma_l),
        pz_over_gamma_l_NoZero_e : doExpandLst(pz_over_gamma_l_NoZero, bSurfV), 
        pz_over_gamma_r_NoZero : doMakeExprLst(pz_over_gamma_r_c, p2_over_gamma_r),
        pz_over_gamma_r_NoZero_e : doExpandLst(pz_over_gamma_r_NoZero, bSurfV), 

        acc_l_e : doExpand1(Efld[1],bC) + py_over_gamma_l_NoZero_e*doExpand1(Bfld[3],bC) - pz_over_gamma_l_NoZero_e*doExpand1(Bfld[2],bC), 
        acc_r_e : doExpand1(Efld[1],bC) + py_over_gamma_r_NoZero_e*doExpand1(Bfld[3],bC) - pz_over_gamma_r_NoZero_e*doExpand1(Bfld[2],bC), 

        printf(fh, "  const double *B~a = &qmem[~a]; ~%", 1, NC*4)
      ), 
      printf(fh, "  const double *B~a = &qmem[~a]; ~%", 2, NC*5), 
      printf(fh, "~%")
    )
    else if (dir = 2) then (
      printf(fh, "  double p0_over_gamma_l[~a] = {0.0}; ~%", NSurfV), 
      printf(fh, "  double p0_over_gamma_r[~a] = {0.0}; ~%", NSurfV), 
      px_over_gamma_l_c : calcInnerProdList(surfVarsV, 1, bSurfV, jacob_vel_inv_fld[1]*dv11[1]*diff(gamma_surf_l, vx)), 
      px_over_gamma_r_c : calcInnerProdList(surfVarsV, 1, bSurfV, jacob_vel_inv_fld[1]*dv11[1]*diff(gamma_surf_r, vx)), 
      writeCExprs1(p0_over_gamma_l, px_over_gamma_l_c), 
      writeCExprs1(p0_over_gamma_r, px_over_gamma_r_c), 

      /* zero out components of px/gamma at the surface which are empty due to derivative */
      px_over_gamma_l_NoZero : doMakeExprLst(px_over_gamma_l_c, p0_over_gamma_l),
      px_over_gamma_l_NoZero_e : doExpandLst(px_over_gamma_l_NoZero, bSurfV), 
      px_over_gamma_r_NoZero : doMakeExprLst(px_over_gamma_r_c, p0_over_gamma_r),
      px_over_gamma_r_NoZero_e : doExpandLst(px_over_gamma_r_NoZero, bSurfV), 
 
      acc_l_e : doExpand1(Efld[2],bC) - px_over_gamma_l_NoZero_e*doExpand1(Bfld[3],bC), 
      acc_r_e : doExpand1(Efld[2],bC) - px_over_gamma_r_NoZero_e*doExpand1(Bfld[3],bC), 

      if (vdim = 3) then (
        printf(fh, "  double p2_over_gamma_l[~a] = {0.0}; ~%", NSurfV), 
        printf(fh, "  double p2_over_gamma_r[~a] = {0.0}; ~%", NSurfV), 
        pz_over_gamma_l_c : calcInnerProdList(surfVarsV, 1, bSurfV, jacob_vel_inv_fld[3]*dv11[3]*diff(gamma_surf_l, vz)), 
        pz_over_gamma_r_c : calcInnerProdList(surfVarsV, 1, bSurfV, jacob_vel_inv_fld[3]*dv11[3]*diff(gamma_surf_r, vz)), 
        writeCExprs1(p2_over_gamma_l, pz_over_gamma_l_c), 
        writeCExprs1(p2_over_gamma_r, pz_over_gamma_r_c), 

        /* zero out components of pz/gamma at the surface which are empty due to derivative */
        pz_over_gamma_l_NoZero : doMakeExprLst(pz_over_gamma_l_c, p2_over_gamma_l),
        pz_over_gamma_l_NoZero_e : doExpandLst(pz_over_gamma_l_NoZero, bSurfV), 
        pz_over_gamma_r_NoZero : doMakeExprLst(pz_over_gamma_r_c, p2_over_gamma_r),
        pz_over_gamma_r_NoZero_e : doExpandLst(pz_over_gamma_r_NoZero, bSurfV), 

        acc_l_e : doExpand1(Efld[2],bC) + pz_over_gamma_l_NoZero_e*doExpand1(Bfld[1],bC) - px_over_gamma_l_NoZero_e*doExpand1(Bfld[3],bC), 
        acc_r_e : doExpand1(Efld[2],bC) + pz_over_gamma_r_NoZero_e*doExpand1(Bfld[1],bC) - px_over_gamma_r_NoZero_e*doExpand1(Bfld[3],bC), 

        printf(fh, "  const double *B~a = &qmem[~a]; ~%", 0, NC*3)
      ), 
      printf(fh, "  const double *B~a = &qmem[~a]; ~%", 2, NC*5), 
      printf(fh, "~%")
    )
    else (
      printf(fh, "  double p0_over_gamma_l[~a] = {0.0}; ~%", NSurfV), 
      printf(fh, "  double p0_over_gamma_r[~a] = {0.0}; ~%", NSurfV), 
      px_over_gamma_l_c : calcInnerProdList(surfVarsV, 1, bSurfV, jacob_vel_inv_fld[1]*dv11[1]*diff(gamma_surf_l, vx)), 
      px_over_gamma_r_c : calcInnerProdList(surfVarsV, 1, bSurfV, jacob_vel_inv_fld[1]*dv11[1]*diff(gamma_surf_r, vx)), 
      writeCExprs1(p0_over_gamma_l, px_over_gamma_l_c), 
      writeCExprs1(p0_over_gamma_r, px_over_gamma_r_c), 

      /* zero out components of px/gamma at the surface which are empty due to derivative */
      px_over_gamma_l_NoZero : doMakeExprLst(px_over_gamma_l_c, p0_over_gamma_l),
      px_over_gamma_l_NoZero_e : doExpandLst(px_over_gamma_l_NoZero, bSurfV), 
      px_over_gamma_r_NoZero : doMakeExprLst(px_over_gamma_r_c, p0_over_gamma_r),
      px_over_gamma_r_NoZero_e : doExpandLst(px_over_gamma_r_NoZero, bSurfV), 

      printf(fh, "  double p1_over_gamma_l[~a] = {0.0}; ~%", NSurfV), 
      printf(fh, "  double p1_over_gamma_r[~a] = {0.0}; ~%", NSurfV), 
      py_over_gamma_l_c : calcInnerProdList(surfVarsV, 1, bSurfV, jacob_vel_inv_fld[2]*dv11[2]*diff(gamma_surf_l, vy)), 
      py_over_gamma_r_c : calcInnerProdList(surfVarsV, 1, bSurfV, jacob_vel_inv_fld[2]*dv11[2]*diff(gamma_surf_r, vy)), 
      writeCExprs1(p1_over_gamma_l, py_over_gamma_l_c), 
      writeCExprs1(p1_over_gamma_r, py_over_gamma_r_c), 

      /* zero out components of py/gamma at the surface which are empty due to derivative */
      py_over_gamma_l_NoZero : doMakeExprLst(py_over_gamma_l_c, p1_over_gamma_l),
      py_over_gamma_l_NoZero_e : doExpandLst(py_over_gamma_l_NoZero, bSurfV), 
      py_over_gamma_r_NoZero : doMakeExprLst(py_over_gamma_r_c, p1_over_gamma_r),
      py_over_gamma_r_NoZero_e : doExpandLst(py_over_gamma_r_NoZero, bSurfV), 

      acc_l_e : doExpand1(Efld[3],bC) + px_over_gamma_l_NoZero_e*doExpand1(Bfld[2],bC) - py_over_gamma_l_NoZero_e*doExpand1(Bfld[1],bC), 
      acc_r_e : doExpand1(Efld[3],bC) + px_over_gamma_r_NoZero_e*doExpand1(Bfld[2],bC) - py_over_gamma_r_NoZero_e*doExpand1(Bfld[1],bC), 

      printf(fh, "  const double *B~a = &qmem[~a]; ~%", 0, NC*3), 
      printf(fh, "  const double *B~a = &qmem[~a]; ~%", 1, NC*4), 
      printf(fh, "~%")
    )
  ), 

  /* alpha is the phase space flux at the surface. */
  printf(fh, "  double alpha_l[~a] = {0.0}; ~%", NSurf),
  printf(fh, "  double alpha_r[~a] = {0.0}; ~%", NSurf),
  printf(fh, "~%"),

  /* Project alpha_v on the left and right onto surface basis, and print resulting coefficients. */
  alphaV_l_c : fullratsimp(calcInnerProdList(surfVars, 1, bSurf, acc_l_e)),
  writeCExprs1(alpha_l, alphaV_l_c),
  printf(fh, "~%"),
  flush_output(fh),
  /* Zero out components of alpha which are empty. */
  alphaNoZero_l : makelistNoZeros1(alphaV_l_c, alpha_l),
  alpha_l_e     : doExpand(alphaNoZero_l, bSurf),

  alphaV_r_c : fullratsimp(calcInnerProdList(surfVars, 1, bSurf, acc_r_e)),
  writeCExprs1(alpha_r, alphaV_r_c),
  printf(fh, "~%"),
  flush_output(fh),
  /* Zero out components of alpha which are empty. */
  alphaNoZero_r : makelistNoZeros1(alphaV_r_c, alpha_r),
  alpha_r_e     : doExpand(alphaNoZero_r, bSurf),

  /* Evaluate alpha at ordinates.
     Note: alphaSurf_e is already a surface expansion. 
     In addition, it is continuous */
  alphaOrd_l_n : gcfac(float(evAtNodes(alpha_l_e,surfNodes,surfVars))),
  alphaOrd_r_n : gcfac(float(evAtNodes(alpha_r_e,surfNodes,surfVars))),

  printf(fh, "  double fUpwindQuad_l[~a] = {0.0};~%", numNodes),
  printf(fh, "  double fUpwindQuad_r[~a] = {0.0};~%", numNodes),
  printf(fh, "  double fUpwind_l[~a] = {0.0};;~%", NSurf),
  printf(fh, "  double fUpwind_r[~a] = {0.0};~%", NSurf),
  printf(fh, "  double Ghat_l[~a] = {0.0}; ~%", NSurf),
  printf(fh, "  double Ghat_r[~a] = {0.0}; ~%", NSurf),
  printf(fh, "~%"),
  /* Check sign of each quadrature point and choose appropriate distribution function at 
     quadrature points. If alpha > 0, need f_l (at +1) and f_c (at +1). If alpha < 0, 
     need f_c (at -1) and f_r (at -1). */
  for i : 1 thru length(alphaOrd_l_n) do (
    printf(fh, "  if (~a > 0) { ~%", alphaOrd_l_n[i]),
    printf(fh, "    fUpwindQuad_l[~a] = ~a_surfx~a_eval_quad_node_~a_r(fl); ~%", i-1, basisStr, cdim+dir, i-1),
    printf(fh, "  } else { ~%"),
    printf(fh, "    fUpwindQuad_l[~a] = ~a_surfx~a_eval_quad_node_~a_l(fc); ~%", i-1, basisStr, cdim+dir, i-1),
    printf(fh, "  } ~%"),
    printf(fh, "  if (~a > 0) { ~%", alphaOrd_r_n[i]),
    printf(fh, "    fUpwindQuad_r[~a] = ~a_surfx~a_eval_quad_node_~a_r(fc); ~%", i-1, basisStr, cdim+dir, i-1),
    printf(fh, "  } else { ~%"),
    printf(fh, "    fUpwindQuad_r[~a] = ~a_surfx~a_eval_quad_node_~a_l(fr); ~%", i-1, basisStr, cdim+dir, i-1),
    printf(fh, "  } ~%")
  ),

  printf(fh, "~%"),
  printf(fh, "  // Project tensor nodal quadrature basis back onto modal basis. ~%"),
  if (polyOrder=1 and basisFun="ser") then (  /* Force p=1 Serendipity to use hybrid basis. */
    printf(fh, "  hyb_~ax~av_p1_vdir_upwind_quad_to_modal(fUpwindQuad_l, fUpwind_l); ~%", cdim, vdim),
    printf(fh, "  hyb_~ax~av_p1_vdir_upwind_quad_to_modal(fUpwindQuad_r, fUpwind_r); ~%", cdim, vdim)
  ) else (
    printf(fh, "  ~a_~ax_p~a_upwind_quad_to_modal(fUpwindQuad_l, fUpwind_l); ~%", basisFun, cdim+vdim, polyOrder),
    printf(fh, "  ~a_~ax_p~a_upwind_quad_to_modal(fUpwindQuad_r, fUpwind_r); ~%", basisFun, cdim+vdim, polyOrder)
  ),

  /* Create expansions of f_hat (upwinded f) on the left and right in the surface basis. */
  fHatSurf_l_e : doExpand1(fUpwind_l, bSurf),
  fHatSurf_r_e : doExpand1(fUpwind_r, bSurf),

  /* Print C exprs for Ghat across surface boundary, (LEFT BOUNDARY) */
  Ghat_l_c : fullratsimp(innerProd(surfVars, alpha_l_e, bSurf, fHatSurf_l_e)),
  writeCExprs1(Ghat_l, Ghat_l_c),
  printf(fh, "~%"),
  flush_output(fh),

  /* Print C exprs for Ghat across surface boundary, (RIGHT BOUNDARY) */
  Ghat_r_c : fullratsimp(innerProd(surfVars, alpha_r_e, bSurf, fHatSurf_r_e)),
  writeCExprs1(Ghat_r, Ghat_r_c),
  printf(fh, "~%"),
  flush_output(fh),

  /* Expand G_hat in surface basis. */
  Ghat_l_e : doExpand1(Ghat_l, bSurf),
  Ghat_r_e : doExpand1(Ghat_r, bSurf),

  /* Compute surface contribution integral(phi^- Ghat) on the left and right. */
  incr_l : calcInnerProdList(surfVars, 1, subst(vv=-1.0, bP), subst(vv=-1, jacob_vel_inv_fld[dir])*Ghat_l_e),
  incr_r : calcInnerProdList(surfVars, -1, subst(vv=1.0, bP), subst(vv=1, jacob_vel_inv_fld[dir])*Ghat_r_e),
  writeCIncrExprsCollect1lhsc(out, dv11[dir]*incr_l + dv11[dir]*incr_r),  
  printf(fh, "~%"),

  printf(fh, "  return 0.;~%"), /* Return CFL frequency in volume kernel. */
  printf(fh, "~%"),

  printf(fh, "} ~%")
);
