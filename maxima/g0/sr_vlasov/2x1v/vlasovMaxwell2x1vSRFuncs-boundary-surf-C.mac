/* This script generates the kernels for the surface term of the E + v x B 
   advection in velocity space for the Vlasov equation (full EM) */

load("modal-basis");
load("out-scripts");
load(stringproc)$
load("scifac")$
load("nodal_operations/nodal_functions")$
fpprec : 24$

varsV : [vx, vy, vz]$
cvars : [x, y, z]$
vvars : [vx, vy, vz]$

pVsub : [x=vx,y=vy,z=vz]$

dvdx  : [dv0dx0, dv1dx1, dv2dx2]$
wdx   : [w0dx0, w1dx1, w2dx2]$
dx11 : [dx10, dx11, dx12]$
dv11 : [dv10, dv11, dv12]$

Efld  : [E0, E1, E2]$
Bfld  : [B0, B1, B2]$

cidx(cdim)      := makelist(i,i,0,cdim-1)$
vidx(cdim,vdim) := makelist(i,i,cdim,cdim+vdim-1)$

/* Helper functions for expanding in basis functions a quantity we know should be sparse  */
/* For example, alpha, the phase space flow only depends on a few phase space coordinates */
doMakeExprLst_a0(vals, S)  := makelist(if vals[i] # 0 then S[a0+i-1] else 0, i, 1, length(vals))$
doMakeExprLst(vals, S)  := makelist(if vals[i] # 0 then S[i-1] else 0, i, 1, length(vals))$
doExpandLst(lst, basis) := sum(lst[i]*basis[i], i, 1, length(basis))$

calcVlasovSRLorentzBoundaryUpdateInDir(dir, fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC, bC, varsP, bP, varsV, bV, NC, NP, NV],

  /* Load the specific desired basis, including the loading of the hybrid basis if p=1 */
  [varsC,bC,varsP,bP] : loadPhaseBasis(basisFun, cdim, vdim, polyOrder),
  /* Number of basis monomials. */
  NP : length(bP),
  NC : length(bC),
  pDim : length(varsP),
  
  /* polyOrder in velocity space is p=2 for p=1 since we force p=1 to
     mean hybrid basis. */
  if polyOrder=1 then ( 
    [varsV, bV] : loadBasis(basisFun, vdim, 2)
  ) 
  else (
    [varsV, bV] : loadBasis(basisFun, vdim, polyOrder)
  ), 
  bV : subst(pVsub, copylist(bV)),  
  varsV : subst(pVsub, copylist(varsV)), 
  NV : length(bV),

  printf(fh, "GKYL_CU_DH double ~a(const double *w, const double *dxv, const double *jacob_vel_inv, const double *gamma, const double *qmem, const int edge, const double *fEdge, const double *fSkin, double* GKYL_RESTRICT out) ~%{ ~%", funcNm),
  printf(fh, "  // w[NDIM]:     Cell-center coordinates.~%"),
  printf(fh, "  // dxv[NDIM]:   Cell spacing.~%"),
  printf(fh, "  // jacob_vel_inv[VDIM]: Inverse velocity space Jacobian in each direction (unused in uniform grid simulations).~%"),
  printf(fh, "  // gamma:       Particle Lorentz boost factor sqrt(1 + p^2).~%"),
  printf(fh, "  // qmem:        q/m*EM fields.~%"),
  printf(fh, "  // edge:        Determines if the update is for the left edge (-1) or right edge (+1).~%"),
  printf(fh, "  // fSkin/fEdge: Input Distribution function in skin cell/last edge cell ~%"),
  printf(fh, "  // out:         Output distribution function in skin cell ~%"),

  cid : cidx(cdim),
  vid : vidx(cdim,vdim),

  /* vv = variable in direction of surface update. */
  vv : varsV[dir],
  /* Surface variables to integrate over. */
  surfVars : delete(vv,varsP),
  surfVarsV : delete(vv,varsV),

  /* Generate surface basis. this produces the ndim-1 orthogonal basis with no vv dependence. */
  /* Also generate necessary basis strings and surface nodes given by tensor product of Gauss-Legendre quadrature points */
  if (polyOrder=1 and basisFun="ser") then (  /* Force p=1 Serendipity to use hybrid basis. */
    bSurf : basisFromVars("hyb", surfVars, polyOrder),
    bSurfV : basisFromVars(basisFun, surfVarsV, 2),

    surf_cdim : cdim,  surf_vdim : vdim-1,
    surfNodes : gaussOrdHyb(1+1, surf_cdim, surf_vdim),

    basisStr : sconcat("hyb_", cdim, "x", vdim, "v", "_p", polyOrder)
  ) else (
    bSurf : basisFromVars(basisFun, surfVars, polyOrder), 
    bSurfV : basisFromVars(basisFun, surfVarsV, polyOrder),

    surfNodes : gaussOrd(polyOrder+1, pDim-1),

    basisStr : sconcat(basisFun, "_", cdim+vdim, "x", "_p", polyOrder)
  ),
  NSurf : length(bSurf),
  NSurfV : length(bSurfV),
  numNodes : length(surfNodes),

  for i : 1 thru vdim do (
    printf(fh, "  const double dv1~a = 2.0/dxv[~a]; ~%", i-1, vid[i])
  ),
  printf(fh, "  const double *E~a = &qmem[~a]; ~%", dir-1, NC*(dir-1)),  
  acc_l_e : doExpand1(Efld[1],bC), 
  acc_r_e : doExpand1(Efld[1],bC), 

  /* alpha is the phase space flux at the surface. */
  printf(fh, "  double alpha[~a] = {0.0}; ~%", NSurf),
  printf(fh, "~%"),

  /* Project alpha_v on the left and right onto surface basis. */
  alphaV_l_c : fullratsimp(calcInnerProdList(surfVars, 1, bSurf, acc_l_e)),
  /* Zero out components of alpha which are empty. */
  alphaNoZero_l : makelistNoZeros1(alphaV_l_c, alpha),
  alpha_l_e     : doExpand(alphaNoZero_l, bSurf),

  alphaV_r_c : fullratsimp(calcInnerProdList(surfVars, 1, bSurf, acc_r_e)),
  /* Zero out components of alpha which are empty. */
  alphaNoZero_r : makelistNoZeros1(alphaV_r_c, alpha),
  alpha_r_e     : doExpand(alphaNoZero_r, bSurf),

  /* Evaluate alpha at ordinates.
     Note: alphaSurf_e is already a surface expansion. 
     In addition, it is continuous */
  alphaOrd_l_n : gcfac(float(evAtNodes(alpha_l_e,surfNodes,surfVars))),
  alphaOrd_r_n : gcfac(float(evAtNodes(alpha_r_e,surfNodes,surfVars))),

  printf(fh, "  double fUpwindQuad[~a] = {0.0};~%", numNodes),
  printf(fh, "  double fUpwind[~a] = {0.0};~%", NSurf),
  printf(fh, "  double Ghat[~a] = {0.0}; ~%", NSurf),
  printf(fh, "~%"),
  /* NOTE: WE ARE USING L TO DENOTE THE LEFT EDGE UPDATE AND R TO DENOTE RIGHT EDGE UPDATE OF GLOBAL DOMAIN */
  /* if edge == -1, we are doing the left edge boundary and the skin cell needs to be evauluated at +1 */
  printf(fh, "  if (edge == -1) { ~%~%"),
  writeCExprs1(alpha, alphaV_r_c),
  printf(fh, "~%"),
  flush_output(fh),
  /* Write out fUpwindQuad for the far left edge */
  for i : 1 thru length(alphaOrd_r_n) do (
    printf(fh, "  if (~a > 0) { ~%", alphaOrd_r_n[i]),
    printf(fh, "    fUpwindQuad[~a] = ~a_surfx~a_eval_quad_node_~a_r(fSkin); ~%", i-1, basisStr, cdim+dir, i-1),
    printf(fh, "  } else { ~%"),
    printf(fh, "    fUpwindQuad[~a] = ~a_surfx~a_eval_quad_node_~a_l(fEdge); ~%", i-1, basisStr, cdim+dir, i-1),
    printf(fh, "  } ~%")
  ),
  printf(fh, "~%"),
  printf(fh, "  // Project tensor nodal quadrature basis back onto modal basis. ~%"),
  if (polyOrder=1 and basisFun="ser") then (  /* Force p=1 Serendipity to use hybrid basis. */
    printf(fh, "  hyb_~ax~av_p1_vdir_upwind_quad_to_modal(fUpwindQuad, fUpwind); ~%", cdim, vdim)
  )
  else (
    printf(fh, "  ~a_~ax_p~a_upwind_quad_to_modal(fUpwindQuad, fUpwind); ~%", basisFun, cdim+vdim, polyOrder)
  ),
  printf(fh, "~%"),

  /* Create expansions of f_hat (upwinded f) in the surface basis. */
  fHatSurf_e : doExpand1(fUpwind, bSurf),

  /* Print C exprs for Ghat across surface boundary */
  Ghat_c : fullratsimp(innerProd(surfVars, alpha_r_e, bSurf, fHatSurf_e)),
  writeCExprs1(Ghat, Ghat_c),
  printf(fh, "~%"),
  flush_output(fh),

  /* Expand G_hat in surface basis. */
  Ghat_e : doExpand1(Ghat, bSurf),

  incr : calcInnerProdList(surfVars, -1, subst(vv=1.0, bP), Ghat_e),
  writeCIncrExprsCollect1lhsc(out, dv11[dir]*incr),  

  /* otherwise edge == +1, we are doing the right edge boundary and the skin cell needs to be evauluated at -1 */
  printf(fh, "~%  } else { ~%~%"),
  writeCExprs1(alpha, alphaV_l_c),
  printf(fh, "~%"),
  flush_output(fh),
  /* Write out fUpwindQuad for the far right edge */
  for i : 1 thru length(alphaOrd_l_n) do (
    printf(fh, "  if (~a > 0) { ~%", alphaOrd_l_n[i]),
    printf(fh, "    fUpwindQuad[~a] = ~a_surfx~a_eval_quad_node_~a_r(fEdge); ~%", i-1, basisStr, cdim+dir, i-1),
    printf(fh, "  } else { ~%"),
    printf(fh, "    fUpwindQuad[~a] = ~a_surfx~a_eval_quad_node_~a_l(fSkin); ~%", i-1, basisStr, cdim+dir, i-1),
    printf(fh, "  } ~%")
  ),
  printf(fh, "~%"),
  printf(fh, "  // Project tensor nodal quadrature basis back onto modal basis. ~%"),
  if (polyOrder=1 and basisFun="ser") then (  /* Force p=1 Serendipity to use hybrid basis. */
    printf(fh, "  hyb_~ax~av_p1_vdir_upwind_quad_to_modal(fUpwindQuad, fUpwind); ~%", cdim, vdim)
  )
  else (
    printf(fh, "  ~a_~ax_p~a_upwind_quad_to_modal(fUpwindQuad, fUpwind); ~%", basisFun, cdim+vdim, polyOrder)
  ),
  printf(fh, "~%"),

  /* Create expansions of f_hat (upwinded f) in the surface basis. */
  fHatSurf_e : doExpand1(fUpwind, bSurf),

  /* Print C exprs for Ghat across surface boundary */
  Ghat_c : fullratsimp(innerProd(surfVars, alpha_l_e, bSurf, fHatSurf_e)),
  writeCExprs1(Ghat, Ghat_c),
  printf(fh, "~%"),
  flush_output(fh),

  /* Expand G_hat in surface basis. */
  Ghat_e : doExpand1(Ghat, bSurf),

  incr : calcInnerProdList(surfVars, 1, subst(vv=-1.0, bP), Ghat_e),
  writeCIncrExprsCollect1lhsc(out, dv11[dir]*incr),
  printf(fh, "~%  } ~%"),

  printf(fh, "  return 0.;~%"), /* Return CFL frequency in volume kernel. */
  printf(fh, "~%"),

  printf(fh, "} ~%")
);
