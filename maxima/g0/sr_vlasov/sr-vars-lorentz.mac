/*  Generate kernels for 
    1. gamma = sqrt(1 + p^2),
    2. gamma_inv = 1.0/sqrt(1 + p^2),
    These quantities are derived from the grid and must be continuous, 
    so they are projected onto basis functions using Gauss-Lobatto nodes. */

load("modal-basis");
load("out-scripts");
load("nodal_operations/nodal_functions")$
load(stringproc)$
fpprec : 24$

let(w0^2, w0_sq)$
let(dv0^2, dv0_sq)$
let(w1^2, w1_sq)$
let(dv1^2, dv1_sq)$
let(w2^2, w2_sq)$
let(dv2^2, dv2_sq)$

calcLorentz(fh, funcNm, vdim, basisFun, polyOrder) := block(
  [bV, NV],

  kill(varsV, bV),

  /* Load basis of dimensionality requested. */
  [varsV,bV] : loadBasis(basisFun, vdim, polyOrder),

  NV : length(bV),

  printf(fh, "#include <gkyl_sr_Gamma_kernels.h> ~%"),
  /* Function declaration with input/output variables. */
  printf(fh, "GKYL_CU_DH void ~a(const double *w, const double *dxv, double* GKYL_RESTRICT gamma_inv) ~%{ ~%", funcNm),
  printf(fh, "  // w:   Cell-center coordinates.~%"),
  printf(fh, "  // dxv: Cell spacing.~%"),
  printf(fh, "  // gamma_inv: Inverse particle Lorentz boost factor 1/sqrt(1 + p^2).~%"),
  printf(fh, " ~%"),  

  for dir : 1 thru vdim do (
    printf(fh, "  const double w~a = w[~a]; ~%", dir-1, dir-1),
    printf(fh, "  const double dv~a = dxv[~a]; ~%", dir-1, dir-1),
    printf(fh, "  const double w~a_sq = w~a*w~a, dv~a_sq = dv~a*dv~a; ~%", dir-1, dir-1, dir-1, dir-1, dir-1, dir-1),
    printf(fh, "  double p~a_sq[~a] = {0.0};~%", dir-1, 3)
  ),

  basis_px_sq : basisFromVars("ser", [x], 2),
  px_sq_c : calcInnerProdList([x], 1, basis_px_sq, (dv0/2.0*varsV[1] + w0)^2),
  px_sq_c : map(letsimp, px_sq_c),
  writeCExprs1(p0_sq, px_sq_c), 
  printf(fh, "~%"), 
  px_sq_e : doExpand1(p0_sq, basis_px_sq),

  p_sq_e : px_sq_e, 
  if (vdim > 1) then (
    basis_py_sq : basisFromVars("ser", [y], 2),
    py_sq_c : calcInnerProdList([y], 1, basis_py_sq, (dv1/2.0*varsV[2] + w1)^2),
    py_sq_c : map(letsimp, py_sq_c),
    writeCExprs1(p1_sq, py_sq_c), 
    printf(fh, "~%"), 
    py_sq_e : doExpand1(p1_sq, basis_py_sq),
    p_sq_e : p_sq_e + py_sq_e
  ), 
  if (vdim = 3) then (
    basis_pz_sq : basisFromVars("ser", [z], 2),
    pz_sq_c : calcInnerProdList([z], 1, basis_pz_sq, (dv2/2.0*varsV[3] + w2)^2),
    pz_sq_c : map(letsimp, pz_sq_c),
    writeCExprs1(p2_sq, pz_sq_c), 
    printf(fh, "~%"), 
    pz_sq_e : doExpand1(p2_sq, basis_pz_sq), 
    p_sq_e : p_sq_e + pz_sq_e
  ), 

  /* For p = 2, we use the nodes (-1, 0, 1) (Gauss-Lobatto nodes) */
  nodes_lobatto : getNodes(basisFun, vdim, polyOrder),
  num_nodes_lobatto : length(nodes_lobatto), 
  p_sq_nodes : expand(float(evAtNodes(p_sq_e,nodes_lobatto,varsV))),  
  printf(fh, "  double gamma_nodal[~a] = {0.0};~%", num_nodes_lobatto),
  printf(fh, "  double gamma_inv_nodal[~a] = {0.0};~%", num_nodes_lobatto),
  printf(fh, "~%"), 
  for i : 1 thru num_nodes_lobatto do (
    printf(fh, "  gamma_nodal[~a] = sqrt(1.0 + ~a);~%", i-1, p_sq_nodes[i]), 
    printf(fh, "  gamma_inv_nodal[~a] = 1.0/gamma_nodal[~a];~%", i-1, i-1)
  ), 
  printf(fh, "~%"), 
  
  basis_nodal_lobatto : getVarsNodalBasisWithNodes(basisFun, vdim, polyOrder, varsV, nodes_lobatto), 
  gamma_nodal_e : doExpand1(gamma_nodal,basis_nodal_lobatto),
  gamma_inv_nodal_e : doExpand1(gamma_inv_nodal,basis_nodal_lobatto),

  gamma_c : calcInnerProdList(varsV, 1, bV, gamma_nodal_e), 
  gamma_inv_c : calcInnerProdList(varsV, 1, bV, gamma_inv_nodal_e), 
  writeCExprs1(gamma_inv, gamma_inv_c), 
  flush_output(fh),

  printf(fh, "} ~%")
)$  

