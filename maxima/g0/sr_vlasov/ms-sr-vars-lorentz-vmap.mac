load("sr_vlasov/sr-vars-lorentz-vmap")$
load(stringproc)$
/* This script calls the functions which calculate various 
   quantities related to the particle Lorentz boost factor, including
   1. gamma = sqrt(1 + p^2),
   2. gamma_inv = 1.0/sqrt(1 + p^2),
   These quantities are derived from the grid and must be continuous, 
   so they are projected onto basis functions using Gauss-Lobatto nodes.*/

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 2$
maxPolyOrder_Ser : 2$
minVdim_Ser : 1$    /* see begining of v loop below though. */
maxVdim_Ser : 3$

/* Tensor product basis. */
/* Note that Serendipity, p = 1, is equivalent to Tensor */
/* Thus no need to calculate p = 1 Tensor basis */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minVdim_Tensor : 1$    /* see begining of v loop below though. */
maxVdim_Tensor : 3$

/* ...... END OF USER INPUTS........ */

bName        : ["ser","tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minVdim      : [minVdim_Ser, minVdim_Tensor]$
maxVdim      : [maxVdim_Ser, maxVdim_Tensor]$
for bInd : 1 thru length(bName) do (
  for v : 1 thru maxVdim[bInd] do (

    minPolyOrderB : minPolyOrder[bInd],
    maxPolyOrderB : maxPolyOrder[bInd],
    for polyOrder : minPolyOrderB thru maxPolyOrderB do (
      fname : sconcat("~/max-out/sr_vars_lorentz_vmap_", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
      fh : openw(fname),
      funcName : sconcat("sr_vars_lorentz_vmap_",  v, "v_", bName[bInd], "_p", polyOrder),
      calcLorentz(fh, funcName, v, bName[bInd], polyOrder),
      close(fh)
    )
  )
);
