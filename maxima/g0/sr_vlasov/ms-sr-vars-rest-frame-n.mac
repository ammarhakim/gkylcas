load("sr_vlasov/sr-vars-rest-frame-n")$
load(stringproc)$
/* This script calls the functions which calculate 
   the rest frame density n = Gamma_inv*M0 where 
   Gamma_inv = sqrt(1 - |V_drift|^2. 
   We follow the steps: 
   1. Set the matrices for solving the linear system V_drift_i = M1i/M0 
      Note that this batched linear solve is parallelized over components. 
   2. Call the batched linear solve routine to find V_drift_i.
   3. Compute |V_drift|^2 = sum_i V_drift_i * V_drift_i using weak multiplication.
   4. Check is 1 - |V_drift|^2 < 0.0 at Gauss-Legendre quadrature points. 
   5. If 1 - |V_drift|^2 is positive definite, compute Gamma_inv = sqrt(1 - |V_drift|^2).
   6. If 1 - |V_drift|^2 < 0.0, compute V_drift_i * V_drift_i at linear Gauss-Lobatto
      quadrature points (the four corners).
   7. Check if *that* linear representation of 1 - |V_drift_lobatto|^2 < 0.0 at corners.
   8. If 1 - |V_drift_lobatto|^2 < 0.0 at a corner, floor 1 - |V_drift_lobatto|^2 = 1.0e-16.
   9. Construct Gamma_inv = sqrt(1 - |V_drift_lobatto|^2). 
   10. Return n = Gamma_inv*M0 with weak multiplication. */

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
minVdim_Ser : 1$    /* see begining of v loop below though. */
maxCdim_Ser : 3$
maxVdim_Ser : 3$

/* Tensor product basis. */
/* Note that Serendipity, p = 1, is equivalent to Tensor */
/* Thus no need to calculate p = 1 Tensor basis */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
minVdim_Tensor : 1$    /* see begining of v loop below though. */
maxCdim_Tensor : 2$
maxVdim_Tensor : 3$

/* ...... END OF USER INPUTS........ */

bName        : ["ser","tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
minVdim      : [minVdim_Ser, minVdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$
maxVdim      : [maxVdim_Ser, maxVdim_Tensor]$
for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    for v : c thru maxVdim[bInd] do (

      minPolyOrderB : minPolyOrder[bInd],
      maxPolyOrderB : maxPolyOrder[bInd],
      if (c+v>5 and maxPolyOrderB > 1) then maxPolyOrderB : 1,

      for polyOrder : minPolyOrderB thru maxPolyOrderB do (
        fname : sconcat("~/max-out/sr_vars_n_set_", c, "x", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
        fh : openw(fname),
        funcName : sconcat("sr_vars_n_set_",  c, "x", v, "v_", bName[bInd], "_p", polyOrder),
        if (polyOrder = 1) then (
          set_sr_n_p1(fh, funcName, c, v, bName[bInd], polyOrder)
        )
        else (
          set_sr_n(fh, funcName, c, v, bName[bInd], polyOrder)
        ),
        close(fh),

        fname : sconcat("~/max-out/sr_vars_n_copy_", c, "x", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
        fh : openw(fname),
        funcName : sconcat("sr_vars_n_copy_",  c, "x", v, "v_", bName[bInd], "_p", polyOrder),
        copy_sr_n(fh, funcName, c, v, bName[bInd], polyOrder),
        close(fh)
      )
    )
  )
);
