/*  Generate kernels for determining the bulk four-velocity in a 
    relativistic Vlasov-Maxwell simulation using weak division. 
    We compute the bulk four-velocity (GammaV, GammaV*V_drift) from the 
    lab-frame moments M0, M1i and the rest-frame density n using weak division. 
    GammaV = M0/n
    GammaV*V_drift = M1i/n */

load("modal-basis");
load("out-scripts");
load("nodal_operations/nodal_functions")$
load(stringproc)$
fpprec : 24$

/* Special set of kernels which analytically invert the matrix for 1/n 
   for p=1 using the basis_inv operator. Significantly faster than the bin_op operator,
   but only works for p=1 */
set_sr_u_i_p1(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC, bC, NC, expr_temp],

  kill(varsC, bC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),

  /* Number of basis monomials. */
  NC : length(bC),

  printf(fh, "#include <gkyl_mat.h> ~%"),
  printf(fh, "#include <gkyl_sr_Gamma_kernels.h> ~%"),
  printf(fh, "#include <gkyl_binop_mul_ser.h> ~%"),
  printf(fh, "#include <gkyl_basis_~a_~ax_p~a_inv.h> ~%", basisFun, cdim, polyOrder),
  printf(fh, "GKYL_CU_DH void ~a(int count, struct gkyl_nmat *A, struct gkyl_nmat *rhs, const double *M0, const double *M1i, const double *n) ~%{ ~%", funcNm),
  printf(fh, "  // count: integer to indicate which matrix being fetched. ~%"),
  printf(fh, "  // A:     preallocated LHS matrix. ~%"),
  printf(fh, "  // rhs:   preallocated RHS vector. ~%"),
  printf(fh, "  // M0:    Lab frame density = GammaV*n.~%"),
  printf(fh, "  // M1i:   Lab frame flux = GammaV*n*V_drift.~%"),
  printf(fh, "  // n:     Rest-frame density.~%"),
  printf(fh, "~%"),

  /* Arrays for storing inverse of n */
  printf(fh, "  double n_inv[~a] = {0.0}; ~%", NC),
  printf(fh, "  ~a_~ax_p~a_inv(n, n_inv); ~%", basisFun, cdim, polyOrder),

  /* Temporary array for each component of bulk four-velocity */
  printf(fh, "  double temp[~a] = {0.0}; ~%", NC),
  expr_temp : float(expand(makelist(temp[i],i,0,NC-1))),

  printf(fh, "  // For poly_order = 1, we can analytically invert the matrix and just store the solution ~%"),
  printf(fh, "  struct gkyl_mat rhs0 = gkyl_nmat_get(rhs, count); ~%"),
  printf(fh, "  gkyl_mat_clear(&rhs0, 0.0); ~%", i-1),
  printf(fh, "  binop_mul_~ad_~a_p~a(n_inv, n, temp); ~%", cdim, basisFun, polyOrder, i-1),
  for j : 1 thru length(expr_temp) do (
    printf(fh,"  gkyl_mat_set(&rhs0,~a,0,~a); ~%", j-1, expr_temp[j])
  ),
  printf(fh, "~%"),

  for i : 1 thru vdim do (
    printf(fh, "  struct gkyl_mat rhs~a = gkyl_nmat_get(rhs, count+~a); ~%", i, i),
    printf(fh, "  gkyl_mat_clear(&rhs~a, 0.0); ~%", i),
    printf(fh, "  const double *M1~a = &M1i[~a]; ~%", i-1, (i-1)*NC), 
    printf(fh, "  binop_mul_~ad_~a_p~a(n_inv, M1~a, temp); ~%", cdim, basisFun, polyOrder, i-1),
    for j : 1 thru length(expr_temp) do (
      printf(fh,"  gkyl_mat_set(&rhs~a,~a,0,~a); ~%", i, j-1, expr_temp[j])
    ),
    printf(fh, "~%")
  ),
  printf(fh, "} ~%")
)$

set_sr_u_i(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC, bC, NC, n_e, 
   ue, un, eq_n, E_n],

  kill(varsC, bC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),

  /* Number of basis monomials. */
  NC : length(bC),

  printf(fh, "#include <gkyl_mat.h> ~%"),
  printf(fh, "#include <gkyl_sr_Gamma_kernels.h> ~%"),
  printf(fh, "GKYL_CU_DH void ~a(int count, struct gkyl_nmat *A, struct gkyl_nmat *rhs, const double *M0, const double *M1i, const double *n) ~%{ ~%", funcNm),
  printf(fh, "  // count: integer to indicate which matrix being fetched. ~%"),
  printf(fh, "  // A:     preallocated LHS matrix. ~%"),
  printf(fh, "  // rhs:   preallocated RHS vector. ~%"),
  printf(fh, "  // M0:    Lab frame density = GammaV*n.~%"),
  printf(fh, "  // M1i:   Lab frame flux = GammaV*n*V_drift.~%"),
  printf(fh, "  // n:     Rest-frame density.~%"),
  printf(fh, "~%"),

  /* Generate matrix of unknown coefficients */
  n_e : doExpand1(n, bC),
  ue : doExpand1(u,bC),
  un : makelist(u[i],i,0,NC-1),
  eq_n : calcInnerProdList(varsC,ue,bC,n_e),
  E_n : fullratsimp(coefmatrix(eq_n,un)),

  printf(fh, "  struct gkyl_mat A0 = gkyl_nmat_get(A, count); ~%"),
  printf(fh, "  struct gkyl_mat rhs0 = gkyl_nmat_get(rhs, count); ~%"),
  printf(fh, "  gkyl_mat_clear(&A0, 0.0); gkyl_mat_clear(&rhs0, 0.0); ~%"),
  for j : 1 thru NC do (
    printf(fh,"  gkyl_mat_set(&rhs0,~a,0,M0[~a]); ~%", j-1, j-1)
  ),
  for k : 1 thru NC do (
    for l : 1 thru NC do (
      printf(fh,"  gkyl_mat_set(&A0,~a,~a,~a); ~%", k-1, l-1, float(expand(E_n[k,l])))
    )
  ),
  printf(fh, " ~%"),

  for i : 1 thru vdim do (
    printf(fh, "  struct gkyl_mat A~a = gkyl_nmat_get(A, count+~a); ~%", i, i),
    printf(fh, "  struct gkyl_mat rhs~a = gkyl_nmat_get(rhs, count+~a); ~%", i, i),
    printf(fh, "  gkyl_mat_clear(&A~a, 0.0); gkyl_mat_clear(&rhs~a, 0.0); ~%", i, i),
    printf(fh, "  const double *M1~a = &M1i[~a]; ~%", i-1, (i-1)*NC), 
    for j : 1 thru NC do (
      printf(fh,"  gkyl_mat_set(&rhs~a,~a,0,M1~a[~a]); ~%", i, j-1, i-1, j-1)
    ),
    for k : 1 thru NC do (
      for l : 1 thru NC do (
        printf(fh,"  gkyl_mat_set(&A~a,~a,~a,~a); ~%", i, k-1, l-1, float(expand(E_n[k,l])))
      )
    ),
    printf(fh, " ~%")
  ), 
  printf(fh, "} ~%")
)$

copy_sr_u_i(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC, bC, NC],

  kill(varsC, bC, bC_p1),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),

  /* Number of basis monomials. */
  NC : length(bC),

  printf(fh, "#include <gkyl_mat.h> ~%"),
  printf(fh, "#include <gkyl_sr_Gamma_kernels.h> ~%"),
  /* Function declaration with input/output variables. */
  printf(fh, "GKYL_CU_DH void ~a(int count, struct gkyl_nmat *x, double* GKYL_RESTRICT u_i) ~%{ ~%", funcNm),
  printf(fh, "  // count: integer to indicate which matrix being fetched. ~%"),
  printf(fh, "  // x:     Input solution vector. ~%"),
  printf(fh, "  // u_i:   Bulk four-velocity (GammaV, GammaV*V_drift). ~%"),
  printf(fh, " ~%"),

  for i : 1 thru vdim+1 do (
    printf(fh, "  struct gkyl_mat x~a = gkyl_nmat_get(x, count+~a); ~%", i-1, i-1),
    printf(fh, "  double *u_~a = &u_i[~a]; ~%", i-1, (i-1)*NC),
    for j : 1 thru NC do (
      printf(fh,"  u_~a[~a] = gkyl_mat_get(&x~a,~a,0); ~%", i-1, j-1, i-1, j-1)
    ), 
    printf(fh, " ~%")
  ),
  printf(fh, "} ~%"),
  printf(fh, " ~%")
)$