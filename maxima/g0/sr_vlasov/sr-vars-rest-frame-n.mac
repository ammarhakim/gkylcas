/*  Generate kernels for determining the rest-frame density in a 
    relativistic Vlasov-Maxwell simulation. The order of operations is : 
    1. Set the matrices for solving the linear system V_drift_i = M1i/M0 
       Note that this batched linear solve is parallelized over components. 
    2. Call the batched linear solve routine to find V_drift_i.
    3. Compute |V_drift|^2 = sum_i V_drift_i * V_drift_i using weak multiplication.
    4. Check is 1 - |V_drift|^2 < 0.0 at Gauss-Legendre quadrature points. 
    5. If 1 - |V_drift|^2 is positive definite, compute Gamma_inv = sqrt(1 - |V_drift|^2).
    6. If 1 - |V_drift|^2 < 0.0, compute V_drift_i * V_drift_i at linear Gauss-Lobatto
       quadrature points (the four corners).
    7. Check if *that* linear representation of 1 - |V_drift_lobatto|^2 < 0.0 at corners.
    8. If 1 - |V_drift_lobatto|^2 < 0.0 at a corner, floor 1 - |V_drift_lobatto|^2 = 1.0e-16.
    9. Construct Gamma_inv = sqrt(1 - |V_drift_lobatto|^2). 
    10. Return n = Gamma_inv*M0 with weak multiplication. */

load("modal-basis");
load("out-scripts");
load("nodal_operations/nodal_functions")$
load(stringproc)$
fpprec : 24$

/* Special set of kernels which analytically invert the matrix for 1/M0 
   for p=1 using the basis_inv operator. Significantly faster than the bin_op operator,
   but only works for p=1 */
set_sr_n_p1(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC, bC, NC, expr_V_drift],

  kill(varsC, bC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),

  /* Number of basis monomials. */
  NC : length(bC),

  printf(fh, "#include <gkyl_mat.h> ~%"),
  printf(fh, "#include <gkyl_sr_Gamma_kernels.h> ~%"),
  printf(fh, "#include <gkyl_binop_mul_ser.h> ~%"),
  printf(fh, "#include <gkyl_basis_~a_~ax_p~a_inv.h> ~%", basisFun, cdim, polyOrder),
  printf(fh, "GKYL_CU_DH void ~a(int count, struct gkyl_nmat *A, struct gkyl_nmat *rhs, const double *M0, const double *M1i) ~%{ ~%", funcNm),
  printf(fh, "  // count: integer to indicate which matrix being fetched. ~%"),
  printf(fh, "  // A:     preallocated LHS matrix. ~%"),
  printf(fh, "  // rhs:   preallocated RHS vector. ~%"),
  printf(fh, "  // M0:    Lab frame density = Gamma*n.~%"),
  printf(fh, "  // M1i:   Lab frame flux = Gamma*n*V_drift_i.~%"),
  printf(fh, "~%"),

  /* Arrays for storing inverse of M0 */
  printf(fh, "  double M0_inv[~a] = {0.0}; ~%", NC),
  printf(fh, "  ~a_~ax_p~a_inv(M0, M0_inv); ~%", basisFun, cdim, polyOrder),

  /* Temporary array for each component of V_drift */
  printf(fh, "  double V_drift[~a] = {0.0}; ~%", NC),
  expr_V_drift : float(expand(makelist(V_drift[i],i,0,NC-1))),

  printf(fh, "  // For poly_order = 1, we can analytically invert the matrix and just store the solution ~%"),
  for i : 1 thru vdim do (
    printf(fh, "  struct gkyl_mat rhs~a = gkyl_nmat_get(rhs, count+~a); ~%", i-1, i-1),
    printf(fh, "  gkyl_mat_clear(&rhs~a, 0.0); ~%", i-1),
    printf(fh, "  const double *M1~a = &M1i[~a]; ~%", i-1, (i-1)*NC), 
    printf(fh, "  binop_mul_~ad_~a_p~a(M0_inv, M1~a, V_drift); ~%", cdim, basisFun, polyOrder, i-1),
    for j : 1 thru length(expr_V_drift) do (
      printf(fh,"  gkyl_mat_set(&rhs~a,~a,0,~a); ~%", i-1, j-1, expr_V_drift[j])
    ),
    printf(fh, "~%")
  ),
  printf(fh, "} ~%")
)$

set_sr_n(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC, bC, NC, M0_e, 
   ue, un, eq_M0, E_M0],

  kill(varsC, bC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),

  /* Number of basis monomials. */
  NC : length(bC),

  printf(fh, "#include <gkyl_mat.h> ~%"),
  printf(fh, "#include <gkyl_sr_Gamma_kernels.h> ~%"),
  printf(fh, "GKYL_CU_DH void ~a(int count, struct gkyl_nmat *A, struct gkyl_nmat *rhs, const double *M0, const double *M1i) ~%{ ~%", funcNm),
  printf(fh, "  // count: integer to indicate which matrix being fetched. ~%"),
  printf(fh, "  // A:     preallocated LHS matrix. ~%"),
  printf(fh, "  // rhs:   preallocated RHS vector. ~%"),
  printf(fh, "  // M0:    Lab frame density = Gamma*n.~%"),
  printf(fh, "  // M1i:   Lab frame flux = Gamma*n*V_drift_i.~%"),
  printf(fh, "~%"),

  /* Generate matrix of unknown coefficients */
  M0_e : doExpand1(M0, bC),
  ue : doExpand1(u,bC),
  un : makelist(u[i],i,0,NC-1),
  eq_M0 : calcInnerProdList(varsC,ue,bC,M0_e),
  E_M0 : fullratsimp(coefmatrix(eq_M0,un)),

  for i : 1 thru vdim do (
    printf(fh, "  struct gkyl_mat A~a = gkyl_nmat_get(A, count+~a); ~%", i-1, i-1),
    printf(fh, "  struct gkyl_mat rhs~a = gkyl_nmat_get(rhs, count+~a); ~%", i-1, i-1),
    printf(fh, "  gkyl_mat_clear(&A~a, 0.0); gkyl_mat_clear(&rhs~a, 0.0); ~%", i-1, i-1),
    printf(fh, "  const double *M1~a = &M1i[~a]; ~%", i-1, (i-1)*NC), 
    for j : 1 thru NC do (
      printf(fh,"  gkyl_mat_set(&rhs~a,~a,0,M1~a[~a]); ~%", i-1, j-1, i-1, j-1)
    ),
    /* Matrix is dense so just do a simple write routine */
    for k : 1 thru NC do (
      for l : 1 thru NC do (
        printf(fh,"  gkyl_mat_set(&A~a,~a,~a,~a); ~%", i-1, k-1, l-1, float(expand(E_M0[k,l])))
      )
    ),
    printf(fh, " ~%")
  ), 
  printf(fh, "} ~%")
)$

copy_sr_n(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC, bC, NC, bC_p1, NC_p1, 
   VxSq_e, VySq_e, VzSq_e, 
   Gamma2_inv_c, Gamma2_inv_e, nodes, num_nodes, Gamma2_inv_quad, 
   nodes_lobatto, num_nodes_lobatto, basis_nodal_lobatto, 
   V_0_e, V_0_quad, V_1_e, V_1_quad, V_2_e, V_2_quad, 
   Gamma2_inv_lobatto_e, Gamma2_inv_p1_c, Gamma2_inv_p1_e, n_p1_c, 
   Gamma_inv_e, n_c],

  kill(varsC, bC, bC_p1),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),
  /* p=1 basis for robustness check at Gauss-Lobatto nodes */
  [varsC,bC_p1] : loadBasis(basisFun, cdim, 1),

  /* Number of basis monomials. */
  NC : length(bC),
  NC_p1 : length(bC_p1),

  printf(fh, "#include <gkyl_mat.h> ~%"),
  printf(fh, "#include <gkyl_sr_Gamma_kernels.h> ~%"),
  printf(fh, "#include <gkyl_basis_~a_~ax_p~a_exp_sq.h> ~%", basisFun, cdim, polyOrder),
  printf(fh, "#include <gkyl_basis_~a_~ax_p~a_sqrt.h> ~%", basisFun, cdim, polyOrder),
  /* Also include the linear square root function in the higher polynomial order case 
     for use in the Gauss-Lobatto robustness check */
  if (polyOrder > 1) then (
    printf(fh, "#include <gkyl_basis_~a_~ax_p1_sqrt.h> ~%", basisFun, cdim)
  ), 
  /* Function declaration with input/output variables. */
  printf(fh, "GKYL_CU_DH void ~a(int count, struct gkyl_nmat *x, const double *M0, double* GKYL_RESTRICT n) ~%{ ~%", funcNm),
  printf(fh, "  // count: integer to indicate which matrix being fetched. ~%"),
  printf(fh, "  // x:     Input solution vector. ~%"),
  printf(fh, "  // M0:    Lab frame density = Gamma*n.~%"),
  printf(fh, "  // n:     Rest-frame density computed as Gamma_inv*M0 where Gamma_inv = sqrt(1 - |V_drift|^2). ~%"),
  printf(fh, " ~%"),

  /* Expand lab-frame mass density for computing n = Gamma_inv*M0 */
  M0_e : doExpand1(M0, bC),

  for i : 1 thru vdim do (
    printf(fh, "  struct gkyl_mat x~a = gkyl_nmat_get(x, count+~a); ~%", i-1, i-1),
    printf(fh, "  double V_~a[~a] = {0.0}; ~%", i-1, NC),
    /* Fetch volume expansion solution from linear solve and compute V^2 */
    for j : 1 thru NC do (
      printf(fh,"  V_~a[~a] = gkyl_mat_get(&x~a,~a,0); ~%", i-1, j-1, i-1, j-1)
    ), 
    printf(fh, "  double V_~a_sq[~a] = {0.0}; ~%", i-1, NC),
    printf(fh, "  ~a_~ax_p~a_exp_sq(V_~a, V_~a_sq); ~%", basisFun, cdim, polyOrder, i-1, i-1),
    printf(fh, " ~%")
  ),

  /* Compute 1/Gamma^2 = 1 - |V_drift|^2 */
  VxSq_e : doExpand1(V_0_sq, bC),
  VySq_e : doExpand1(V_1_sq, bC),
  VzSq_e : doExpand1(V_2_sq, bC),
  if (vdim = 1) then (  
    Gamma2_inv_c : calcInnerProdList(varsC, 1, bC, 1 - VxSq_e)
  )
  elseif (vdim = 2) then ( 
    Gamma2_inv_c : calcInnerProdList(varsC, 1, bC, 1 - VxSq_e - VySq_e)
  )
  else (
    Gamma2_inv_c : calcInnerProdList(varsC, 1, bC, 1 - VxSq_e - VySq_e - VzSq_e)
  ),
  printf(fh, "  double Gamma2_inv[~a] = {0.0}; ~%", NC),
  writeCExprs1(Gamma2_inv, Gamma2_inv_c),
  printf(fh, "~%"),
  flush_output(fh),

  /* Check if 1/Gamma^2 negative at Gauss Legendre quadrature points */
  Gamma2_inv_e : doExpand1(Gamma2_inv, bC),
  nodes : gaussOrd(polyOrder+1, cdim),
  num_nodes : length(nodes), 
  Gamma2_inv_quad : expand(float(evAtNodes(Gamma2_inv_e,nodes,varsC))),
  printf(fh, "  int cell_avg = 0;~%"),
  for i : 1 thru num_nodes do (
    printf(fh, "  if (~a < 0.0) cell_avg = 1; ~%", Gamma2_inv_quad[i])
  ),

  /* Switch to Gauss-Lobatto evaluation if 1/Gamma^2 < 0.0 at Gauss-Legendre points */
  nodes_lobatto : getNodes("Tensor", cdim, 1), 
  num_nodes_lobatto : length(nodes_lobatto), 
  /* Make nodal expansions in tensor nodal basis where nodes are Gauss-Legendre quadrature points */
  basis_nodal_lobatto : getVarsNodalBasisWithNodes("Tensor", cdim, 1, varsC, nodes_lobatto),

  V_0_e : doExpand1(V_0, bC), 
  V_0_quad : expand(float(evAtNodes(V_0_e,nodes_lobatto,varsC))),

  V_1_e : doExpand1(V_1, bC), 
  V_1_quad : expand(float(evAtNodes(V_1_e,nodes_lobatto,varsC))),

  V_2_e : doExpand1(V_2, bC), 
  V_2_quad : expand(float(evAtNodes(V_2_e,nodes_lobatto,varsC))),
  printf(fh, "  if (cell_avg) { ~%"),

  printf(fh, "    double Gamma2_inv_lobatto[~a] = {0.0}; ~%", num_nodes_lobatto),
  printf(fh, "    double Gamma2_inv_p1[~a] = {0.0}; ~%", NC_p1),
  printf(fh, "    double Gamma_inv_p1[~a] = {0.0}; ~%", NC_p1),
  printf(fh, "    double V0_quad = 0.0; ~%"),
  if (vdim > 1) then (
    printf(fh, "    double V1_quad = 0.0; ~%")
  ), 
  if (vdim = 3) then (
    printf(fh, "    double V2_quad = 0.0; ~%")
  ),
  printf(fh, "~%"),
  for i : 1 thru num_nodes_lobatto do (
    if (vdim = 1) then (
      printf(fh, "    V0_quad = ~a; ~%", V_0_quad[i]),
      printf(fh, "    Gamma2_inv_lobatto[~a] = 1.0 - V0_quad*V0_quad; ~%", i-1),
      printf(fh, "    if (Gamma2_inv_lobatto[~a] < 0.0) Gamma2_inv_lobatto[~a] = 1.0e-16; ~%", i-1, i-1), 
      printf(fh, "~%")
    )
    elseif (vdim = 2) then ( 
      printf(fh, "    V0_quad = ~a; ~%", V_0_quad[i]),
      printf(fh, "    V1_quad = ~a; ~%", V_1_quad[i]),
      printf(fh, "    Gamma2_inv_lobatto[~a] = 1.0 - V0_quad*V0_quad - V1_quad*V1_quad; ~%", i-1),
      printf(fh, "    if (Gamma2_inv_lobatto[~a] < 0.0) Gamma2_inv_lobatto[~a] = 1.0e-16; ~%", i-1, i-1), 
      printf(fh, "~%")
    )
    else (
      printf(fh, "    V0_quad = ~a; ~%", V_0_quad[i]),
      printf(fh, "    V1_quad = ~a; ~%", V_1_quad[i]),
      printf(fh, "    V2_quad = ~a; ~%", V_2_quad[i]),
      printf(fh, "    Gamma2_inv_lobatto[~a] = 1.0 - V0_quad*V0_quad - V1_quad*V1_quad - V2_quad*V2_quad; ~%", i-1),
      printf(fh, "    if (Gamma2_inv_lobatto[~a] < 0.0) Gamma2_inv_lobatto[~a] = 1.0e-16; ~%", i-1, i-1), 
      printf(fh, "~%")
    )   
  ), 
  Gamma2_inv_lobatto_e : doExpand1(Gamma2_inv_lobatto, basis_nodal_lobatto), 
  Gamma2_inv_p1_c : calcInnerProdList(varsC, 1, bC_p1, Gamma2_inv_lobatto_e), 
  for i : 1 thru NC_p1 do (
     printf(fh, "    Gamma2_inv_p1[~a] = ~a; ~%", i-1, float(expand(Gamma2_inv_p1_c[i])))
  ), 
  printf(fh, "    ~a_~ax_p1_sqrt(Gamma2_inv_p1, Gamma_inv_p1); ~%", basisFun, cdim),
  Gamma_inv_p1_e : doExpand1(Gamma_inv_p1, bC_p1), 
  n_p1_c : calcInnerProdList(varsC, 1, bC, M0_e*Gamma_inv_p1_e), 
  for i : 1 thru NC do (
    printf(fh, "    n[~a] = ~a; ~%", i-1, float(expand(n_p1_c[i])))
  ), 
  printf(fh, "  } ~%"),
  printf(fh, "  else { ~%"),

  printf(fh, "    double Gamma_inv[~a] = {0.0}; ~%", NC),
  printf(fh, "    ~a_~ax_p~a_sqrt(Gamma2_inv, Gamma_inv); ~%", basisFun, cdim, polyOrder),
  Gamma_inv_e : doExpand1(Gamma_inv, bC), 
  n_c : calcInnerProdList(varsC, 1, bC, M0_e*Gamma_inv_e), 
  for i : 1 thru NC do (
    printf(fh, "    n[~a] = ~a; ~%", i-1, float(expand(n_c[i])))
  ), 

  printf(fh, "  } ~%"),
  printf(fh, "~%"),
  printf(fh, "} ~%"),
  printf(fh, " ~%")
)$