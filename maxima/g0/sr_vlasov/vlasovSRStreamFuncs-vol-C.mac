/* This script generates the kernels for the volume term contribution from 
   the Vlasov equation (full EM, both streaming and acceleration) */

load("modal-basis");
load("out-scripts");
load ("scifac")$
load(stringproc)$
fpprec : 24$

varsV : [vx, vy, vz]$
cvars : [X, Y, Z]$
vvars : [VX, VY, VZ]$

pVsub : [x=vx,y=vy,z=vz]$

dx11 : [dx10, dx11, dx12]$
dv11 : [dv10, dv11, dv12]$
Efld : [E0, E1, E2]$
Bfld : [B0, B1, B2]$
p_over_gamma_fld : [p0_over_gamma, p1_over_gamma, p2_over_gamma]$

cidx(cdim)      := makelist(i,i,0,cdim-1)$
vidx(cdim,vdim) := makelist(i,i,cdim,cdim+vdim-1)$

/* Helper functions for expanding in basis functions a quantity we know should be sparse  */
/* For example, alpha, the phase space flow only depends on a few phase space coordinates */
doMakeExprLst(vals, S)  := makelist(if vals[i] # 0 then S[a0+i-1] else 0, i, 1, length(vals))$
doExpandLst(lst, basis) := sum(lst[i]*basis[i], i, 1, length(basis))$

calcVlasovSRStreamVolUpdater(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [bP,bC,bV,NP,NC,NV,cflPt,cid,vid,dir,f_e,incr_cdim,incr_vdim,cdir,vdir,expr,alpha_cdim_c,alpha_vdim_c,amid],

  kill(varsC, varsP, basisC, basisP),
  load(sconcat("basis-precalc/basis", basisFun, vdim, "x")),
  /* Generate basis in velocity space only. */
  bV : subst(pVsub,basisC[polyOrder]),
  NV : length(bV),

  /* kill basis variables from the above load method for safety */
  kill(varsC, varsP, basisC, basisP),
  /* Load basis of dimensionality requested. */
  load(sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v")),

  printf(fh, "#include <gkyl_vlasov_kernels.h> ~%"),

  /* Polynomial basis and its derivatives. */
  bP : basisP[polyOrder],
  bC : basisC[polyOrder],
  NP : length(bP),
  NC : length(bC),

  /* specify a point to evaluate alpha at for use in computing CFL */
  cflPt : makelist(varsP[d]=0, d, 1, length(varsP)),

  printf(fh, "GKYL_CU_DH double ~a_p~a(const double *w, const double *dxv, const double *p_over_gamma, const double *qmem, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, polyOrder),
  printf(fh, "  // w[NDIM]:   Cell-center coordinates.~%"),
  printf(fh, "  // dxv[NDIM]: Cell spacing.~%"),
  printf(fh, "  // p_over_gamma: p/gamma (velocity).~%"),
  printf(fh, "  // qmem:      q/m*EM fields (unused in streaming-only update).~%"),
  printf(fh, "  // f:         Input distribution function.~%"),
  printf(fh, "  // out:       Incremented output.~%"),

  cid : cidx(cdim),
  vid : vidx(cdim,vdim),

  for dir : 1 thru cdim do (
    printf(fh, "  const double dx1~a = 2/dxv[~a]; ~%", dir-1, cid[dir])
  ),

  /* set cell-spacing and access q/m*EM field data */
  for dir : 1 thru vdim do (
    printf(fh, "  const double *p~a_over_gamma = &p_over_gamma[~a]; ~%", dir-1, NV*(dir-1))
  ),
  printf(fh, "~%"),

  /* cflFreq_mid is our approximation of sum_i max(abs(alpha_i))/(dx_i/(2p+1)) */
  printf(fh, "  double cflFreq_mid = 0.0; ~%"),

  /* alpha_cdim = p/gamma, alpha_vdim = q/m (E + p/gamma x B) */
  printf(fh, "  double alpha_cdim[~a] = {0.0}; ~%", cdim*length(bP)),

  /* Expand distribution function f in phase basis. */
  f_e : doExpand1(f, bP),

  incr_cdim : 0,
  /* alpha_cdim = v dot grad(f) */
  for cdir : 1 thru cdim do (
    /* Expand p_over_gamma in velocity space basis */
    alpha_cdim_c : calcInnerProdList(varsP, 1, bP, doExpand1(p_over_gamma_fld[cdir], bV)),
    expr : gcfac(float(expand(radcan(alpha_cdim_c)))),

    /* Write out the component of alpha_cdim's phase space expansion */
    for i : 1 thru NP do (
      if expr[i] # 0.0 then printf(fh, "  ~a = ~a; ~%", alpha_cdim[NP*(cdir-1)+i-1], dx11[cdir]*expr[i])
    ),
    /* zero out components of alpha which are empty */
    alpha_cdim_NoZero   : doMakeExprLst(alpha_cdim_c, alpha_cdim),
    alpha_cdim_NoZero_e : doExpandLst(alpha_cdim_NoZero, bP),
    
    /* evaluate alpha_cdim at cflPt to approximate max(abs(alpha_vdim))/dv_i */
    amid : gcfac(float(expand(subst(cflPt,0.5*subst(a0=NP*(cdir-1),alpha_cdim_NoZero_e))))),
    printf(fh, "  cflFreq_mid += fabs(~a); ~%", amid),
    printf(fh, "~%"),

    /* Volume increment from configuration space. */
    incr_cdim : incr_cdim+subst(a0=NP*(cdir-1),calcInnerProdList(varsP, 1, diff(bP,varsP[cdir]), alpha_cdim_NoZero_e*f_e))
  ),

  /* write out first attempts to simplify the radicals with radcan, e.g. force sqrt(3)*sqrt(5) = sqrt(15) */
  /* outscripts loads scifac and uses the aggressive factorization routine "gcfac" */
  writeCExprsCollect1c(radcan(incr_cdim)),

  printf(fh, "~%"),
  printf(fh, "  return ~a*cflFreq_mid; ~%",float(2*polyOrder+1)),
  printf(fh, "} ~%")
)$
