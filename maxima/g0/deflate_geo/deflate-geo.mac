load("modal-basis")$
load(stringproc)$
load("out-scripts")$

/* These kernels take 3d DG fields (intended to be geometric quantities
and deflate them to either 1d or 2d DG fields.
*/

deflateGeo(fh, basisName, polyOrder) := block(
  [vars, basis, numCoeffs, varsNoZ, removeVarsList, i,
   removeVars, vars_deflated, removeStr, ndim, basis_deflated, 
   numCoeffs_deflated, fld_zl, fld_e, sublist, fld_deflated_e, fld_deflated_c],

  /* get the full 3d basis*/
  [vars,basis] : loadBasis(basisName, 3, polyOrder),
  numCoeffs : length(basis),

  /* We can never remove z*/
  varsNoZ : delete(z,vars),
  removeVarsList : delete([],full_listify(powerset(setify(varsNoZ)))),


  for i : 1 thru length(removeVarsList) do(
    removeVars : removeVarsList[i],
    vars_deflated : vars,
    removeStr : "rem",
    for j : 1 thru length(removeVars) do( 
      vars_deflated : delete(removeVars[j], vars_deflated),
      removeStr : sconcat(removeStr,removeVars[j])
    ),
    ndim : length(vars_deflated),
    basis_deflated : basisFromVars(basisName, vars_deflated, polyOrder) ,
    numCoeffs_deflated : length(basis_deflated),

    mkzlist(S,N) := makelist(S[i],i,0,N-1),

    fld_zl : mkzlist(fld, numCoeffs),
    fld_e : doExpand(fld_zl, basis),

    sublist : makelist(removeVars[k] = 0,k,1,length(removeVars)),

    fld_deflated_e : subst(sublist, fld_e),
    fld_deflated_c : calcInnerProdList(vars_deflated,1,basis_deflated,fld_deflated_e),


    printf(fh, "GKYL_CU_DH void deflate_geo_~ax_~a_p~a_~a(const double *fld, double *fld_deflated) ~%{ ~%", ndim, basisName, polyOrder, removeStr),

    writeCExprs1(fld_deflated, fld_deflated_c),

    printf(fh, " ~%"),
    printf(fh, "}~%")
  )




)$
