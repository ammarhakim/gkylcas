/*
  Generate the kernels header file for the updater which interpolates
  a DG field from one grid to another (dimensionality of the grids is
  the same, only resolution varies).
*/
/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 1$
minCdim_Ser : 1$
maxCdim_Ser : 3$

/* Tensor order basis. No need to generate p=1. */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
maxCdim_Tensor : 0$

/* ...... END OF USER INPUTS........ */

/* Vdim possibilities for each of Cdim=[1,2,3]. */
gkVdims : [[1,2], [2], [2]]$

/* To generate other bases, just add corresponding column to arrays below. */
bName        : ["ser", "tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$

printPrototypes(fh) := block(
  [bInd,c,gkV,v,maxPolyOrderB,polyOrder],

  for bInd : 1 thru length(bName) do (
    for c : minCdim[bInd] thru maxCdim[bInd] do (
      for gkV : 1 thru length(gkVdims[c]) do (
        v : gkVdims[c][gkV],

        maxPolyOrderB : maxPolyOrder[bInd],
        if (c=3) then maxPolyOrderB : 1, /* Only generate p=1 kernels for 3x2v */
        for polyOrder : minPolyOrder[bInd] thru maxPolyOrderB do (

          printf(fh, "GKYL_CU_DH void dg_interpolate_gyrokinetic_~ax~av_~a_p~a(const double *wDo, const double *wTar, const double *dxDo, const double *dxTar, const double *fldDo, double *fldTar);~%", c, v, bName[bInd], polyOrder)

        )
      )
    ),
    printf(fh, "~%")
  )

)$

fh : openw("~/max-out/gkyl_dg_interpolate_kernels.h")$
printf(fh, "#pragma once~%")$
printf(fh, "~%")$
printf(fh, "#include <gkyl_util.h>~%")$
printf(fh, "#include <math.h>~%")$
printf(fh, "~%")$
printf(fh, "EXTERN_C_BEG~%")$
printf(fh, "~%")$
printPrototypes(fh)$
printf(fh, "~%")$
printf(fh, "EXTERN_C_END~%")$
close(fh)$
