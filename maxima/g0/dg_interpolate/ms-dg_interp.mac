/* Generate kernels for the dg_interpolate updater
   which interpolates a DG field from one grid to another. */

load("dg_interpolate/dg_interp.mac")$
load(stringproc)$

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
maxCdim_Ser : 3$

/* Tensor order basis. No need to generate p=1. */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
maxCdim_Tensor : 0$

/* ...... END OF USER INPUTS........ */

/* Vdim possibilities for each of Cdim=[1,2,3]. */
vlasovVdims : [[1,2,3],[2,3],[3]]$
gkVdims : [[1,2], [2], [2]]$

/* To generate other bases, just add corresponding column to arrays below. */
bName        : ["ser", "tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$

/* Generate configuration-space kernels. */
for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    for polyOrder : minPolyOrder[bInd] thru maxPolyOrder[bInd] do (
      fname : sconcat("~/max-out/dg_interpolate_", c, "x_", bName[bInd], "_p", polyOrder, ".c"),
    
      disp(printf(false,"Creating file: ~a",fname)),
    
      fh : openw(fname),
      printf(fh, "#include <gkyl_dg_interpolate_kernels.h> ~%"),
      printf(fh, " ~%"),
      
      funcName : sconcat("dg_interpolate_", c, "x_", bName[bInd], "_p", polyOrder),
      gen_dg_interp_kern(fh, funcName, c, 0, bName[bInd], polyOrder, false),
      close(fh)
    )
  )
)$

/* Generate Vlasov kernels. */
for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    for vI : 1 thru length(vlasovVdims[c]) do (
      v : vlasovVdims[c][vI],

      maxPolyOrderB : maxPolyOrder[bInd],
      if (c=3) then maxPolyOrderB : 1, /* Only generate p=1 kernels for 3x2v */

      for polyOrder : minPolyOrder[bInd] thru maxPolyOrderB do (
        fname : sconcat("~/max-out/dg_interpolate_vlasov_", c, "x", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
      
        disp(printf(false,"Creating file: ~a",fname)),
      
        fh : openw(fname),
        printf(fh, "#include <gkyl_dg_interpolate_kernels.h> ~%"),
        printf(fh, " ~%"),
        
        funcName : sconcat("dg_interpolate_vlasov_", c, "x", v, "v_", bName[bInd], "_p", polyOrder),
        gen_dg_interp_kern(fh, funcName, c, v, bName[bInd], polyOrder, false),
        close(fh)
      )
    )
  )
)$

/* Generate gyrokinetic kernels. */
for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    for gkV : 1 thru length(gkVdims[c]) do (
      v : gkVdims[c][gkV],

      maxPolyOrderB : maxPolyOrder[bInd],
      if (c=3) then maxPolyOrderB : 1, /* Only generate p=1 kernels for 3x2v */

      for polyOrder : minPolyOrder[bInd] thru maxPolyOrderB do (
        fname : sconcat("~/max-out/dg_interpolate_gyrokinetic_", c, "x", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
      
        disp(printf(false,"Creating file: ~a",fname)),
      
        fh : openw(fname),
        printf(fh, "#include <gkyl_dg_interpolate_kernels.h> ~%"),
        printf(fh, " ~%"),
        
        funcName : sconcat("dg_interpolate_gyrokinetic_", c, "x", v, "v_", bName[bInd], "_p", polyOrder),
        gen_dg_interp_kern(fh, funcName, c, v, bName[bInd], polyOrder, true),
        close(fh)
      )
    )
  )
)$

