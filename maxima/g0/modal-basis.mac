/* Code to work with modal basis functions */
load("utilities")$

/* In the following "vars" is the list of independent variables */

/** Return a small matrix only retaining 'cols' columns */
shaveCols(Abig, cols) := block([nx,ny,nc,Asmall],
  [nx,ny] : matrix_size(Abig),
  nc : length(cols),
  Asmall : (Asmall : matrix([]), for i from 1 thru nc
    do (Asmall : addcol(Asmall, col(Abig, cols[i]))),
    Asmall),
  return (Asmall)
  )$


/* Inner product of functions f1 and f2 with weight w */
innerProd(vars, w, f1, f2) := block([n, r],
  n : length(vars),
  if n = 0 then return (w*f1*f2),
  r : integrate(w*f1*f2, vars[1], -1, 1),
  for i: 2 thru n do r : integrate(r, vars[i], -1, 1),
  return (r)
  )$

/* Norm of a function f */
norm(vars, f) := sqrt(innerProd(vars, 1, f, f))$

/** Use Gram-Schmidt procedure to make a set of orthonormal basis set */
a(vars, i,j,u,phi) := -innerProd(vars,1,u[i],phi[j])$
gsOrthoNorm(vars, u) := block([nbasis, phi, v],
  nbasis : length(u),
  phi : (phi : [u[1]/norm(vars, u[1])], for i from 2 thru nbasis
    do (v : u[i] + sum( a(vars,i,j,u,phi)*phi[j], j, 1, i-1 ),
      phi : endcons(v/norm(vars,v), phi)),
    phi)
  )$

/** Use Gram-Schmidt procedure to make a set of orthogonal basis set */
b(vars, i,j,u,phi) := -innerProd(vars,1,u[i],phi[j])/innerProd(vars,1,phi[j],phi[j])$
gsOrtho(vars, u) := block([nbasis, phi, v],
  nbasis : length(u),
  phi : (phi : [u[1]], for i from 2 thru nbasis
    do (v : u[i] + sum( b(vars,i,j,u,phi)*phi[j], j, 1, i-1 ),
      phi : endcons(v, phi)),
    phi)
  )$


listifyListOfSets(los) := block([b],
  b : [],
  for pl in los do (for p in pl do b : append(b,[p])),
  return(b)
  )$

makeMaxOrderPermutationList(nvar,pmax) := block([pl],
  pl : [],
  for i from 1 thru pmax
  do (pl : append(pl, map(permutations, listify(integer_partitions(i,nvar))))),
  return (listifyListOfSets(pl))
  )$

makeTensorPermutationList(nvar,pmax) := sublist(
  makeMaxOrderPermutationList(nvar,nvar*pmax),
  lambda ([p], apply(max,p)<=pmax)
  )$

d2sum(lst) := lsum(i,i,sublist(lst, lambda([x], x>1)))$
makeSerendipPermutationList(nvar,pmax) := sublist(
  makeTensorPermutationList(nvar,pmax),
  lambda ([p], d2sum(p) <= pmax)
  )$

calcPowers(var, pl) := product(var[i]^pl[i], i, 1, length(var))$
makeBasis(var, permList) := cons(1,map(lambda ([p],calcPowers(var,p)), permList))$

/* Make maximum order basis set */
makeMaxOrderBasis(var,n) := makeBasis(reverse(var),makeMaxOrderPermutationList(length(var),n))$

/* Make tensor-product order basis set */
makeTensorBasis(var,n) := makeBasis(reverse(var),makeTensorPermutationList(length(var),n))$

/* Make serendipity order basis set */
makeSerendipBasis(var,n) := makeBasis(reverse(var),makeSerendipPermutationList(length(var),n))$

/* Number of basis functions */
numMaxOrder(p,d) := binomial(p+d,d)$
numSerendipBasis(p,d) := sum(2^(d-j)*binomial(d,j)*binomial(p-j,j),j,0,min(d,floor(p/2)))$
numTensor(p,d) := (p+1)^d$

/* Shift basis to be centered around a give cell-centers and cell sizes */
shiftBasis(var, basis, varOut, xc, dx) := block([slst, b],
  slst : makelist(var[i] = 2*(varOut[i]-xc[i])/dx[i], i, 1, length(var)),
  b : map(lambda([x], subst(slst,x)), basis),
  return (b)
  )$

/* Shift function to [-1,1] */
shiftFunc(var, func, varOut, xc, dx) := block([slst, b],
  slst : makelist(var[i] = varOut[i]*dx[i]/2+xc[i], i, 1, length(var)),
  return (subst(slst, func))
  )$

/* Count number of non-zero entries in matrix */
numNonZero(mat) := block([nc,nr,nz],
  [nr,nc] : matrix_size(mat),
  nz : 0,
  for i : 1 thru nr do (nz : nz+lsum( if x = 0 then 0 else 1, x, mat[i])),
  return (nz)
  )$

/* Compute inner product with specified function list */
calcInnerProdList(vars, w, funcList, f) := fullratsimp(makelist(innerProd(vars, w, funcList[i], f), i, 1, length(funcList)))$

/* General product of functions f1 and f2 with weight w over arbitrary extents */
innerProdGen(vars, lims, w, f1, f2) := block([n, r],
  n : length(vars),
  if n = 0 then return (w*f1*f2),
  r : integrate(w*f1*f2, vars[1], lims[1][1], lims[1][2]),
  for i: 2 thru n do r : integrate(r, vars[i], lims[i][1], lims[i][2]),
  return (r)
  )$

/* Compute inner product with specified function list */
calcInnerProdListGen(vars, lims, w, funcList, f) := fullratsimp(makelist(
    innerProdGen(vars, lims, w, funcList[i], f), i, 1, length(funcList)))$

calcNormInnerProdListGen(vars, lims, w, funcList, f) := fullratsimp(makelist(
    innerProdGen(vars, lims, w, funcList[i], f), i, 1, length(funcList)) /
  makelist(innerProdGen(vars, lims, w, funcList[i], funcList[i]), i, 1, length(funcList)))$

/* Compute mass matrix, i.e M_ij = <w phi_i phi_j> */
calcMassMatrix(vars, w, basis) := block([n, mass],
  n : length(basis),
  mass : (mass : zeromatrix(n,n), for i from 1 thru n
    do (for j from 1 thru n
      do (mass[i,j] : innerProd(vars, w, basis[i], basis[j]))),
    mass),
  return (mass)
  )$

calcWeightedGradStiffMatrix(v, vars, w, basis) := block([n, stiff],
  n : length(basis),
  stiff : (stiff : zeromatrix(n,n), for i from 1 thru n
    do (for j from 1 thru n
      do (stiff[i,j] : innerProd(vars, w, diff(basis[i],v), basis[j])
        )),
    stiff),
  return (stiff)
  )$


/** Function to compute grad-stiffness matrix */
calcGradStiffMatrix(v, vars, basis) := calcWeightedGradStiffMatrix(v, vars, 1, basis)$

/** Function to compute (part of) stiffness matrix */
calcStiffMatrix(v, vars, basis) := block([n, stiff],
  n : length(basis),
  stiff : (stiff : zeromatrix(n,n), for i from 1 thru n
    do (for j from 1 thru n
      do (stiff[i,j] : innerProd(vars, 1, diff(basis[i],v), diff(basis[j],v))
        )),
    stiff),
  return (stiff)
  )$

/** Function to compute (part of) stiffness matrix */
calcWeightedStiffMatrix(v, vars, w, basis) := block([n, stiff],
  n : length(basis),
  stiff : (stiff : zeromatrix(n,n), for i from 1 thru n
    do (for j from 1 thru n
      do (stiff[i,j] : innerProd(vars, w, diff(basis[i],v), diff(basis[j],v))
        )),
    stiff),
  return (stiff)
  )$

/** Function to compute (part of) stiffness matrix */
calcWeightedStiffMatrixCross(v1, v2, vars, w, basis) := block([n, stiff],
  n : length(basis),
  stiff : (stiff : zeromatrix(n,n), for i from 1 thru n
    do (for j from 1 thru n
      do (stiff[i,j] : innerProd(vars, w, diff(basis[i],v1), diff(basis[j],v2))
        )),
    stiff),
  return (stiff)
  )$

/* Compute mass matrix, i.e M_ij = <w phi_i phi_j> */
calcCrossMassMatrix(varsC, basisC, varsP, basisP, w) := block([nC, nP, mass],
  nC : length(basisC),
  nP : length(basisP),
  mass : (mass : zeromatrix(nC,nP), for i from 1 thru nC
    do (for j from 1 thru nP
      do (mass[i,j] : innerProd(varsP, w, basisC[i], basisP[j]))),
    mass),
  return (mass)
  )$

/* Compute matrices needed for surface terms */
calcSurfMassMatrix(varsSurf, w, basis, vfix, vfix1, vfix2) := block([n, basisA, basisB],
  n : length(basis),
  basisA : subst([vfix=vfix1], basis),
  basisB : subst([vfix=vfix2], basis),
  mass : (mass : zeromatrix(n,n), for i from 1 thru n
    do (for j from 1 thru n
      do (mass[i,j] : innerProd(varsSurf, w, basisA[i], basisB[j]))),
    mass),
  return (mass)
  )$

numRows(mat) := block([r,c], [r,c] : matrix_size(mat), r)$
/* Convert column vector to list */
colVecToList(vec) := makelist(vec[i][1], i, 1, numRows(vec))$

/* Compute surface expansion given volume expansions */
calcSurfExpansionMatrix(varsSurf, vPerp, valPerp, basisSurf, basisVol) := block([nVol, nSurf, fvol, surfCoeff],
  nVol : length(basisVol),
  nSurf : length(basisSurf),
  fVol : sum(f[i]*subst(vPerp=valPerp, basisVol[i]), i, 1, nVol),
  surfCoeff : fullratsimp(makelist(innerProd(varsSurf, 1, basisSurf[i], fVol), i, 1, nSurf)),
  return (coefmatrix(surfCoeff, makelist(f[i], i, nVol)))
  )$

doExpand(f, basis) := sum(f[i]*basis[i], i, 1, length(basis))$
doExpand1(f, basis) := sum(f[i-1]*basis[i], i, 1, length(basis))$

/* Calculate integrals of a function specified by expansion
coefficients on a sub-blocks */
blockIntegrate(f, Nx, Ny, basis) := block(
  [dx, dy, fi, i, j],
  dx : 2/Nx,
  dy : 2/Ny,
  fi : makelist(0, i, 1, Nx*Ny),
  for i : 1 thru Nx do (
    for j : 1 thru Ny do (
      fi[i+(j-1)*Nx] : integrate(integrate(doExpand(f, basis),
          x, -1+(i-1)*dx, -1+i*dx), y, -1+(j-1)*dy, -1+j*dy)
      )
    ),
  return(fi)
  ) $
invBlockIntegrate(fi, Nx, Ny, basis) := block(
  [dx, dy, f, i, j, eqList, fSol],
  f : makelist(f[i], i, 1, length(basis)),
  dx : 2/Nx,
  dy : 2/Ny,
  eqList : [],
  for i : 1 thru Nx do (
    for j : 1 thru Ny do (
      eqList : append(
        eqList,
        [integrate(integrate(doExpand(f, basis),
            x, -1+(i-1)*dx, -1+i*dx), y, -1+(j-1)*dy, -1+j*dy) - fi[i+(j-1)*Nx]]
        )   
      )
    ), 
  fSol : linsolve(eqList, f),
  return(subst(fSol, f))
  ) $

/* Linspace function: N equispaced points from [l,r] inclusive */
linspace(l,r,N) := makelist(l+(r-l)*i/(N-1),i,0,N-1)$

/* Find index to minimum element in lst */
find_min_idx(lst) := block([cidx : 1],
  for i : 2 thru length(lst) do (
    cidx : if lst[i] < lst[cidx] then  i else cidx
    ),
  return (cidx)
  )$

loadBasis(basisType, dim, pOrder) := block(
  [basis,vars,btype,basisConstant,varsC,basisC,varsP,basisP],
  /* Load a basis based on dimensionality, basis type and polyOrder alone.
     For kinetic models please use loadPhaseBasis or loadGkBasis. */
  btype : basisType,
  if basisType="ser" then btype : "Ser"
  elseif basisType="tensor" then btype : "Tensor",

  kill(varsC, varsP, basisC, basisP),
  if (dim < 4) then (
    load(sconcat("basis-precalc/basis", btype, dim, "x"))
  ) else (
    load(sconcat("basis-precalc/basis", btype, dim-3, "x", 3, "v"))
  ),

  
  if (dim < 4) then (
    basis : if pOrder>0 then copylist(basisC[pOrder]) else basisConstant,
    vars  : copylist(varsC)
  ) else (
    basis : if pOrder>0 then copylist(basisP[pOrder]) else basisConstant,
    vars  : copylist(varsP)
  ),
  return([vars,basis])
)$

loadPhaseBasis(basisType, cdim, vdim, pOrder) := block(
  [modNm,varsC,basisC,varsP,basisP,bC,bP,btype,p],
  /* Load phase-space basis. Some complication below is due to the fact
     that some routines may call this version for surfaces and/or hybrid bases. */
  btype : basisType,
  if basisType="ser" then btype : "Ser"
  elseif basisType="tensor" then btype : "Tensor"
  elseif basisType="hyb" then btype : "Hybrid",

  kill(varsC, varsP, basisC, basisP),
  if vdim>0 then (
    if cdim>0 then (
      if pOrder = 1 and bType = "Ser" then  /* Forcing p=1 to hybrid. */
        modNm : sconcat("basis-precalc/basisHybrid", cdim, "x", vdim, "v")
      else
        modNm : sconcat("basis-precalc/basis", btype, cdim, "x", vdim, "v")
    ) else (
      if basisType = "tensor" then 
        modNm : sconcat("basis-precalc/basisTensor", vdim, "x")
      else
        modNm : sconcat("basis-precalc/basisSer", vdim, "x")
    )
  ) else (
    if basisType = "tensor" then 
      modNm : sconcat("basis-precalc/basisTensor", cdim, "x")
    else
      modNm : sconcat("basis-precalc/basisSer", cdim, "x")
  ),
  load(modNm),

  if vdim>0 then (
    if cdim>0 then (
      bC : copylist(basisC[pOrder]),  varsC : copylist(varsC),
      bP : copylist(basisP[pOrder]),  varsP : copylist(varsP)
    ) else (
      if basisType = "hyb" then p : 2 else p : pOrder,  /* Forcing p=1 to hybrid. */
      bP    : subst([x=vx,y=vy,z=vz],copylist(basisC[p])),
      varsP : subst([x=vx,y=vy,z=vz],copylist(varsC)),
      bC : [],  varsC : []
    )
  ) else (
    bC : copylist(basisC[pOrder]),  varsC : copylist(varsC),
    bP : bC,  varsP : varsC
  ),

  return([varsC,bC,varsP,bP])
)$

loadGkBasis(basisType, cdim, vdim, pOrder) := block(
  [btype,modNm,vSub,varsC,basisC,varsP,basisP,bC,bP,p],
  /* Load phase-space basis for gyrokinetics. Some complication below is due to the fact
     that some routines may call this version for surfaces and/or hybrid bases. */
  btype : basisType,
  if basisType="ser" then btype : "Ser"
  elseif basisType="tensor" then btype : "Tensor"
  elseif basisType="hyb" then btype : "Hybrid"
  elseif basisType="gkhyb" then btype : "GkHybrid",

  kill(varsC, varsP, basisC, basisP),
  if vdim > 0 then (
    if cdim>0 then (
      if pOrder = 1 then
        /* MF 2022/07/15: In principle we could make GK use Hybrid instead
           of GkHybrid. Consider that later (which would require changes further
           down in this function and in many other parts/files. */
        modNm : sconcat("basis-precalc/basisGkHybrid", cdim, "x", vdim, "v")
      else
        modNm : sconcat("basis-precalc/basis", btype, cdim, "x", vdim, "v")
    ) else (
      if basisType = "tensor" then 
        modNm : sconcat("basis-precalc/basisTensor", vdim, "x")
      else
        modNm : sconcat("basis-precalc/basisSer", vdim, "x")
    )
  ) else (
    if basisType = "tensor" then
      modNm : sconcat("basis-precalc/basisTensor", cdim, "x")
    else
      modNm : sconcat("basis-precalc/basisSer", cdim, "x")
  ),
  load(modNm),

  /* Save configuration and phase space basis and switch to GK variables. */
  vSub : [vx=vpar, vy=mu],

  if vdim>0 then (
    if cdim>0 then (
      bC : copylist(basisC[pOrder]),  varsC : copylist(varsC),
      bP : subst(vSub, copylist(basisP[pOrder])),  varsP : subst(vSub, copylist(varsP))
    ) else (
      if vdim=1 and basisType = "gkhyb" then (
        print("** Incorrect use of loadGkBasis: cdim/vdim not enough to specify which GkHybrid basis to load when vdim=1. **"),
        tmp : [1],  print(tmp[2]) /* just to trigger an error. */
      ),
      if basisType = "gkhyb" then p : 2 else p : pOrder,  /* Forcing p=1 to hybrid. */
      bP    : subst([x=vpar,y=mu],copylist(basisC[p])),
      varsP : subst([x=vpar,y=mu],copylist(varsC)),
      bC : [],  varsC : []
    )
  ) else (
    bC : copylist(basisC[pOrder]),  varsC : copylist(varsC),
    bP : bC,  varsP : varsC
  ),

  /* 2x2v kernels are (x,z,vpar,mu) so we need to relabel y=z. */
  if (cdim = 2) then (
    varsSub : [y=z],
    varsC   : subst(varsSub, varsC),
    bC      : subst(varsSub, bC),
    varsP   : subst(varsSub, varsP),
    bP      : subst(varsSub, bP)
  ),

  return([varsC,bC,varsP,bP,vSub])
)$

loadGkHybBasisFromVars(varsIn) := block(
  [dimIn,cdim,vdim,hasvpar,vars,basis,varsC,basisC,varsP,basisP,basisConstant],
  /* Load a basis given the variables, intended to be used with the GkHybrid
     basis. The need to do this arises when needing surface bases, which
     more complicated with GkHybrid. */

  dimIn : length(varsIn),
  vdim : length(sublist(varsIn,lambda([var],charat(string(var),1)="v" or var=vpar or var=mu))),
  cdim : dimIn - vdim,

  hasvpar : isInList(vpar,varsIn) or isInList(vx,varsIn),

  /* In case varsP and varsC were already loaded, save them
     and restore them at the end of this function. */
  if listp(varsC) then (oldVarsC : copylist(varsC)),
  if listp(varsP) then (oldVarsP : copylist(varsP)),

  if hasvpar then (
    if cdim=0 then (
      if vdim=1 then (
        load(sconcat("basis-precalc/basisSer1x")),
        basis : subst(x=vpar,basisC[2]),  vars : subst(x=vpar,varsC)
      ) elseif vdim=2 then (
        load(sconcat("basis-precalc/basisHybrid1x1v")),
        /* Careful, the order of these substitutions matter. */
        basis : subst([vx^2*x-x/3=vpar^2*mu-mu/3,vx^2=vpar^2,vx=mu,x=vpar],basisP[1]),
        vars  : subst([x=vpar,vx=mu],varsP)
      )
    ) else (
      if vdim=1 then (
        load(sconcat("basis-precalc/basisHybrid",cdim,"x",vdim,"v"))
      ) elseif vdim=2 then (
        load(sconcat("basis-precalc/basisGkHybrid",cdim,"x",vdim,"v"))
      ),
      basis : subst([vx=vpar,vy=mu],basisP[1]),  vars : subst([vx=vpar,vy=mu],varsP)
    )
  ) else (
    if cdim=0 then (
      load(sconcat("basis-precalc/basisSer", 1, "x")),
      basis : subst(x=mu,basisC[1]),  vars : subst(x=mu,varsC)
    ) else (
      [vars, basis] : loadBasis("ser", cdim+vdim, 1),
      if vdim = 1 then (
        basis : subst(vars[cdim+1]=mu,basis),
        vars  : subst(vars[cdim+1]=mu,vars)
      )
    )
  ),
  replaceList : makelist(vars[i]=varsIn[i],i,1,dimIn),
  basis : psubst(replaceList,basis),

  /* Restore varsC and varsP. */
  if listp(oldVarsC) then (varsC : copylist(oldVarsC)),
  if listp(oldVarsP) then (varsP : copylist(oldVarsP)),

  return([varsIn,basis])
)$

/* Load a basis of type 'basisType' and polynomial order 'pOrder'
   in the variables given by the list 'varsIn'. */
basisFromVars(basisType, varsIn, pOrder) := block(
  [dimIn,vdim,cdim,oldVarsC,oldVarsP,varsc,bc,basis,vars,vsub,
   replaceList,btype,varsC,basisC,varsP,basisP,basisConstant],

  btype : basisType,
  if basisType="ser" then btype : "Ser"
  elseif basisType="tensor" then btype : "Tensor"
  elseif basisType="hyb" then btype : "Hybrid"
  elseif basisType="gkhyb" then btype : "GkHybrid",

  dimIn : length(varsIn),
  if basisType="hyb" or basisType="gkhyb" then (
    vdim : length(sublist(varsIn,lambda([var],charat(string(var),1)="v" or var=vpar or var=mu))),
    cdim : dimIn - vdim
  ),

  /* In case varsP and varsC were already loaded, save them
     and restore them at the end of this function. */
  if listp(varsC) then (oldVarsC : copylist(varsC)),
  if listp(varsP) then (oldVarsP : copylist(varsP)),

  if basisType = "hyb" then (
    [varsc,bc,vars,basis] : loadPhaseBasis(basisType, cdim, vdim, 1)
  ) elseif basisType = "gkhyb" then (
    /* vdim is insufficient, because vdim=1 could mean vpar or mu,
       and one has p=2 (vpar) while the other p=1 (mu). Sort this out. */
    [vars, basis] : loadGkHybBasisFromVars(varsIn)
  ) elseif dimIn > 3 then (
    load(sconcat("basis-precalc/basis", btype, dimIn-3, "x", 3, "v")),
    basis : basisP[pOrder],
    vars  : varsP
  ) elseif dimIn > 0 then (
    load(sconcat("basis-precalc/basis", btype, dimIn, "x")),
    basis : basisC[pOrder],
    vars  : varsC
  ) else (
    basis : [],
    vars  : []
  ),
  replaceList : makelist(vars[i]=varsIn[i],i,1,dimIn),
  basis : psubst(replaceList,basis),

  /* Restore varsC and varsP. */
  if listp(oldVarsC) then (varsC : copylist(oldVarsC)),
  if listp(oldVarsP) then (varsP : copylist(oldVarsP)),

  return(basis)
)$
