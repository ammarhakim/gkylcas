load("gk_neut_hamil/gk-neut-hamil")$
load(stringproc)$
/*  This script calls the func that generates kernels for gk neut hamiltonian
    h = 1/2*gij*w_i*w_j
    These quantities are derived from the grid and must be continuous, 
    so they are projected onto basis functions using Gauss-Lobatto nodes. */

/* ...... USER INPUTS........ */

/* Tensor basis. */
minPolyOrder : 1$
maxPolyOrder : 1$
minVdim : 3$    /* see begining of v loop below though. */
maxVdim : 3$

/* ...... END OF USER INPUTS........ */

bName        : ["tensor"]$
minPolyOrder : [minPolyOrder]$
maxPolyOrder : [maxPolyOrder]$
minVdim      : [minVdim]$
maxVdim      : [maxVdim]$
for bInd : 1 thru length(bName) do (
  for v : 3 thru maxVdim[bInd] do (
    for c : 1 thru 3 do ( 
      minPolyOrderB : minPolyOrder[bInd],
      maxPolyOrderB : maxPolyOrder[bInd],
      for polyOrder : minPolyOrderB thru maxPolyOrderB do (
        fname : sconcat("~/max-out/gk_neut_hamil_", c, "x", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
        fh : openw(fname),
        funcName : sconcat("gk_neut_hamil_", c, "x", v, "v_", bName[bInd], "_p", polyOrder),
        calcHamil(fh, funcName, c, v, bName[bInd], polyOrder),
        close(fh)
      )
    )
  )
);
