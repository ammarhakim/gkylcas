/*
  Generate kernels for an updater that forces the skin
  surface to match the corresponding ghost surface.
*/
load("skin_surf_from_ghost/ssfg.mac")$

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 1$
minCdim_Ser : 1$
maxCdim_Ser : 3$

/* Tensor order basis. No need to generate p=1. */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
maxCdim_Tensor : 0$

/* Vdim possibilities for each of Cdim=[1,2,3]. */
gkVdims : [[1,2], [2], [2]]$

/* ...... END OF USER INPUTS........ */

/* To generate other bases, just add corresponding column to arrays below. */
bName        : ["ser", "tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$

/* Generate kernels of selected types. */
for bInd : 1 thru length(bName) do (
  maxPolyOrderB : maxPolyOrder[bInd],
  if (c=3) then maxPolyOrderB : 1, /* Only generate p=1 kernels for 3x2v */

  for c : minCdim[bInd] thru maxCdim[bInd] do (

    /* Generate conf space kernels. */
    for polyOrder : minPolyOrder[bInd] thru maxPolyOrderB do (
      fname : sconcat("~/max-out/skin_surf_from_ghost_", c, "x_", bName[bInd], "_p", polyOrder, ".c"),
      disp(printf(false,"Creating conf-space file: ~a",fname)),

      fh : openw(fname),
      printf(fh, "#include <gkyl_skin_surf_from_ghost_kernels.h> ~%"),
      printf(fh, "~%"),

      funcName : sconcat("skin_surf_from_ghost_~a_", c, "x_", bName[bInd], "_p", polyOrder),
      genSSFGkernel(fh, funcName, c, bName[bInd], polyOrder),
      close(fh)
    )

  )
)$
