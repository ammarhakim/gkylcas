/* Generate kernels that compute the moments of the distribution
   function in Vlasov and gyrokinetic models. */
load("lbo_gyrokinetic/gkBoundaryCorr")$
load(stringproc)$

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
maxCdim_Ser : 3$

/* Tensor product basis. */
/* Note that Serendipity, p = 1, is equivalent to Tensor */
/* Thus no need to calculate p = 1 Tensor basis */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
maxCdim_Tensor : 0$

/* Vdim possibilities for each of Cdim=[1,2,3]. */
gkVdims : [[1,2], [2], [2]]$

/* ...... END OF USER INPUTS........ */

/* To generate other bases, just add corresponding column to arrays below. */
bName        : ["ser", "tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$

/* Generate kernels of selected types. */
for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    for gkV : 1 thru length(gkVdims[c]) do (
      v : gkVdims[c][gkV],

      minPolyOrderB : minPolyOrder[bInd],
      maxPolyOrderB : maxPolyOrder[bInd],
      if (c+v>4 and maxPolyOrderB > 2) then maxPolyOrderB : 2,

      for polyOrder : minPolyOrderB thru maxPolyOrderB do (  
	/* Create a separate file w/ boundary corrections. */
	disp(printf(false,sconcat("Creating GkLBO boundary corrections ~ax~av ", bName[bInd], " p~a"),c,v,polyOrder)),
	fname : sconcat("~/max-out/mom_bcorr_lbo_gyrokinetic_", c, "x", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
	fh : openw(fname),
	printf(fh, "#include <gkyl_mom_bcorr_lbo_gyrokinetic_kernels.h> ~%"),
	funcName : sconcat("mom_bcorr_lbo_gyrokinetic_", c, "x", v, "v_", bName[bInd], "_p", polyOrder),
	calcBoundaryIntegral(fh, funcName, c, v, bName[bInd], polyOrder),
	close(fh)
      )
    )
  )
);


