load("modal-basis")$
load("out-scripts");
load("nodal_operations/nodal_functions")$
load("utilities")$
load("lbo_gyrokinetic/gkLBO_util")$
load(stringproc)$
fpprec : 24$

/* This script generates the kernels for the surface term
   drag contribution from Lenard Bernstein operator allowing
   for a velocity coordinate mapping.. */

calcGkLBODragUpdateVPar(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,vSub,NP,NC,varsV,vmap_e,vmapSq_e,vmap_prime_e,pDim,vid1,vv,surfVars,
   nuSum_e,nuUSum_e,alphaDr,surf_cvars,surf_vvars,bSurf,surfNodes,numBSurf,numNodes,
   alphaDrSurf_l_c,alphaDrSurf_r_c,alphaDrSurf_l_e,alphaDrSurf_r_e,alphaOrd_l_n,alphaOrd_r_n,
   surfNodesConfig,numNodesVel,i,rcoFac_l,rcoFac_r,j,fHatSurf_l_e,fHatSurf_r_e,Ghat_l_c,
   Ghat_r_c,glst1_l,glst1_r,Ghat_l_e,Ghat_r_e,drag_incr_l,drag_incr_r],
  
  /* Load basis of dimensionality requested. */
  [varsC,bC,varsP,bP,vSub] : loadGkBasis(basisFun, cdim, vdim, polyOrder),
  NC : length(bC),  NP : length(bP),
  varsV : makelist(varsP[cdim+i],i,1,vdim),

  /* Expand velocity mapping fields. */
  [vmap_e,vmapSq_e,vmap_prime_e] : expandVmapFields(varsP),

  pDim     : cdim+vdim,
  vid1     : makelist(i,i,cdim,cdim+vdim-1),
  vv       : varsV[1],
  surfVars : delete(vv,varsP),

  printf(fh, "GKYL_CU_DH double ~a(const double *dxv, const double *vmap, const double *vmap_prime_l, const double *vmap_prime_c, const double *vmap_prime_r, const double m_, const double *bmag_inv, const double *nuSum, const double *nuPrimMomsSum, const double *fl, const double *fc, const double *fr, double* GKYL_RESTRICT out) ~%{ ~%", funcNm),
  printf(fh, "  // dxv[~a]: cell spacing. ~%", cdim+vdim),
  printf(fh, "  // vmap: velocity space mapping.~%"),
  printf(fh, "  // vmap_prime_l,vmap_prime_c,vmap_prime_r: velocity space mapping derivative in left, center and right cells.~%"),
  printf(fh, "  // m_: species mass.~%"),
  printf(fh, "  // bmag_inv: 1/(magnetic field magnitude). ~%"),
  printf(fh, "  // nuSum: collisionalities added (self and cross species collisionalities). ~%"),
  printf(fh, "  // nuPrimMomsSum[~a]: sum of bulk velocities and thermal speeds squared times their respective collisionalities. ~%", 2*NC),
  printf(fh, "  // fl/fc/fr: distribution function in cells ~%"),
  printf(fh, "  // out: incremented distribution function in cell ~%"),
  printf(fh, "~%"),

  /* Create a pointer to nuUSum. */
  printf(fh, "  const double *nuUSum = nuPrimMomsSum;~%"),
  printf(fh, "~%"),

  printf(fh, "  double rdv2 = 2.0/dxv[~a]; ~%", vid1[1]),
  printf(fh, "~%"),

  nuSum_e : doExpand1(nuSum,bC),
  /* Expand the mean flow speed in the configuration basis. */
  nuUSum_e : doExpand1(nuUSum,bC),
  /* Calculate the alpha-velocity due to drag. */
  alphaDr : nuSum_e*vmap_e[1]-nuUSum_e,
    
  /* Surface basis (equivalent to basis of one lower
     dimensionality without surface variable), and
     surface nodes given by tensor product of Gauss-Legendre quadrature points. */
  surf_cvars : delete(vv, makelist(varsP[i],i,1,cdim)),
  surf_vvars : delete(vv, makelist(varsP[cdim+i],i,1,vdim)),
  if polyOrder = 1 then (  /* Force p=1 to use hybrid basis. */
    bSurf     : basisFromVars("gkhyb",surfVars,polyOrder),
    surfNodes : gaussOrdGkHyb(1+1, surf_cvars, surf_vvars)
  ) else (
    bSurf     : basisFromVars(basisFun,surfVars,polyOrder),
    surfNodes : gaussOrd(polyOrder+1, pDim-1)
  ),
  numNodes : length(surfNodes),
  numBSurf : length(bSurf),

  /* Project alphaDrag evaluated at interior surface onto surf basis. */
  alphaDrSurf_l_c : fullratsimp(calcInnerProdList(surfVars, 1, bSurf, subst(vv=-1,alphaDr))),
  alphaDrSurf_r_c : fullratsimp(calcInnerProdList(surfVars, 1, bSurf, subst(vv=1,alphaDr))),
  printf(fh, "  double alphaDrSurf_l[~a] = {0.0}; ~%", numBSurf),
  writeCExprs1(alphaDrSurf_l, alphaDrSurf_l_c),
  printf(fh, "~%"),
  printf(fh, "  double alphaDrSurf_r[~a] = {0.0}; ~%", numBSurf),
  writeCExprs1(alphaDrSurf_r, alphaDrSurf_r_c),
  printf(fh, "~%"),

  alphaDrSurf_l_c : makelistNoZeros1(alphaDrSurf_l_c, alphaDrSurf_l),
  alphaDrSurf_r_c : makelistNoZeros1(alphaDrSurf_r_c, alphaDrSurf_r),
  alphaDrSurf_l_e : doExpand(alphaDrSurf_l_c, bSurf),
  alphaDrSurf_r_e : doExpand(alphaDrSurf_r_c, bSurf),

  /* Upwind the drag term using quadrature point evaluation. */

  /* Evaluate alpha at ordinates.
     Note: alphaSurf_e is already a surface expansion. 
     In addition, it is continuous and does not vary with respect to the surface variable.
     We still require a alpha_l (w - dv/2) and alpha_r (w + dv/2) for the two sides of the cell */
  alphaOrd_l_n : gcfac(float(evAtNodes(alphaDrSurf_l_e,surfNodes,surfVars))),
  alphaOrd_r_n : gcfac(float(evAtNodes(alphaDrSurf_r_e,surfNodes,surfVars))),

  /* Drag term flux does not depend on velocity space surface on which it sits
     i.e., drag term in vparallel does not depend on mu
     so sort quadrature points between configuration space and velocity space */
  /* Get number of configuration space nodes */
  surfNodesConfig : gaussOrd(polyOrder+1, cdim),
  numNodesConfig  : length(surfNodesConfig),
  numNodesVel     : numNodes/numNodesConfig,

  printf(fh, "  double fUpwindQuad_l[~a] = {0.0};~%", numNodes),
  printf(fh, "  double fUpwindQuad_r[~a] = {0.0};~%", numNodes),
  printf(fh, "  double fUpwind_l[~a] = {0.0};~%", numBSurf),
  printf(fh, "  double fUpwind_r[~a] = {0.0};~%", numBSurf),
  printf(fh, "  double Ghat_l[~a] = {0.0}; ~%", numBSurf),
  printf(fh, "  double Ghat_r[~a] = {0.0}; ~%", numBSurf),
  printf(fh, "~%"),

  vmap_prime_fac_l : subst(vmap_prime=vmap_prime_l, vmap_prime_e[1]),
  vmap_prime_fac_c : subst(vmap_prime=vmap_prime_c, vmap_prime_e[1]),
  vmap_prime_fac_r : subst(vmap_prime=vmap_prime_r, vmap_prime_e[1]),

  alphaSimp(a) := float(expand(fullratsimp(a))),
  basisStr : sconcat(basisFun, "_", pDim, "x"),
  rcoFac_l : 1.,  rcoFac_r : 1.,
  if polyOrder=1 then (  /* Force p=1 to use hybrid basis. */
    alphaSimp(a) := fullratsimp(a),
    basisStr : sconcat("gkhyb_", cdim, "x", vdim, "v"),
    /* This subst eliminates the need for another variable, and removes
       the common factor (for p=1) which is not needed to determine sign. */
    rcoFac_l : 1./(content(alphaOrd_l_n[1],alphaDrSurf_l[0])[1]),
    rcoFac_r : 1./(content(alphaOrd_r_n[1],alphaDrSurf_r[0])[1])
  ),

  for i : 1 thru numNodesConfig do (
    printf(fh, "  if (~a < 0) { ~%", alphaSimp(alphaOrd_l_n[i]*rcoFac_l)),
    for j : 1 thru numNodesVel do (
      printf(fh, "    fUpwindQuad_l[~a] = ~a_p~a_surfx~a_eval_quad_node_~a_r(fl)/~a; ~%", (j-1)+(i-1)*numNodesVel, basisStr, polyOrder, cdim+dir, (j-1)+(i-1)*numNodesVel, vmap_prime_fac_l)
    ),
    printf(fh, "  } else { ~%"),
    for j : 1 thru numNodesVel do (
      printf(fh, "    fUpwindQuad_l[~a] = ~a_p~a_surfx~a_eval_quad_node_~a_l(fc)/~a; ~%", (j-1)+(i-1)*numNodesVel, basisStr, polyOrder, cdim+dir, (j-1)+(i-1)*numNodesVel, vmap_prime_fac_c)
    ),
    printf(fh, "  } ~%"),
    /* Drag term on right side of interface */
    printf(fh, "  if (~a < 0) { ~%", alphaSimp(alphaOrd_r_n[i]*rcoFac_r)),
    for j : 1 thru numNodesVel do (
      printf(fh, "    fUpwindQuad_r[~a] = ~a_p~a_surfx~a_eval_quad_node_~a_r(fc)/~a; ~%", (j-1)+(i-1)*numNodesVel, basisStr, polyOrder, cdim+dir, (j-1)+(i-1)*numNodesVel, vmap_prime_fac_c)
    ),
    printf(fh, "  } else { ~%"),
    for j : 1 thru numNodesVel do (
      printf(fh, "    fUpwindQuad_r[~a] = ~a_p~a_surfx~a_eval_quad_node_~a_l(fr)/~a; ~%", (j-1)+(i-1)*numNodesVel, basisStr, polyOrder, cdim+dir, (j-1)+(i-1)*numNodesVel, vmap_prime_fac_r)
    ),
    printf(fh, "  } ~%")
  ),

  printf(fh, "~%"),
  printf(fh, "  // Project tensor nodal quadrature basis back onto modal basis. ~%"),
  if polyOrder=1 then ( /* Force p=1 to use hybrid basis. */
    printf(fh, "  gkhyb_~ax~av_p1_vpardir_upwind_quad_to_modal(fUpwindQuad_l, fUpwind_l); ~%", cdim, vdim),
    printf(fh, "  gkhyb_~ax~av_p1_vpardir_upwind_quad_to_modal(fUpwindQuad_r, fUpwind_r); ~%", cdim, vdim)
  ) else (
    printf(fh, "  ~a_~ax_p~a_upwind_quad_to_modal(fUpwindQuad_l, fUpwind_l); ~%", basisFun, cdim+vdim, polyOrder),
    printf(fh, "  ~a_~ax_p~a_upwind_quad_to_modal(fUpwindQuad_r, fUpwind_r); ~%", basisFun, cdim+vdim, polyOrder)
  ),
  printf(fh, "~%"),

  /* Create expansions of f_hat (upwinded f) on the left and right in the surface basis. */
  fHatSurf_l_e : doExpand1(fUpwind_l, bSurf),
  fHatSurf_r_e : doExpand1(fUpwind_r, bSurf),
 
  Ghat_l_c : calcInnerProdList(surfVars,alphaDrSurf_l_e,bSurf,fHatSurf_l_e),
  Ghat_r_c : calcInnerProdList(surfVars,alphaDrSurf_r_e,bSurf,fHatSurf_r_e),

  /* Clever factorization is possible for polyOrder = 1, but for higher
     polynomial orders, factorization is *too* clever and can lead to 
     deeply nested parentheses, not ideal for compiler optimizations */
  if (polyOrder = 1) then (
    writeCExprsNoExpand1(Ghat_l, Ghat_l_c)
  ) else (
    writeCExprs1(Ghat_l, Ghat_l_c)
  ),
  printf(fh, "~%"),
  flush_output(fh),

  if (polyOrder = 1) then (
    writeCExprsNoExpand1(Ghat_r, Ghat_r_c)
  ) else (
    writeCExprs1(Ghat_r, Ghat_r_c)
  ),
  printf(fh, "~%"),
  flush_output(fh),
  
  /* Ghat_c (coefficients of Ghat) is what gets written. From here
  ** on we can simply refer to Ghat. */
  Ghat_l_c : makelistNoZeros1(Ghat_l_c, Ghat_l),
  Ghat_r_c : makelistNoZeros1(Ghat_r_c, Ghat_r),
  Ghat_l_e : doExpand(Ghat_l_c, bSurf),
  Ghat_r_e : doExpand(Ghat_r_c, bSurf),

  drag_incr_l : calcInnerProdList(surfVars, -1, subst(vv=-1, bP), Ghat_l_e),
  drag_incr_r : calcInnerProdList(surfVars, 1, subst(vv=1, bP), Ghat_r_e),

  writeCIncrExprs1(out, rdv2*drag_incr_r + rdv2*drag_incr_l), 
  printf(fh, "~%"),

  printf(fh, "  return 0.;~%"),  /* Return CFL frequency in volume kernel. */
  printf(fh, "~%"),

  printf(fh, "} ~%")
);

calcGkLBODragUpdateMu(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block( 
  [varsC,bC,varsP,bP,vSub,NP,NC,varsV,vmap_e,vmapSq_e,vmap_prime_e,pDim,vid1,vv,surfVars,
   nuSum_e,alphaDr,bSurf,numBSurf,alphaDrSurf_l_c,alphaDrSurf_r_c,alphaDrSurf_l_e,alphaDrSurf_r_e,
   Ghat_l_c,Ghat_r_c,GhatNoZero_l,GhatNoZero_r,Ghat_l_e,Ghat_r_e,incr_l,incr_r],

  /* Load basis of dimensionality requested. */
  [varsC,bC,varsP,bP,vSub] : loadGkBasis(basisFun, cdim, vdim, polyOrder),
  NC : length(bC),  NP : length(bP),
  varsV : makelist(varsP[cdim+i],i,1,vdim),

  /* Expand velocity mapping fields. */
  [vmap_e,vmapSq_e,vmap_prime_e] : expandVmapFields(varsP),

  pDim     : cdim+vdim,
  vid1     : makelist(i,i,cdim,cdim+vdim-1),
  vv       : varsV[2],
  surfVars : delete(vv,varsP),

  printf(fh, "GKYL_CU_DH double ~a(const double *dxv, const double *vmap, const double *vmap_prime_l, const double *vmap_prime_c, const double *vmap_prime_r, const double m_, const double *bmag_inv, const double *nuSum, const double *nuPrimMomsSum, const double *fl, const double *fc, const double *fr, double* GKYL_RESTRICT out) ~%{ ~%", funcNm),
  printf(fh, "  // dxv[~a]: cell spacing. ~%", cdim+vdim),
  printf(fh, "  // vmap: velocity space mapping.~%"),
  printf(fh, "  // vmap_prime_l,vmap_prime_c,vmap_prime_r: velocity space mapping derivative in left, center and right cells.~%"),
  printf(fh, "  // m_: species mass.~%"),
  printf(fh, "  // bmag_inv: 1/(magnetic field magnitude). ~%"),
  printf(fh, "  // nuSum: collisionalities added (self and cross species collisionalities). ~%"),
  printf(fh, "  // nuPrimMomsSum[~a]: sum of bulk velocities and thermal speeds squared times their respective collisionalities. ~%", 2*NC),
  printf(fh, "  // fl/fc/fr: distribution function in cells ~%"),
  printf(fh, "  // out: incremented distribution function in cell ~%"),
  printf(fh, "~%"),

  printf(fh, "  double rdv2 = 2.0/dxv[~a]; ~%", vid1[2]),
  printf(fh, "~%"),

  /* Surface contribution is defined as integral(phi^- Ghat) over the surface. */

  nuSum_e : doExpand1(nuSum,bC),
  /* Calculate the alpha-velocity due to drag. */
  alphaDr : 2.0*nuSum_e*vmap_e[2],
    
  /* Surface basis. Equivalent to basis of one lower
     dimensionality without surface variable. */
  if polyOrder = 1 then (  /* Force p=1 to use hybrid basis. */
    bSurf : basisFromVars("gkhyb",surfVars,polyOrder)
  ) else (
    bSurf : basisFromVars(basisFun,surfVars,polyOrder)
  ),
  numBSurf : length(bSurf),

  printf(fh, "  double Ghat_r[~a] = {0.0}; ~%", numBSurf),
  printf(fh, "  double Ghat_l[~a] = {0.0}; ~%", numBSurf),

  /* Project alphaDrag evaluated at interior surface onto surf basis. */
  alphaDrSurf_l_c : fullratsimp(calcInnerProdList(surfVars, 1, bSurf, subst(vv=-1,alphaDr))),
  alphaDrSurf_r_c : fullratsimp(calcInnerProdList(surfVars, 1, bSurf, subst(vv=1,alphaDr))),
  printf(fh, "  double alphaDrSurf_l[~a] = {0.0}; ~%", numBSurf),
  writeCExprs1(alphaDrSurf_l, alphaDrSurf_l_c),
  printf(fh, "~%"),
  printf(fh, "  double alphaDrSurf_r[~a] = {0.0}; ~%", numBSurf),
  writeCExprs1(alphaDrSurf_r, alphaDrSurf_r_c),
  printf(fh, "~%"),

  alphaDrSurf_l_c : makelistNoZeros1(alphaDrSurf_l_c, alphaDrSurf_l),
  alphaDrSurf_r_c : makelistNoZeros1(alphaDrSurf_r_c, alphaDrSurf_r),
  alphaDrSurf_l_e : doExpand(alphaDrSurf_l_c, bSurf),
  alphaDrSurf_r_e : doExpand(alphaDrSurf_r_c, bSurf),
  
  vmap_prime_fac_l : subst(vmap_prime=vmap_prime_l, vmap_prime_e[2]),
  vmap_prime_fac_c : subst(vmap_prime=vmap_prime_c, vmap_prime_e[2]),
  vmap_prime_fac_r : subst(vmap_prime=vmap_prime_r, vmap_prime_e[2]),

  /* Because -2*nu*mu is negative definite, need right edge value */
  /* Evaluate surface projection of Ghat_r = 2*nu*mu_r f_r. */
  fr_e : doExpand1(fr, bP),
  Ghat_r_c : calcInnerProdList(surfVars, alphaDrSurf_r_e, bSurf, subst(vv=-1, fr_e)/vmap_prime_fac_r),

  /* Evaluate surface projection of Ghat_l = 2*nu*mu_l f_c. */
  fc_e : doExpand1(fc, bP),
  Ghat_l_c : calcInnerProdList(surfVars, alphaDrSurf_l_e, bSurf, subst(vv=-1, fc_e)/vmap_prime_fac_c),

  /* Clever factorization is possible for polyOrder = 1, but for higher
     polynomial orders, factorization is *too* clever and can lead to 
     deeply nested parentheses, not ideal for compiler optimizations */
  if (polyOrder = 1) then (
    writeCExprsNoExpand1(Ghat_l, Ghat_l_c)
  ) else (
    writeCExprs1(Ghat_l, Ghat_l_c)
  ),
  printf(fh, "~%"),
  flush_output(fh),

  if (polyOrder = 1) then (
    writeCExprsNoExpand1(Ghat_r, Ghat_r_c)
  ) else (
    writeCExprs1(Ghat_r, Ghat_r_c)
  ),
  printf(fh, "~%"),
  flush_output(fh),

  /* Zero out components of Ghat which are empty. */
  Ghat_r_c : makelistNoZeros1(Ghat_r_c, Ghat_r),
  Ghat_l_c : makelistNoZeros1(Ghat_l_c, Ghat_l),
  Ghat_r_e : doExpand(Ghat_r_c, bSurf),
  Ghat_l_e : doExpand(Ghat_l_c, bSurf),
  
  /* Compute surface contribution integral(phi^- Ghat) on the right. */
  incr_l : calcInnerProdList(surfVars, -1, subst(vv=-1.0, bP), Ghat_l_e),
  incr_r : calcInnerProdList(surfVars, 1, subst(vv=1.0, bP), Ghat_r_e),
  writeCIncrExprsCollect1lhsc(out, rdv2*incr_l + rdv2*incr_r),
  printf(fh, "~%"),

  printf(fh, "  return 0.;~%"),  /* Return CFL frequency in volume kernel. */
  printf(fh, "~%"),

  printf(fh, "} ~%")
);
