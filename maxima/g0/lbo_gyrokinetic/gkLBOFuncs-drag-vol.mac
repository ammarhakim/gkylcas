load("modal-basis")$
load("out-scripts");
load("utilities");
load("lbo_gyrokinetic/gkLBO_util")$
load(stringproc)$
fpprec : 24$

/* This script generates the kernels for the drag volume
   kernel of the Lenard Bernstein operator for the
   gyrokinetic equation. */

calcGkLBODragVolUpdater(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,NP,NC,pOrderVpar,zr,vidx1,dir,f_e,nuSum_e,nuUSum_e,
   incrDrag,cflFreq_mid,alphaDrag_c,expr,i,alphaDrag_e],

  printf(fh, "#include <gkyl_lbo_gyrokinetic_kernels.h> ~%"),

  /* Load basis of dimensionality requested. */
  [varsC,bC,varsP,bP,vSub] : loadGkBasis(basisFun, cdim, vdim, polyOrder),
  NC : length(bC),  NP : length(bP),
  varsV : makelist(varsP[i+cdim],i,1,vdim),

  /* Expand velocity mapping fields. */
  [vmap_e,vmapSq_e,vmap_prime_e] : expandVmapFields(varsP),

  /* Identify polyOrder in velocity space as p=2 for p=1 since we force p=1 to
     mean hybrid basis. */
  pOrderVpar : polyOrder,
  if polyOrder=1 then ( pOrderVpar : 2 ),

  /* Specify a point to evaluate alpha at for use in computing CFL */
  /* Here we choose to evaluate things in the middle of the cell, where
     coordinates = 0. */
  zr : makelist(varsP[d]=0, d, 1, length(varsP)),

  vidx1 : makelist(i,i,cdim,cdim+vdim-1),

  printf(fh, "GKYL_CU_DH double ~a(const double *dxv, const double *vmap, const double *vmap_prime, const double m_, const double *bmag_inv, const double *nuSum, const double *nuPrimMomsSum, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm),
  printf(fh, "  // dxv[~a]: cell spacing. ~%", cdim+vdim),
  printf(fh, "  // vmap: velocity space mapping.~%"),
  printf(fh, "  // vmap_prime: velocity space mapping derivative.~%"),
  printf(fh, "  // m_: species mass.~%"),
  printf(fh, "  // bmag_inv: 1/(magnetic field magnitude). ~%"),
  printf(fh, "  // nuSum: collisionalities added (self and cross species collisionalities). ~%"),
  printf(fh, "  // nuPrimMomsSum: sum of bulk velocities and thermal speeds squared times their respective collisionalities. ~%"),
  printf(fh, "  // f: input distribution function.~%"),
  printf(fh, "  // out: incremented output ~%"),
  printf(fh, "~%"),

  /* Create a pointer to nuUSum. */
  printf(fh, "  const double *nuUSum = nuPrimMomsSum;~%"),
  printf(fh, "~%"),

  printf(fh, "  double rdv2[~a]; ~%", vdim),
  for dir : 1 thru vdim do (
    printf(fh, "  rdv2[~a] = 2.0/dxv[~a]; ~%", dir-1, vidx1[dir])
  ),
  printf(fh, "~%"),

  /* Expand distribution function f in phase basis.            */
  f_e : doExpand1(f, bP),
  /* Expand flow speed sum(nu*u) in configuration basis. */
  nuSum_e  : doExpand1(nuSum, bC),
  nuUSum_e : doExpand1(nuUSum, bC),

  printf(fh, "  double alphaDrag[~a] = {0.}; ~%", vdim*NP),
  incrDrag : 0,
  cflFreq_mid : makelist(0, i, 1, vdim),

  /* vpar contribution alphaDrag_vpar = rdv2*< psi, -(nuSum*vpar - nuUparSum)/vpar' >. */
  alphaDrag_c : rdv2[0]*calcInnerProdList(varsP, 1, bP, -(nuSum_e*vmap_e[1]-nuUSum_e)/vmap_prime_e[1]),

  printf(fh, "  // Expand rdv2*(nu*vpar-nuUparSum) in phase basis.~%"),
  writeCExprsCollect1lhsc(alphaDrag, radcan(alphaDrag_c)),
  printf(fh, "~%"),

  /* Zero out components of alpha which are empty. */
  alphaDrag_c : makelistNoZerosOff1(alphaDrag_c, alphaDrag, a0),
  alphaDrag_e : doExpand(alphaDrag_c, bP),

  /* Evaluate alpha_vdim at zr to approximate
     max(abs(alpha_vdim))/(dv_i/(2p+1)). */
  cflFreq_mid[1] : gcfac(float(expand(subst(zr,(2*pOrderVpar+1)*0.5*subst(a0=0,alphaDrag_e))))),
  /* Volume increment from configuration space. */
  incrDrag : incrDrag+subst(a0=0,calcInnerProdList(varsP, 1, diff(bP,varsV[1]), alphaDrag_e*f_e)),

  if vdim = 2 then (
    /* mu contribution alphaDrag_mu = rdv2*< psi, -2*mu*nuSum/mu' >. */
    alphaDrag_c : rdv2[1]*calcInnerProdList(varsP, 1, bP, -2.0*nuSum_e*vmap_e[2]/vmap_prime_e[2]),

    printf(fh, "  // Expand rdv2*nu*2*mu in phase basis.~%"),
    expr : gcfac(float(expand(radcan(alphaDrag_c)))),
    for i : 1 thru NP do (
      if expr[i] # 0.0 then printf(fh, "  ~a = ~a; ~%", alphaDrag[NP+i-1], expr[i])
    ),
    printf(fh, "~%"),

    /* Zero out components of alpha which are empty. */
    alphaDrag_c : makelistNoZerosOff1(alphaDrag_c, alphaDrag,a0),
    alphaDrag_e : doExpand(alphaDrag_c, bP),

    /* Evaluate alpha_vdim at zr to approximate
       max(abs(alpha_vdim))/(dv_i/(2p+1)). */
    cflFreq_mid[2] : gcfac(float(expand(subst(zr,(2*polyOrder+1)*0.5*subst(a0=NP,alphaDrag_e))))),
    /* Volume increment from configuration space. */
    incrDrag : incrDrag+subst(a0=NP,calcInnerProdList(varsP, 1, diff(bP,varsV[2]), alphaDrag_e*f_e))
  ),

  /* Write out first attempts to simplify the radicals with radcan, e.g.
     force sqrt(3)*sqrt(5) = sqrt(15). */
  /* Outscripts loads scifac and uses the aggressive factorization routine "gcfac". */
  writeCExprsCollect1c(radcan(incrDrag)),
  printf(fh, "~%"),

  if vdim = 1 then (
    printf(fh, "  return fabs(~a); ~%", cflFreq_mid[1])
  ) elseif vdim = 2 then (
    printf(fh, "  return fabs(~a)+fabs(~a); ~%", cflFreq_mid[1], cflFreq_mid[2])
  ),
  printf(fh, "~%"),
  printf(fh, "} ~%")
);
