load("modal-basis")$
load("out-scripts");
load("recovery")$
load("utilities")$
load("lbo_gyrokinetic/gkLBO_util")$
load(stringproc)$
fpprec : 24$

/* This script generates the kernels for the surface term
   diffusion contribution from Lenard Bernstein operator
   in the gyrokinetic equation. */

calcGkLBODiffUpdateInDir(dir, fh, funcNm, cdim, vdim, basisFun, polyOrder, ismapped) := block(
  [varsC,bC,varsP,bP,vSub,NC,NP,varsV,vmap_e,vmapSq_e,vmap_prime_e,pDim,vidx1,surfVar,
   surfIntVars,bSurf,numBSurf,vmapl_e,vmapc_e,vmapr_e,jacobvell_e,jacobvelc_e,jacobvelr_e,
   bmagBasis,bType,dxvRecl,dxvRecc,dxvRecr,hl_e,hr_e,nuVtSqSum_e,BmagInv_e,confFac_e,dfVfac,
   fVfac,confFac_c,vpSqSub,dfRecFacl_e,dfRecFacr_e,fRecFacl_e,fRecFacr_e,dfRecFacl_c,
   dfRecFacr_c,fRecFacl_c,fRecFacr_c,bPp,incrl_c,incrr_c],
  
  printf(fh, "GKYL_CU_DH double ~a(const double *dxv, const double *vmapl, const double *vmapc, const double *vmapr, const double *vmap_prime, const double *jacobvell, const double *jacobvelc, const double *jacobvelr, const double m_, const double *bmag_inv, const double *nuSum, const double *nuPrimMomsSum, const double *fl, const double *fc, const double *fr, double* GKYL_RESTRICT out) ~%{ ~%", funcNm),
  printf(fh, "  // dxv: cell spacing. ~%"),
  printf(fh, "  // vmapl,vmapc,vmapr: velocity space mapping.~%"),
  printf(fh, "  // vmap_prime: velocity space mapping derivative.~%"),
  printf(fh, "  // jacobvel: velocity space jacobian.~%"),
  printf(fh, "  // m_: species mass.~%"),
  printf(fh, "  // bmag_inv: 1/(magnetic field magnitude). ~%"),
  printf(fh, "  // nuSum: collisionalities added (self and cross species collisionalities). ~%"),
  printf(fh, "  // nuPrimMomsSum: sum of bulk velocities and thermal speeds squared times their respective collisionalities. ~%"),
  printf(fh, "  // fl/fc/fr: distribution function in cells ~%"),
  printf(fh, "  // out: incremented distribution function in cell ~%"),
  printf(fh, "~%"),

  /* Load basis of dimensionality requested. */
  [varsC,bC,varsP,bP,vSub] : loadGkBasis(basisFun, cdim, vdim, polyOrder),
  NC : length(bC),  NP : length(bP),
  varsV : makelist(varsP[i+cdim],i,1,vdim),

  pDim        : cdim+vdim,
  vidx1       : makelist(i,i,cdim,cdim+vdim-1),
  surfVar     : varsV[dir],
  surfIntVars : delete(surfVar,varsP),

  bPp : diff(bP, surfVar),

  if polyOrder = 1 then (  /* Force p=1 to use hybrid basis. */
    bSurf : basisFromVars("gkhyb",surfIntVars,polyOrder)
  ) else (
    bSurf : basisFromVars(basisFun,surfIntVars,polyOrder)
  ),
  numBSurf : length(bSurf),

  /* Axisymmetric basis (independent of y). */
  bmagBasis : getAxisymmetricConfBasis(bC),

  /* Expand velocity mapping fields. */
  [vmap_e,vmapSq_e,vmap_prime_e] : expandVmapFields(varsP),
  
  vmapl_e : subst(vmap=vmapl, copylist(vmap_e)),
  vmapc_e : subst(vmap=vmapc, copylist(vmap_e)),
  vmapr_e : subst(vmap=vmapr, copylist(vmap_e)),
  
  /* Construct the recovery polynomials */
  if polyOrder=1 then /* Force p=1 to mean hybrid. */
    bType : "gkhyb"
  else
    bType : basisFun,

  if (ismapped) then (
    /* Use mapped velocity space, and nonuniform recovery. */
    jacobvell_e : jacobvell[0],
    jacobvelc_e : jacobvelc[0],
    jacobvelr_e : jacobvelr[0],

    printf(fh, "  double vmap_primeSq = pow(~a,2);~%", vmap_prime_e[dir]),
    printf(fh, "~%"),

    /* Scale the distribution by the velocity space jacobian. */
    printf(fh, "  double fl_over_jacv[~a], fc_over_jacv[~a], fr_over_jacv[~a];~%", NP, NP, NP),
    writeCExprs1(fl_over_jacv, makelist(fl[i-1]/jacobvell_e,i,1,NP)),  printf(fh, "~%"),
    writeCExprs1(fc_over_jacv, makelist(fc[i-1]/jacobvelc_e,i,1,NP)),  printf(fh, "~%"),
    writeCExprs1(fr_over_jacv, makelist(fr[i-1]/jacobvelr_e,i,1,NP)),  printf(fh, "~%"),
  
    printf(fh, "  double dvl = ~a;~%", float(expand( subst(surfVar=1, vmapl_e[dir]) - subst(surfVar=-1, vmapl_e[dir]) ))),
    printf(fh, "  double dvc = ~a;~%", float(expand( subst(surfVar=1, vmapc_e[dir]) - subst(surfVar=-1, vmapc_e[dir]) ))),
    printf(fh, "  double dvr = ~a;~%", float(expand( subst(surfVar=1, vmapr_e[dir]) - subst(surfVar=-1, vmapr_e[dir]) ))),
    printf(fh, "~%"),
  
    dxvRecl : makelist(2, i, 1, pDim),  dxvRecl[cdim+dir] : dvl,
    dxvRecc : makelist(2, i, 1, pDim),  dxvRecc[cdim+dir] : dvc,
    dxvRecr : makelist(2, i, 1, pDim),  dxvRecr[cdim+dir] : dvr,
  
    hl_e : calcRecov2CellGenNonuniform(bType, surfVar, varsP, polyOrder, dxvRecl, dxvRecc,
      dg(makelist(fl_over_jacv[i-1],i,1,NP)), dg(makelist(fc_over_jacv[i-1],i,1,NP))),
    hr_e : calcRecov2CellGenNonuniform(bType, surfVar, varsP, polyOrder, dxvRecc, dxvRecr,
      dg(makelist(fc_over_jacv[i-1],i,1,NP)), dg(makelist(fr_over_jacv[i-1],i,1,NP)))
  )
  else (
    /* Set rates of change to 1 for simplicity. */
    vmap_prime_e : [1, 1],
    jacobvell_e : 1,
    jacobvelc_e : 1,
    jacobvelr_e : 1,

    /* Use uniform recovery in non-mapped kernels, since nonuniform recovery
       can produce very large stencils. */
    hl_e : calcRecov2CellGen(bType, surfVar, varsP, polyOrder,
      dg(makelist(fl[i-1],i,1,NP)), dg(makelist(fc[i-1],i,1,NP))),
    hr_e : calcRecov2CellGen(bType, surfVar, varsP, polyOrder,
      dg(makelist(fc[i-1],i,1,NP)), dg(makelist(fr[i-1],i,1,NP)))
  ),

  /*............. RECOVERY DONE ..............................*/
    
  /* Create a pointer to nuVtSqSum. */
  printf(fh, "  const double *nuVtSqSum = &nuPrimMomsSum[~a];~%", 1*NC),
  printf(fh, "~%"),

  printf(fh, "  double rdv2 = 2.0/dxv[~a]; ~%", vidx1[dir]),
  printf(fh, "  double rdv2Sq = rdv2*rdv2; ~%"),
  printf(fh, "~%"),
    
  nuVtSqSum_e : doExpand1(nuVtSqSum,bC),
  BmagInv_e   : doExpand1(bmag_inv,bmagBasis),
    
  /* confFac_c = < psi, nuVtSqSum*mu' > for vpar term,
                 < psi, (2*m/B)*nuVtSqSum*vpar' > for mu term.
     dfRecFac : phase-space dependent factor from 1st IBP.
     fRecFac : phase-space dependent factor from 2nd IBP. */
  if dir=1 then (
    confFac_e : nuVtSqSum_e,
    dfVfac    : vmap_prime_e[2],
    fVfac     : jacobvelc_e/(vmap_prime_e[dir])^2
  ) elseif dir=2 then (
    confFac_c : calcInnerProdList(varsC,1,bC,2*m_*BmagInv_e*nuVtSqSum_e),
    printf(fh, "  double confFac[~a] = {0.}; ~%", NC),
    writeCExprs1(confFac, confFac_c),
    printf(fh, "~%"),
    confFac_c : makelistNoZeros1(confFac_c, confFac),

    confFac_e : doExpand(confFac_c, bC),
    dfVfac    : vmap_prime_e[1] * vmapc_e[dir],
    fVfac     : jacobvelc_e/(vmap_prime_e[dir])^2 * vmapc_e[dir]
  ),

  vpSqSub : makelist(vmap_prime[i-1]^2=vmap_primeSq,i,1,vdim),
  printf(fh, "  double dfVfac_l = ~a; ~%", float(subst(vpSqSub,subst(surfVar=-1,dfVfac)))),
  printf(fh, "  double dfVfac_r = ~a; ~%", float(subst(vpSqSub,subst(surfVar=1 ,dfVfac)))),
  printf(fh, "~%"),

  printf(fh, "  double fVfac_l = ~a; ~%", float(subst(vpSqSub,subst(surfVar=-1,fVfac)))),
  printf(fh, "  double fVfac_r = ~a; ~%", float(subst(vpSqSub,subst(surfVar=1 ,fVfac)))),
  printf(fh, "~%"),

  dfRecFacl_e : fullratsimp(dfVfac_l * subst(surfVar=0, diff(hl_e, surfVar))),
  dfRecFacr_e : fullratsimp(dfVfac_r * subst(surfVar=0, diff(hr_e, surfVar))),

  fRecFacl_e : fullratsimp(fVfac_l * subst(surfVar=0, hl_e)),
  fRecFacr_e : fullratsimp(fVfac_r * subst(surfVar=0, hr_e)),

  dfRecFacl_c : calcInnerProdList(surfIntVars, 1, bSurf, dfRecFacl_e),
  dfRecFacr_c : calcInnerProdList(surfIntVars, 1, bSurf, dfRecFacr_e),

  fRecFacl_c : calcInnerProdList(surfIntVars, 1, bSurf, fRecFacl_e),
  fRecFacr_c : calcInnerProdList(surfIntVars, 1, bSurf, fRecFacr_e),

  phaseFacl_c : rdv2  *calcInnerProdList(surfIntVars, 1, subst(surfVar=-1,bP ), dfRecFacl_e)
               -rdv2Sq*calcInnerProdList(surfIntVars, 1, subst(surfVar=-1,bPp), fRecFacl_e),

  phaseFacr_c : rdv2  *calcInnerProdList(surfIntVars, 1, subst(surfVar=1,bP ), dfRecFacr_e)
               -rdv2Sq*calcInnerProdList(surfIntVars, 1, subst(surfVar=1,bPp), fRecFacr_e),

  if (polyOrder=1 or sdowncase(basisFun)="tensor") then (
    /* This simplification only works for p=1 because it is a tensor product of
       conf and velocity space (remains to be checked for tensor basis). */

    tmpPowVars : [],
    clst : [dvl,dvc,dvr,dvlR2,dvcR2,dvrR2],
    /* Write out the phase factor. */
    printf(fh, "  double phaseFacl[~a] = {0.0}; ~%", NP),
    tmpPowVars : writeCExprsCollect1noPowers(phaseFacl, phaseFacl_c, clst, [dvl,dvc,dvr], tmpPowVars),
    printf(fh, "~%"),

    printf(fh, "  double phaseFacr[~a] = {0.0}; ~%", NP),
    tmpPowVars : writeCExprsCollect1noPowers(phaseFacr, phaseFacr_c, clst, [dvl,dvc,dvr], tmpPowVars),
    printf(fh, "~%"),

    phaseFacl_e : doExpand(makelistNoZeros1(phaseFacl_c, phaseFacl), bP),
    phaseFacr_e : doExpand(makelistNoZeros1(phaseFacr_c, phaseFacr), bP)
  ) else (
    phaseFacl_e : doExpand(phaseFacl_c, bP),
    phaseFacr_e : doExpand(phaseFacr_c, bP)
  ),

  incrl_c : calcInnerProdList(varsP, confFac_e, bP, phaseFacl_e),
  incrr_c : calcInnerProdList(varsP, confFac_e, bP, phaseFacr_e),

  printf(fh, "  double incrl[~a] = {0.0}; ~%", NP),
  writeCExprs1(incrl, incrl_c),
  printf(fh, "~%"),
  
  printf(fh, "  double incrr[~a] = {0.0}; ~%", NP),
  writeCExprs1(incrr, incrr_c),
  printf(fh, "~%"),
  
  writeCIncrExprs1(out, makelistNoZeros1(incrr_c, incrr) - makelistNoZeros1(incrl_c, incrl)), 
  printf(fh, "~%"),

  printf(fh, "  return 0.;~%"),  /* Return CFL frequency in volume kernel. */
  printf(fh, "~%"),

  printf(fh, "} ")
);
