/* Generate kernels that compute the moments of the distribution function. */

load("moments/vlasovPKPMMomentsFuncs-C")$
load(stringproc)$

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 2$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
maxCdim_Ser : 2$

/* Tensor product basis. */
/* Note that Serendipity, p = 1, is equivalent to Tensor */
/* Thus no need to calculate p = 1 Tensor basis */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
maxCdim_Tensor : 0$

/* ...... END OF USER INPUTS........ */

bName        : ["ser","tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$

for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    minPolyOrderB : minPolyOrder[bInd],
    maxPolyOrderB : maxPolyOrder[bInd],

    /* Vlasov moment calculators. */
    for polyOrder : minPolyOrderB thru maxPolyOrderB do (
      disp(printf(false,sconcat("Creating Vlasov PKPM Moments ~ax~av ", bName[bInd]),c,1)),
      fname : sconcat("~/max-out/mom_vlasov_pkpm_", c, "x1v_", bName[bInd], "_p", polyOrder, ".c"),
      fh : openw(fname),
      funcName : sconcat("mom_vlasov_pkpm"),
      printf(fh, "#include <gkyl_mom_vlasov_kernels.h> ~%"),

      calcPKPMMoments(fh, funcName, c, 1, bName[bInd], polyOrder),
      close(fh),
      for dir : 1 thru c do ( 
	disp(printf(false,sconcat("Creating Vlasov PKPM Surface Flux Moments ~ax~av ", bName[bInd]),c,1)),
        if (dir = 1) then fname : sconcat("~/max-out/mom_vlasov_pkpm_surfx_", c, "x1v_", bName[bInd], "_p", polyOrder, ".c"),
        if (dir = 2) then fname : sconcat("~/max-out/mom_vlasov_pkpm_surfy_", c, "x1v_", bName[bInd], "_p", polyOrder, ".c"),
        if (dir = 3) then fname : sconcat("~/max-out/mom_vlasov_pkpm_surfz_", c, "x1v_", bName[bInd], "_p", polyOrder, ".c"),
	fh : openw(fname),
	funcName : sconcat("mom_vlasov_pkpm"),
        printf(fh, "#include <gkyl_mom_vlasov_kernels.h> ~%"),
	if polyOrder = 1 then (  /* Force hybrid basis (p=2 in velocity space). */
	  printf(fh, "#include <gkyl_basis_hyb_~ax1v_p1_surfx~a_eval_quad.h> ~%", c, 1, dir),
	  printf(fh, "#include <gkyl_basis_hyb_~ax1v_p1_upwind_quad_to_modal.h> ~%", c, 1)
	) elseif polyOrder > 1 then (
	  printf(fh, "#include <gkyl_basis_~a_~ax_p~a_surfx~a_eval_quad.h> ~%", bName[bInd], c+1, polyOrder, dir),
	  printf(fh, "#include <gkyl_basis_~a_~ax_p~a_upwind_quad_to_modal.h> ~%", bName[bInd], c+1, polyOrder)
	),
	calcPKPMSurfMoments(dir, fh, funcName, c, 1, bName[bInd], polyOrder),
	close(fh)
      )
    )
  )
);
