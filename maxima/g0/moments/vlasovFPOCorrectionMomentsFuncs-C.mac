/* Functions (called by moment-calc.mac) that compute the
   moments of the distribution function in Vlasov model. */

load("modal-basis");
load("out-scripts");
load(stringproc)$
fpprec : 24$

let(wx1^2, wx1_sq)$
let(wx2^2, wx2_sq)$
let(wx3^2, wx3_sq)$
let(dv1^2, dv1_sq)$
let(dv2^2, dv2_sq)$
let(dv3^2, dv3_sq)$

let(wx1^3, wx1_cu)$
let(wx2^3, wx2_cu)$
let(wx3^3, wx3_cu)$
let(dv1^3, dv1_cu)$
let(dv2^3, dv2_cu)$
let(dv3^3, dv3_cu)$

volExpr(cdim, vdim) := prod(dxv[cdim+i-1], i, 1, vdim)$

vTrans  : [vx*dv1/2+wx1, vy*dv2/2+wx2, vz*dv3/2+wx3]$
wTrans  : [wx1, wx2, wx3]$
dvTrans : [vx*dv1/2, vy*dv2/2, vz*dv3/2]$

calcFPOVolumeCorrection(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block([],
  kill(varsC, varsP, basisC, basisP),
  modNm : sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v"),
  load(modNm),
  bP : basisP[polyOrder],
  bC : basisC[polyOrder],
  
  printf(fh, "GKYL_CU_DH void ~a_~ax~av_~a_p~a(const double *w, const double *dxv, const int *idx, const double *h, const double *g, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, cdim, vdim, basisFun, polyOrder),
  printf(fh, "  const double volFact = ~a/~a; ~%", volExpr(cdim, vdim), 2^vdim),
  fl : doExpand1(f, bP),
  hl : doExpand1(h, bP),
  gl : doExpand1(g, bP),

  printf(fh, "  double mom_corr[~a], energy_corr[~a]; ~%", 3*length(bC), length(bC)),
  printf(fh, "~%"),

  M1i : (M1i : [],
    for dir : 1 thru vdim do (
      M1i : append(M1i, calcInnerProdList(varsP, diff(hl,varsP[dir+cdim]) + diff(gl, varsP[dir+cdim], 3), bC, fl))
    ),
  M1i),

  writeCExprs1(mom_corr, M1i),
  printf(fh, "~%"),

  M2 : sum(calcInnerProdList(varsP, vTrans[d]*diff(hl,varsP[d+cdim]) +diff(diff(gl, varsP[d+cdim], 2)*vTrans[d], varsP[d+cdim], 1), bC, fl), d, 1, vdim),

  writeCExprs1(energy_corr, M2),

  incr_momentum : makelist(volFact*mom_corr[i-1], i, 1, 3*length(bC)),
  incr_energy : makelist(volFact*energy_corr[i-1], i, 1, length(bC)),

  fpo_corrections : [],
  fpo_corrections : append(fpo_corrections, incr_momentum),
  fpo_corrections : append(fpo_corrections, incr_energy),
  
  writeCIncrExprs1(out, fpo_corrections),
  printf(fh, "} ~%")
)$
