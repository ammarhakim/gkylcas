/* Functions (called by gyrokineticIntmoment.mac) that compute the
   integrated moments of the distribution function in gyrokinetic model. */

load("modal-basis")$
load("out-scripts")$
load("utilities_gyrokinetic")$
load(stringproc)$
fpprec : 24$

volExpr(totDim) := prod(dxv[i-1], i, 1, totDim)$

calcGkIntThreeMoments(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,vSub,vmap_e,vmapSq_e,vmap_prime_e,vmap_c,
   d,f_e,M,m0,m1,m2,bmag_e,Mtemp,tmp_e,tempPowVars],

  [varsC,bC,varsP,bP,vSub] : loadGkBasis(basisFun, cdim, vdim, polyOrder),

  [vmap_e,vmapSq_e,vmap_prime_e] : expandVmapFields(varsP),

  vmap_c : [],
  for d : 1 thru vdim do (
    vmap_c : append( vmap_c, delete(mu,delete(vpar,listofvars(vmap_e[d]))) )
  ),
  
  printf(fh, "GKYL_CU_DH void ~a_int_three_moments_~ax~av_~a_p~a(const double *dxv, const double *vmap, double m_, const double *bmag, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, cdim, vdim, basisFun, polyOrder),

  if vdim = 1 then printf(fh, "  const double volFact = ~a; ~%", volExpr(cdim+vdim)*float(1/(2^(cdim+vdim))) )
  else printf(fh, "  const double volFact = ~a/m_; ~%", volExpr(cdim+vdim)*float(2*%pi/(2^(cdim+vdim))) ),

  printf(fh, " ~%"),

  f_e : doExpand1(f, bP),

  M : [],

  /* Integrated M0. */
  m0 : fullratsimp(innerProd(varsP, 1, 1, f_e)),
  M  : endcons(m0,M),

  /* Integrated parallel momentum (M1). */
  m1 : fullratsimp(innerProd(varsP, 1, vmap_e[1], f_e)),
  M  : endcons(m1,M),

  /* Integrated particle kinetic energy (M2). */
  m2 : fullratsimp(innerProd(varsP, 1, (vmap_e[1])^2, f_e)),
  if (vdim > 1) then (
    bmag_e : doExpand1(bmag, bC),

    Mtemp : calcInnerProdList(varsP, vmap_e[2], bC, f_e),
    Mtemp : map(letsimp, Mtemp),

    printf(fh, "  double tmp[~a]; ~%", length(bC)),

    writeCExprs1(tmp, 2/m_*Mtemp),
    printf(fh, " ~%"),
    tmp_e : doExpand1(tmp, bC),

    m2 : m2+fullratsimp(innerProd(varsC, 1, bmag_e, tmp_e))
  ),
  M : endcons(m2, M),

  M : map(letsimp, M),

  tempPowVars : [],
  tempPowVars : writeCIncrExprsCollect1noPowers(out, volFact*M, [volFact], [vmap_c], tempPowVars),

  printf(fh, "} ~%~%")
)$

calcGkIntFourMoments(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,vSub,vmap_e,vmapSq_e,vmap_prime_e,vmap_c,
   d,f_e,M,m0,m1,m2par,bmag_e,Mtemp,tmp_e,m2perp,tempPowVars],

  [varsC,bC,varsP,bP,vSub] : loadGkBasis(basisFun, cdim, vdim, polyOrder),

  [vmap_e,vmapSq_e,vmap_prime_e] : expandVmapFields(varsP),

  vmap_c : [],
  for d : 1 thru vdim do (
    vmap_c : append( vmap_c, delete(mu,delete(vpar,listofvars(vmap_e[d]))) )
  ),
  
  printf(fh, "GKYL_CU_DH void ~a_int_four_moments_~ax~av_~a_p~a(const double *dxv, const double *vmap, double m_, const double *bmag, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, cdim, vdim, basisFun, polyOrder),

  if vdim = 1 then printf(fh, "  const double volFact = ~a; ~%", volExpr(cdim+vdim)*float(1/(2^(cdim+vdim))) )
  else printf(fh, "  const double volFact = ~a/m_; ~%", volExpr(cdim+vdim)*float(2*%pi/(2^(cdim+vdim))) ),

  printf(fh, " ~%"),

  f_e : doExpand1(f, bP),

  M : [],

  /* Integrated M0. */
  m0 : fullratsimp(innerProd(varsP, 1, 1, f_e)),
  M  : endcons(m0,M),

  /* Integrated parallel momentum (M0 upar). */
  m1 : fullratsimp(innerProd(varsP, 1, vmap_e[1], f_e)),
  M  : endcons(m1,M),

  /* Integrated parallel particle energy (M2par). */
  m2par : fullratsimp(innerProd(varsP, 1, (vmap_e[1])^2, f_e)),
  M  : endcons(m2par, M),

  if (vdim > 1) then (
    bmag_e : doExpand1(bmag, bC),

    Mtemp : calcInnerProdList(varsP, vmap_e[2], bC, f_e),
    Mtemp : map(letsimp, Mtemp),

    printf(fh, "  double tmp[~a]; ~%", length(bC)),

    writeCExprs1(tmp, 2/m_*Mtemp),
    printf(fh, " ~%"),
    tmp_e : doExpand1(tmp, bC),

    m2perp : fullratsimp(innerProd(varsC, 1, bmag_e, tmp_e)),
    M : endcons(m2perp, M)
  ),

  M : map(letsimp, M),

  tempPowVars : [],
  tempPowVars : writeCIncrExprsCollect1noPowers(out, volFact*M, [volFact], [vmap_c], tempPowVars),


  printf(fh, "} ~%~%")
)$

calcGkIntHamiltonianMoments(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,vSub,vmap_e,vmapSq_e,vmap_prime_e,vmap_c,
   d,f_e,M,M0,mM1,mM2,bmag_e,phi_e,Mtemp,tmp_e,tempPowVars],

  [varsC,bC,varsP,bP,vSub] : loadGkBasis(basisFun, cdim, vdim, polyOrder),

  [vmap_e,vmapSq_e,vmap_prime_e] : expandVmapFields(varsP),

  vmap_c : [],
  for d : 1 thru vdim do (
    vmap_c : append( vmap_c, delete(mu,delete(vpar,listofvars(vmap_e[d]))) )
  ),
  
  printf(fh, "GKYL_CU_DH void ~a_int_hamiltonian_moments_~ax~av_~a_p~a(const double *dxv, const double *vmap, double m_, double q_, const double *bmag, const double *phi, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, cdim, vdim, basisFun, polyOrder),

  if vdim = 1 then printf(fh, "  const double volFact = ~a; ~%", volExpr(cdim+vdim)*float(1/(2^(cdim+vdim))) )
  else printf(fh, "  const double volFact = ~a/m_; ~%", volExpr(cdim+vdim)*float(2*%pi/(2^(cdim+vdim))) ),

  printf(fh, " ~%"),

  f_e : doExpand1(f, bP),

  M : [],

  /* Integrated M0. */
  M0 : fullratsimp(innerProd(varsP, 1, 1, f_e)),
  M  : endcons(M0,M),

  /* Integrated parallel momentum (m*M1). */
  mM1 : fullratsimp(innerProd(varsP, 1, vmap_e[1], m_*f_e)),
  M  : endcons(mM1,M),

  /* Integrated particle energy (H). */
  phi_e : doExpand1(phi, bC),
  Ham : fullratsimp(innerProd(varsP, 1, (m_/2)*(vmap_e[1])^2+q_*phi_e, f_e)),
  if (vdim > 1) then (
    bmag_e : doExpand1(bmag, bC),

    Mtemp : calcInnerProdList(varsP, vmap_e[2], bC, f_e),
    Mtemp : map(letsimp, Mtemp),

    printf(fh, "  double tmp[~a]; ~%", length(bC)),

    writeCExprs1(tmp, Mtemp),
    printf(fh, " ~%"),
    tmp_e : doExpand1(tmp, bC),

    Ham : Ham+fullratsimp(innerProd(varsC, 1, bmag_e, tmp_e))
  ),
  M : endcons(Ham, M),

  M : map(letsimp, M),

  tempPowVars : [],
  tempPowVars : writeCIncrExprsCollect1noPowers(out, volFact*M, [volFact], [vmap_c], tempPowVars),

  printf(fh, "} ~%~%")
)$

calcIntMoments(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block([],
  printf(fh, "#include <gkyl_mom_gyrokinetic_kernels.h> ~%"),
  calcGkIntThreeMoments(fh, funcNm, cdim, vdim, basisFun, polyOrder),
  calcGkIntFourMoments(fh, funcNm, cdim, vdim, basisFun, polyOrder),
  calcGkIntHamiltonianMoments(fh, funcNm, cdim, vdim, basisFun, polyOrder)
)$
