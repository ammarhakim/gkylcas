/* Functions to generate integrated moments for SR Vlasov. */

load("modal-basis");
load("out-scripts");
load(stringproc)$
fpprec : 24$

pVsub : [x=vx,y=vy,z=vz]$

vTrans  : [vx*dv1/2+wx1, vy*dv2/2+wx2, vz*dv3/2+wx3]$
wTrans  : [wx1, wx2, wx3]$
dvTrans : [vx*dv1/2, vy*dv2/2, vz*dv3/2]$
p_over_gamma_fld : [p0_over_gamma, p1_over_gamma, p2_over_gamma]$

volExpr(totDim) := prod(dxv[i-1], i, 1, totDim)$
calcSRIntMDist(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [bV, NV, varsC, bC, varsP, bP, NP, NC, fl, GammaV_inv_e, M0, M1, Energy, clst, int],
  /* Computes the integral of M0, M1i and M2 at the same time. */
  kill(varsC, varsP, bC, bP),
  load(sconcat("basis-precalc/basis", basisFun, vdim, "x")),
  /* Generate basis in velocity space only. */
  if polyOrder = 1 then (
    bV : subst(pVsub,basisC[2]),
    NV : length(bV)
  )
  else (
    bV : subst(pVsub,basisC[polyOrder]),
    NV : length(bV)
  ),
  
  kill(varsC, varsP, basisC, basisP),
  [varsC,bC,varsP,bP] : loadPhaseBasis(basisFun, cdim, vdim, polyOrder),

  /* Number of basis monomials. */
  NP : length(bP),
  NC : length(bC),
    
  printf(fh, "GKYL_CU_DH void ~a_~ax~av_~a_p~a(const double *w, const double *dxv, const int *idx, const double *p_over_gamma, const double *gamma, const double *GammaV_inv, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, cdim, vdim, basisFun, polyOrder),
  printf(fh, "  const double volFact = ~a*~a; ~%", volExpr(cdim+vdim), float(1/(2^(cdim+vdim))) ),
  for i : 1 thru vdim do (
    printf(fh, "  const double wx~a = w[~a], dv~a = dxv[~a]; ~%", i, cdim+i-1, i, cdim+i-1),
    printf(fh, "  const double *p~a_over_gamma = &p_over_gamma[~a]; ~%", i-1, NV*(i-1))
  ),

  printf(fh, " ~%"),

  fl : doExpand1(f, bP),
  GammaV_inv_e : doExpand1(GammaV_inv, bC),

  M : [],

  M0 : fullratsimp(innerProd(varsP, 1, GammaV_inv_e, fl)),
  M  : endcons(M0,M),

  for dir : 1 thru vdim do (
    M1 : fullratsimp(innerProd(varsP, 1, GammaV_inv_e*doExpand1(p_over_gamma_fld[dir], bV), fl)),
    M  : endcons(M1,M)
  ),

  Energy : fullratsimp(innerProd(varsP, 1, GammaV_inv_e*doExpand1(gamma, bV), fl)),
  M  : endcons(Energy, M),

  M : map(letsimp, M),
  clst : [volFact],
  writeCIncrExprsCollect1(out, volFact*M, clst),

  printf(fh, "} ~%")
)$

calcSRIntMoments(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block([],
  printf(fh, "#include <gkyl_mom_vlasov_kernels.h> ~%"),
  calcSRIntMDist(fh, funcNm, cdim, vdim, basisFun, polyOrder)
)$