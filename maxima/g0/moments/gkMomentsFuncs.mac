/* Functions (called by moment-calc.mac) that compute the
   moments of the distribution function in gyrokinetic model. */

load("modal-basis");
load("out-scripts");
load(stringproc)$
fpprec : 24$

let(wx1^2, wx1_sq)$
let(wx2^2, wx2_sq)$
let(wx3^2, wx3_sq)$
let(dv1^2, dv1_sq)$
let(dv2^2, dv2_sq)$
let(dv3^2, dv3_sq)$

let(wx1^3, wx1_cu)$
let(wx2^3, wx2_cu)$
let(wx3^3, wx3_cu)$
let(dv1^3, dv1_cu)$
let(dv2^3, dv2_cu)$
let(dv3^3, dv3_cu)$

volExpr(cdim, vdim) := prod(dxv[cdim+i-1], i, 1, vdim)$
vTrans : [vpar*dv1/2+wx1, mu*dv2/2+wx2]$
wTrans : [wx1, wx2, wx3]$

/* Number density */
/* M0 = < f > */
calcGkM0(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,vSub,fl,M],

  [varsC,bC,varsP,bP,vSub] : loadGkBasis(basisFun, cdim, vdim, polyOrder),
  
  printf(fh, "GKYL_CU_DH void ~a_M0_~ax~av_~a_p~a(const double *w, const double *dxv, const int *idx, double m_, const double *bmag, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, cdim, vdim, basisFun, polyOrder),

  if vdim = 1 then printf(fh, "  const double volFact = ~a/~a; ~%", volExpr(cdim, vdim), 2^vdim)
  else printf(fh, "  const double volFact = 2.0*M_PI/m_*~a/~a; ~%", volExpr(cdim, vdim), 2^vdim),
  fl : doExpand1(f, bP),
  M : calcInnerProdList(varsP, 1, bC, fl),
  writeCIncrExprsNoExpand1(out, volFact*expand(M)),

  printf(fh, "} ~%")
)$

/* step 1: integrate over vpar only */
/* M0_step1 = int dvpar f  */
calcGkM0_step1(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,vSub,bP_dvpar,fl,M],

  [varsC,bC,varsP,bP,vSub] : loadGkBasis(basisFun, cdim, vdim, polyOrder),

  bP_dvpar : sqrt(2)*delete(0,fullratsimp(innerProd(varsP,1,bP,subst([vpar^2=1/3,vpar=0],bP)))*bP),

  printf(fh, "GKYL_CU_DH void ~a_M0_step1_~ax~av_~a_p~a(const double *w, const double *dxv, const int *idx, double m_, const double *bmag, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, cdim, vdim, basisFun, polyOrder),

  printf(fh, "  const double volFact = dxv[~a]/2; ~%", cdim),
  fl : doExpand1(f, bP),
  M : calcInnerProdList(varsP, 1, bP_dvpar, fl),
  writeCIncrExprsNoExpand1(out, volFact*expand(M)),

  printf(fh, "} ~%")
)$

/* step 2, integrate over mu only */
/* M0_step2 = int dmu f  */
calcGkM0_step2(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,vSub,bP_dvpar,fl,M],

  [varsC,bC,varsP,bP,vSub] : loadGkBasis(basisFun, cdim, vdim, polyOrder),

  bP_dvpar : sqrt(2)*delete(0,fullratsimp(innerProd(varsP,1,bP,subst([vpar^2=1/3,vpar=0],bP)))*bP),

  printf(fh, "GKYL_CU_DH void ~a_M0_step2_~ax~av_~a_p~a(const double *w, const double *dxv, const int *idx, double m_, const double *bmag, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, cdim, vdim, basisFun, polyOrder),

  printf(fh, "  const double volFact = 2.0*M_PI/m_*dxv[~a]/2; ~%", cdim+1),
  fl : doExpand1(f, bP_dvpar),
  M : calcInnerProdList(varsP, 1, bC, fl),
  writeCIncrExprsNoExpand1(out, volFact*expand(M)),

  printf(fh, "} ~%")
)$

/* Parallel Momentum Density */
/* M1 = < v_par f > */
calcGkM1(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,vSub,i,fl,M],

  [varsC,bC,varsP,bP,vSub] : loadGkBasis(basisFun, cdim, vdim, polyOrder),
  
  printf(fh, "GKYL_CU_DH void ~a_M1_~ax~av_~a_p~a(const double *w, const double *dxv, const int *idx, double m_, const double *bmag, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, cdim, vdim, basisFun, polyOrder),

  if vdim = 1 then printf(fh, "  const double volFact = ~a/~a; ~%", volExpr(cdim, vdim), 2^vdim)
  else printf(fh, "  const double volFact = 2.0*M_PI/m_*~a/~a; ~%", volExpr(cdim, vdim), 2^vdim),

  for i : 1 thru vdim do (
    printf(fh, "  const double wx~a = w[~a], dv~a = dxv[~a]; ~%", i, cdim+i-1, i, cdim+i-1)
  ),

  fl : doExpand1(f, bP),

  M : calcInnerProdList(varsP, vTrans[1], bC, fl),
  M : map(letsimp, M),

  writeCIncrExprsNoExpand1(out, volFact*expand(M)),

  printf(fh, "} ~%")
)$

/* Parallel Particle Energy */
/* M2par = < v_par^2 f > */
calcGkM2par(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,vSub,i,fl,vpar2_k,vpar2_e,M],

  [varsC,bC,varsP,bP,vSub] : loadGkBasis(basisFun, cdim, vdim, polyOrder),
  
  printf(fh, "GKYL_CU_DH void ~a_M2_par_~ax~av_~a_p~a(const double *w, const double *dxv, const int *idx, double m_, const double *bmag, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, cdim, vdim, basisFun, polyOrder),

  if vdim = 1 then printf(fh, "  const double volFact = ~a/~a; ~%", volExpr(cdim, vdim), 2^vdim)
  else printf(fh, "  const double volFact = 2.0*M_PI/m_*~a/~a; ~%", volExpr(cdim, vdim), 2^vdim),
  for i : 1 thru vdim do (
    printf(fh, "  const double wx~a = w[~a], dv~a = dxv[~a]; ~%", i, cdim+i-1, i, cdim+i-1),
    printf(fh, "  const double wx~a_sq = wx~a*wx~a, dv~a_sq = dv~a*dv~a; ~%", i, i, i, i, i, i)
  ),

  fl : doExpand1(f, bP),

  /* project vpar^2 onto basis and then re-expand */
  vpar2_k : innerProd(varsP, 1, bP, vTrans[1]*vTrans[1]),
  vpar2_e : vpar2_k . bP,

  M : calcInnerProdList(varsP, vpar2_e, bC, fl),
  M : map(letsimp, M),

  writeCIncrExprsNoExpand1(out, volFact*expand(M)),

  printf(fh, "} ~%")
)$

/* Perpendicular Particle Energy */
/* M2perp = < 2mu/m B f > */
calcGkM2perp(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,vSub,i,fl,bmag_e,Mtemp,tmp_e,M],

  [varsC,bC,varsP,bP,vSub] : loadGkBasis(basisFun, cdim, vdim, polyOrder),

  printf(fh, "GKYL_CU_DH void ~a_M2_perp_~ax~av_~a_p~a(const double *w, const double *dxv, const int *idx, double m_, const double *bmag, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, cdim, vdim, basisFun, polyOrder),

  if vdim = 1 then printf(fh, "  const double volFact = ~a/~a; ~%", volExpr(cdim, vdim), 2^vdim)
  else printf(fh, "  const double volFact = 2.0*M_PI/m_*~a/~a; ~%", volExpr(cdim, vdim), 2^vdim),
  for i : 1 thru vdim do (
    printf(fh, "  const double wx~a = w[~a], dv~a = dxv[~a]; ~%", i, cdim+i-1, i, cdim+i-1)
  ),

  fl : doExpand1(f, bP),
  bmag_e : doExpand1(bmag, bC),

  Mtemp : calcInnerProdList(varsP, vTrans[2], bC, fl),
  Mtemp : map(letsimp, Mtemp),

  printf(fh, "  double tmp[~a]; ~%", length(bC)),

  writeCExprs1(tmp, Mtemp),
  tmp_e : doExpand1(tmp, bC),

  M : fullratsimp(innerProd(varsC, bC, bmag_e, tmp_e)),

  writeCIncrExprsNoExpand1(out, 2*volFact/m_*expand(M)),

  printf(fh, "} ~%")
)$

/* Total Particle Energy */
/* M2 = < v_par^2 + 2 mu/m B f > */
calcGkM2(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,vSub,i,fl,bmag_e,vpar2_k,vpar2_e,Mtemp,tmp_e,M],

  [varsC,bC,varsP,bP,vSub] : loadGkBasis(basisFun, cdim, vdim, polyOrder),

  printf(fh, "GKYL_CU_DH void ~a_M2_~ax~av_~a_p~a(const double *w, const double *dxv, const int *idx, double m_, const double *bmag, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, cdim, vdim, basisFun, polyOrder),

  if vdim = 1 then printf(fh, "  const double volFact = ~a/~a; ~%", volExpr(cdim, vdim), 2^vdim)
  else printf(fh, "  const double volFact = 2.0*M_PI/m_*~a/~a; ~%", volExpr(cdim, vdim), 2^vdim),
  for i : 1 thru vdim do (
    printf(fh, "  const double wx~a = w[~a], dv~a = dxv[~a]; ~%", i, cdim+i-1, i, cdim+i-1),
    printf(fh, "  const double wx~a_sq = wx~a*wx~a, dv~a_sq = dv~a*dv~a; ~%", i, i, i, i, i, i)
  ),

  fl : doExpand1(f, bP),
  bmag_e : doExpand1(bmag, bC),

  /* project vpar^2 onto basis and then re-expand */
  vpar2_k : innerProd(varsP, 1, bP, vTrans[1]*vTrans[1]),
  vpar2_e : vpar2_k . bP,

  M : calcInnerProdList(varsP, vpar2_e, bC, fl),
  M : map(letsimp, M),

  writeCIncrExprsNoExpand1(out, volFact*expand(M)),

  if vdim > 1 then (
    Mtemp : calcInnerProdList(varsP, vTrans[2], bC, fl),
    Mtemp : map(letsimp, Mtemp),

    printf(fh, "  double tmp[~a]; ~%", length(bC)),

    writeCExprs1(tmp, Mtemp),
    tmp_e : doExpand1(tmp, bC),
    M : fullratsimp(innerProd(varsC, bC, bmag_e, tmp_e)),

    writeCIncrExprsNoExpand1(out, 2*volFact/m_*expand(M))
  ),

  printf(fh, "} ~%")
)$

/* Parallel Heat Flux */
/* M3par = < v_par^3 f > */
calcGkM3par(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,vSub,i,fl,M],

  [varsC,bC,varsP,bP,vSub] : loadGkBasis(basisFun, cdim, vdim, polyOrder),

  printf(fh, "GKYL_CU_DH void ~a_M3_par_~ax~av_~a_p~a(const double *w, const double *dxv, const int *idx, double m_, const double *bmag, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, cdim, vdim, basisFun, polyOrder),

  if vdim = 1 then printf(fh, "  const double volFact = ~a/~a; ~%", volExpr(cdim, vdim), 2^vdim)
  else printf(fh, "  const double volFact = 2.0*M_PI/m_*~a/~a; ~%", volExpr(cdim, vdim), 2^vdim),
  for i : 1 thru vdim do (
    printf(fh, "  const double wx~a = w[~a], dv~a = dxv[~a]; ~%", i, cdim+i-1, i, cdim+i-1),
    printf(fh, "  const double wx~a_sq = wx~a*wx~a, dv~a_sq = dv~a*dv~a; ~%", i, i, i, i, i, i),
    printf(fh, "  const double wx~a_cu = wx~a*wx~a*wx~a, dv~a_cu = dv~a*dv~a*dv~a; ~%", i, i, i, i, i, i, i, i)
  ),

  fl : doExpand1(f, bP),

  M : calcInnerProdList(varsP, vTrans[1]*vTrans[1]*vTrans[1], bC, fl),
  M : map(letsimp, M),

  writeCIncrExprsNoExpand1(out, volFact*expand(M)),

  printf(fh, "} ~%")
)$

/* Perpendicular Heat Flux */
/* M3perp = < v_par mu/m B f > */
calcGkM3perp(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,vSub,i,fl,bmag_e,M],

  [varsC,bC,varsP,bP,vSub] : loadGkBasis(basisFun, cdim, vdim, polyOrder),

  printf(fh, "GKYL_CU_DH void ~a_M3_perp_~ax~av_~a_p~a(const double *w, const double *dxv, const int *idx, double m_, const double *bmag, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, cdim, vdim, basisFun, polyOrder),

  if vdim = 1 then printf(fh, "  const double volFact = ~a/~a; ~%", volExpr(cdim, vdim), 2^vdim)
  else printf(fh, "  const double volFact = 2.0*M_PI/m_*~a/~a; ~%", volExpr(cdim, vdim), 2^vdim),
  for i : 1 thru vdim do (
    printf(fh, "  const double wx~a = w[~a], dv~a = dxv[~a]; ~%", i, cdim+i-1, i, cdim+i-1)
  ),

  fl : doExpand1(f, bP),
  bmag_e : doExpand1(bmag, bC),

  M : calcInnerProdList(varsP, vTrans[1]*vTrans[2]*bmag_e, bC, fl),
  M : map(letsimp, M),

  writeCIncrExprsNoExpand1(out, volFact/m_*expand(M)),

  printf(fh, "} ~%")
)$

/* Simultaneously calculate M0, M1, and M2 */
calcGkThreeMoments(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,vSub,i,fl,bmag_e,energy,M0,M1,M2par,Mtemp,tmp_e,M2perp,M],

  [varsC,bC,varsP,bP,vSub] : loadGkBasis(basisFun, cdim, vdim, polyOrder),

  printf(fh, "GKYL_CU_DH void ~a_three_moments_~ax~av_~a_p~a(const double *w, const double *dxv, const int *idx, double m_, const double *bmag, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, cdim, vdim, basisFun, polyOrder),

  if vdim = 1 then printf(fh, "  const double volFact = ~a/~a; ~%", volExpr(cdim, vdim), 2^vdim)
  else printf(fh, "  const double volFact = 2.0*M_PI/m_*~a/~a; ~%", volExpr(cdim, vdim), 2^vdim),
  for i : 1 thru vdim do (
    printf(fh, "  const double wx~a = w[~a], dv~a = dxv[~a]; ~%", i, cdim+i-1, i, cdim+i-1),
    printf(fh, "  const double wx~a_sq = wx~a*wx~a, dv~a_sq = dv~a*dv~a; ~%", i, i, i, i, i, i)
  ),

  fl : doExpand1(f, bP),
  bmag_e : doExpand1(bmag, bC),

  energy : vTrans[1]*vTrans[1],
  if vdim > 1 then energy : energy + 2*vTrans[2]/m_*bmag_e,

  M0 : calcInnerProdList(varsP, 1, bC, fl),
  M0 : map(letsimp, M0),

  M1 : calcInnerProdList(varsP, vTrans[1], bC, fl),
  M1 : map(letsimp, M1),

  M2par : calcInnerProdList(varsP, vTrans[1]*vTrans[1], bC, fl),
  M2par : map(letsimp, M2par),

  if vdim > 1 then (
    Mtemp : calcInnerProdList(varsP, vTrans[2], bC, fl),
    Mtemp : map(letsimp, Mtemp),

    printf(fh, "  double tmp[~a]; ~%", length(bC)),
    writeCExprs1(tmp, Mtemp),

    tmp_e : doExpand1(tmp, bC),
    M2perp : fullratsimp(innerProd(varsC, bC, bmag_e, tmp_e))
  ),
  three_moments : [],
  three_moments : append(three_moments, M0),
  three_moments : append(three_moments, M1),
  if vdim > 1 then
    three_moments : append(three_moments, M2par+2/m_*M2perp)
  else
    three_moments : append(three_moments, M2par),
  writeCIncrExprsNoExpand1(out, volFact*expand(three_moments)),
  printf(fh, "} ~%")
)$

calcGkMoments(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block([],
  printf(fh, "#include <gkyl_mom_gyrokinetic_kernels.h> ~%"),
  calcGkM0(fh, funcNm, cdim, vdim, basisFun, polyOrder),
  calcGkM1(fh, funcNm, cdim, vdim, basisFun, polyOrder),
  calcGkM2(fh, funcNm, cdim, vdim, basisFun, polyOrder),
  calcGkM2par(fh, funcNm, cdim, vdim, basisFun, polyOrder),
  if vdim > 1 then calcGkM2perp(fh, funcNm, cdim, vdim, basisFun, polyOrder),
  calcGkM3par(fh, funcNm, cdim, vdim, basisFun, polyOrder),
  if vdim > 1 then calcGkM3perp(fh, funcNm, cdim, vdim, basisFun, polyOrder),
  calcGkThreeMoments(fh, funcNm, cdim, vdim, basisFun, polyOrder),
  if vdim > 1 then (
     calcGkM0_step1(fh, funcNm, cdim, vdim, basisFun, polyOrder),
     calcGkM0_step2(fh, funcNm, cdim, vdim, basisFun, polyOrder)
  )
)$
