/* Functions (called by moment-calc.mac) that compute the
   moments of the distribution function in gyrokinetic model. */

load("modal-basis")$
load("out-scripts")$
load("utilities_gyrokinetic")$
load(stringproc)$
fpprec : 24$

volExpr(cdim, vdim) := prod(dxv[cdim+i-1], i, 1, vdim)$

/* Number density */
/* M0 = < f > */
calcGkM0(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,vSub,f_e,M],

  [varsC,bC,varsP,bP,vSub] : loadGkBasis(basisFun, cdim, vdim, polyOrder),
  
  printf(fh, "GKYL_CU_DH void ~a_M0_~ax~av_~a_p~a(const double *dxv, const double *vmap, double m_, const double *bmag, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, cdim, vdim, basisFun, polyOrder),

  if vdim = 1 then printf(fh, "  const double volFact = ~a; ~%", float(volExpr(cdim, vdim)/(2^vdim)))
  else printf(fh, "  const double volFact = ~a/m_; ~%", float(2*%pi*volExpr(cdim, vdim)/(2^vdim))),

  f_e : doExpand1(f, bP),
  M : calcInnerProdList(varsP, 1, bC, f_e),

  writeCIncrExprsNoExpand1(out, volFact*expand(M)),

  printf(fh, "} ~%")
)$

/* step 1: integrate over vpar only */
/* M0_step1 = int dvpar f  */
calcGkM0_step1(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,vSub,bP_dvpar,f_e,M],

  [varsC,bC,varsP,bP,vSub] : loadGkBasis(basisFun, cdim, vdim, polyOrder),

  bP_dvpar : sqrt(2)*delete(0,fullratsimp(innerProd(varsP,1,bP,subst([vpar^2=1/3,vpar=0],bP)))*bP),

  printf(fh, "GKYL_CU_DH void ~a_M0_step1_~ax~av_~a_p~a(const double *dxv, const double *vmap, double m_, const double *bmag, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, cdim, vdim, basisFun, polyOrder),

  printf(fh, "  const double volFact = dxv[~a]/2; ~%", cdim),
  f_e : doExpand1(f, bP),
  M : calcInnerProdList(varsP, 1, bP_dvpar, f_e),
  writeCIncrExprsNoExpand1(out, volFact*expand(M)),

  printf(fh, "} ~%")
)$

/* step 2, integrate over mu only */
/* M0_step2 = int dmu f  */
calcGkM0_step2(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,vSub,bP_dvpar,f_e,M],

  [varsC,bC,varsP,bP,vSub] : loadGkBasis(basisFun, cdim, vdim, polyOrder),

  bP_dvpar : sqrt(2)*delete(0,fullratsimp(innerProd(varsP,1,bP,subst([vpar^2=1/3,vpar=0],bP)))*bP),

  printf(fh, "GKYL_CU_DH void ~a_M0_step2_~ax~av_~a_p~a(const double *dxv, const double *vmap, double m_, const double *bmag, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, cdim, vdim, basisFun, polyOrder),

  printf(fh, "  const double volFact = ~a*dxv[~a]/m_; ~%", float(2.0*%pi/2), cdim+1),
  f_e : doExpand1(f, bP_dvpar),
  M : calcInnerProdList(varsP, 1, bC, f_e),
  writeCIncrExprsNoExpand1(out, volFact*expand(M)),

  printf(fh, "} ~%")
)$

/* Parallel Momentum Density */
/* M1 = < v_par f > */
calcGkM1(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,vSub,i,f_e,M],

  [varsC,bC,varsP,bP,vSub] : loadGkBasis(basisFun, cdim, vdim, polyOrder),
  
  [vmap_e,vmapSq_e,vmap_prime_e] : expandVmapFields(varsP),

  printf(fh, "GKYL_CU_DH void ~a_M1_~ax~av_~a_p~a(const double *dxv, const double *vmap, double m_, const double *bmag, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, cdim, vdim, basisFun, polyOrder),

  if vdim = 1 then printf(fh, "  const double volFact = ~a; ~%", float(volExpr(cdim, vdim)/(2^vdim)))
  else printf(fh, "  const double volFact = ~a/m_; ~%", float(2*%pi*volExpr(cdim, vdim)/(2^vdim))),

  f_e : doExpand1(f, bP),

  M : calcInnerProdList(varsP, vmap_e[1], bC, f_e),
  M : map(letsimp, M),

  writeCIncrExprsNoExpand1(out, volFact*expand(M)),

  printf(fh, "} ~%")
)$

/* Total Particle Energy */
/* M2 = < v_par^2 + 2 mu/m B f > */
calcGkM2(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,vSub,vmap_e,vmapSq_e,vmap_prime_e,vmap_c,
   d,f_e,bmag_e,vparSq_k,vparSq_e,M,tempPowVars,Mtemp,tmp_e],

  [varsC,bC,varsP,bP,vSub] : loadGkBasis(basisFun, cdim, vdim, polyOrder),

  [vmap_e,vmapSq_e,vmap_prime_e] : expandVmapFields(varsP),

  vmap_c : [],
  for d : 1 thru vdim do (
    vmap_c : append( vmap_c, delete(mu,delete(vpar,listofvars(vmap_e[d]))) )
  ),

  printf(fh, "GKYL_CU_DH void ~a_M2_~ax~av_~a_p~a(const double *dxv, const double *vmap, double m_, const double *bmag, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, cdim, vdim, basisFun, polyOrder),

  if vdim = 1 then printf(fh, "  const double volFact = ~a; ~%", float(volExpr(cdim, vdim)/(2^vdim)))
  else printf(fh, "  const double volFact = ~a/m_; ~%", float(2*%pi*volExpr(cdim, vdim)/(2^vdim))),

  f_e : doExpand1(f, bP),
  bmag_e : doExpand1(bmag, bC),

  /* project vpar^2 onto basis and then re-expand */
  vparSq_k : innerProd(varsP, 1, bP, (vmap_e[1])^2),
  vparSq_e : vparSq_k . bP,

  M : calcInnerProdList(varsP, vparSq_e, bC, f_e),
  M : map(letsimp, M),

  tempPowVars : [],
  tempPowVars : writeCIncrExprsCollect1noPowers(out, volFact*expand(M), [volFact], [vmap_c], tempPowVars),

  if vdim > 1 then (
    Mtemp : calcInnerProdList(varsP, vmap_e[2], bC, f_e),
    Mtemp : map(letsimp, Mtemp),

    printf(fh, "  double tmp[~a]; ~%", length(bC)),

    writeCExprs1(tmp, Mtemp),
    tmp_e : doExpand1(tmp, bC),
    M : fullratsimp(innerProd(varsC, bC, bmag_e, tmp_e)),

    writeCIncrExprsNoExpand1(out, 2*volFact/m_*expand(M))
  ),

  printf(fh, "} ~%")
)$

/* Parallel Particle Energy */
/* M2par = < v_par^2 f > */
calcGkM2par(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,vSub,vmap_e,vmapSq_e,vmap_prime_e,vmap_c,d,f_e,vparSq_k,vparSq_e,M,tempPowVars],

  [varsC,bC,varsP,bP,vSub] : loadGkBasis(basisFun, cdim, vdim, polyOrder),
  
  [vmap_e,vmapSq_e,vmap_prime_e] : expandVmapFields(varsP),

  vmap_c : [],
  for d : 1 thru vdim do (
    vmap_c : append( vmap_c, delete(mu,delete(vpar,listofvars(vmap_e[d]))) )
  ),

  printf(fh, "GKYL_CU_DH void ~a_M2_par_~ax~av_~a_p~a(const double *dxv, const double *vmap, double m_, const double *bmag, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, cdim, vdim, basisFun, polyOrder),

  if vdim = 1 then printf(fh, "  const double volFact = ~a; ~%", float(volExpr(cdim, vdim)/(2^vdim)))
  else printf(fh, "  const double volFact = ~a/m_; ~%", float(2*%pi*volExpr(cdim, vdim)/(2^vdim))),

  f_e : doExpand1(f, bP),

  /* project vpar^2 onto basis and then re-expand */
  vparSq_k : innerProd(varsP, 1, bP, (vmap_e[1])^2),
  vparSq_e : vparSq_k . bP,

  M : calcInnerProdList(varsP, vparSq_e, bC, f_e),
  M : map(letsimp, M),

  tempPowVars : [],
  tempPowVars : writeCIncrExprsCollect1noPowers(out, volFact*expand(M), [volFact], [vmap_c], tempPowVars),

  printf(fh, "} ~%")
)$

/* Perpendicular Particle Energy */
/* M2perp = < 2mu/m B f > */
calcGkM2perp(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,vSub,vmap_e,vmapSq_e,vmap_prime_e,f_e,bmag_e,Mtemp,tmp_e,M],

  [varsC,bC,varsP,bP,vSub] : loadGkBasis(basisFun, cdim, vdim, polyOrder),

  [vmap_e,vmapSq_e,vmap_prime_e] : expandVmapFields(varsP),

  printf(fh, "GKYL_CU_DH void ~a_M2_perp_~ax~av_~a_p~a(const double *dxv, const double *vmap, double m_, const double *bmag, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, cdim, vdim, basisFun, polyOrder),

  if vdim = 1 then printf(fh, "  const double volFact = ~a; ~%", float(volExpr(cdim, vdim)/(2^vdim)))
  else printf(fh, "  const double volFact = ~a/m_; ~%", float(2*%pi*volExpr(cdim, vdim)/(2^vdim))),

  f_e : doExpand1(f, bP),
  bmag_e : doExpand1(bmag, bC),

  Mtemp : calcInnerProdList(varsP, vmap_e[2], bC, f_e),
  Mtemp : map(letsimp, Mtemp),

  printf(fh, "  double tmp[~a]; ~%", length(bC)),

  writeCExprs1(tmp, Mtemp),
  tmp_e : doExpand1(tmp, bC),

  M : fullratsimp(innerProd(varsC, bC, bmag_e, tmp_e)),

  writeCIncrExprsNoExpand1(out, 2*volFact/m_*expand(M)),

  printf(fh, "} ~%")
)$

/* Parallel heat flux */
/* M3par = < v_par^3 f > */
calcGkM3par(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,vSub,vmap_e,vmapSq_e,vmap_prime_e,vmap_c,d,f_e,M,tempPowVars],

  [varsC,bC,varsP,bP,vSub] : loadGkBasis(basisFun, cdim, vdim, polyOrder),

  [vmap_e,vmapSq_e,vmap_prime_e] : expandVmapFields(varsP),

  vmap_c : [],
  for d : 1 thru vdim do (
    vmap_c : append( vmap_c, delete(mu,delete(vpar,listofvars(vmap_e[d]))) )
  ),

  printf(fh, "GKYL_CU_DH void ~a_M3_par_~ax~av_~a_p~a(const double *dxv, const double *vmap, double m_, const double *bmag, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, cdim, vdim, basisFun, polyOrder),

  if vdim = 1 then printf(fh, "  const double volFact = ~a; ~%", float(volExpr(cdim, vdim)/(2^vdim)))
  else printf(fh, "  const double volFact = ~a/m_; ~%", float(2*%pi*volExpr(cdim, vdim)/(2^vdim))),

  f_e : doExpand1(f, bP),

  M : calcInnerProdList(varsP, (vmap_e[1])^3, bC, f_e),
  M : map(letsimp, M),

  tempPowVars : [],
  tempPowVars : writeCIncrExprsCollect1noPowers(out, volFact*expand(M), [volFact], [vmap_c], tempPowVars),

  printf(fh, "} ~%")
)$

/* Perpendicular heat flux */
/* M3perp = < v_par * 2mu/m B f > */
calcGkM3perp(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,vSub,vmap_e,vmapSq_e,vmap_prime_e,vmap_c,d,f_e,bmag_e,M,tempPowVars],

  [varsC,bC,varsP,bP,vSub] : loadGkBasis(basisFun, cdim, vdim, polyOrder),

  [vmap_e,vmapSq_e,vmap_prime_e] : expandVmapFields(varsP),

  vmap_c : [],
  for d : 1 thru vdim do (
    vmap_c : append( vmap_c, delete(mu,delete(vpar,listofvars(vmap_e[d]))) )
  ),

  printf(fh, "GKYL_CU_DH void ~a_M3_perp_~ax~av_~a_p~a(const double *dxv, const double *vmap, double m_, const double *bmag, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, cdim, vdim, basisFun, polyOrder),

  if vdim = 1 then printf(fh, "  const double volFact = ~a; ~%", float(volExpr(cdim, vdim)/(2^vdim)))
  else printf(fh, "  const double volFact = ~a/m_; ~%", float(2*%pi*volExpr(cdim, vdim)/(2^vdim))),

  f_e : doExpand1(f, bP),
  bmag_e : doExpand1(bmag, bC),

  M : calcInnerProdList(varsP, 2*vmap_e[1]*vmap_e[2]*bmag_e, bC, f_e),
  M : map(letsimp, M),

  tempPowVars : [],
  tempPowVars : writeCIncrExprsCollect1noPowers(out, volFact/m_*expand(M), [volFact,m_], [vmap_c], tempPowVars),

  printf(fh, "} ~%")
)$

/* Simultaneously calculate M0, M1, and M2 */
calcGkThreeMoments(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,vSub,vmap_e,vmapSq_e,vmap_prime_e,vmap_c,d,f_e,bmag_e,
   energy,M0,M1,M2par,Mtemp,tmp_e,M2perp,three_moments,tempPowVars],

  [varsC,bC,varsP,bP,vSub] : loadGkBasis(basisFun, cdim, vdim, polyOrder),

  [vmap_e,vmapSq_e,vmap_prime_e] : expandVmapFields(varsP),

  vmap_c : [],
  for d : 1 thru vdim do (
    vmap_c : append( vmap_c, delete(mu,delete(vpar,listofvars(vmap_e[d]))) )
  ),

  printf(fh, "GKYL_CU_DH void ~a_three_moments_~ax~av_~a_p~a(const double *dxv, const double *vmap, double m_, const double *bmag, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, cdim, vdim, basisFun, polyOrder),

  if vdim = 1 then printf(fh, "  const double volFact = ~a; ~%", float(volExpr(cdim, vdim)/(2^vdim)))
  else printf(fh, "  const double volFact = ~a/m_; ~%", float(2*%pi*volExpr(cdim, vdim)/(2^vdim))),

  f_e : doExpand1(f, bP),
  bmag_e : doExpand1(bmag, bC),

  energy : vmap_e[1]*vmap_e[1],
  if vdim > 1 then energy : energy + 2*vmap_e[2]/m_*bmag_e,

  M0 : calcInnerProdList(varsP, 1, bC, f_e),
  M0 : map(letsimp, M0),

  M1 : calcInnerProdList(varsP, vmap_e[1], bC, f_e),
  M1 : map(letsimp, M1),

  M2par : calcInnerProdList(varsP, vmap_e[1]*vmap_e[1], bC, f_e),
  M2par : map(letsimp, M2par),

  if vdim > 1 then (
    Mtemp : calcInnerProdList(varsP, vmap_e[2], bC, f_e),
    Mtemp : map(letsimp, Mtemp),

    printf(fh, "  double tmp[~a]; ~%", length(bC)),
    writeCExprs1(tmp, Mtemp),

    tmp_e : doExpand1(tmp, bC),
    M2perp : fullratsimp(innerProd(varsC, bC, bmag_e, tmp_e))
  ),
  three_moments : [],
  three_moments : append(three_moments, M0),
  three_moments : append(three_moments, M1),
  if vdim > 1 then
    three_moments : append(three_moments, M2par+2/m_*M2perp)
  else
    three_moments : append(three_moments, M2par),
  tempPowVars : [],
  tempPowVars : writeCIncrExprsCollect1noPowers(out, volFact*expand(three_moments), [volFact,m_], [vmap_c], tempPowVars),
  printf(fh, "} ~%"),
  printf(fh, "~%")
)$

/* Simultaneously calculate M0, M1, M2par and M2perp. */
calcGkFourMoments(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,vSub,vmap_e,vmapSq_e,vmap_prime_e,vmap_c,d,f_e,bmag_e,
   M0,M1,M2par,Mtemp,tmp_e,M2perp,four_moments,tempPowVars],

  [varsC,bC,varsP,bP,vSub] : loadGkBasis(basisFun, cdim, vdim, polyOrder),

  [vmap_e,vmapSq_e,vmap_prime_e] : expandVmapFields(varsP),

  vmap_c : [],
  for d : 1 thru vdim do (
    vmap_c : append( vmap_c, delete(mu,delete(vpar,listofvars(vmap_e[d]))) )
  ),

  printf(fh, "GKYL_CU_DH void ~a_four_moments_~ax~av_~a_p~a(const double *dxv, const double *vmap, double m_, const double *bmag, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, cdim, vdim, basisFun, polyOrder),

  if vdim = 1 then printf(fh, "  const double volFact = ~a; ~%", float(volExpr(cdim, vdim)/(2^vdim)))
  else printf(fh, "  const double volFact = ~a/m_; ~%", float(2*%pi*volExpr(cdim, vdim)/(2^vdim))),

  f_e : doExpand1(f, bP),
  bmag_e : doExpand1(bmag, bC),

  M0 : calcInnerProdList(varsP, 1, bC, f_e),
  M0 : map(letsimp, M0),

  M1 : calcInnerProdList(varsP, vmap_e[1], bC, f_e),
  M1 : map(letsimp, M1),

  M2par : calcInnerProdList(varsP, vmap_e[1]*vmap_e[1], bC, f_e),
  M2par : map(letsimp, M2par),

  if vdim > 1 then (
    Mtemp : calcInnerProdList(varsP, vmap_e[2], bC, f_e),
    Mtemp : map(letsimp, Mtemp),

    printf(fh, "  double tmp[~a]; ~%", length(bC)),
    writeCExprs1(tmp, Mtemp),

    tmp_e : doExpand1(tmp, bC),
    M2perp : fullratsimp(innerProd(varsC, bC, 2*bmag_e/m_, tmp_e))
  ),
  four_moments : [],
  four_moments : append(four_moments, M0),
  four_moments : append(four_moments, M1),
  four_moments : append(four_moments, M2par),
  if vdim > 1 then
    four_moments : append(four_moments, M2perp),
  tempPowVars : [],
  tempPowVars : writeCIncrExprsCollect1noPowers(out, volFact*expand(four_moments), [volFact,m_], [vmap_c], tempPowVars),
  printf(fh, "} ~%"),
  printf(fh, "~%")
)$

calcGkMoments(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block([],
  printf(fh, "#include <gkyl_mom_gyrokinetic_kernels.h> ~%"),
  calcGkM0(fh, funcNm, cdim, vdim, basisFun, polyOrder),
  calcGkM1(fh, funcNm, cdim, vdim, basisFun, polyOrder),
  calcGkM2(fh, funcNm, cdim, vdim, basisFun, polyOrder),
  calcGkM2par(fh, funcNm, cdim, vdim, basisFun, polyOrder),
  if vdim > 1 then calcGkM2perp(fh, funcNm, cdim, vdim, basisFun, polyOrder),
  calcGkM3par(fh, funcNm, cdim, vdim, basisFun, polyOrder),
  if vdim > 1 then calcGkM3perp(fh, funcNm, cdim, vdim, basisFun, polyOrder),
  calcGkThreeMoments(fh, funcNm, cdim, vdim, basisFun, polyOrder),
  calcGkFourMoments(fh, funcNm, cdim, vdim, basisFun, polyOrder),
  if vdim > 1 then (
    calcGkM0_step1(fh, funcNm, cdim, vdim, basisFun, polyOrder),
    calcGkM0_step2(fh, funcNm, cdim, vdim, basisFun, polyOrder)
  )
)$
