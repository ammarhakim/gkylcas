/* Functions (called by moment-calc.mac) that compute the
   moments of the distribution function in Vlasov model. */

load("modal-basis");
load("out-scripts");
load(stringproc)$
fpprec : 24$

let(wx1^2, wx1_sq)$
let(wx2^2, wx2_sq)$
let(wx3^2, wx3_sq)$
let(dv1^2, dv1_sq)$
let(dv2^2, dv2_sq)$
let(dv3^2, dv3_sq)$

let(wx1^3, wx1_cu)$
let(wx2^3, wx2_cu)$
let(wx3^3, wx3_cu)$
let(dv1^3, dv1_cu)$
let(dv2^3, dv2_cu)$
let(dv3^3, dv3_cu)$

volExpr(cdim, vdim) := prod(dxv[cdim+i-1], i, 1, vdim)$

vTrans  : [vx*dv1/2+wx1, vy*dv2/2+wx2, vz*dv3/2+wx3]$
wTrans  : [wx1, wx2, wx3]$
dvTrans : [vx*dv1/2, vy*dv2/2, vz*dv3/2]$

/* Number density */
/* M0 = < f > */
calcM0(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,varsSub,fl,M],
  /* Load basis of dimensionality requested. */
  if (basisFun="tensor") then (
    /* If we are using the tensor basis, just use the simple load command */
    [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),
    [varsP,bP] : loadBasis(basisFun, cdim+vdim, polyOrder), 
    /* Do a variable substitution for the lower dimensional tensor basis functions
       to construct the correct set of variables for the subsequent operations */
    if (cdim+vdim = 2) then (
      varsSub : [y=vx],
      bP : subst(varsSub, copylist(bP)),  
      varsP : subst(varsSub, copylist(varsP))
    )
    else if (cdim+vdim = 3) then (
      varsSub : [y=vx, z=vy],
      bP : subst(varsSub, copylist(bP)),  
      varsP : subst(varsSub, copylist(varsP))
    )
    else if (cdim = 2 and vdim = 2) then (
      varsSub : [vx=y, vy=vx, vz=vy],
      bP : subst(varsSub, copylist(bP)),  
      varsP : subst(varsSub, copylist(varsP))
    )
  )
  else (
    /* Load the specific desired basis, including the loading of the hybrid basis if p=1 */
    [varsC,bC,varsP,bP] : loadPhaseBasis(basisFun, cdim, vdim, polyOrder)
  ),
  
  printf(fh, "GKYL_CU_DH void ~a_M0_~ax~av_~a_p~a(const double *w, const double *dxv, const int *idx, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, cdim, vdim, basisFun, polyOrder),
  printf(fh, "  const double volFact = ~a/~a; ~%", volExpr(cdim, vdim), 2^vdim),
  fl : doExpand1(f, bP),
  M : calcInnerProdList(varsP, 1, bC, fl),
  writeCIncrExprs1(out, volFact*M),
  
  printf(fh, "} ~%")
)$


/* Momentum */
calcM1i(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,varsSub,i,fl,M,clst],
  /* Load basis of dimensionality requested. */
  if (basisFun="tensor") then (
    /* If we are using the tensor basis, just use the simple load command */
    [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),
    [varsP,bP] : loadBasis(basisFun, cdim+vdim, polyOrder), 
    /* Do a variable substitution for the lower dimensional tensor basis functions
       to construct the correct set of variables for the subsequent operations */
    if (cdim+vdim = 2) then (
      varsSub : [y=vx],
      bP : subst(varsSub, copylist(bP)),  
      varsP : subst(varsSub, copylist(varsP))
    )
    else if (cdim+vdim = 3) then (
      varsSub : [y=vx, z=vy],
      bP : subst(varsSub, copylist(bP)),  
      varsP : subst(varsSub, copylist(varsP))
    )
    else if (cdim = 2 and vdim = 2) then (
      varsSub : [vx=y, vy=vx, vz=vy],
      bP : subst(varsSub, copylist(bP)),  
      varsP : subst(varsSub, copylist(varsP))
    )
  )
  else (
    /* Load the specific desired basis, including the loading of the hybrid basis if p=1 */
    [varsC,bC,varsP,bP] : loadPhaseBasis(basisFun, cdim, vdim, polyOrder)
  ),

  printf(fh, "GKYL_CU_DH void ~a_M1i_~ax~av_~a_p~a(const double *w, const double *dxv, const int *idx, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, cdim, vdim, basisFun, polyOrder),
  printf(fh, "  const double volFact = ~a/~a; ~%", volExpr(cdim, vdim), 2^vdim),
  for i : 1 thru vdim do (
    printf(fh, "  const double wx~a = w[~a], dv~a = dxv[~a]; ~%", i, cdim+i-1, i, cdim+i-1)
  ),
  
  fl : doExpand1(f, bP),
  
  M : (M : [],
    for dir : 1 thru vdim do (
      M : append(M, calcInnerProdList(varsP, vTrans[dir], bC, fl))
    ),
  M),
  
  clst : [volFact],
  writeCIncrExprsCollect1(out, volFact*M, clst),
  
  printf(fh, "} ~%")
)$

/* Energy */
calcM2(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,varsSub,i,fl,M,clst],
  /* Load basis of dimensionality requested. */
  if (basisFun="tensor") then (
    /* If we are using the tensor basis, just use the simple load command */
    [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),
    [varsP,bP] : loadBasis(basisFun, cdim+vdim, polyOrder), 
    /* Do a variable substitution for the lower dimensional tensor basis functions
       to construct the correct set of variables for the subsequent operations */
    if (cdim+vdim = 2) then (
      varsSub : [y=vx],
      bP : subst(varsSub, copylist(bP)),  
      varsP : subst(varsSub, copylist(varsP))
    )
    else if (cdim+vdim = 3) then (
      varsSub : [y=vx, z=vy],
      bP : subst(varsSub, copylist(bP)),  
      varsP : subst(varsSub, copylist(varsP))
    )
    else if (cdim = 2 and vdim = 2) then (
      varsSub : [vx=y, vy=vx, vz=vy],
      bP : subst(varsSub, copylist(bP)),  
      varsP : subst(varsSub, copylist(varsP))
    )
  )
  else (
    /* Load the specific desired basis, including the loading of the hybrid basis if p=1 */
    [varsC,bC,varsP,bP] : loadPhaseBasis(basisFun, cdim, vdim, polyOrder)
  ),
  
  printf(fh, "GKYL_CU_DH void ~a_M2_~ax~av_~a_p~a(const double *w, const double *dxv, const int *idx, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, cdim, vdim, basisFun, polyOrder),
  printf(fh, "  const double volFact = ~a/~a; ~%", volExpr(cdim, vdim), 2^vdim),
  for i : 1 thru vdim do (
    printf(fh, "  const double wx~a = w[~a], dv~a = dxv[~a]; ~%", i, cdim+i-1, i, cdim+i-1),
    printf(fh, "  const double wx~a_sq = wx~a*wx~a, dv~a_sq = dv~a*dv~a; ~%", i, i, i, i, i, i)
  ),
  
  fl : doExpand1(f, bP),
  
  M : sum(calcInnerProdList(varsP, vTrans[d]*vTrans[d], bC, fl), d, 1, vdim),
  
  M : map(letsimp, M),
  clst : [volFact],
  writeCIncrExprsCollect1(out, volFact*M, clst),
  
  printf(fh, "} ~%")
)$

/* Pressure tensor */
calcM2ij(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,varsSub,i,fl,M,clst],
  /* Load basis of dimensionality requested. */
  if (basisFun="tensor") then (
    /* If we are using the tensor basis, just use the simple load command */
    [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),
    [varsP,bP] : loadBasis(basisFun, cdim+vdim, polyOrder), 
    /* Do a variable substitution for the lower dimensional tensor basis functions
       to construct the correct set of variables for the subsequent operations */
    if (cdim+vdim = 2) then (
      varsSub : [y=vx],
      bP : subst(varsSub, copylist(bP)),  
      varsP : subst(varsSub, copylist(varsP))
    )
    else if (cdim+vdim = 3) then (
      varsSub : [y=vx, z=vy],
      bP : subst(varsSub, copylist(bP)),  
      varsP : subst(varsSub, copylist(varsP))
    )
    else if (cdim = 2 and vdim = 2) then (
      varsSub : [vx=y, vy=vx, vz=vy],
      bP : subst(varsSub, copylist(bP)),  
      varsP : subst(varsSub, copylist(varsP))
    )
  )
  else (
    /* Load the specific desired basis, including the loading of the hybrid basis if p=1 */
    [varsC,bC,varsP,bP] : loadPhaseBasis(basisFun, cdim, vdim, polyOrder)
  ),

  printf(fh, "GKYL_CU_DH void ~a_M2ij_~ax~av_~a_p~a(const double *w, const double *dxv, const int *idx, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, cdim, vdim, basisFun, polyOrder),
  printf(fh, "  const double volFact = ~a/~a; ~%", volExpr(cdim, vdim), 2^vdim),
  for i : 1 thru vdim do (
    printf(fh, "  const double wx~a = w[~a], dv~a = dxv[~a]; ~%", i, cdim+i-1, i, cdim+i-1),
    printf(fh, "  const double wx~a_sq = wx~a*wx~a, dv~a_sq = dv~a*dv~a; ~%", i, i, i, i, i, i)
  ),
  
  fl : doExpand1(f, bP),
  
  M : (M : [],
    for d1 : 1 thru vdim do (
      for d2 : d1 thru vdim do (
        M : append(M, calcInnerProdList(varsP, vTrans[d1]*vTrans[d2], bC, fl))
    )),
  M),
  
  M : map(letsimp, M),
  clst : [volFact],
  writeCIncrExprsCollect1(out, volFact*M, clst),
  
  printf(fh, "} ~%")
)$

/* Heat-flux vector */
calcM3i(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,varsSub,i,fl,M,clst],
  /* Load basis of dimensionality requested. */
  if (basisFun="tensor") then (
    /* If we are using the tensor basis, just use the simple load command */
    [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),
    [varsP,bP] : loadBasis(basisFun, cdim+vdim, polyOrder), 
    /* Do a variable substitution for the lower dimensional tensor basis functions
       to construct the correct set of variables for the subsequent operations */
    if (cdim+vdim = 2) then (
      varsSub : [y=vx],
      bP : subst(varsSub, copylist(bP)),  
      varsP : subst(varsSub, copylist(varsP))
    )
    else if (cdim+vdim = 3) then (
      varsSub : [y=vx, z=vy],
      bP : subst(varsSub, copylist(bP)),  
      varsP : subst(varsSub, copylist(varsP))
    )
    else if (cdim = 2 and vdim = 2) then (
      varsSub : [vx=y, vy=vx, vz=vy],
      bP : subst(varsSub, copylist(bP)),  
      varsP : subst(varsSub, copylist(varsP))
    )
  )
  else (
    /* Load the specific desired basis, including the loading of the hybrid basis if p=1 */
    [varsC,bC,varsP,bP] : loadPhaseBasis(basisFun, cdim, vdim, polyOrder)
  ),
  
  printf(fh, "GKYL_CU_DH void ~a_M3i_~ax~av_~a_p~a(const double *w, const double *dxv, const int *idx, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, cdim, vdim, basisFun, polyOrder),
  printf(fh, "  const double volFact = ~a/~a; ~%", volExpr(cdim, vdim), 2^vdim),
  for i : 1 thru vdim do (
    printf(fh, "  const double wx~a = w[~a], dv~a = dxv[~a]; ~%", i, cdim+i-1, i, cdim+i-1),
    printf(fh, "  const double wx~a_sq = wx~a*wx~a, dv~a_sq = dv~a*dv~a; ~%", i, i, i, i, i, i),
    printf(fh, "  const double wx~a_cu = wx~a*wx~a*wx~a, dv~a_cu = dv~a*dv~a*dv~a; ~%", i, i, i, i, i, i, i, i)
  ),
  
  fl : doExpand1(f, bP),
  
  M : (M : [],
    for i : 1 thru vdim do (
      M : append(M, sum(calcInnerProdList(varsP, vTrans[i]*vTrans[d]*vTrans[d], bC, fl), d, 1, vdim))
    ),
  M),
  
  M : map(letsimp, M),
  clst : [volFact],
  writeCIncrExprsCollect1(out, volFact*M, clst),
  
  printf(fh, "} ~%")
)$

/* Heat-flux tensor */
calcM3ijk(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,varsSub,i,fl,M,d1,d2,d3,clst],
  /* Load basis of dimensionality requested. */
  if (basisFun="tensor") then (
    /* If we are using the tensor basis, just use the simple load command */
    [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),
    [varsP,bP] : loadBasis(basisFun, cdim+vdim, polyOrder), 
    /* Do a variable substitution for the lower dimensional tensor basis functions
       to construct the correct set of variables for the subsequent operations */
    if (cdim+vdim = 2) then (
      varsSub : [y=vx],
      bP : subst(varsSub, copylist(bP)),  
      varsP : subst(varsSub, copylist(varsP))
    )
    else if (cdim+vdim = 3) then (
      varsSub : [y=vx, z=vy],
      bP : subst(varsSub, copylist(bP)),  
      varsP : subst(varsSub, copylist(varsP))
    )
    else if (cdim = 2 and vdim = 2) then (
      varsSub : [vx=y, vy=vx, vz=vy],
      bP : subst(varsSub, copylist(bP)),  
      varsP : subst(varsSub, copylist(varsP))
    )
  )
  else (
    /* Load the specific desired basis, including the loading of the hybrid basis if p=1 */
    [varsC,bC,varsP,bP] : loadPhaseBasis(basisFun, cdim, vdim, polyOrder)
  ),
  
  printf(fh, "GKYL_CU_DH void ~a_M3ijk_~ax~av_~a_p~a(const double *w, const double *dxv, const int *idx, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, cdim, vdim, basisFun, polyOrder),
  printf(fh, "  const double volFact = ~a/~a; ~%", volExpr(cdim, vdim), 2^vdim),
  for i : 1 thru vdim do (
    printf(fh, "  const double wx~a = w[~a], dv~a = dxv[~a]; ~%", i, cdim+i-1, i, cdim+i-1),
    printf(fh, "  const double wx~a_sq = wx~a*wx~a, dv~a_sq = dv~a*dv~a; ~%", i, i, i, i, i, i),
    printf(fh, "  const double wx~a_cu = wx~a*wx~a*wx~a, dv~a_cu = dv~a*dv~a*dv~a; ~%", i, i, i, i, i, i, i, i)
  ),
  
  fl : doExpand1(f, bP),
  
  M : (M : [],
    for d1 : 1 thru vdim do (
      for d2 : d1 thru vdim do (
        for d3 : d2 thru vdim do (
          M : append(M, calcInnerProdList(varsP, vTrans[d1]*vTrans[d2]*vTrans[d3], bC, fl))
    ))),
  M),
  
  M : map(letsimp, M),
  clst : [volFact],
  writeCIncrExprsCollect1(out, volFact*M, clst),
  
  printf(fh, "} ~%")
)$

/* Calculate M0, M1i, and M2 (Five moments) sequentially */
calcFiveMoments(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,varsSub,i,fl,M0,M1i,M2,M0M1i,M0M2,incr_tempM0,incr_tempM1i,five_moments,clst],
  /* Load basis of dimensionality requested. */
  if (basisFun="tensor") then (
    /* If we are using the tensor basis, just use the simple load command */
    [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),
    [varsP,bP] : loadBasis(basisFun, cdim+vdim, polyOrder), 
    /* Do a variable substitution for the lower dimensional tensor basis functions
       to construct the correct set of variables for the subsequent operations */
    if (cdim+vdim = 2) then (
      varsSub : [y=vx],
      bP : subst(varsSub, copylist(bP)),  
      varsP : subst(varsSub, copylist(varsP))
    )
    else if (cdim+vdim = 3) then (
      varsSub : [y=vx, z=vy],
      bP : subst(varsSub, copylist(bP)),  
      varsP : subst(varsSub, copylist(varsP))
    )
    else if (cdim = 2 and vdim = 2) then (
      varsSub : [vx=y, vy=vx, vz=vy],
      bP : subst(varsSub, copylist(bP)),  
      varsP : subst(varsSub, copylist(varsP))
    )
  )
  else (
    /* Load the specific desired basis, including the loading of the hybrid basis if p=1 */
    [varsC,bC,varsP,bP] : loadPhaseBasis(basisFun, cdim, vdim, polyOrder)
  ),
  
  printf(fh, "GKYL_CU_DH void ~a_five_moments_~ax~av_~a_p~a(const double *w, const double *dxv, const int *idx, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, cdim, vdim, basisFun, polyOrder),
  printf(fh, "  const double volFact = ~a/~a; ~%", volExpr(cdim, vdim), 2^vdim),
  for i : 1 thru vdim do (
    printf(fh, "  const double wx~a = w[~a], dv~a = dxv[~a]; ~%", i, cdim+i-1, i, cdim+i-1),
    printf(fh, "  const double wx~a_sq = wx~a*wx~a, dv~a_sq = dv~a*dv~a; ~%", i, i, i, i, i, i)
  ),
  printf(fh, "  double tempM0[~a], tempM1i[~a]; ~%", length(bC), length(bC)*vdim),
  printf(fh, "~%"),
  fl : doExpand1(f, bP),
  
  M0 : calcInnerProdList(varsP, 1, bC, fl),
  M1i : (M1i : [],
    for dir : 1 thru vdim do (
      M1i : append(M1i, calcInnerProdList(varsP, dvTrans[dir], bC, fl))
    ),
  M1i),
  M2 : sum(calcInnerProdList(varsP, dvTrans[d]*dvTrans[d], bC, fl), d, 1, vdim),
  writeCExprs1(tempM0, volFact*M0),
  
  printf(fh, "~%"),
  M0M1i : (M0M1i : [],
    for dir : 1 thru vdim do (
      M0M1i : append(M0M1i, makelist(tempM0[i-1]*wTrans[dir], i, 1, length(bC)))
    ),
  M0M1i),
  writeCExprs1(tempM1i, M0M1i+volFact*M1i),
  printf(fh, "~%"),
  if vdim = 1 then (
    M0M2 : makelist(2*tempM1i[i-1]*wTrans[1]-tempM0[i-1]*wTrans[1]*wTrans[1], i, 1, length(bC))
  ),
  if vdim = 2 then (
    M0M2 : makelist(2*tempM1i[i-1]*wTrans[1]+2*tempM1i[i-1+length(bC)]*wTrans[2]-tempM0[i-1]*(wTrans[1]*wTrans[1]+wTrans[2]*wTrans[2]), i, 1, length(bC))
  ),
  if vdim = 3 then (
    M0M2 : makelist(2*tempM1i[i-1]*wTrans[1]+2*tempM1i[i-1+length(bC)]*wTrans[2]+2*tempM1i[i-1+2*length(bC)]*wTrans[3]-tempM0[i-1]*(wTrans[1]*wTrans[1]+wTrans[2]*wTrans[2]+wTrans[3]*wTrans[3]), i, 1, length(bC))
  ),
  M2 : map(letsimp, M2),
  M0M2 : map(letsimp, M0M2),
  incr_tempM0 : makelist(tempM0[i-1], i, 1, length(bC)),
  incr_tempM1i : makelist(tempM1i[i-1], i, 1, vdim*length(bC)),
  clst : [volFact],
  clst : append(clst, makelist(tempM0[i-1], i, 1, length(bC))),
  five_moments : [],
  five_moments : append(five_moments, incr_tempM0),
  five_moments : append(five_moments, incr_tempM1i),
  five_moments : append(five_moments, M0M2+volFact*M2),
  writeCIncrExprsCollect1(out, five_moments, clst),
  printf(fh, "} ~%")
)$

calcMoments(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block([],
  printf(fh, "#include <gkyl_mom_vlasov_kernels.h> ~%"),
  calcM0(fh, funcNm, cdim, vdim, basisFun, polyOrder),
  calcM1i(fh, funcNm, cdim, vdim, basisFun, polyOrder),
  calcM2(fh, funcNm, cdim, vdim, basisFun, polyOrder),
  calcM2ij(fh, funcNm, cdim, vdim, basisFun, polyOrder),
  calcM3i(fh, funcNm, cdim, vdim, basisFun, polyOrder),
  calcM3ijk(fh, funcNm, cdim, vdim, basisFun, polyOrder),
  calcFiveMoments(fh, funcNm, cdim, vdim, basisFun, polyOrder)
)$
