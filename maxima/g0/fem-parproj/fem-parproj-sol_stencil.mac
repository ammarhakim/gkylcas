/*
   Generate kernels computing the global-nodal-to-local-modal
   mapping of the FEM parallel projeciton operator.
*/

load("modal-basis");
load("out-scripts");
load("nodal_operations/nodal_functions");
load("fem/fem-util");
fpprec : 24$

generate_fem_parproj_sol_stencil(fh, funcNm, dim, basisFun, pMin, pMax) := block(
  [polyOrder,bN,numB,vars,stencil,sol,sol_c,k],

  kill(varsC, varsP, basisC, basisP),

  load(sconcat("basis-precalc/basis", basisFun, dim, "x")),

  for polyOrder : pMin thru pMax do (

    printf(fh, "GKYL_CU_DH void ~a_p~a(const double *sol_nodal_global, long nodeOff, const long *globalIdxs, double *sol_modal_local) ~%{ ~%", funcNm, polyOrder),
    printf(fh, "  // sol_nodal_global: global nodal solution vector.~%"),
    printf(fh, "  // nodeOff: node offset (prob idx * global number of nodes).~%"),
    printf(fh, "  // globalIdxs: map between local nodes and global nodes.~%"),
    printf(fh, "  // sol_modal_local: local modal solution vector.~%"),
    printf(fh, "~%"),

    bN   : getNodalBasis(basisFun, dim, polyOrder),
    numB : length(bN),
    vars : listofvars(bN),

    stencil : calcNodToMod(basisFun, dim, polyOrder),

    sol   : stencil . makelist(sol_nodal_global[nodeOff+globalIdxs[k-1]], k, 1, numB),
    sol_c : makelist(fullratsimp(sol[i][1]),i,1,numB),

    /* Write out the coefficients. */
    for k : 1 thru numB do (
      printf(fh, "  sol_modal_local[~a] = ~a;~%",k-1,expand(float(sol_c[k])))
    ),
    printf(fh, "~%"),

    printf(fh, "}~%")

  )


)$
