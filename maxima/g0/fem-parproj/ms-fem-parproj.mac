/* Generate kernels for the various elements of a direct
   solve of the FEM projection in the parallel direction
       w * phi = rho
   where w is a wright, phi is a continuous FEM field we
   wish to find, and rho is the RHS discontinuous DG field. */

load(stringproc)$
load("fem-parproj/fem-parproj-num_nodes")$
load("fem-parproj/fem-parproj-local_to_global")$
load("fem-parproj/fem-parproj-lhs_stencil")$
load("fem-parproj/fem-parproj-src_stencil")$
load("fem-parproj/fem-parproj-sol_stencil")$

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minDim_Ser : 1$
maxDim_Ser : 3$

/* Tensor product basis. */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minDim_Tensor : 1$
maxDim_Tensor : 0$

/* ...... END OF USER INPUTS........ */

bName        : ["ser","tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minDim       : [minDim_Ser, minDim_Tensor]$
maxDim       : [maxDim_Ser, maxDim_Tensor]$

/**
**/
/* Kernels computing the number of nodes in the global problem. */
disp(printf(false,"Creating fem_parproj_num_nodes.c"))$
fname : "~/max-out/fem_parproj_num_nodes.c"$
fh    : openw(fname)$
printf(fh, "#include <gkyl_fem_parproj_kernels.h> ~%")$
printf(fh, " ~%")$
for bInd : 1 thru length(bName) do (
  for c : minDim[bInd] thru maxDim[bInd] do (
    /* Number of nodes in linear problem. */
    funcName : sconcat("fem_parproj_num_nodes_global_", c, "x_", bName[bInd]),
    disp(printf(false,sconcat("Working on fem_parproj_num_nodes_global_", c, "x_", bName[bInd]))),
    generate_fem_parproj_num_nodes(fh, funcName, c, bName[bInd], minPolyOrder[bInd], maxPolyOrder[bInd])
  )
)$
close(fh)$

/* Translation from local indices to global matrix indices. */
disp(printf(false,"Creating fem_parproj_local_to_global.c"))$
fname : "~/max-out/fem_parproj_local_to_global.c"$
fh    : openw(fname)$
printf(fh, "#include <gkyl_fem_parproj_kernels.h> ~%")$
printf(fh, " ~%")$
for bInd : 1 thru length(bName) do (
  for c : minDim[bInd] thru maxDim[bInd] do (
    funcName : sconcat("fem_parproj_local_to_global_", c, "x_", bName[bInd]),
    disp(printf(false,sconcat("Working on fem_parproj_local_to_global_", c, "x_", bName[bInd]))),
    generate_fem_parproj_local_to_global(fh, funcName, c, bName[bInd], minPolyOrder[bInd], maxPolyOrder[bInd])
  )
)$
close(fh)$

/* LHS (weighted or unweighted) mass matrix stencil. */
disp(printf(false,"Creating fem_parproj_lhs_stencil.c"))$
fname : "~/max-out/fem_parproj_lhs_stencil.c"$
fh    : openw(fname)$
printf(fh, "#include <gkyl_fem_parproj_kernels.h> ~%")$
printf(fh, " ~%")$
for bInd : 1 thru length(bName) do (
  for c : minDim[bInd] thru maxDim[bInd] do (
    funcName : sconcat("fem_parproj_lhs_stencil_noweight_", c, "x_", bName[bInd]),
    generate_fem_parproj_lhs_stencil(fh, funcName, c, bName[bInd], minPolyOrder[bInd], maxPolyOrder[bInd]),
    funcName : sconcat("fem_parproj_lhs_stencil_weighted_", c, "x_", bName[bInd]),
    generate_fem_parproj_weighted_lhs_stencil(fh, funcName, c, bName[bInd], minPolyOrder[bInd], maxPolyOrder[bInd])
  )
)$
close(fh)$

/* RHS source stencil kernels. */
disp(printf(false,"Creating fem_parproj_src_stencil.c"))$
fname : "~/max-out/fem_parproj_src_stencil.c"$
fh    : openw(fname)$
printf(fh, "#include <gkyl_fem_parproj_kernels.h> ~%")$
printf(fh, " ~%")$
for bInd : 1 thru length(bName) do (
  for c : minDim[bInd] thru maxDim[bInd] do (
    funcName : sconcat("fem_parproj_src_stencil_", c, "x_", bName[bInd]),
    generate_fem_parproj_src_stencil(fh, funcName, c, bName[bInd], minPolyOrder[bInd], maxPolyOrder[bInd])
  )
)$
close(fh)$

/* Solution nodal-to-modal kernels. */
disp(printf(false,"Creating fem_parproj_sol_stencil.c"))$
fname : "~/max-out/fem_parproj_sol_stencil.c"$
fh    : openw(fname)$
printf(fh, "#include <gkyl_fem_parproj_kernels.h> ~%")$
printf(fh, " ~%")$
for bInd : 1 thru length(bName) do (
  for c : minDim[bInd] thru maxDim[bInd] do (
    funcName : sconcat("fem_parproj_sol_stencil_", c, "x_", bName[bInd]),
    generate_fem_parproj_sol_stencil(fh, funcName, c, bName[bInd], minPolyOrder[bInd], maxPolyOrder[bInd])
  )
)$
close(fh)$
/**
**/
