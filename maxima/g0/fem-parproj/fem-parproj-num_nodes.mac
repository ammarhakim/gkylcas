/*
   Compute the number of nodes, based on number of cells, polyOrder,
   dimensionality (assume Dirichlet boundary conditions, although the BCs
   don't enter the FEM projection in the parallel direction). 
   
   MF: This is more complicated than it needs to be because I just reused
       Maxima used for the Poisson solve in arbitrary dimensions. Will
       simplify at a later time.
*/

load("modal-basis");
load("out-scripts");
load("nodal_operations/nodal_functions");
load("bvp_utilities/bvp-util");
load("fem/fem-util");
fpprec : 24$

generate_fem_parproj_num_nodes(fh, funcNm, dim, basisFun, pMax) := block([],

  kill(varsC, varsP, basisC, basisP),

  load(sconcat("basis-precalc/basis", basisFun, dim, "x")),

  /* List of stencil locations. Each entry is a dim-dimensional list
     with -1 meaning it is at a lower boundary, 1 upper boundary, or
     0 away from boundaries in that direction. */
  stencilLoc : getStencilCoords(dim),

  /* Types of boundary conditions for which to generate kernels.
       =0 periodic
       =1 non-periodic
  */
  currBC : makelist(bcTypes[1],d,1,dim),

  /* Assume there's only one cell in perpendicular directions, and that
     the parallel direction is the last one. */
  numCells : makelist(1,d,1,dim),
  numCells[dim] : numCellsPar,

  for polyOrder : 1 thru pMax do (

    printf(fh, "long ~a_p~a(const int numCellsPar) ~%{ ~%", funcNm, polyOrder),
    printf(fh, "  // numCellsPar:  number of cells in parallel direction.~%"),
    printf(fh, "~%"),

    bN   : getNodalBasis(basisFun, dim, polyOrder),
    numB : length(bN),

    nodes    : args(getNodes(basisFun, dim, polyOrder)),
    numNodes : length(nodes),

    storedNodes    : getStoredNodes(nodes,stencilLoc[1]),
    numStoredNodes : length(storedNodes),

    numNodesOut : product(numCells[d]-1,d,1,dim)*numStoredNodes, /* Interior nodes. */

    for sI : 2 thru length(stencilLoc) do (
      /* This if-statement excludes lower boundary kernels (without an upper boundary). */
      if (length(sublist(stencilLoc[sI],lambda([x],x < 0)))=0) then (
        storedNodes : getStoredNodes(nodes,stencilLoc[sI]),
        numStoredNodes : length(storedNodes),
  
        numBoundCells : makelist(numCells[d]-1,d,1,dim),
        for d : 1 thru dim do ( if stencilLoc[sI][d]=1 then (
          numBoundCells[d] : 1
        ) ),

        numNodesOut : numNodesOut + product(numBoundCells[d],d,1,dim)*numStoredNodes
      )
    ),

    printf(fh, "  return ~a;~%", numNodesOut),

    printf(fh, "}~%"),
    printf(fh, "~%")

  )
  
)$
