/*
   Compute the local mass matrix of the nodal basis,
   the mass matrix times the modal-to-nodal matrix,
   and the nodal-to-modal matrix.
*/

load("modal-basis");
load("out-scripts");
load("fem/fem-util");
fpprec : 24$

generate_fem_parproj_mass(fh, funcNm, dim, basisFun, pMax) := block(
  [polyOrder, massM, i, j],

  for polyOrder : 1 thru pMax do (
    printf(fh, "void ~a_p~a(struct gkyl_mat *matout) ~%{ ~%", funcNm, polyOrder),
    printf(fh, "  // matout: mass matrix.~%"),
    printf(fh, "~%"),

    out : calcMassUnweighted(dim, basisFun, polyOrder),

    for i : 1 thru length(out) do (
      for j : 1 thru length(out) do (
        printf(fh,"  gkyl_mat_set(matout,~a,~a,~a); ~%", i-1, j-1, float(out[i][j]))
      )
    ),

    printf(fh, "}~%"),
    printf(fh, "~%")
  )
  
)$

generate_fem_parproj_mass_times_modtonod(fh, funcNm, dim, basisFun, pMax) := block(
  [polyOrder, massM, i, j, mod2nod, out],

  for polyOrder : 1 thru pMax do (
    printf(fh, "void ~a_p~a(struct gkyl_mat *matout) ~%{ ~%", funcNm, polyOrder),
    printf(fh, "  // matout: mass matrix times modal to nodal matrix.~%"),
    printf(fh, "~%"),

    massM : calcMassUnweighted(dim, basisFun, polyOrder),
    mod2nod : calcModToNod(basisFun, dim, polyOrder),

    out : massM . mod2nod,

    for i : 1 thru length(out) do (
      for j : 1 thru length(out) do (
        printf(fh,"  gkyl_mat_set(matout,~a,~a,~a); ~%", i-1, j-1, float(out[i][j]))
      )
    ),

    printf(fh, "}~%"),
    printf(fh, "~%")
  )
  
)$

generate_fem_parproj_nodtomod(fh, funcNm, dim, basisFun, pMax) := block(
  [polyOrder, massM, i, j, mod2nod, out],

  for polyOrder : 1 thru pMax do (
    printf(fh, "void ~a_p~a(struct gkyl_mat *matout) ~%{ ~%", funcNm, polyOrder),
    printf(fh, "  // matout: nodal to modal matrix.~%"),
    printf(fh, "~%"),

    out : calcNodToMod(basisFun, dim, polyOrder),

    for i : 1 thru length(out) do (
      for j : 1 thru length(out) do (
        printf(fh,"  gkyl_mat_set(matout,~a,~a,~a); ~%", i-1, j-1, float(out[i][j]))
      )
    ),

    printf(fh, "}~%"),
    printf(fh, "~%")
  )
  
)$
