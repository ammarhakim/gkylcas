/* 
   Generate the kernel that computes the global indexes of the memory
   to which each node (or nodal basis) in a given cell contributes.

   MF 2023/07/31: this script may be more complicated than it needs to be.
   It is based on the local_to_global script for the Poisson solver in
   arbitrary dimensions, restricted to 1 cell in perpendicular directions.
*/

load("modal-basis");
load("out-scripts");
load("nodal_operations/nodal_functions");
load("bvp_utilities/bvp-util");
load("fem/fem-util");
fpprec : 24$

generate_fem_parproj_local_to_global(fh, funcNm, dim, basisFun, pMin, pMax) := block(
  [stencilLoc,bcTypesPerp,bcTypesPar,bcStrs,bcKey,bcCombos,i,sI,bcI,stencilStr,stencilLocCurr,currBC,numCells,idx,polyOrder,
   bN,numB,nodes,numNodes,storedNodes,storedNodesBC,numStoredNodes,locToNumStoredNodes,numPS,
   newS,newNodes,upbDirs,nodeMemOff,currNode,cellIdx,nodeOffFac,nodeIdx,upNodeCoords,newNode,
   isOnBoundary,dI,pS,nI,d,hi,j],

  kill(varsC, varsP, basisC, basisP),

  load(sconcat("basis-precalc/basis", basisFun, dim, "x")),

  /* Associative list between stencil location (-1,0,1) and variable strings in kernel name. */
  coordVarS : getCoordVarS(varsC),

  /* List of stencil locations. Each entry is a dim-dimensional list
     with -1 meaning it is at a lower boundary, 1 upper boundary, or
     0 away from boundaries in that direction. */
  stencilLoc : getStencilCoords(dim),

  /* Only need stencils that include all the nodes in the perp directions.
     This is effectively upper x,y-boundary stencils, so remove all stencil
     locations not on the upper x,y-boundaries. */
  if dim=3 then (
    stencilLoc : sublist(stencilLoc, lambda([x], x[1]=1 and x[2]=1))
  ),

  /* Types of boundary conditions for which to generate kernels.
       =0 periodic
       =1 non-periodic
  */
  bcTypesPerp : [1],
  bcTypesPar  : [0, 1],
  bcStrs  : ["periodic", "nonperiodic"],
  bcKey   : makelist([bcTypesPar[i],bcStrs[i]],i,1,length(bcTypesPar)),

  if dim = 1 then (
    bcCombos : makelist([bcTypesPar[i]],i,1,length(bcTypesPar))
  ) else if dim = 3 then (
    bcCombos : makelist([bcTypesPerp[i]],i,1,length(bcTypesPerp)),

    bcCombos : listify(cartesian_product(setify(bcCombos),setify(bcTypesPerp))),
    for i : 1 thru length(bcCombos) do ( bcCombos[i] : flatten(bcCombos[i]) ),

    bcCombos : listify(cartesian_product(setify(bcCombos),setify(bcTypesPar))),
    for i : 1 thru length(bcCombos) do ( bcCombos[i] : flatten(bcCombos[i]) )
  ),

  /* We will create local->global kernels for each interior and upper
     boundary region of the domain. Each region must have different kernels
     for each possible combination of the boundary conditions. */
  for sI : 1 thru length(stencilLoc) do (
    stencilLocCurr : stencilLoc[sI],
    /* Exclude lower boundary kernels (ones that are not internal
       and do not own upper cell-boundary nodes). */
    if (stencilLocCurr=makelist(0,d,1,dim)) or
       (length(sublist(stencilLocCurr,lambda([x],x < 0)))=0) then (

      /* Loop over BC combinations. Will create a separate kernel for each. */
      for bcI : 1 thru length(bcCombos) do (

        currBC : copylist(bcCombos[bcI]),

        /* String used in kernel name, identifying stencil location and BC. */
        stencilStr : sconcat(assoc(stencilLocCurr[dim],[[-1,"_lo"],[0,"_in"],[1,"_up"]]),
                     assoc(stencilLocCurr[dim],coordVarS)[dim],"_",assoc(currBC[dim],bcKey),string(varsC[dim])),

        for polyOrder : pMin thru pMax do (
        
          printf(fh, "GKYL_CU_DH void ~a_p~a~a(int numCellsPar, int parIdx, long *globalIdxs) ~%{ ~%", funcNm, polyOrder, stencilStr),
          printf(fh, "  // numCellsPar: number of cells in parallel direction.~%"),
          printf(fh, "  // parIdx:     index of current cell in parallel direction.~%"),
          printf(fh, "  // globalIdxs: global linear index of each basis function/node in current cell.~%"),
          printf(fh, "~%"),
        
          /* Assume there's only one cell in perpendicular directions, and that
             the parallel direction is the last one. */
          numCells : makelist(1,d,1,dim),
          idx      : makelist(0,d,1,dim),
          numCells[dim] : numCellsPar,
          idx[dim]      : parIdx,

          bN   : getNodalBasis(basisFun, dim, polyOrder),
          numB : length(bN),
        
          nodes    : args(getNodes(basisFun, dim, polyOrder)),
          numNodes : length(nodes),
      
          storedNodes    : getStoredNodes(nodes,stencilLocCurr),
          storedNodesBC  : getStoredNodesWithBC(nodes,stencilLocCurr,currBC),
          numStoredNodes : length(storedNodes),
      
          /* Create a list of possible locations and number of stored nodes
             in the domain (only interior and upper boundary locations needed). */
          locToNumStoredNodes       : [[makelist(0,d,1,dim),0]],
          locToNumStoredNodes[1][2] : length(getStoredNodesWithBC(nodes,locToNumStoredNodes[1][1],currBC)),
          for dI : 1 thru dim do (
            numPS : length(locToNumStoredNodes),
            for pS : 1 thru numPS do (
              for luI : -1 thru 1 step 2 do (  /* Loop over lower and upper. */
                newS        : [copylist(locToNumStoredNodes[pS][1]),0], /* Copy the previous location. */
                newS[1][dI] : luI,
                newS[2]     : length(getStoredNodesWithBC(nodes,newS[1],currBC)),
                locToNumStoredNodes : endcons(newS,locToNumStoredNodes)
              )
            )
          ),
      
          /* 
             In 1D need something like:
               globalIdx = idx[0]*(nodes/cell in cells prior to this one along this x-line)+local node index.
             In 2D (row-major order):
               globalIdx = idx[0]*(nodes/line in y-lines (i.e. i=const) prior to this one)
                          +idx[1]*(nodes/cell in cells prior to this one along this y-line)+local node index.
                         = idx[0]*((numCells[1]-1)*(nodes/interior-cell of y-lines prior to this one)
                                   +nodes/upper-boundary-cell of y-lines prior to this one)
                          +idx[1]*(nodes/cell in cells prior to this one along this y-line)+local node index.
             In 3D (row-major order) need something like:
               globalIdx = idx[0]*(nodes/plane in yz-planes (i.e. i=const) prior to this one)
                          +idx[1]*(nodes/line in z-lines (i.e. j=const) prior to this one)
                          +idx[2]*(nodes/cell in cells prior to this one along this z-line)+local node index.
                         = idx[0]*((numCells[1]-1)*((numCells[2]-1)*(nodes/interior-cell of z-lines prior in yz-planes prior to this one)
                                                    +nodes/upper-boundary-cell of upper-z-line in yz-planes prior to this one)
                                   +(numCells[2]-1)*(nodes/upper-boundary-cell of upper-y-line in yz-planes prior to this one)
                                   +nodes/upper-right-cell of yz-planes prior to this one)
                          +idx[1]*((numCells[2]-1)*(nodes/interior-cells of z-lines of this yz-plane)+nodes/upper-boundary-cell of z-lines of this yz-plane)
                          +idx[2]*(nodes/cell in cells prior to this one along this z-line)+local node index.
          */
      
          /* This cell's memory offset. Or the number of nodes before this cell (following the
             fastest-changing dimension, row-major order), as a factor which multiplies each
             of idx[0], idx[1] and idx[2], i.e. offset=sum_i cellMemOffFac[i]*idx[i-1]. */
          getCellMemOff(cellLoc) := block([tmpLoc,numNodesFac,dI,d],
            /* Add nodes along this row-major order line (x-line for 1D, y-line for 2D, z-line for 3D). */
            tmpLoc      : copylist(cellLoc),
            tmpLoc[dim] : 0,
            numNodesFac : makelist(0,d,1,dim),
            numNodesFac[dim] : assoc(tmpLoc,locToNumStoredNodes),
            /* Add nodes in lines/planes (2D/3D) prior to this one. */
            for dI : dim-1 thru 1 step -1 do (
              tmpLoc          : copylist(cellLoc),
              for d : dim thru dI step -1 do ( tmpLoc[d] : 0 ),
              numNodesFac[dI] : (numCells[dim]-1)*assoc(tmpLoc,locToNumStoredNodes),
              tmpLoc[dim]     : 1,
              numNodesFac[dI] : numNodesFac[dI]+assoc(tmpLoc,locToNumStoredNodes),
              if (dim=3) and (dI=1) then (
                numNodesFac[dI] : (numCells[dim-1]-1)*numNodesFac[dI],
                tmpLoc[dim-1]   : 1,
                numNodesFac[dI] : numNodesFac[dI]+(numCells[dim]-1)*assoc(tmpLoc,locToNumStoredNodes),
                tmpLoc[dim-2]   : 1,
                numNodesFac[dI] : numNodesFac[dI]+assoc(tmpLoc,locToNumStoredNodes)
              )
            ),
            return(numNodesFac)
          ),
      
          /* Compute the memory offset (nodeIdx-1) of the nodes in this cell (not just the nodes it owns).
             Ultimate location of this node is sum_{d=1}^dim (cellIdx[d]*cellMemOffFac[d]) + nodeIdx-1 */
          upbDirs    : sublist_indices(stencilLoc[sI],lambda([x],x=1)),
          nodeMemOff : makelist(0,i,1,numNodes),
          for nI : 1 thru numNodes do (
            cellIdx    : makelist(idx[d],d,1,dim),
            nodeCoords : copylist(nodes[nI]),
            cellLoc      : copylist(stencilLoc[sI]),
            /* Need to consider 3 cases:
                 A: Node is not owned by this cell and is on a periodic boundary.
                 B: Node is not owned by this cell and is not on a periodic boundary.
                 C: Node is owned by this cell (i.e. it's in storedNodesBC).
               For the cases in which the node is not owned by this cell and is not on a periodic boundary
               we must check if the cell that owns it is a skin cell, in which the node index may change.
               */

            getAndWriteNodeMemOff(currNode,currCellIdx,currLoc) := block(
              [nodeUpDirs,isOnPeriodicBoundary,d,currStoredNodesBC,
               cellMemOffFac,nodeIdx,nodeMemOff,errcode],

              nodeUpDirs : sublist_indices(currNode,lambda([x],x=1)), /* Node coordinates that =1. */

              isOnPeriodicBoundary : false,
              for d : 1 thru length(nodeUpDirs) do (
                if isInList(nodeUpDirs[d],upbDirs) and currBC[nodeUpDirs[d]]=0 then ( isOnPeriodicBoundary : true )
              ),

              currStoredNodesBC : getStoredNodesWithBC(nodes,currLoc,currBC),

              if isOnPeriodicBoundary then (
                /* Case A: Node is not owned by this cell and is on a periodic boundary. */
                for d : 1 thru length(nodeUpDirs) do (
                  if isInList(nodeUpDirs[d],upbDirs) and currBC[nodeUpDirs[d]]=0 then (
                    currNode[nodeUpDirs[d]]    : -1,
                    currCellIdx[nodeUpDirs[d]] :  0,
                    currLoc[nodeUpDirs[d]]     : -1
                  )
                ),
                errcode : getAndWriteNodeMemOff(currNode,currCellIdx,currLoc),
                flush_output(fh),
                return(errcode)

              ) elseif not isInList(currNode,currStoredNodesBC) and not isOnPeriodicBoundary then (
                /* Case B: Node is not owned by this cell and is not on a periodic boundary. */
                for d : 1 thru length(nodeUpDirs) do (
                  if not isInList(nodeUpDirs[d],upbDirs) then (
                    currNode[nodeUpDirs[d]]    : -1,
                    currCellIdx[nodeUpDirs[d]] :  idx[nodeUpDirs[d]]+1
                  )
                ),

                errcode : getAndWriteNodeMemOff(currNode,currCellIdx,currLoc),

                printf(fh, "~%"),
                flush_output(fh),
                return(errcode)

              ) else (

                /* Case C: Node is owned by this cell (i.e. it's in storedNodesBC). */
                currStoredNodesBC : getStoredNodesWithBC(nodes,currLoc,currBC),
                cellMemOffFac : getCellMemOff(currLoc),
                nodeIdx       : sublist_indices(currStoredNodesBC, lambda([x], x=currNode))[1],
                nodeMemOff    : sum(currCellIdx[d]*cellMemOffFac[d],d,1,dim)+nodeIdx-1,
                printf(fh, "    ~a = ~a; ~%", globalIdxs[nI-1], fullratsimp(nodeMemOff)),
                printf(fh, "~%"),
                flush_output(fh),
                return(0)

              ),

              print("*** Error: All cases should've been handled. Exit! ***"),
              print("currNode = ",currNode),
              print("currLoc = ",currLoc),
              print("currCellIdx = ",currCellIdx),
              tmp : [0,0],  print(tmp[3]),
              return(-1)

            ),

            /* 
              Aim for:
                sum(currCellIdx[d]*cellMemOffFac[d],d,1,dim)+newNodeIdx-1,
            */
            errcode : getAndWriteNodeMemOff(nodeCoords,cellIdx,cellLoc)


          ),
      
          printf(fh,"~%"),
      
          printf(fh,"}~%"),
          printf(fh,"~%")
        )
      )
    )
  )
)$
