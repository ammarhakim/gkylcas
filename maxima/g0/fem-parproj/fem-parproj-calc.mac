/* Generate kernels for the various elements of a direct
   solve of the FEM projection in the parallel direction
       w * phi = rho
   where w is a wright, phi is a continuous FEM field we
   wish to find, and rho is the RHS discontinuous DG field. */

load(stringproc)$
load("fem-parproj/fem-parproj-num_nodes")$

/* ...... USER INPUTS........ */

/* Serendipity basis. */
maxPolyOrder_Ser : 3$

/* Tensor product basis. */
maxPolyOrder_Tensor : 2$

/* ...... END OF USER INPUTS........ */

bName        : ["ser","tensor"]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$

dims : [1,3]$

disp(printf(false,"Creating fem_parproj_num_nodes.c"))$
fname : "~/max-out/fem_parproj_num_nodes.c"$
fh    : openw(fname)$
printf(fh, "#include <gkyl_fem_parproj_kernels.h> ~%")$
printf(fh, " ~%")$
    
for bInd : 1 thru length(bName) do (

  for d : 1 thru length(dims) do (

    c : dims[d],
  
    /* Number of nodes in linear problem. */
    funcName : sconcat("fem_parproj_num_nodes_global_", c, "x_", bName[bInd]),
    disp(printf(false,sconcat("Working on fem_parproj_num_nodes_global_", c, "x_", bName[bInd]))),
    generate_fem_parproj_num_nodes(fh, funcName, c, bName[bInd], maxPolyOrder[bInd])

  )
  
)$
  
close(fh)$

