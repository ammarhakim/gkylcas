/*
   Generate kernels computing the RHS of the parallel FEM projection operator,
     \int psi_k*T*rho dV
   where T is a modal-to-nodal operation and rho is the source.
*/

load("modal-basis");
load("out-scripts");
load("nodal_operations/nodal_functions");
load("bvp_utilities/bvp-util");
load("fem/fem-util");
fpprec : 24$

generate_fem_parproj_src_stencil(fh, funcNm, dim, basisFun, pMin, pMax, isweighted) := block(
  [varsC,basis,coordVarS,stencilLoc,bcTypes,bcStrs,bcKey,sI,bcCombos,bcI,currBC,
   stencilStr,polyOrder,bN,numB,vars,nodes,numNodes,massM,mod2nod,massMod2nod,
   rho_c,src,src_c,insertVal,phiBC_m,phiBC_c,dir,dirichletNodesI,k,opStr],

  [varsC,basis] : loadBasis(basisFun, dim, pMin),

  /* Associative list between stencil location (-1,0,1) and variable strings in kernel name. */
  coordVarS : getCoordVarS(varsC),

  /* List of stencil locations. Each entry is a dim-dimensional list
     with -1 meaning it is at a lower boundary, 1 upper boundary, or
     0 away from boundaries in that direction. */
  stencilLoc : getStencilCoords(dim),

  /* Only need stencils that include all the nodes in the perp directions.
     This is effectively upper x,y-boundary stencils, so remove all stencil
     locations not on the upper x,y-boundaries. */
  if dim=2 then (
    stencilLoc : sublist(stencilLoc, lambda([x], x[1]=1))
  ) else if dim=3 then (
    stencilLoc : sublist(stencilLoc, lambda([x], x[1]=1 and x[2]=1))
  ),

  /* Types of boundary conditions for which to generate kernels.
       =0 nondirichlet
       =1 dirichlet
  */
  bcTypes : [0, 1],
  bcStrs  : ["nondirichlet", "dirichlet"],
  bcKey   : makelist([bcTypes[i],bcStrs[i]],i,1,length(bcTypes)),

  for sI : 1 thru length(stencilLoc) do (

    /* Obtain the different BC combinations for this stencil.
       Will generate a separate kernel for each. */
    bcCombos : [[0]],
    if stencilLoc[sI][dim] # 0 then ( bcCombos : makelist([bcTypes[i]],i,1,length(bcTypes)) ),

    /* Loop over BC combinations. Will create a separate kernel for each. */
    for bcI : 1 thru length(bcCombos) do (

      currBC : copylist(bcCombos[bcI]),

      /* String used in kernel name, identifying stencil location and BC. */
      stencilStr : sconcat("_",assoc(stencilLoc[sI][dim],[[-1,"lo"],[0,"in"],[1,"up"]]),
                   assoc(stencilLoc[sI][dim],coordVarS)[dim],"_",assoc(currBC[1],bcKey),string(varsC[dim])),


      for polyOrder : pMin thru pMax do (
    
        printf(fh, "GKYL_CU_DH void ~a_p~a~a(const double *weight, const double *rho, const double *phiBC, long nodeOff, const long *globalIdxs, double *bsrc) ~%{ ~%", funcNm, polyOrder, stencilStr),
        printf(fh, "  // rho: right side source.~%"),
        printf(fh, "  // weight: Weight in the projection operation.~%"),
        printf(fh, "  // phiBC: Dirichlet boundary potential, given as a DG (volume) expansion in the skin cell.~%"),
        printf(fh, "  // nodeOff: node offset (prob idx * global number of nodes).~%"),
        printf(fh, "  // globalIdxs: global linear index of each basis function/node in current cell.~%"),
        printf(fh, "  // bsrc: global right side source vector.~%"),
        printf(fh, "~%"),
    
        bN   : getNodalBasis(basisFun, dim, polyOrder),
        numB : length(bN),
        vars : listofvars(bN),

        nodes    : args(getNodes(basisFun, dim, polyOrder)),
        numNodes : length(nodes),
    
        mod2nod : calcModToNod(basisFun, dim, polyOrder),

        if (isweighted) then (
          wgt_c : makelist(weight[k-1],k,1,numB),
          wgt_c : mod2nod . wgt_c,
          wgt_c : makelist(fullratsimp(wgt_c[i][1]),i,1,numB),
          wgt_e : doExpand(wgt_c, bN),
      
          massM : calcMassWeighted(dim, basisFun, polyOrder, wgt_e)
        ) else (
          massM : calcMassUnweighted(dim, basisFun, polyOrder)
        ),
    
        massMod2nod : massM . mod2nod,
    
        rho_c : makelist(rho[k-1],k,1,numB),
    
        src   : massMod2nod . rho_c,
        src_c : makelist(fullratsimp(src[i][1]),i,1,numB),

        /* For Dirichlet BCs we'll simply set the equation corresponding to the
           k-th node to phi_k = phiBC_k. So we need to replace the source at
           this node by the boundary value. */
        insertVal : makelist(false,k,1,numB),
        if currBC[1] = 1 then (
          /* Evaluate phiBC at the boundary surface nodes. */
          phiBC_m : mod2nod . makelist(phiBC[k-1],k,1,numB),
          phiBC_c : makelist(fullratsimp(phiBC_m[i][1]),i,1,numB),
          dir : dim,
          dirichletNodes  : sublist(nodes,lambda([x],x[dir]=stencilLoc[sI][dir])),
          dirichletNodesI : sublist_indices(nodes,lambda([x],x[dir]=stencilLoc[sI][dir])),
          for k : 1 thru length(dirichletNodesI) do (
            /* Evaluate phiBC at +1/-1 when at the lower/upper boundary.*/
            bcNode : copylist(dirichletNodes[k]),
            bcNode[dir] : bcNode[dir],
            bcNodeI : sublist_indices(nodes,lambda([x],x=bcNode))[1],
            src_c[dirichletNodesI[k]]     : phiBC_c[bcNodeI],
            insertVal[dirichletNodesI[k]] : true
          )
        ),
    
        /* Write out the coefficients of each basis_i*sum_j basis_j*rho_j
           (modified by BCS) to RHS vector via triples object.*/
        for k : 1 thru numB do (
          printf(fh, "  #ifdef __CUDA_ARCH__~%"),
          if insertVal[k] then (
            opStr : "atomicExch",
            printf(fh, "  ~a((unsigned long long int*) &bsrc[nodeOff+globalIdxs[~a]],__double_as_longlong(~a));~%",opStr,k-1,expand(float(src_c[k])))
          ) else (
            opStr : "atomicAdd",
            printf(fh, "  ~a(&bsrc[nodeOff+globalIdxs[~a]],~a);~%",opStr,k-1,expand(float(src_c[k])))
          ),
          printf(fh, "  #else~%"),
          if insertVal[k] then (opStr : "=") else (opStr : "+="),
          printf(fh, "  bsrc[nodeOff+globalIdxs[~a]] ~a ~a;~%",k-1,opStr,expand(float(src_c[k]))),
          printf(fh, "  #endif~%")
        ),
        printf(fh, "~%"),
    
        printf(fh, "}~%"),
        printf(fh, "~%")
    
      )
    )
  )
)$
