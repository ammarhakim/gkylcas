/*
   Generate kernels computing the LHS of the FEM parallel projection operator, i.e.
     \int psi_k * phi dV
   where psi_k is the nodal basis, and phi is expanded in the nodal basis too.
*/

load("modal-basis");
load("out-scripts");
load("nodal_operations/nodal_functions");
load("bvp_utilities/bvp-util");
load("fem/fem-util");
fpprec : 24$

generate_fem_parproj_lhs_stencil(fh, funcNm, dim, basisFun, pMin, pMax) := block(
  [coordVarS,stencilLoc,bcTypes,bcStrs,bcKey,sI,bcCombos,bcI,currBC,stencilStr,
   polyOrder,bN,numB,vars,nodes,numNodes,phi_c,phi_e,lhs_c,insertVal,dir,
   dirichletBoundaryNodes,dirichletBoundaryNodesI,k,vals_k,triplesStr,m,val],

  kill(varsC, varsP, basisC, basisP),

  load(sconcat("basis-precalc/basis", basisFun, dim, "x")),

  /* Associative list between stencil location (-1,0,1) and variable strings in kernel name. */
  coordVarS : getCoordVarS(varsC),

  /* List of stencil locations. Each entry is a dim-dimensional list
     with -1 meaning it is at a lower boundary, 1 upper boundary, or
     0 away from boundaries in that direction. */
  stencilLoc : getStencilCoords(dim),

  /* Only need stencils that include all the nodes in the perp directions.
     This is effectively upper x,y-boundary stencils, so remove all stencil
     locations not on the upper x,y-boundaries. */
  if dim=2 then (
    stencilLoc : sublist(stencilLoc, lambda([x], x[1]=1))
  ) else if dim=3 then (
    stencilLoc : sublist(stencilLoc, lambda([x], x[1]=1 and x[2]=1))
  ),

  /* Types of boundary conditions for which to generate kernels.
       =0 nondirichlet
       =1 dirichlet
  */
  bcTypes : [0, 1],
  bcStrs  : ["nondirichlet", "dirichlet"],
  bcKey   : makelist([bcTypes[i],bcStrs[i]],i,1,length(bcTypes)),

  for sI : 1 thru length(stencilLoc) do (

    /* Obtain the different BC combinations for this stencil.
       Will generate a separate kernel for each. */
    bcCombos : [[0]],
    if stencilLoc[sI][dim] # 0 then ( bcCombos : makelist([bcTypes[i]],i,1,length(bcTypes)) ),

    /* Loop over BC combinations. Will create a separate kernel for each. */
    for bcI : 1 thru length(bcCombos) do (

      currBC : copylist(bcCombos[bcI]),

      /* String used in kernel name, identifying stencil location and BC. */
      stencilStr : sconcat("_",assoc(stencilLoc[sI][dim],[[-1,"lo"],[0,"in"],[1,"up"]]),
                   assoc(stencilLoc[sI][dim],coordVarS)[dim],"_",assoc(currBC[1],bcKey),string(varsC[dim])),

      for polyOrder : 1 thru pMax do (
    
        printf(fh, "void ~a_p~a~a(const double *weight, const long *globalIdxs, struct gkyl_mat_triples *tri) ~%{ ~%", funcNm, polyOrder, stencilStr),
        printf(fh, "  // weight: multiplicative weight (a DG field).~%"),
        printf(fh, "  // globalIdxs: global linear index of each basis function/node in current cell.~%"),
        printf(fh, "  // tri: triples object (i,j,val), i.e. contribute val to i,j element of the global matrix.~%"),
        printf(fh, "~%"),
    
        bN   : getNodalBasis(basisFun, dim, polyOrder),
        numB : length(bN),
        vars : listofvars(bN),
    
        nodes    : args(getNodes(basisFun, dim, polyOrder)),
        numNodes : length(nodes),
    
        phi_c : makelist(phi[k-1],k,1,numB),
        phi_e : doExpand(phi_c,bN),
    
        lhs_c : calcInnerProdList(vars,1,bN,phi_e),

        /* For Dirichlet BCs we'll simply set the equation corresponding to the
           k-th node to phi_k = bcVals[2]. */
        insertVal : makelist(false,k,1,numB),
        if currBC[1] = 1 then (
          dir : dim,
          dirichletBoundaryNodes  : copylist(sublist(nodes,lambda([x],x[dir]=stencilLoc[sI][dir]))),
          dirichletBoundaryNodesI : sublist_indices(nodes,lambda([x],x[dir]=stencilLoc[sI][dir])),
          for k : 1 thru length(dirichletBoundaryNodes) do (
            lhs_c[dirichletBoundaryNodesI[k]] : phi_c[dirichletBoundaryNodesI[k]],
            insertVal[dirichletBoundaryNodesI[k]] : true
          )
        ),
        
        /* Write out the coefficients of each basis_i*basis_j pair to matrix
           via triples object.*/
        for k : 1 thru numB do (
          vals_k : coefmatrix([lhs_c[k]],phi_c),
          if insertVal[k] then (triplesStr : "insert") else (triplesStr : "accum"),
          for m : 1 thru numB do (
            val : vals_k[1][m],
            printf(fh, "  gkyl_mat_triples_~a(tri, globalIdxs[~a], globalIdxs[~a], ~a);~%",triplesStr,k-1,m-1,expand(float(fullratsimp(val))))
          )
        ),
        printf(fh, "~%"),
    
        printf(fh, "}~%"),
        printf(fh, "~%")
    
      )
    )
  )
)$

generate_fem_parproj_weighted_lhs_stencil(fh, funcNm, dim, basisFun, pMin, pMax) := block(
  [coordVarS,stencilLoc,bcTypes,bcStrs,bcKey,sI,bcCombos,bcI,currBC,stencilStr,polyOrder,
   bN,numB,vars,nodes,numNodes,phi_c,phi_e,mod2nod,wgt_cm,wgt_cn,wgt_c,wgt_e,lhs_c,insertVal,
   dir,dirichletBoundaryNodes,dirichletBoundaryNodesI,k,vals_k,triplesStr,m,val],

  kill(varsC, varsP, basisC, basisP),

  load(sconcat("basis-precalc/basis", basisFun, dim, "x")),

  /* Associative list between stencil location (-1,0,1) and variable strings in kernel name. */
  coordVarS : getCoordVarS(varsC),

  /* List of stencil locations. Each entry is a dim-dimensional list
     with -1 meaning it is at a lower boundary, 1 upper boundary, or
     0 away from boundaries in that direction. */
  stencilLoc : getStencilCoords(dim),

  /* Only need stencils that include all the nodes in the perp directions.
     This is effectively upper x,y-boundary stencils, so remove all stencil
     locations not on the upper x,y-boundaries. */
  if dim=2 then (
    stencilLoc : sublist(stencilLoc, lambda([x], x[1]=1))
  ) else if dim=3 then (
    stencilLoc : sublist(stencilLoc, lambda([x], x[1]=1 and x[2]=1))
  ),

  /* Types of boundary conditions for which to generate kernels.
       =0 nondirichlet
       =1 dirichlet
  */
  bcTypes : [0, 1],
  bcStrs  : ["nondirichlet", "dirichlet"],
  bcKey   : makelist([bcTypes[i],bcStrs[i]],i,1,length(bcTypes)),

  for sI : 1 thru length(stencilLoc) do (

    /* Obtain the different BC combinations for this stencil.
       Will generate a separate kernel for each. */
    bcCombos : [[0]],
    if stencilLoc[sI][dim] # 0 then ( bcCombos : makelist([bcTypes[i]],i,1,length(bcTypes)) ),

    /* Loop over BC combinations. Will create a separate kernel for each. */
    for bcI : 1 thru length(bcCombos) do (

      currBC : copylist(bcCombos[bcI]),

      /* String used in kernel name, identifying stencil location and BC. */
      stencilStr : sconcat("_",assoc(stencilLoc[sI][dim],[[-1,"lo"],[0,"in"],[1,"up"]]),
                   assoc(stencilLoc[sI][dim],coordVarS)[dim],"_",assoc(currBC[1],bcKey),string(varsC[dim])),

      for polyOrder : 1 thru pMax do (

        printf(fh, "void ~a_p~a~a(const double *weight, const long *globalIdxs, struct gkyl_mat_triples *tri) ~%{ ~%", funcNm, polyOrder, stencilStr),
        printf(fh, "  // weight: multiplicative weight (a DG field).~%"),
        printf(fh, "  // globalIdxs: global linear index of each basis function/node in current cell.~%"),
        printf(fh, "  // tri: triples object (i,j,val), i.e. contribute val to i,j element of the global matrix.~%"),
        printf(fh, "~%"),

        bN   : getNodalBasis(basisFun, dim, polyOrder),
        numB : length(bN),
        vars : listofvars(bN),

        nodes    : args(getNodes(basisFun, dim, polyOrder)),
        numNodes : length(nodes),

        phi_c : makelist(phi[k-1],k,1,numB),
        phi_e : doExpand(phi_c,bN),

        /* Convert the weight's modal coefficients to nodal coefficients
           and expand in nodal basis. */
        mod2nod : calcModToNod(basisFun, dim, polyOrder),
        wgt_cm : makelist(weight[k-1],k,1,numB),
        wgt_cn : mod2nod . wgt_cm,
        wgt_c  : makelist(wgt_cn[k][1],k,1,numB),
        wgt_e  : doExpand(wgt_c,bN),

        lhs_c : calcInnerProdList(vars,wgt_e,bN,phi_e),

        /* For Dirichlet BCs we'll simply set the equation corresponding to the
           k-th node to phi_k = bcVals[2]. */
        insertVal : makelist(false,k,1,numB),
        if currBC[1] = 1 then (
          dir : dim,
          dirichletBoundaryNodes  : copylist(sublist(nodes,lambda([x],x[dir]=stencilLoc[sI][dir]))),
          dirichletBoundaryNodesI : sublist_indices(nodes,lambda([x],x[dir]=stencilLoc[sI][dir])),
          for k : 1 thru length(dirichletBoundaryNodes) do (
            lhs_c[dirichletBoundaryNodesI[k]] : phi_c[dirichletBoundaryNodesI[k]],
            insertVal[dirichletBoundaryNodesI[k]] : true
          )
        ),
        
        /* Write out the coefficients of each basis_i*basis_j pair to matrix
           via triples object.*/
        for k : 1 thru numB do (
          vals_k : coefmatrix([lhs_c[k]],phi_c),
          if insertVal[k] then (triplesStr : "insert") else (triplesStr : "accum"),
          for m : 1 thru numB do (
            val : vals_k[1][m],
            printf(fh, "  gkyl_mat_triples_~a(tri, globalIdxs[~a], globalIdxs[~a], ~a);~%",triplesStr,k-1,m-1,expand(float(fullratsimp(val))))
          )
        ),
        printf(fh, "~%"),

        printf(fh, "}~%"),
        printf(fh, "~%")

      )
    )
  )
)$
