/* Functions called to generate the kernels for the volume terms due
   to the streaming (v.grad(f)) and -grad(phi) . del_v(f) terms
   in the Vlasov-Poisson equation, with the option to add a contribution
   due to external fields via curl(A) where A is the vector potential.
   NOTE: kernels expect phi and A to be scaled by appropriate factors
   i.e., q/m for plasmas, and G*m for self-gravitation systems. */

load("modal-basis")$
load("utilities")$
load("out-scripts")$
load("utilities")$
load(stringproc)$
fpprec : 24$

calcVlasovPoissonVolUpdater(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,varsV,pOrderV,numC,numP,cflPt,cid,vid,dir,dvdx,wdx,dx1Vec,dv1Vec,
   f_e,phi_e,incr_cdim,cdir,alpha_cdim_c,expr_out,i,alpha_cdim_NoZero,alpha_cdim_NoZero_e,
   incr_vdim,vdir,varsCall,acc_e,alpha_vdim_c,alpha_vdim_NoZero,alpha_vdim_NoZero_e,amid],

  /* Load basis of dimensionality requested. */
  [varsC,bC,varsP,bP] : loadPhaseBasis(basisFun, cdim, vdim, polyOrder),
  varsV : makelist(varsP[cdim+d],d,1,vdim),

  /* Identify polyOrder in velocity space as p=2 for p=1 since we force p=1 to
     mean hybrid basis. */
  pOrderV : polyOrder,
  if polyOrder=1 then ( pOrderV : 2 ),

  numC : length(bC),
  numP : length(bP),

  /* Point at which to evaluate alpha for use in computing CFL. */
  cflPt : makelist(varsP[d]=0, d, 1, cdim+vdim),

  printf(fh, "GKYL_CU_DH double ~a_p~a(const double *w, const double *dxv, const double *pots, const double *EBext, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, polyOrder),
  printf(fh, "  // w[NDIM]:   Cell-center coordinates.~%"),
  printf(fh, "  // dxv[NDIM]: Cell spacing.~%"),
  printf(fh, "  // pots:      potentials phi_tot=phi+phi_ext and A_ext (scaled by q/m).~%"),
  printf(fh, "  // EBext:     external E and B fields (scaled by q/m).~%"),
  printf(fh, "  // f:         Input distribution function.~%"),
  printf(fh, "  // out:       Incremented output.~%~%"),

  cid : makelist(i,i,0,cdim-1),
  vid : makelist(i,i,cdim,cdim+vdim-1),

  /* common expressions in streaming (v dot grad(f)) term and grad(phi) */
  for dir : 1 thru vdim do (
    printf(fh, "  const double dv1~a = 2/dxv[~a]; ~%", dir-1, vid[dir]),
    printf(fh, "  const double dv~a = dxv[~a], wv~a = w[~a]; ~%", dir, vid[dir], dir, vid[dir])
  ),
  for dir : 1 thru cdim do (
    printf(fh, "  double dv~adx~a = dxv[~a]/dxv[~a]; ~%", dir-1, dir-1, vid[dir], cid[dir]),
    printf(fh, "  double w~adx~a = w[~a]/dxv[~a]; ~%", dir-1, dir-1, vid[dir], cid[dir]),
    printf(fh, "  const double dx1~a = 2/dxv[~a]; ~%", dir-1, cid[dir])
  ),
  printf(fh, "~%"),
  dvdx : [dv0dx0, dv1dx1, dv2dx2],
  wdx  : [w0dx0, w1dx1, w2dx2],
  dx1Vec : [dx10, dx11, dx12],
  dv1Vec : [dv10, dv11, dv12],

  /* access potential data */
  printf(fh, "  const double *phi = &pots[~a]; ~%~%", 0),

  /* cflFreq_mid is our approximation of sum_i max(abs(alpha_i))/(dx_i/(2p+1)) */
  printf(fh, "  double cflFreq_mid = 0.0; ~%~%"),

  /* alpha_cdim = v, alpha_vdim = -fac*grad(phi) */
  /* fac = q/m for plasma, fac = G*m for self gravitating systems */
  /* In case of external fields, also add q/m*curl(A) */
  printf(fh, "  double alpha_cdim[~a] = {0.0}; ~%", cdim*numP),
  printf(fh, "  double alpha_vdim[~a] = {0.0}; ~%~%", vdim*numP),

  /* Expand distribution function f in phase basis, and potential in conf basis. */
  f_e   : doExpand1(f, bP),
  phi_e : doExpand1(phi, bC),

  incr_cdim : 0,
  /* alpha_cdim = v dot grad(f) */
  for cdir : 1 thru cdim do (
    alpha_cdim_c : calcInnerProdList(varsP, 1, bP, 2*wdx[cdir]+dvdx[cdir]*varsV[cdir]),

    /* Write out the components of alpha_cdim's phase space expansion. */
    expr_out : gcfac(float(expand(radcan(alpha_cdim_c)))),
    for i : 1 thru numP do (
      if expr_out[i] # 0.0 then printf(fh, "  ~a = ~a; ~%", alpha_cdim[numP*(cdir-1)+i-1], expr_out[i])
    ),
    printf(fh, "~%"),

    printf(fh, "  cflFreq_mid += ~a*(fabs(~a)+~a); ~%~%", float(2*polyOrder+1), wdx[cdir], 0.5*dvdx[cdir]),

    /* Zero out components of alpha which are empty. */
    alpha_cdim_NoZero   : makelistNoZerosOff1(alpha_cdim_c, alpha_cdim, a0),
    alpha_cdim_NoZero_e : doExpand(alpha_cdim_NoZero, bP),

    /* Volume increment from configuration space. */
    incr_cdim : incr_cdim+subst(a0=numP*(cdir-1),calcInnerProdList(varsP, 1, diff(bP,varsP[cdir]), alpha_cdim_NoZero_e*f_e))
  ),

  incr_vdim : 0,
  for vdir : 1 thru vdim do (

    /* Calculate the acceleration. */
    varsCall : [x, y, z],
    if (vdir = 1) then (
      acc_e : -dx1Vec[vdir]*diff(phi_e,varsCall[1])
    ) elseif (vdir = 2) then (
      acc_e : -dx1Vec[vdir]*diff(phi_e,varsCall[2])
    ) else (
      acc_e : -dx1Vec[vdir]*diff(phi_e,varsCall[3])
    ),

    alpha_vdim_c : calcInnerProdList(varsP, 1, bP, dv1Vec[vdir]*acc_e),

    /* Write out the components of alpha_vdim's phase space expansion. */
    expr_out : gcfac(float(expand(radcan(alpha_vdim_c)))),
    for i : 1 thru numP do (
      if expr_out[i] # 0.0 then printf(fh, "  ~a = ~a; ~%", alpha_vdim[numP*(vdir-1)+i-1], expr_out[i])
    ),
    printf(fh, "~%"),

    /* Zero out components of alpha which are empty. */
    alpha_vdim_NoZero   : makelistNoZerosOff1(alpha_vdim_c, alpha_vdim, a0),
    alpha_vdim_NoZero_e : doExpand(alpha_vdim_NoZero, bP),

    /* Evaluate alpha_vdim at cflPt to approximate
       max(abs(alpha_vdim))/(dv_i/(2p+1)). */
    amid : gcfac(float(expand(subst(cflPt,0.5*subst(a0=numP*(vdir-1),alpha_vdim_NoZero_e))))),
    if amid # 0.0 then printf(fh, "  cflFreq_mid += ~a*fabs(~a); ~%~%", float(2*pOrderV+1), amid),

    /* Volume increment from configuration space. */
    incr_vdim : incr_vdim+subst(a0=numP*(vdir-1),calcInnerProdList(varsP, 1, diff(bP,varsP[cdim+vdir]), alpha_vdim_NoZero_e*f_e))
  ),
  
  /* Write out first attempts to simplify the radicals with radcan,
     e.g. force sqrt(3)*sqrt(5) = sqrt(15). */
  /* outscripts loads scifac and uses the aggressive factorization routine "gcfac". */
  writeCExprsCollect1c(radcan(incr_cdim+incr_vdim)),
  printf(fh, "~%"),

  printf(fh, "  return cflFreq_mid; ~%"),
  printf(fh, "} ~%"),
  printf(fh, "~%")
)$

calcVlasovPoissonExtFieldsVolUpdater(fh, funcNm, cdim, vdim, basisFun, polyOrder, useExtPotentials) := block(
  [varsC,bC,varsP,bP,varsV,pOrderV,numC,numP,cflPt,cid,vid,dir,dvdx,wdx,dx1Vec,dv1Vec,
   d,f_e,phi_e,Ex_e,Ey_e,Ez_e,Afld,Ax_e,Ay_e,Az_e,varsCall,Bx_e,By_e,Bz_e,
   incr_cdim,cdir,alpha_cdim_c,expr_out,i,alpha_cdim_NoZero,alpha_cdim_NoZero_e,
   incr_vdim,vdir,acc_e,vTransSubs,alpha_vdim_c,alpha_vdim_NoZero,alpha_vdim_NoZero_e,amid],

  /* Load basis of dimensionality requested. */
  [varsC,bC,varsP,bP] : loadPhaseBasis(basisFun, cdim, vdim, polyOrder),
  varsV : makelist(varsP[cdim+d],d,1,vdim),

  /* Identify polyOrder in velocity space as p=2 for p=1 since we force p=1 to
     mean hybrid basis. */
  pOrderV : polyOrder,
  if polyOrder=1 then ( pOrderV : 2 ),

  numC : length(bC),
  numP : length(bP),

  /* Point at which to evaluate alpha for use in computing CFL. */
  cflPt : makelist(varsP[d]=0, d, 1, cdim+vdim),

  printf(fh, "GKYL_CU_DH double ~a_p~a(const double *w, const double *dxv, const double *pots, const double *EBext, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, polyOrder),
  printf(fh, "  // w[NDIM]:   Cell-center coordinates.~%"),
  printf(fh, "  // dxv[NDIM]: Cell spacing.~%"),
  printf(fh, "  // pots:      potentials phi_tot=phi+phi_ext and A_ext (scaled by q/m).~%"),
  printf(fh, "  // EBext:     external E and B fields (scaled by q/m).~%"),
  printf(fh, "  // f:         Input distribution function.~%"),
  printf(fh, "  // out:       Incremented output.~%~%"),

  cid : makelist(i,i,0,cdim-1),
  vid : makelist(i,i,cdim,cdim+vdim-1),

  /* common expressions in streaming (v dot grad(f)) term and grad(phi) */
  for dir : 1 thru cdim do (
    printf(fh, "  double dv~adx~a = dxv[~a]/dxv[~a]; ~%", dir-1, dir-1, vid[dir], cid[dir]),
    printf(fh, "  double w~adx~a = w[~a]/dxv[~a]; ~%", dir-1, dir-1, vid[dir], cid[dir]),
    printf(fh, "  const double dx1~a = 2/dxv[~a]; ~%", dir-1, cid[dir])
  ),
  for dir : 1 thru vdim do (
    printf(fh, "  const double dv1~a = 2/dxv[~a]; ~%", dir-1, vid[dir]),
    printf(fh, "  const double dv~a = dxv[~a], wv~a = w[~a]; ~%", dir, vid[dir], dir, vid[dir])
  ),
  printf(fh, "~%"),
  dvdx : [dv0dx0, dv1dx1, dv2dx2],
  wdx  : [w0dx0, w1dx1, w2dx2],
  dx1Vec : [dx10, dx11, dx12],
  dv1Vec : [dv10, dv11, dv12],

  /* access potential data */
  printf(fh, "  const double *phi = &pots[~a]; ~%~%", 0),

  /* cflFreq_mid is our approximation of sum_i max(abs(alpha_i))/(dx_i/(2p+1)) */
  printf(fh, "  double cflFreq_mid = 0.0; ~%~%"),

  /* alpha_cdim = v, alpha_vdim = -fac*grad(phi) */
  /* fac = q/m for plasma, fac = G*m for self gravitating systems */
  /* In case of external fields, also add q/m*curl(A) */
  printf(fh, "  double alpha_cdim[~a] = {0.0}; ~%", cdim*numP),
  printf(fh, "  double alpha_vdim[~a] = {0.0}; ~%~%", vdim*numP),

  /* Expand distribution function f in phase basis. */
  f_e : doExpand1(f, bP),

  incr_cdim : 0,
  /* alpha_cdim = v dot grad(f) */
  for cdir : 1 thru cdim do (
    alpha_cdim_c : calcInnerProdList(varsP, 1, bP, 2*wdx[cdir]+dvdx[cdir]*varsV[cdir]),

    /* Write out the components of alpha_cdim's phase space expansion. */
    expr_out : gcfac(float(expand(radcan(alpha_cdim_c)))),
    for i : 1 thru numP do (
      if expr_out[i] # 0.0 then printf(fh, "  ~a = ~a; ~%", alpha_cdim[numP*(cdir-1)+i-1], expr_out[i])
    ),

    printf(fh, "  cflFreq_mid += ~a*(fabs(~a)+~a); ~%~%", float(2*polyOrder+1), wdx[cdir], 0.5*dvdx[cdir]),

    /* Zero out components of alpha which are empty. */
    alpha_cdim_NoZero   : makelistNoZerosOff1(alpha_cdim_c, alpha_cdim, a0),
    alpha_cdim_NoZero_e : doExpand(alpha_cdim_NoZero, bP),

    /* Volume increment from configuration space. */
    incr_cdim : incr_cdim+subst(a0=numP*(cdir-1),calcInnerProdList(varsP, 1, diff(bP,varsP[cdir]), alpha_cdim_NoZero_e*f_e))
  ),

  /* Expand fields in conf basis. */
  phi_e : doExpand1(phi, bC),

  varsCall : [x, y, z],
  if (useExtPotentials) then (
    Ex_e : 0,  Ey_e : 0,  Ez_e : 0,

    if vdim > 1 then (
      /* If vdim = 1, the magnetic field has no effect. */
      for d : 1 thru vdim do (
        printf(fh, "  const double *A~a = &pots[~a]; ~%", varsCall[d], numC*d)
      ),
      printf(fh, "~%")
    ),

    Afld : [Ax, Ay, Az],
    Ax_e : doExpand1(Afld[1], bC),
    Ay_e : doExpand1(Afld[2], bC),
    Az_e : doExpand1(Afld[3], bC),

    /* B = curl(A); NOTE: already contains q/m factor */
    Bx_e : dx1Vec[2]*diff(Az_e, varsCall[2]) - dx1Vec[3]*diff(Ay_e, varsCall[3]),
    By_e : dx1Vec[3]*diff(Ax_e, varsCall[3]) - dx1Vec[1]*diff(Az_e, varsCall[1]),
    Bz_e : dx1Vec[1]*diff(Ay_e, varsCall[1]) - dx1Vec[2]*diff(Ax_e, varsCall[2])
  ) else (
    for d : 1 thru vdim do (
      printf(fh, "  const double *E~a = &EBext[~a]; ~%", varsCall[d], (d-1)*numC)
    ),
    if vdim > 1 then (
      /* If vdim = 1, the magnetic field has no effect. */
      for d : 1 thru 3 do (
        printf(fh, "  const double *B~a = &EBext[~a]; ~%", varsCall[d], (d+3-1)*numC)
      ),
      printf(fh, "~%")
    ),

    Efld : [Ex, Ey, Ez],
    Ex_e : doExpand1(Efld[1], bC),
    Ey_e : doExpand1(Efld[2], bC),
    Ez_e : doExpand1(Efld[3], bC),

    Bfld : [Bx, By, Bz],
    Bx_e : doExpand1(Bfld[1], bC),
    By_e : doExpand1(Bfld[2], bC),
    Bz_e : doExpand1(Bfld[3], bC)
  ),

  incr_vdim : 0,
  for vdir : 1 thru vdim do (

    /* Calculate the acceleration. */
    if (vdir = 1) then (
      acc_e : -dx1Vec[vdir]*diff(phi_e,varsCall[1]) + Ex_e + vvy*Bz_e - vvz*By_e
    ) elseif (vdir = 2) then (
      acc_e : -dx1Vec[vdir]*diff(phi_e,varsCall[2]) + Ey_e + vvz*Bx_e - vvx*Bz_e
    ) else (
      acc_e : -dx1Vec[vdir]*diff(phi_e,varsCall[3]) + Ez_e + vvx*By_e - vvy*Bx_e
    ),
    vzero(vdim)  := if vdim = 1 then [vvy=0, vvz=0] elseif vdim = 2 then [vvz=0] else [],
    vTransSubs   : [vvx=vx*dv1/2+wv1, vvy=vy*dv2/2+wv2, vvz=vz*dv3/2+wv3],
    acc_e        : subst(append(vzero(vdim),vTransSubs), acc_e),

    alpha_vdim_c : calcInnerProdList(varsP, 1, bP, dv1Vec[vdir]*acc_e),

    /* Write out the components of alpha_vdim's phase space expansion. */
    expr_out : gcfac(float(expand(radcan(alpha_vdim_c)))),
    for i : 1 thru numP do (
      if expr_out[i] # 0.0 then printf(fh, "  ~a = ~a; ~%", alpha_vdim[numP*(vdir-1)+i-1], expr_out[i])
    ),

    /* Zero out components of alpha which are empty. */
    alpha_vdim_NoZero   : makelistNoZerosOff1(alpha_vdim_c, alpha_vdim, a0),
    alpha_vdim_NoZero_e : doExpand(alpha_vdim_NoZero, bP),

    /* Evaluate alpha_vdim at cflPt to approximate
       max(abs(alpha_vdim))/(dv_i/(2p+1)). */
    amid : gcfac(float(expand(subst(cflPt,0.5*subst(a0=numP*(vdir-1),alpha_vdim_NoZero_e))))),
    if amid # 0.0 then printf(fh, "  cflFreq_mid += ~a*fabs(~a); ~%~%", float(2*pOrderV+1), amid),

    /* Volume increment from configuration space. */
    incr_vdim : incr_vdim+subst(a0=numP*(vdir-1),calcInnerProdList(varsP, 1, diff(bP,varsP[cdim+vdir]), alpha_vdim_NoZero_e*f_e))
  ),
  
  /* Write out first attempts to simplify the radicals with radcan,
     e.g. force sqrt(3)*sqrt(5) = sqrt(15). */
  /* outscripts loads scifac and uses the aggressive factorization routine "gcfac". */
  writeCExprsCollect1c(radcan(incr_cdim+incr_vdim)),
  printf(fh, "~%"),

  printf(fh, "  return cflFreq_mid; ~%"),
  printf(fh, "} ~%"),
  printf(fh, "~%")
)$

calcVlasovPoissonExtPhiAVolUpdater(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block([],
  calcVlasovPoissonExtFieldsVolUpdater(fh, funcNm, cdim, vdim, basisFun, polyOrder, true)
)$

calcVlasovPoissonExtEBVolUpdater(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block([],
  calcVlasovPoissonExtFieldsVolUpdater(fh, funcNm, cdim, vdim, basisFun, polyOrder, false)
)$
