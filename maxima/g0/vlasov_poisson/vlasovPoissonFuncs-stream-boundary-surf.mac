/* This script generates the kernels for the surface term of the E + v x B 
   advection in velocity space for the Vlasov equation (full EM) */

load("modal-basis");
load("out-scripts");
load(stringproc)$
load("scifac")$
load("nodal_operations/nodal_functions")$
load("utilities")$
fpprec : 24$

calcVlasovPoissonStreamBoundaryUpdateInDir(dir, fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,varsV,numBasisP,cid,vid,cv,vv,surfVars,bSurf,fSkin_e,fEdge_e,dx1Vec,incr],

  [varsC,bC,varsP,bP] : loadPhaseBasis(basisFun, cdim, vdim, polyOrder),
  varsV : makelist(varsP[cdim+i],i,1,vdim),

  numBasisP : length(bP),

  print("Working on ", funcNm),
  printf(fh, "GKYL_CU_DH double ~a(const double *w, const double *dxv, 
    const int edge, const double *fedge, const double *fskin, double* GKYL_RESTRICT out) ~%{ ~%", funcNm),
  printf(fh, "  // w[NDIM]: cell-center.~%"),
  printf(fh, "  // dxv[NDIM]: cell length.~%"),
  printf(fh, "  // edge: determines if the update is for the left edge (-1) or right edge (+1).~%"),
  printf(fh, "  // fskin,fedge: distribution function in skin cell/last edge cell.~%"),
  printf(fh, "  // out: output increment in center cell.~%~%"),

  cid : makelist(i,i,0,cdim-1),
  vid : makelist(i,i,cdim,cdim+vdim-1),

  /* Surface contribution is defined as integral(phi^- Ghat) over the surface. */

  /* cv = variable in direction of surface update. */
  cv : varsP[dir],
  vv : varsV[dir],

  /* Surface variables to integrate over. */
  surfVars : delete(cv,varsP),

  /* Generate surface basis. this produces the ndim-1 orthogonal basis with no vv dependence. */
  if polyOrder=1 then (  /* Force p=1 to use hybrid basis. */
    bSurf : basisFromVars("hyb",surfVars,polyOrder)
  ) else (
    bSurf : basisFromVars(basisFun,surfVars,polyOrder)
  ),

  /* Create expansions of f_skin, f_edge on volume basis. */
  fSkin_e : doExpand1(fskin, bP),
  fEdge_e : doExpand1(fedge, bP),

  dx1Vec  : [dx10, dx11, dx12],
  printf(fh, "  const double dx1~a = 2/dxv[~a]; ~%", dir-1, cid[dir]),
  printf(fh, "  const double dv = dxv[~a], wv = w[~a]; ~%", vid[dir], vid[dir]),
  printf(fh, "  double Ghat[~a]; ~%~%", length(bSurf)),

  /* Function that computes the surface increment (without a 2/dx factor)
     with upwinding based on the grid velocity. */
  evSurfIncr(fL_e, fR_e, evAt) := block([Ghat_c,GhatNoZero_c,Ghat_e,incrOut],
    printf(fh, "  if (~a>0) { ~%~%",wv),

    /* Evaluate surface projection of Ghat = v f_left. */
    Ghat_c : calcInnerProdList(surfVars, wv+(dv/2)*vv, bSurf, subst(cv=1, fL_e)),
    writeCExprsCollect1lhsc(Ghat, radcan(Ghat_c)),
    printf(fh, "~%"),
    flush_output(fh),

    /* Zero out components of Ghat which are empty. */
    GhatNoZero_c : makelistNoZeros1(Ghat_c, Ghat),
    Ghat_e       : doExpand(GhatNoZero_c, bSurf),

    printf(fh, "  } else { ~%~%"),

    /* Evaluate surface projection of Ghat = v f_right. */
    Ghat_c : calcInnerProdList(surfVars, wv+(dv/2)*vv, bSurf, subst(cv=-1, fR_e)),

    /* Clever factorization is possible for polyOrder = 1, but for higher
       polynomial orders, factorization is *too* clever and can lead to
       deeply nested parentheses, not ideal for compiler optimizations */
    if (polyOrder = 1) then (
      writeCExprsNoExpand1(Ghat, Ghat_c)
    ) else (
      writeCExprs1(Ghat, Ghat_c)
    ),
    printf(fh, "~%"),
    flush_output(fh),

    /* Zero out components of Ghat which are empty. */
    GhatNoZero_c : makelistNoZeros1(Ghat_c, Ghat),
    Ghat_e       : doExpand(GhatNoZero_c, bSurf),

    printf(fh, "  } ~%~%"),

    /* Compute surface contribution integral(phi^- Ghat) on the left/right. */
    incrOut : calcInnerProdList(surfVars, -evAt, subst(cv=evAt, bP), Ghat_e),
    return(incrOut)
  ),

  /* NOTE: WE ARE USING L TO DENOTE THE LEFT EDGE UPDATE AND R TO DENOTE RIGHT EDGE UPDATE OF GLOBAL DOMAIN */
  /* if edge == -1, we are doing the left edge boundary and the skin cell needs to be evauluated at +1 */
  printf(fh, "  if (edge == -1) { ~%~%"),

  incr : evSurfIncr(fSkin_e, fEdge_e, 1.0),
  writeCIncrExprsCollect1lhsc(out, dx1Vec[dir]*incr),

  /* otherwise edge == +1, we are doing the right edge boundary and the skin cell needs to be evauluated at -1 */
  printf(fh, "~%  } else { ~%~%"),

  incr : evSurfIncr(fEdge_e, fSkin_e, -1.0),
  writeCIncrExprsCollect1lhsc(out, dx1Vec[dir]*incr),

  printf(fh, "~%  } ~%"),

  printf(fh, "  return 0.;~%~%"),  /* Return CFL frequency in volume kernel. */

  printf(fh, "} ~%")
)$
