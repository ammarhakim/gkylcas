/* This script generates the kernels for the surface term of the E + v x B 
   advection in velocity space for the Vlasov equation (full EM) */

load("modal-basis")$
load("utilities")$
load("out-scripts")$
load(stringproc)$
load("scifac")$
load("nodal_operations/nodal_functions")$
fpprec : 24$

calcVlasovPoissonStreamUpdateInDir(dir, fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,varsV,numBasisP,cid,vid,cv,vv,surfVars,bSurf,fl_e,fc_e,fr_e,dx1Vec,
   Ghat_r_c,GhatNoZero_r,Ghat_r_e,Ghat_l_c,GhatNoZero_l,Ghat_l_e,incr_r,incr_l],

  [varsC,bC,varsP,bP] : loadPhaseBasis(basisFun, cdim, vdim, polyOrder),
  varsV : makelist(varsP[cdim+i],i,1,vdim),

  numBasisP : length(bP),

  printf(fh, "GKYL_CU_DH double ~a(const double *w, const double *dxv, 
    const double *fl, const double *fc, const double *fr, double* GKYL_RESTRICT out) ~%{ ~%", funcNm),
  printf(fh, "  // w[NDIM]: cell-center.~%"),
  printf(fh, "  // dxv[NDIM]: cell length.~%"),
  printf(fh, "  // fl,fc,fr: distribution function in left, center and right cells.~%"),
  printf(fh, "  // out: output increment in center cell.~%~%"),

  cid : makelist(i,i,0,cdim-1),
  vid : makelist(i,i,cdim,cdim+vdim-1),

  /* Surface contribution is defined as integral(phi^- Ghat) over the surface. */

  /* cv = variable in direction of surface update. */
  cv : varsP[dir],
  vv : varsV[dir],

  /* Surface variables to integrate over. */
  surfVars : delete(cv,varsP),

  /* Generate surface basis. this produces the ndim-1 orthogonal basis with no vv dependence. */
  if polyOrder=1 then (  /* Force p=1 to use hybrid basis. */
    bSurf : basisFromVars("hyb",surfVars,polyOrder)
  ) else (
    bSurf : basisFromVars(basisFun,surfVars,polyOrder)
  ),

  /* Create expansions of f_left, f_center, and f_right on volume basis. */
  fl_e : doExpand1(fl, bP),
  fc_e : doExpand1(fc, bP),
  fr_e : doExpand1(fr, bP),

  dx1Vec : [dx10, dx11, dx12],
  printf(fh, "  const double dx1~a = 2/dxv[~a]; ~%", dir-1, cid[dir]),
  printf(fh, "  const double dv = dxv[~a], wv = w[~a]; ~%", vid[dir], vid[dir]),
  printf(fh, "  double Ghat_r[~a]; ~%", length(bSurf)),
  printf(fh, "  double Ghat_l[~a]; ~%~%", length(bSurf)),
  
  printf(fh, "  if (~a>0) { ~%~%",wv),

  /* Because v > 0, need left edge value */
  /* Evaluate surface projection of Ghat_r = v f_c. */
  Ghat_r_c : calcInnerProdList(surfVars, wv+(dv/2)*vv, bSurf, subst(cv=1, fc_e)),
  writeCExprsCollect1lhsc(Ghat_r, radcan(Ghat_r_c)),
  printf(fh, "~%"),
  flush_output(fh),

  /* Zero out components of Ghat which are empty. */
  GhatNoZero_r : makelistNoZeros1(Ghat_r_c, Ghat_r),
  Ghat_r_e     : doExpand(GhatNoZero_r, bSurf),

  /* Evaluate surface projection of Ghat_l = v f_l. */
  Ghat_l_c : calcInnerProdList(surfVars, wv+(dv/2)*vv, bSurf, subst(cv=1, fl_e)),
  writeCExprsCollect1lhsc(Ghat_l, radcan(Ghat_l_c)),
  printf(fh, "~%"),
  flush_output(fh),

  /* Zero out components of Ghat which are empty. */
  GhatNoZero_l : makelistNoZeros1(Ghat_l_c, Ghat_l),
  Ghat_l_e     : doExpand(GhatNoZero_l, bSurf),

  printf(fh, "  } else { ~%~%"),
  
  /* Because v < 0, need right edge value */
  /* Evaluate surface projection of Ghat_r = v f_r. */
  Ghat_r_c : calcInnerProdList(surfVars, wv+(dv/2)*vv, bSurf, subst(cv=-1, fr_e)),

  /* Clever factorization is possible for polyOrder = 1, but for higher
     polynomial orders, factorization is *too* clever and can lead to 
     deeply nested parentheses, not ideal for compiler optimizations */
  if (polyOrder = 1) then (
    writeCExprsNoExpand1(Ghat_r, Ghat_r_c)
  ) else (
    writeCExprs1(Ghat_r, Ghat_r_c)
  ),
  printf(fh, "~%"),
  flush_output(fh),

  /* Zero out components of Ghat which are empty. */
  GhatNoZero_r : makelistNoZeros1(Ghat_r_c, Ghat_r),
  Ghat_r_e     : doExpand(GhatNoZero_r, bSurf),

  /* Evaluate surface projection of Ghat_l = v f_c. */
  Ghat_l_c : calcInnerProdList(surfVars, wv+(dv/2)*vv, bSurf, subst(cv=-1, fc_e)),

  /* Clever factorization is possible for polyOrder = 1, but for higher
     polynomial orders, factorization is *too* clever and can lead to 
     deeply nested parentheses, not ideal for compiler optimizations */
  if (polyOrder = 1) then (
    writeCExprsNoExpand1(Ghat_l, Ghat_l_c)
  ) else (
    writeCExprs1(Ghat_l, Ghat_l_c)
  ),
  printf(fh, "~%"),
  flush_output(fh),

  /* Zero out components of Ghat which are empty. */
  GhatNoZero_l : makelistNoZeros1(Ghat_l_c, Ghat_l),
  Ghat_l_e     : doExpand(GhatNoZero_l, bSurf),
  
  printf(fh, "  } ~%"),

  /* Compute surface contribution integral(phi^- Ghat) on the right. */
  incr_l : calcInnerProdList(surfVars, 1, subst(cv=-1.0, bP), Ghat_l_e),
  incr_r : calcInnerProdList(surfVars, -1, subst(cv=1.0, bP), Ghat_r_e),
  writeCIncrExprsCollect1lhsc(out, dx1Vec[dir]*incr_l + dx1Vec[dir]*incr_r),    
  printf(fh, "~%"),

  printf(fh, "  return 0.;~%~%"),  /* Return CFL frequency in volume kernel. */

  printf(fh, "} ~%")
);
