/*
  Generate kernels to calculate the diffusion tensor from input
  Roesnbluth potential, D_ij = d^2 G / dvi dvj
*/

load(stringproc);
load("fpo/funcs-fpo-diff-coeff_stencil");
load("fpo/test-diff-coeff");

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
minVdim_Ser : 3$
maxCdim_Ser : 2$
maxVdim_Ser : 3$

/* Tensor product basis. */
/* Note that Serendipity, p = 1, is equivalent to Tensor */
/* Thus no need to calculate p = 1 Tensor basis */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 0$
minCdim_Tensor : 1$
minVdim_Tensor : 3$
maxCdim_Tensor : 1$
maxVdim_Tensor : 3$

/* ...... END OF USER INPUTS........ */

bName        : ["ser", "tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
minVdim      : [minVdim_Ser, minVdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$
maxVdim      : [maxVdim_Ser, maxVdim_Tensor]$

dirs : [vx, vy, vz]$
dirCombos : listify(cartesian_product(setify(dirs), setify(dirs)))$

dirNums : [[vx, 1], [vy, 2], [vz, 3]]$

for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    for vidx : 1 thru length(dirCombos) do (
      minPolyOrderB : minPolyOrder[bInd],
      maxPolyOrderB : maxPolyOrder[bInd],
      if (c>1 and bName[bInd] = "ser") then maxPolyOrderB : 1, 
      for polyOrder : minPolyOrderB thru maxPolyOrderB do (
        pv1 : dirCombos[vidx][1],
        pv2 : dirCombos[vidx][2],

        pvdir1 : assoc(pv1,dirNums),
        pvdir2 : assoc(pv2,dirNums),

        if (pvdir1 = pvdir2) then (
          fname : sconcat("~/max-out/fpo_diff_coeff_diag_",c,"x3v_",bName[bInd],
            "_p",polyOrder,"_",pv1),
          funcNm : sconcat("fpo_diff_coeff_diag_",c,"x3v_",pv1, "_", bName[bInd]),
          generateFpoDiffCoeffDiag(fname, funcNm, c, bName[bInd], polyOrder, pv1)
        )
        elseif (pvdir1 > pvdir2) then (
          fname : sconcat("~/max-out/fpo_diff_coeff_cross_",c,"x3v_",bName[bInd],
            "_p",polyOrder,"_", pv1, pv2),
          funcNm : sconcat("fpo_diff_coeff_cross_", c,"x3v_", pv1, pv2, "_", bName[bInd]),
          generateFpoDiffCoeffCrossLower(fname, funcNm, c, bName[bInd], polyOrder, dirCombos[vidx])
        )
        else (
          fname : sconcat("~/max-out/fpo_diff_coeff_cross_",c,"x3v_",bName[bInd],
            "_p",polyOrder,"_", pv1, pv2),
          funcNm : sconcat("fpo_diff_coeff_cross_", c,"x3v_", pv1, pv2, "_", bName[bInd]),
          generateFpoDiffCoeffCrossUpper(fname, funcNm, c, bName[bInd], polyOrder, dirCombos[vidx])
        )
      )    
    )
  )
)$

