load("fpo/funcs-fpo-diff-coeff-cross-vol")$ 
load(stringproc)$

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 2$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
minVdim_Ser : 3$
maxCdim_Ser : 1$
maxVdim_Ser : 3$

/* Tensor product basis. */
/* Note that Serendipity, p = 1, is equivalent to Tensor */
/* Thus no need to calculate p = 1 Tensor basis */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 1$
minCdim_Tensor : 1$
minVdim_Tensor : 3$
maxCdim_Tensor : 1$
maxVdim_Tensor : 3$

/* ...... END OF USER INPUTS........ */

bName        : ["ser", "tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
minVdim      : [minVdim_Ser, minVdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$
maxVdim      : [maxVdim_Ser, maxVdim_Tensor]$

dirs : [vx, vy, vz]$

for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    for v : max(c, minVdim[bInd]) thru maxVdim[bInd] do (
      minPolyOrderB : minPolyOrder[bInd],
      maxPolyOrderB : maxPolyOrder[bInd],
      if (c = 3) then maxPolyOrderB : 1,
      for polyOrder : minPolyOrderB thru maxPolyOrderB do (
        disp(printf(false, sconcat("Creating FPO recovery ", bName[bInd], " ~ax~avp~a"), c, v, polyOrder)),
        for dir1 : 1 thru v do (
          for dir2 : 1 thru v do (
            if (dir1 # dir2) then (
            fname : sconcat("~/max-out/fpo_diff_coeff_cross_recovery_", c, 
              "x", v, "v_", dirs[dir1], dirs[dir2],"_", bName[bInd], "_p", polyOrder, ".c"),
            disp(fname),
            fh : openw(fname),
            funcName : sconcat("fpo_diff_coeff_cross_recov_"),
            printf(fh, "#include <gkyl_fpo_vlasov_kernels.h> ~%"),
            calcFPODiffCoeffCross(dir1, dir2, fh, funcName, c, v, bName[bInd], polyOrder),
            close(fh)
            )
            )
        )
      )
    )
  )
);
