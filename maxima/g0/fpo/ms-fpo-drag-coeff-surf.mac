load("fpo/funcs-fpo-drag-coeff-surf")$
load(stringproc)$

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
maxCdim_Ser : 3$

/* Tensor product basis. */
/* Note that Serendipity, p = 1, is equivalent to Tensor */
/* Thus no need to calculate p = 1 Tensor basis */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
maxCdim_Tensor : 0$

/* ...... END OF USER INPUTS........ */

bName        : ["ser", "tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$

for bInd : 1 thru length(bName) do (
  for d : minCdim[bInd] thru maxCdim[bInd] do (
    minPolyOrderB : minPolyOrder[bInd],
    maxPolyOrderB : maxPolyOrder[bInd],
    if (d=3 and maxPolyOrderB > 1) then maxPolyOrderB : 1,

    for polyOrder : minPolyOrderB thru maxPolyOrderB do (
      disp(printf(false, sconcat("Creating FPO recovery ", bName[bInd], " ~axp~a"), d, polyOrder)),
      for dir : 1 thru d do ( 
        if (dir = 1) then fname : sconcat("~/max-out/fpo_drag_coeff_recovery_surf_vx_", d, "v_", bName[bInd], "_p", polyOrder, ".c"),
        if (dir = 2) then fname : sconcat("~/max-out/fpo_drag_coeff_recovery_surf_vy_", d, "v_", bName[bInd], "_p", polyOrder, ".c"),
        if (dir = 3) then fname : sconcat("~/max-out/fpo_drag_coeff_recovery_surf_vz_", d, "v_", bName[bInd], "_p", polyOrder, ".c"),
        fh : openw(fname),
        printf(fh, "#include <gkyl_fpo_vlasov_kernels.h> ~%"),
        funcName : sconcat("fpo_drag_coeff_surf_upper_"),
        calcFPODragCoeffSurf(dir, 1, fh, funcName, d, bName[bInd], polyOrder),
        funcName : sconcat("fpo_drag_coeff_surf_lower_"),
        calcFPODragCoeffSurf(dir, -1, fh, funcName, d, bName[bInd], polyOrder),
        close(fh)
      )
    )
  )
);
