kill(all) $
load("recovery") $
load ("modal-basis") $
load(stringproc)$

minPolyOrder : 1 $
maxPolyOrder : 2 $
dirs : [vx, vy, vz] $

bName : "ser" $

writeD(recov, dirFace, dirPar, vars, bas, nm, fh) := block(
  [proj],
  proj : calcInnerProdList(vars, 1, bas,
    subst(dirFace=0, diff(diff(recov, dirFace), dirPar))),
  printf(fh, "  double ~a[~a];~%", nm, length(bas)),
  for i : 1 thru length(bas) do (
    printf(fh, "  ~a[~a] = ~a;~%", nm, i-1, float(expand(proj[i])))
    ),
  printf(fh, "~%")
  ) $

writeF(recov, dirFace, derDir, numDer, vars, bas, nm, fh) := block(
  [proj],
  proj : calcInnerProdList(vars, 1, bas,
    subst(dirFace=0, diff(recov, derDir, numDer))),
  printf(fh, "  double ~a[~a];~%", nm, length(bas)),
  for i : 1 thru length(bas) do (
    printf(fh, "  ~a[~a] = ~a;~%", nm, i-1, float(expand(proj[i])))
    ),
  printf(fh, "~%")
  ) $

for polyOrder : minPolyOrder thru maxPolyOrder do (
  load(sconcat("basis-precalc/basisSer1x3v")),
  ba : basisP[polyOrder],
  numBasis : length(ba),
  
  /* This is a not always necessary step and one could in most cases
  use directly 'dg(qlll)' instead of dg(lstQlll) but this does prevent
  potential super nasty aliasing!  */

  lst_gllc : makelist(gllc[i], i, 0, numBasis-1),
  lst_glcl : makelist(glcl[i], i, 0, numBasis-1),
  lst_glcc : makelist(glcc[i], i, 0, numBasis-1),
  lst_glcu : makelist(glcu[i], i, 0, numBasis-1),
  lst_gluc : makelist(gluc[i], i, 0, numBasis-1),
  
  lst_gcll : makelist(gcll[i], i, 0, numBasis-1),
  lst_gclc : makelist(gclc[i], i, 0, numBasis-1),
  lst_gclu : makelist(gclu[i], i, 0, numBasis-1),
  lst_gccl : makelist(gccl[i], i, 0, numBasis-1),
  lst_gccc : makelist(gccc[i], i, 0, numBasis-1),
  lst_gccu : makelist(gccu[i], i, 0, numBasis-1),
  lst_gcul : makelist(gcul[i], i, 0, numBasis-1),
  lst_gcuc : makelist(gcuc[i], i, 0, numBasis-1),
  lst_gcuu : makelist(gcuu[i], i, 0, numBasis-1),
  
  lst_gulc : makelist(gulc[i], i, 0, numBasis-1),
  lst_gucl : makelist(gucl[i], i, 0, numBasis-1),
  lst_gucc : makelist(gucc[i], i, 0, numBasis-1),
  lst_gucu : makelist(gucu[i], i, 0, numBasis-1),
  lst_guuc : makelist(guuc[i], i, 0, numBasis-1),


  lst_fllc : makelist(fllc[i], i, 0, numBasis-1),
  lst_flcl : makelist(flcl[i], i, 0, numBasis-1),
  lst_flcc : makelist(flcc[i], i, 0, numBasis-1),
  lst_flcu : makelist(flcu[i], i, 0, numBasis-1),
  lst_fluc : makelist(fluc[i], i, 0, numBasis-1),
  
  lst_fcll : makelist(fcll[i], i, 0, numBasis-1),
  lst_fclc : makelist(fclc[i], i, 0, numBasis-1),
  lst_fclu : makelist(fclu[i], i, 0, numBasis-1),
  lst_fccl : makelist(fccl[i], i, 0, numBasis-1),
  lst_fccc : makelist(fccc[i], i, 0, numBasis-1),
  lst_fccu : makelist(fccu[i], i, 0, numBasis-1),
  lst_fcul : makelist(fcul[i], i, 0, numBasis-1),
  lst_fcuc : makelist(fcuc[i], i, 0, numBasis-1),
  lst_fcuu : makelist(fcuu[i], i, 0, numBasis-1),
  
  lst_fulc : makelist(fulc[i], i, 0, numBasis-1),
  lst_fucl : makelist(fucl[i], i, 0, numBasis-1),
  lst_fucc : makelist(fucc[i], i, 0, numBasis-1),
  lst_fucu : makelist(fucu[i], i, 0, numBasis-1),
  lst_fuuc : makelist(fuuc[i], i, 0, numBasis-1),


  /* Define recoveries with the correct stencils */
  gl_rec2 : [
  'calcRecov2CellGen("Ser", vx, varsP, polyOrder,
    dg(lst_glcc), dg(lst_gccc)),
  'calcRecov2CellGen("Ser", vy, varsP, polyOrder,
    dg(lst_gclc), dg(lst_gccc)),
  'calcRecov2CellGen("Ser", vz, varsP, polyOrder,
    dg(lst_gccl), dg(lst_gccc))
  ],

  gu_rec2 : [
  'calcRecov2CellGen("Ser", vx, varsP, polyOrder,
    dg(lst_gccc), dg(lst_gucc)),
  'calcRecov2CellGen("Ser", vy, varsP, polyOrder,
    dg(lst_gccc), dg(lst_gcuc)),
  'calcRecov2CellGen("Ser", vz, varsP, polyOrder,
    dg(lst_gccc), dg(lst_gccu))
  ],

  fl_rec2 : [
  'calcRecov2CellGen("Ser", vx, varsP, polyOrder,
    dg(lst_flcc), dg(lst_fccc)),
  'calcRecov2CellGen("Ser", vy, varsP, polyOrder,
    dg(lst_fclc), dg(lst_fccc)),
  'calcRecov2CellGen("Ser", vz, varsP, polyOrder,
    dg(lst_fccl), dg(lst_fccc))
  ],

  fu_rec2 : [
  'calcRecov2CellGen("Ser", vx, varsP, polyOrder,
    dg(lst_fccc), dg(lst_fucc)),
  'calcRecov2CellGen("Ser", vy, varsP, polyOrder,
    dg(lst_fccc), dg(lst_fcuc)),
  'calcRecov2CellGen("Ser", vz, varsP, polyOrder,
    dg(lst_fccc), dg(lst_fccu))
  ],

  fl_rec6 : [
  [
  false,
  'calcRecovFaceGen("Ser", [vx, vy], varsP, 0, 0, polyOrder, 0,
    dg(dg(lst_fllc), dg(lst_fclc)),
    dg(dg(lst_flcc), dg(lst_fccc)),
    dg(dg(lst_fluc), dg(lst_fcuc))),
  'calcRecovFaceGen("Ser", [vx, vz], varsP, 0, 0, polyOrder, 0,
    dg(dg(lst_flcl), dg(lst_fccl)),
    dg(dg(lst_flcc), dg(lst_fccc)),
    dg(dg(lst_flcu), dg(lst_fccu)))
  ],
  [
  'calcRecovFaceGen("Ser", [vy, vx], varsP, 0, 0, polyOrder, 0,
    dg(dg(lst_fllc), dg(lst_flcc)),
    dg(dg(lst_fclc), dg(lst_fccc)),
    dg(dg(lst_fulc), dg(lst_fucc))),
  false,
  'calcRecovFaceGen("Ser", [vy, vz], varsP, 0, 0, polyOrder, 0,
    dg(dg(lst_fcll), dg(lst_fccl)),
    dg(dg(lst_fclc), dg(lst_fccc)),
    dg(dg(lst_fclu), dg(lst_fccu)))
  ],
  [
  'calcRecovFaceGen("Ser", [vz, vx], varsP, 0, 0, polyOrder, 0,
    dg(dg(lst_flcl), dg(lst_flcc)),
    dg(dg(lst_fccl), dg(lst_fccc)),
    dg(dg(lst_fucl), dg(lst_fucc))),
  'calcRecovFaceGen("Ser", [vz, vy], varsP, 0, 0, polyOrder, 0,
    dg(dg(lst_fcll), dg(lst_fclc)),
    dg(dg(lst_fccl), dg(lst_fccc)),
    dg(dg(lst_fcul), dg(lst_fcuc))),
  false
  ]
  ],

  fu_rec6 : [
  [
  false,
  'calcRecovFaceGen("Ser", [vx, vy], varsP, 0, 0, polyOrder, 0,
    dg(dg(lst_fclc), dg(lst_fulc)),
    dg(dg(lst_fccc), dg(lst_fucc)),
    dg(dg(lst_fcuc), dg(lst_fuuc))),
  'calcRecovFaceGen("Ser", [vx, vz], varsP, 0, 0, polyOrder, 0,
    dg(dg(lst_fccl), dg(lst_fucl)),
    dg(dg(lst_fccc), dg(lst_fucc)),
    dg(dg(lst_fccu), dg(lst_fucu)))
  ],
  [
  'calcRecovFaceGen("Ser", [vy, vx], varsP, 0, 0, polyOrder, 0,
    dg(dg(lst_flcc), dg(lst_fluc)),
    dg(dg(lst_fccc), dg(lst_fcuc)),
    dg(dg(lst_fucc), dg(lst_fuuc))),
  false,
  'calcRecovFaceGen("Ser", [vy, vz], varsP, 0, 0, polyOrder, 0,
    dg(dg(lst_fccl), dg(lst_fcul)),
    dg(dg(lst_fccc), dg(lst_fcuc)),
    dg(dg(lst_fccu), dg(lst_fcuu)))
  ],
  [
  'calcRecovFaceGen("Ser", [vz, vx], varsP, 0, 0, polyOrder, 0,
    dg(dg(lst_flcc), dg(lst_flcu)),
    dg(dg(lst_fccc), dg(lst_fccu)),
    dg(dg(lst_fucc), dg(lst_fucu))),
  'calcRecovFaceGen("Ser", [vz, vy], varsP, 0, 0, polyOrder, 0,
    dg(dg(lst_fclc), dg(lst_fclu)),
    dg(dg(lst_fccc), dg(lst_fccu)),
    dg(dg(lst_fcuc), dg(lst_fcuu))),
  false
  ]
  ],

  for d1 : 1 thru 3 do (
    dir1 : dirs[d1],
    for d2 : 1 thru 3 do (
      dir2 : dirs[d2],
      print("Generating: diff-surf", dir1, dir2, polyOrder),
      fname : sconcat("~/max-out/fpo_vlasov_diff_surf", dir1, dir2,
        "_1x3v_", bName, "_p", polyOrder, ".c"),
      fh : openw(fname),
      printf(fh, "#include <gkyl_fpo_vlasov_kernels.h>~%~%"),
      printf(fh, "GKYL_CU_DH double~%"),
      printf(fh, sconcat("fpo_vlasov_diff_surf", dir1, dir2, "_1x3v_", bName, "_p", polyOrder,
          "(const double* w, const double* dx,~%")),
      printf(fh, "  const double* g[], const double* f[], double* GKYL_RESTRICT out) ~%"),
      printf(fh, "{~%"),
      printf(fh, "  // w[NDIM]: Cell-center coordinates~%"),
      printf(fh, "  // dxv[NDIM]: Cell spacing~%"),
      printf(fh, "  // g: ~%"),
      printf(fh, "  // f: ~%"),
      printf(fh, "  // out: Incremented output~%~%"),
      
      printf(fh, sconcat("  const double J", dir1, dir2, " = 4/dx[", d1, "]/dx[", d2, "];~%~%")),

      printf(fh, "  const double* gllc = g[1];~%"),
      printf(fh, "  const double* glcl = g[3];~%"),
      printf(fh, "  const double* glcc = g[4];~%"),
      printf(fh, "  const double* glcu = g[5];~%"),
      printf(fh, "  const double* gluc = g[7];~%"),

      printf(fh, "  const double* gcll = g[9];~%"),
      printf(fh, "  const double* gclc = g[10];~%"),
      printf(fh, "  const double* gclu = g[11];~%"),
      printf(fh, "  const double* gccl = g[12];~%"),
      printf(fh, "  const double* gccc = g[13];~%"),
      printf(fh, "  const double* gccu = g[14];~%"),
      printf(fh, "  const double* gcul = g[15];~%"),
      printf(fh, "  const double* gcuc = g[16];~%"),
      printf(fh, "  const double* gcuu = g[17];~%"),

      printf(fh, "  const double* gulc = g[19];~%"),
      printf(fh, "  const double* gucl = g[21];~%"),
      printf(fh, "  const double* gucc = g[22];~%"),
      printf(fh, "  const double* gucu = g[23];~%"),
      printf(fh, "  const double* guuc = g[25];~%~%"),


      printf(fh, "  const double* fllc = f[1];~%"),
      printf(fh, "  const double* flcl = f[3];~%"),
      printf(fh, "  const double* flcc = f[4];~%"),
      printf(fh, "  const double* flcu = f[5];~%"),
      printf(fh, "  const double* fluc = f[7];~%"),

      printf(fh, "  const double* fcll = f[9];~%"),
      printf(fh, "  const double* fclc = f[10];~%"),
      printf(fh, "  const double* fclu = f[11];~%"),
      printf(fh, "  const double* fccl = f[12];~%"),
      printf(fh, "  const double* fccc = f[13];~%"),
      printf(fh, "  const double* fccu = f[14];~%"),
      printf(fh, "  const double* fcul = f[15];~%"),
      printf(fh, "  const double* fcuc = f[16];~%"),
      printf(fh, "  const double* fcuu = f[17];~%"),

      printf(fh, "  const double* fulc = f[19];~%"),
      printf(fh, "  const double* fucl = f[21];~%"),
      printf(fh, "  const double* fucc = f[22];~%"),
      printf(fh, "  const double* fucu = f[23];~%"),
      printf(fh, "  const double* fuuc = f[25];~%~%"),


      surfVars : delete(dir1, varsP),
      /* Black magic start */
      /* Generate surface basis. this produces the ndim-1 orthogonal basis with no dir dependence. */
      ba_surf : sqrt(2)*delete(0, fullratsimp(
          innerProd(varsP, 1, ba, subst([dir1^2=var2, var2=1/3, dir1=0], ba)))*ba),
      /* Black magic ends */
      numSurfBasis : length(ba_surf),

      rec : ev(gl_rec2[d1], nouns),
      writeD(rec, dir1, dir2, surfVars, ba_surf, "D_proj1_l", fh),
      kill(rec),
      lst_D_proj1_l : makelist(D_proj1_l[i], i, 0, numSurfBasis-1),
      
      rec : ev(gu_rec2[d1], nouns),
      writeD(rec, dir1, dir2, surfVars, ba_surf, "D_proj1_u", fh),
      kill(rec),
      lst_D_proj1_u : makelist(D_proj1_u[i], i, 0, numSurfBasis-1),

      if d1 = d2 then (
        rec : ev(fl_rec2[d1], nouns),
        writeF(rec, dir1, dir1, 1, surfVars, ba_surf, "df_proj1_l", fh),
        kill(rec),
        lst_df_proj1_l : makelist(df_proj1_l[i], i, 0, numSurfBasis-1),
      
        rec : ev(fu_rec2[d1], nouns),
        writeF(rec, dir1, dir1, 1, surfVars, ba_surf, "df_proj1_u", fh),
        kill(rec),
        lst_df_proj1_u : makelist(df_proj1_u[i], i, 0, numSurfBasis-1)
        
        ) else (
        
        rec : ev(fl_rec6[d1][d2], nouns),
        writeF(rec, dir1, dir2, 1, surfVars, ba_surf, "df_proj1_l", fh),
        kill(rec),
        lst_df_proj1_l : makelist(df_proj1_l[i], i, 0, numSurfBasis-1),
      
        rec : ev(fu_rec6[d1][d2], nouns),
        writeF(rec, dir1, dir2, 1, surfVars, ba_surf, "df_proj1_u", fh),
        kill(rec),
        lst_df_proj1_u : makelist(df_proj1_u[i], i, 0, numSurfBasis-1)
        ),

      surf1_l : calcInnerProdList(surfVars, 1, subst(dir1=-1, ba),
        doExpand(lst_df_proj1_l, ba_surf)*doExpand(lst_D_proj1_l, ba_surf)),
      surf1_u : calcInnerProdList(surfVars, 1, subst(dir1=1, ba),
        doExpand(lst_df_proj1_u, ba_surf)*doExpand(lst_D_proj1_u, ba_surf)),


      surfVars : delete(dir2, varsP),
      /* Black magic start */
      /* Generate surface basis. this produces the ndim-1 orthogonal basis with no dir dependence. */
      ba_surf : sqrt(2)*delete(0, fullratsimp(
          innerProd(varsP, 1, ba, subst([dir2^2=var2, var2=1/3, dir2=0], ba)))*ba),
      /* Black magic ends */
      numSurfBasis : length(ba_surf),

      if d1 = d2 then (
        lst_D_proj2_l : lst_D_proj1_l,
        lst_D_proj2_u : lst_D_proj1_u
        
        ) else (
        
        rec : ev(gl_rec2[d2], nouns),
        writeD(rec, dir2, dir1, surfVars, ba_surf, "D_proj2_l", fh),
        kill(rec),
        lst_D_proj2_l : makelist(D_proj2_l[i], i, 0, numSurfBasis-1),
      
        rec : ev(gu_rec2[d2], nouns),
        writeD(rec, dir2, dir1, surfVars, ba_surf, "D_proj2_u", fh),
        kill(rec),
        lst_D_proj2_u : makelist(D_proj2_u[i], i, 0, numSurfBasis-1)
        ),
      
      rec : ev(fl_rec2[d2], nouns),
      writeF(rec, dir2, dir2, 0, surfVars, ba_surf, "f_proj2_l", fh),
      kill(rec),
      lst_f_proj2_l : makelist(f_proj2_l[i], i, 0, numSurfBasis-1),
      
      rec : ev(fu_rec2[d2], nouns),
      writeF(rec, dir2, dir2, 0, surfVars, ba_surf, "f_proj2_u", fh),
      kill(rec),
      lst_f_proj2_u : makelist(f_proj2_u[i], i, 0, numSurfBasis-1),

      surf2_l : calcInnerProdList(surfVars, 1, subst(dir2=-1, diff(ba, dir1)),
        doExpand(lst_f_proj2_l, ba_surf)*doExpand(lst_D_proj2_l, ba_surf)),
      surf2_u : calcInnerProdList(surfVars, 1, subst(dir2=1, diff(ba, dir1)),
        doExpand(lst_f_proj2_u, ba_surf)*doExpand(lst_D_proj2_u, ba_surf)),


      kernel : (surf1_u - surf2_u - surf1_l + surf2_l)/2,

      for i : 1 thru numBasis do (
        printf(fh, "  out[~a] +=  J~a~a*(~a);~%", i-1, dir1, dir2,
          float(expand(kernel[i])))
        ),

      printf(fh, "  return 0.;~%"),  /* Return CFL frequency in volume kernel. */
      printf(fh, "~%"),

      printf(fh, "}~%~%"),
      kill(kernel, surf1_l, surf1_u, surf2_l, surf2_u),
      close(fh)
      )
    )
  ) $
