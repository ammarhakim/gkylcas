load("recovery") $
load ("modal-basis") $
load(stringproc)$

dirs : [vx, vy, vz] $

calcFpoDiffVol1x3v(polyOrder, bName) := block(
  [ba, numBasis, fname, fh,
  lst_g, lst_f,
  dir1, dir2,
  isFirst],
  
  load(sconcat("basis-precalc/basis", bName, "1x3v")),
  ba : basisP[polyOrder],
  numBasis : length(ba),
  
  /* This is a not always necessary step and one could in most cases
  use directly 'dg(qlll)' instead of dg(lstQlll) but this does prevent
  potential super nasty aliasing!  */

  lst_g : makelist(g[i], i, 0, numBasis-1),
  lst_f : makelist(f[i], i, 0, numBasis-1),

  print("Generating:", bName,"diff-vol", polyOrder),
  fname : sconcat("~/max-out/fpo_vlasov_diff_vol_1x3v_",
    sdowncase(bName), "_p", polyOrder, ".c"),
  fh : openw(fname),
  printf(fh, "#include <gkyl_fpo_vlasov_kernels.h>~%~%"),
  printf(fh, "GKYL_CU_DH double~%"),
  printf(fh, sconcat("fpo_vlasov_diff_vol_1x3v_", sdowncase(bName), "_p", polyOrder,
      "(const double* w, const double* dx,~%")),
  printf(fh, "  const double* g, const double* f, double* GKYL_RESTRICT out) ~%"),
  printf(fh, "{~%"),
  printf(fh, "  // w[NDIM]: Cell-center coordinates~%"),
  printf(fh, "  // dxv[NDIM]: Cell spacing~%"),
  printf(fh, "  // g: ~%"),
  printf(fh, "  // f: ~%"),
  printf(fh, "  // out: Incremented output~%~%"),

  for d1 : 1 thru 3 do (
    dir1 : dirs[d1],
    for d2 : 1 thru 3 do (
      dir2 : dirs[d2],

      printf(fh, sconcat("  const double J", dir1, dir2, " = 4/dx[", d1, "]/dx[", d2, "];~%~%")),

      for i : 1 thru numBasis do (
        kernel : integrate(integrate(integrate(integrate(
                diff(diff(diff(doExpand(lst_g, ba), dir1), dir2) * diff(ba[i], dir1), dir2) * doExpand(lst_f, ba),
                x, -1, 1), vx, -1, 1), vy, -1, 1), vz, -1, 1),
        printf(fh, "  out[~a] +=  J~a~a*(~a);~%", i-1, dir1, dir2,
          float(expand(kernel)))
      ),
      printf(fh, "~%")
    )
  ),
  printf(fh, "  return "),
  isFirst : true,
  for d1 : 1 thru 3 do (
    dir1 : dirs[d1],
    for d2 : 1 thru 3 do (
      dir2 : dirs[d2],

      D0 : subst([x=0, vx=0, vy=0, vz=0],
        diff(diff(doExpand(lst_g, ba), dir1), dir2)),
      if isFirst then (
        printf(fh,"J~a~a*(~a)", dir1, dir2, float(expand(D0))),
        isFirst : false
      ) else (
        printf(fh," + J~a~a*(~a)", dir1, dir2, float(expand(D0)))
      )
    )
  ),
  printf(fh, ";~%"),
  printf(fh, "}~%"),
  close(fh)
) $