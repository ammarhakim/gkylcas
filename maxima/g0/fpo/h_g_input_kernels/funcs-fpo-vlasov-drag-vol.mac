load("modal-basis")$
load("out-scripts");
load("recovery");
load(stringproc)$

fpprec : 24$

/* This script generates the kernels for the volume drag term
   contribution from FPO. */

cidx(cdim) := makelist(i,i,0,cdim-1)$
vidx(cdim,vdim) := makelist(i,i,cdim,cdim+vdim-1)$
cvars : [x, y, z]$
varsV : [vx, vy, vz]$
rdv2 : [rdvx2, rdvy2, rdvz2]$

/* Helper functions for expanding (in basis functions) a quantity that should be sparse.  */
/* For example, alpha, the phase space flow only depends on a few phase space coordinates. */

doMakeExprLst(vals, S) := makelist(if vals[i] # 0 then S[a0+i-1] else 0, i, 1, length(vals))$
doExpandLst(lst, basis) := sum(lst[i]*basis[i], i, 1, length(basis))$

calcFpoDragVol(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block([],
  printf(fh, "#include <gkyl_fpo_vlasov_kernels.h> ~%"),
  kill(varsC, varsP, basisC, basisP),
  /* Load basis of dimensionality requested. */
  if (basisFun="ser") then basisFun:"Ser",
  if (basisFun="tensor") then basisFun:"Tensor",
  modNm : sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v"),
  load(modNm),
  /* Polynomial basis and its derivatives. */
  bP : basisP[polyOrder],
  bC : basisC[polyOrder],
  NP : length(bP),
  NC : length(bC),
  /* Specify a point to evaluate alpha at for use in computing CFL */
  /* Here we choose to evaluate things in the middle of the cell, where
     coordinates = 0. */
  zr : makelist(varsP[d]=0, d, 1, length(varsP)),
  printf(fh, "GKYL_CU_DH double~%"),
  printf(fh, "~a(const double* w, const double* dxv,~%", funcNm),
  printf(fh, "  const double* h, const double* f, double* GKYL_RESTRICT out) ~%"),
  printf(fh, "{~%"),
  printf(fh, "  // w[~a]: Cell-center coordinates~%", cdim+vdim),
  printf(fh, "  // dxv[~a]: Cell spacing~%", cdim+vdim),
  printf(fh, "  // h: Input Rosenbluth potential~%"),
  printf(fh, "  // f: Input distribution function~%"),
  printf(fh, "  // out: Incremented output~%"),
  cid : cidx(cdim),
  vid : vidx(cdim,vdim),
  for dir : 1 thru vdim do (
      printf(fh, "  const double rd~a2 = 2.0/dxv[~a]; ~%", varsV[dir], vid[dir])
  ),
  printf(fh, "~%"),
  /* Expand distribution function f in phase basis */
  f_e : doExpand1(f, bP),
  /* Expand potential */
  h_e : doExpand1(h, bP),
  /* alphaDrag = nuSum*v-nuUSum. */
  printf(fh, "  double alphaDrag[~a]; ~%", vdim*NP),
  incrDrag : 0,
  alphaDrag_mid : makelist(0, i, 1, vdim),
  for vdir : 1 thru vdim do (
    /* alphaDrag = rdv2*< psi, dh/dv >. */
    alphaDrag_e : calcInnerProdList(varsP, 1, bP, diff(h_e, varsV[vdir])),
    expr : gcfac(float(expand(radcan(rdv2[vdir]*alphaDrag_e)))),
    /* Write out the component of alphaDrag's phase space expansion. */
    printf(fh, "  // Expand rdv2*(dh/d~a) in phase basis.~%",varsV[vdir]),
    for i : 1 thru NP do (
        if expr[i] # 0.0 then printf(fh, "  ~a = ~a; ~%", alphaDrag[NP*(vdir-1)+i-1], expr[i])
    ),
    printf(fh, "~%"),
    /* Zero out components of alpha which are empty. */
    alphaDrag_NoZero : doMakeExprLst(alphaDrag_e, alphaDrag),
    alphaDrag_NoZero_e : doExpandLst(alphaDrag_NoZero, bP),
    /* Evaluate alpha_vdim at zr to approximate max(abs(alpha_vdim))/dv_i. */
    alphaDrag_mid[vdir] : gcfac(float(expand(subst(zr,0.5*subst(a0=NP*(vdir-1),alphaDrag_NoZero_e))))),
    /* Volume increment from configuration space. */
    incrDrag : incrDrag+subst(a0=NP*(vdir-1),calcInnerProdList(varsP, 1, diff(bP,varsV[vdir]), alphaDrag_NoZero_e*f_e))
  ),

  /* Write out first attempts to simplify the radicals with radcan, e.g.
     force sqrt(3)*sqrt(5) = sqrt(15). */
  /* Outscripts loads scifac and uses the aggressive factorization routine "gcfac". */
  writeCExprsCollect1c(radcan(incrDrag)),
  printf(fh, "~%"),
  if vdim = 1 then (
    printf(fh, "  return fabs(~a); ~%", alphaDrag_mid[1])
  ) elseif vdim = 2 then (
    printf(fh, "  return fabs(~a)+fabs(~a); ~%", alphaDrag_mid[1], alphaDrag_mid[2])
  ) else (
    printf(fh, "  return fabs(~a)+fabs(~a)+fabs(~a); ~%", alphaDrag_mid[1], alphaDrag_mid[2], alphaDrag_mid[3])
  ),
  printf(fh, "~%"),
  printf(fh, "} ~%")
);


