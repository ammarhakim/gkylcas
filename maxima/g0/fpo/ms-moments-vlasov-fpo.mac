/* Generate kernels that compute the moments of the distribution function
   needed for making the Fokker-Planck operator conservative in the 
   Vlasov-Maxwell system of equations. */

load("fpo/moments-vlasov-fpo")$
load(stringproc)$

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
maxCdim_Ser : 1$

/* Tensor product basis. */
/* Note that Serendipity, p = 1, is equivalent to Tensor */
/* Thus no need to calculate p = 1 Tensor basis */
minPolyOrder_Tensor : 1$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
maxCdim_Tensor : 0$

/* ...... END OF USER INPUTS........ */

bName        : ["ser","tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$

for bInd : 1 thru length(bName) do (
  for d : minCdim[bInd] thru maxCdim[bInd] do (
    minPolyOrderB : minPolyOrder[bInd],
    maxPolyOrderB : maxPolyOrder[bInd],
    if (d>2 and bName[bInd] = "ser") then maxPolyOrderB : 1,

    /* Vlasov moment calculators. */
    for polyOrder : minPolyOrderB thru maxPolyOrderB do (
      disp(printf(false,sconcat("Creating Vlasov FPO Moments ~ax~av ", bName[bInd]), d, 3)),
      fname : sconcat("~/max-out/mom_fpo_vlasov_", d, "x3v_", bName[bInd], "_p", polyOrder, ".c"),
      fh : openw(fname),
      funcName : sconcat("mom_fpo_vlasov_", d, "x3v_", bName[bInd], "_p", polyOrder),

      printf(fh, "#include <gkyl_mom_fpo_vlasov_kernels.h> ~%"),
      calcFPOMoms(fh, funcName, d, 3, bName[bInd], polyOrder),
      close(fh), 

      disp(printf(false,sconcat("Creating Vlasov FPO Boundary Moments ~ax~av ", bName[bInd]), d, 3)),
      fname : sconcat("~/max-out/mom_bcorr_fpo_vlasov_", d, "x3v_", bName[bInd], "_p", polyOrder, ".c"),
      fh : openw(fname),
      funcName : sconcat("mom_bcorr_fpo_vlasov_", d, "x3v_", bName[bInd], "_p", polyOrder),

      printf(fh, "#include <gkyl_mom_fpo_vlasov_kernels.h> ~%"),
      calcFPOBoundaryIntegral(fh, funcName, d, 3, bName[bInd], polyOrder),
      close(fh),

      disp(done)
    )
  )
);
