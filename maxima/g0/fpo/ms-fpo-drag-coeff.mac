/* 
  Generate kernels for the drag coefficient for the Rosenbluth/Fokker-Planck Operator,
  a_i = d H / dv_i, and sign information at interface for flux calculation.
*/

load(stringproc);
load("fpo/funcs-fpo-drag-coeff_stencil");


/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
minVdim_Ser : 3$
maxCdim_Ser : 1$
maxVdim_Ser : 3$

/* Tensor product basis. */
/* Note that Serendipity, p = 1, is equivalent to Tensor */
/* Thus no need to calculate p = 1 Tensor basis */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 0$
minCdim_Tensor : 1$
minVdim_Tensor : 3$
maxCdim_Tensor : 1$
maxVdim_Tensor : 3$

/* ...... END OF USER INPUTS........ */

bName        : ["ser", "tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
minVdim      : [minVdim_Ser, minVdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$
maxVdim      : [maxVdim_Ser, maxVdim_Tensor]$

dirs : [vx, vy, vz]$

for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    for vidx : 1 thru length(dirs) do (
      dir : dirs[vidx],
      for polyOrder : minPolyOrder[bInd] thru maxPolyOrder[bInd] do (
        /* Generate stencil kernels */
        fname : sconcat("~/max-out/fpo_drag_coeff_",c,"x3v_",bName[bInd],"_p",polyOrder,"_",dir),
        funcNm : sconcat("fpo_drag_coeff_",c,"x3v_",dir, "_", bName[bInd]),
        generateFpoDragCoeffStencil(fname, funcNm, c, bName[bInd], polyOrder, dir),

        /* Generate kernel to compute sign information */
        fname : sconcat("~/max-out/fpo_sgn_drag_coeff_",c,"x3v_",bName[bInd],"_p",polyOrder,"_",dir),
        funcNm : sconcat("fpo_sgn_drag_coeff_",c,"x3v_",dir, "_", bName[bInd]),
        generateFpoSgnDragCoeff(fname, funcNm, c, bName[bInd], polyOrder, dir)
      )
    )
  )
)$
