kill(all) $
load("recovery") $
load ("modal-basis") $
load(stringproc)$

minPolyOrder : 1 $
maxPolyOrder : 2 $
dirs : [vx, vy, vz] $

bName : "ser" $

for polyOrder : minPolyOrder thru maxPolyOrder do (
  load(sconcat("basis-precalc/basisSer1x3v")),
  ba : basisP[polyOrder],
  numBasis : length(ba),
  
  /* This is a not always necessary step and one could in most cases
  use directly 'dg(qlll)' instead of dg(lstQlll) but this does prevent
  potential super nasty aliasing!  */

  lst_gllc : makelist(gllc[i], i, 0, numBasis-1),
  lst_glcl : makelist(glcl[i], i, 0, numBasis-1),
  lst_glcc : makelist(glcc[i], i, 0, numBasis-1),
  lst_glcu : makelist(glcu[i], i, 0, numBasis-1),
  lst_gluc : makelist(gluc[i], i, 0, numBasis-1),
  
  lst_gcll : makelist(gcll[i], i, 0, numBasis-1),
  lst_gclc : makelist(gclc[i], i, 0, numBasis-1),
  lst_gclu : makelist(gclu[i], i, 0, numBasis-1),
  lst_gccl : makelist(gccl[i], i, 0, numBasis-1),
  lst_gccc : makelist(gccc[i], i, 0, numBasis-1),
  lst_gccu : makelist(gccu[i], i, 0, numBasis-1),
  lst_gcul : makelist(gcul[i], i, 0, numBasis-1),
  lst_gcuc : makelist(gcuc[i], i, 0, numBasis-1),
  lst_gcuu : makelist(gcuu[i], i, 0, numBasis-1),
  
  lst_gulc : makelist(gulc[i], i, 0, numBasis-1),
  lst_gucl : makelist(gucl[i], i, 0, numBasis-1),
  lst_gucc : makelist(gucc[i], i, 0, numBasis-1),
  lst_gucu : makelist(gucu[i], i, 0, numBasis-1),
  lst_guuc : makelist(guuc[i], i, 0, numBasis-1),


  lst_fllc : makelist(fllc[i], i, 0, numBasis-1),
  lst_flcl : makelist(flcl[i], i, 0, numBasis-1),
  lst_flcc : makelist(flcc[i], i, 0, numBasis-1),
  lst_flcu : makelist(flcu[i], i, 0, numBasis-1),
  lst_fluc : makelist(fluc[i], i, 0, numBasis-1),
  
  lst_fcll : makelist(fcll[i], i, 0, numBasis-1),
  lst_fclc : makelist(fclc[i], i, 0, numBasis-1),
  lst_fclu : makelist(fclu[i], i, 0, numBasis-1),
  lst_fccl : makelist(fccl[i], i, 0, numBasis-1),
  lst_fccc : makelist(fccc[i], i, 0, numBasis-1),
  lst_fccu : makelist(fccu[i], i, 0, numBasis-1),
  lst_fcul : makelist(fcul[i], i, 0, numBasis-1),
  lst_fcuc : makelist(fcuc[i], i, 0, numBasis-1),
  lst_fcuu : makelist(fcuu[i], i, 0, numBasis-1),
  
  lst_fulc : makelist(fulc[i], i, 0, numBasis-1),
  lst_fucl : makelist(fucl[i], i, 0, numBasis-1),
  lst_fucc : makelist(fucc[i], i, 0, numBasis-1),
  lst_fucu : makelist(fucu[i], i, 0, numBasis-1),
  lst_fuuc : makelist(fuuc[i], i, 0, numBasis-1),

  D_face1_l : [
  [
  subst(vx=0, diff(diff(calcRecov2CellGen("Ser", vx, varsP, polyOrder,
          dg(lst_glcc), dg(lst_gccc)), vx), vx)),
  subst(vx=0, diff(diff(calcRecov2CellGen("Ser", vx, varsP, polyOrder,
          dg(lst_glcc), dg(lst_gccc)), vx), vy)),
  subst(vx=0, diff(diff(calcRecov2CellGen("Ser", vx, varsP, polyOrder,
          dg(lst_glcc), dg(lst_gccc)), vx), vz))],
  [
  subst(vy=0, diff(diff(calcRecov2CellGen("Ser", vy, varsP, polyOrder,
          dg(lst_gclc), dg(lst_gccc)), vy), vx)),
  subst(vy=0, diff(diff(calcRecov2CellGen("Ser", vy, varsP, polyOrder,
          dg(lst_gclc), dg(lst_gccc)), vy), vy)),
  subst(vy=0, diff(diff(calcRecov2CellGen("Ser", vy, varsP, polyOrder,
          dg(lst_gclc), dg(lst_gccc)), vy), vz))],
  [
  subst(vz=0, diff(diff(calcRecov2CellGen("Ser", vz, varsP, polyOrder,
          dg(lst_gccl), dg(lst_gccc)), vz), vx)),
  subst(vz=0, diff(diff(calcRecov2CellGen("Ser", vz, varsP, polyOrder,
          dg(lst_gccl), dg(lst_gccc)), vz), vy)),
  subst(vz=0, diff(diff(calcRecov2CellGen("Ser", vz, varsP, polyOrder,
          dg(lst_gccl), dg(lst_gccc)), vz), vz))]
  ],
  
  D_face1_u : [
  [
  subst(vx=0, diff(diff(calcRecov2CellGen("Ser", vx, varsP, polyOrder,
          dg(lst_gccc), dg(lst_gucc)), vx), vx)),
  subst(vx=0, diff(diff(calcRecov2CellGen("Ser", vx, varsP, polyOrder,
          dg(lst_gccc), dg(lst_gucc)), vx), vy)),
  subst(vx=0, diff(diff(calcRecov2CellGen("Ser", vx, varsP, polyOrder,
          dg(lst_gccc), dg(lst_gucc)), vx), vz))],
  [
  subst(vy=0, diff(diff(calcRecov2CellGen("Ser", vy, varsP, polyOrder,
          dg(lst_gccc), dg(lst_gcuc)), vy), vx)),
  subst(vy=0, diff(diff(calcRecov2CellGen("Ser", vy, varsP, polyOrder,
          dg(lst_gccc), dg(lst_gcuc)), vy), vy)),
  subst(vy=0, diff(diff(calcRecov2CellGen("Ser", vy, varsP, polyOrder,
          dg(lst_gccc), dg(lst_gcuc)), vy), vz))],
  [
  subst(vz=0, diff(diff(calcRecov2CellGen("Ser", vz, varsP, polyOrder,
          dg(lst_gccc), dg(lst_gccu)), vz), vx)),
  subst(vz=0, diff(diff(calcRecov2CellGen("Ser", vz, varsP, polyOrder,
          dg(lst_gccc), dg(lst_gccu)), vz), vy)),
  subst(vz=0, diff(diff(calcRecov2CellGen("Ser", vz, varsP, polyOrder,
          dg(lst_gccc), dg(lst_gccu)), vz), vz))]
  ],


  D_face2_l : [
  [
  subst(vx=0, diff(diff(calcRecov2CellGen("Ser", vx, varsP, polyOrder,
          dg(lst_glcc), dg(lst_gccc)), vx), vx)),
  subst(vy=0, diff(diff(calcRecov2CellGen("Ser", vy, varsP, polyOrder,
          dg(lst_gclc), dg(lst_gccc)), vx), vy)),
  subst(vz=0, diff(diff(calcRecov2CellGen("Ser", vz, varsP, polyOrder,
          dg(lst_gccl), dg(lst_gccc)), vx), vz))],
  [
  subst(vx=0, diff(diff(calcRecov2CellGen("Ser", vx, varsP, polyOrder,
          dg(lst_glcc), dg(lst_gccc)), vy), vx)),
  subst(vy=0, diff(diff(calcRecov2CellGen("Ser", vy, varsP, polyOrder,
          dg(lst_gclc), dg(lst_gccc)), vy), vy)),
  subst(vz=0, diff(diff(calcRecov2CellGen("Ser", vz, varsP, polyOrder,
          dg(lst_gccl), dg(lst_gccc)), vy), vz))],
  [
  subst(vx=0, diff(diff(calcRecov2CellGen("Ser", vx, varsP, polyOrder,
        dg(lst_glcc), dg(lst_gccc)), vz), vx)),
  subst(vy=0, diff(diff(calcRecov2CellGen("Ser", vy, varsP, polyOrder,
        dg(lst_gclc), dg(lst_gccc)), vz), vy)),
  subst(vz=0, diff(diff(calcRecov2CellGen("Ser", vz, varsP, polyOrder,
        dg(lst_gccl), dg(lst_gccc)), vz), vz))]
  ],

  D_face2_u : [
  [
  subst(vx=0, diff(diff(calcRecov2CellGen("Ser", vx, varsP, polyOrder,
          dg(lst_gccc), dg(lst_gucc)), vx), vx)),
  subst(vy=0, diff(diff(calcRecov2CellGen("Ser", vy, varsP, polyOrder,
          dg(lst_gccc), dg(lst_gcuc)), vx), vy)),
  subst(vz=0, diff(diff(calcRecov2CellGen("Ser", vz, varsP, polyOrder,
          dg(lst_gccc), dg(lst_gccu)), vx), vz))],
  [
  subst(vx=0, diff(diff(calcRecov2CellGen("Ser", vx, varsP, polyOrder,
          dg(lst_gccc), dg(lst_gucc)), vy), vx)),
  subst(vy=0, diff(diff(calcRecov2CellGen("Ser", vy, varsP, polyOrder,
          dg(lst_gccc), dg(lst_gcuc)), vy), vy)),
  subst(vz=0, diff(diff(calcRecov2CellGen("Ser", vz, varsP, polyOrder,
          dg(lst_gccc), dg(lst_gccu)), vy), vz))],
  [
  subst(vx=0, diff(diff(calcRecov2CellGen("Ser", vx, varsP, polyOrder,
          dg(lst_gccc), dg(lst_gucc)), vz), vx)),
  subst(vy=0, diff(diff(calcRecov2CellGen("Ser", vy, varsP, polyOrder,
          dg(lst_gccc), dg(lst_gcuc)), vz), vy)),
  subst(vz=0, diff(diff(calcRecov2CellGen("Ser", vz, varsP, polyOrder,
          dg(lst_gccc), dg(lst_gccu)), vz), vz))]
  ],

  df_face_l : [
  [
  subst(vx=0, diff(calcRecov2CellGen("Ser", vx, varsP, polyOrder,
        dg(lst_flcc), dg(lst_fccc)), vx)),
  subst(vx=0, diff(calcRecov2CellGen("Ser", vx, varsP, polyOrder,
        dg(lst_flcc), dg(lst_fccc)), vx)),
  subst(vx=0, diff(calcRecov2CellGen("Ser", vx, varsP, polyOrder,
        dg(lst_flcc), dg(lst_fccc)), vx))]
  ,
  [],
  []
  ],

  df_face_u : [
  [
  subst(vx=0, diff(calcRecov2CellGen("Ser", vx, varsP, polyOrder,
        dg(lst_fccc), dg(lst_fucc)), vx)),
  subst(vx=0, diff(calcRecov2CellGen("Ser", vx, varsP, polyOrder,
        dg(lst_fccc), dg(lst_fucc)), vx)),
  subst(vx=0, diff(calcRecov2CellGen("Ser", vx, varsP, polyOrder,
        dg(lst_fccc), dg(lst_fucc)), vx))],
  [],
  []
  ],


  f_face_l : [
  [
  subst(vx=0, calcRecov2CellGen("Ser", vx, varsP, polyOrder,
        dg(lst_flcc), dg(lst_fccc))),
  subst(vy=0, calcRecov2CellGen("Ser", vy, varsP, polyOrder,
        dg(lst_fclc), dg(lst_fccc))),
  subst(vz=0, calcRecov2CellGen("Ser", vz, varsP, polyOrder,
        dg(lst_fccl), dg(lst_fccc)))],
  [],
  []
  ],

  f_face_u : [
  [
  subst(vx=0, calcRecov2CellGen("Ser", vx, varsP, polyOrder,
        dg(lst_fccc), dg(lst_fucc))),
  subst(vy=0, calcRecov2CellGen("Ser", vy, varsP, polyOrder,
        dg(lst_fccc), dg(lst_fcuc))),
  subst(vz=0, calcRecov2CellGen("Ser", vz, varsP, polyOrder,
        dg(lst_fccc), dg(lst_fccu)))],
  [],
  []
  ],

  for d1 : 1 thru 1 do (
    dir1 : dirs[d1],
    print("Generating:", dir1),
    for d2 : 1 thru 1 do (
      dir2 : dirs[d2],
      print("  - ", dir2),
      fname : sconcat("~/max-out/fpo_vlasov_diff_surf", dir1, dir2,
        "_1x3v_", bName, "_p", polyOrder, ".c"),
      fh : openw(fname),
      printf(fh, "#include <gkyl_fpo_vlasov_kernels.h>~%~%"),
      printf(fh, "GKYL_CU_DH void~%"),
      printf(fh, sconcat("fpo_vlasov_diff_surf", dir1, dir2, "_1x3v_", bName, "_p", polyOrder,
          "(const double* w, const double* dx,~%")),
      printf(fh, "  const double* g[], const double* f[], double* GKYL_RESTRICT out) ~%"),
      printf(fh, "{~%"),
      printf(fh, "  // w[NDIM]: Cell-center coordinates~%"),
      printf(fh, "  // dxv[NDIM]: Cell spacing~%"),
      printf(fh, "  // g: ~%"),
      printf(fh, "  // f: ~%"),
      printf(fh, "  // out: Incremented output~%~%"),
      
      printf(fh, sconcat("  const double J", dir1, dir2, " = 4/dx[", d1, "]/dx[", d2, "];~%~%")),

      printf(fh, "  const double* gllc = g[1];~%"),
      printf(fh, "  const double* glcl = g[3];~%"),
      printf(fh, "  const double* glcc = g[4];~%"),
      printf(fh, "  const double* glcu = g[5];~%"),
      printf(fh, "  const double* gluc = g[7];~%"),

      printf(fh, "  const double* gcll = g[9];~%"),
      printf(fh, "  const double* gclc = g[10];~%"),
      printf(fh, "  const double* gclu = g[11];~%"),
      printf(fh, "  const double* gccl = g[12];~%"),
      printf(fh, "  const double* gccc = g[13];~%"),
      printf(fh, "  const double* gccu = g[14];~%"),
      printf(fh, "  const double* gcul = g[15];~%"),
      printf(fh, "  const double* gcuc = g[16];~%"),
      printf(fh, "  const double* gcuu = g[17];~%"),

      printf(fh, "  const double* gulc = g[19];~%"),
      printf(fh, "  const double* gucl = g[21];~%"),
      printf(fh, "  const double* gucc = g[22];~%"),
      printf(fh, "  const double* gucu = g[23];~%"),
      printf(fh, "  const double* guuc = g[25];~%~%"),


      printf(fh, "  const double* fllc = f[1];~%"),
      printf(fh, "  const double* flcl = f[3];~%"),
      printf(fh, "  const double* flcc = f[4];~%"),
      printf(fh, "  const double* flcu = f[5];~%"),
      printf(fh, "  const double* fluc = f[7];~%"),

      printf(fh, "  const double* fcll = f[9];~%"),
      printf(fh, "  const double* fclc = f[10];~%"),
      printf(fh, "  const double* fclu = f[11];~%"),
      printf(fh, "  const double* fccl = f[12];~%"),
      printf(fh, "  const double* fccc = f[13];~%"),
      printf(fh, "  const double* fccu = f[14];~%"),
      printf(fh, "  const double* fcul = f[15];~%"),
      printf(fh, "  const double* fcuc = f[16];~%"),
      printf(fh, "  const double* fcuu = f[17];~%"),

      printf(fh, "  const double* fulc = f[19];~%"),
      printf(fh, "  const double* fucl = f[21];~%"),
      printf(fh, "  const double* fucc = f[22];~%"),
      printf(fh, "  const double* fucu = f[23];~%"),
      printf(fh, "  const double* fuuc = f[25];~%~%"),


      surfVars : delete(dir1, varsP),
      /* Black magic start */
      /* Generate surface basis. this produces the ndim-1 orthogonal basis with no dir dependence. */
      ba_surf : sqrt(2)*delete(0, fullratsimp(
          innerProd(varsP, 1, ba, subst([dir1^2=var2, var2=1/3, dir1=0], ba)))*ba),
      /* Black magic ends */
      numSurfBasis : length(ba_surf),
  
      D_proj1_l : calcInnerProdList(surfVars, 1, ba_surf, D_face1_l[d1][d2]),
      printf(fh, "  double D_proj1_l[~a];~%", numSurfBasis),
      for i : 1 thru numSurfBasis do (
        printf(fh, "  D_proj1_l[~a] += ~a;~%", i-1,
          float(expand(D_proj1_l[i])))
        ),
      printf(fh, "~%"),
      kill(D_proj1_l),
      lst_D_proj1_l : makelist(D_proj1_l[i], i, 0, numSurfBasis-1),

      D_proj1_u : calcInnerProdList(surfVars, 1, ba_surf, D_face1_u[d1][d2]),
      printf(fh, "  double D_proj1_u[~a];~%", numSurfBasis),
      for i : 1 thru numSurfBasis do (
        printf(fh, "  D_proj1_u[~a] += ~a;~%", i-1,
          float(expand(D_proj1_u[i])))
        ),
      kill(D_proj1_u),
      printf(fh, "~%"),
      lst_D_proj1_u : makelist(D_proj1_u[i], i, 0, numSurfBasis-1),

      df_proj_l : calcInnerProdList(surfVars, 1, ba_surf, df_face_l[d1][d2]),
      printf(fh, "  double df_proj_l[~a];~%", numSurfBasis),
      for i : 1 thru numSurfBasis do (
        printf(fh, "  df_proj_l[~a] += ~a;~%", i-1,
          float(expand(df_proj_l[i])))
        ),
      printf(fh, "~%"),
      kill(df_proj_l),
      lst_df_proj_l : makelist(df_proj_l[i], i, 0, numSurfBasis-1),

      df_proj_u : calcInnerProdList(surfVars, 1, ba_surf, df_face_u[d1][d2]),
      printf(fh, "  double df_proj_u[~a];~%", numSurfBasis),
      for i : 1 thru numSurfBasis do (
        printf(fh, "  df_proj_u[~a] += ~a;~%", i-1,
          float(expand(df_proj_u[i])))
        ),
      printf(fh, "~%"),
      kill(df_proj_u),
      lst_df_proj_u : makelist(df_proj_u[i], i, 0, numSurfBasis-1),

      surf1_l : calcInnerProdList(surfVars, 1, subst(dir1=-1, ba),
        doExpand(lst_df_proj_l, ba_surf)*doExpand(lst_D_proj1_l, ba_surf)),
      surf1_u : calcInnerProdList(surfVars, 1, subst(dir1=1, ba),
        doExpand(lst_df_proj_u, ba_surf)*doExpand(lst_D_proj1_u, ba_surf)),


      surfVars : delete(dir2, varsP),
      /* Black magic start */
      /* Generate surface basis. this produces the ndim-1 orthogonal basis with no dir dependence. */
      ba_surf : sqrt(2)*delete(0, fullratsimp(
          innerProd(varsP, 1, ba, subst([dir2^2=var2, var2=1/3, dir2=0], ba)))*ba),
      /* Black magic ends */
      numSurfBasis : length(ba_surf),

      if d1 = d2 then (
        lst_D_proj2_l : lst_D_proj1_l,
        lst_D_proj2_u : lst_D_proj1_u
        ) else (
        D_proj2_l : calcInnerProdList(surfVars, 1, ba_surf, D_face2_l[d1][d2]),
        printf(fh, "  double D_proj2_l[~a];~%", numSurfBasis),
        for i : 1 thru numSurfBasis do (
          printf(fh, "  D_proj2_l[~a] += ~a;~%", i-1,
            float(expand(D_proj2_l[i])))
          ),
        printf(fh, "~%"),
        kill(D_proj2_l),
        lst_D_proj2_l : makelist(D_proj2_l[i], i, 0, numSurfBasis-1),

        D_proj2_u : calcInnerProdList(surfVars, 1, ba_surf, D_face2_u[d1][d2]),
        printf(fh, "  double D_proj2_u[~a];~%", numSurfBasis),
        for i : 1 thru numSurfBasis do (
          printf(fh, "  D_proj2_u[~a] += ~a;~%", i-1,
            float(expand(D_proj2_u[i])))
          ),
        kill(D_proj2_u),
        printf(fh, "~%"),
        lst_D_proj2_u : makelist(D_proj2_u[i], i, 0, numSurfBasis-1)
        ),
      
      f_proj_l : calcInnerProdList(surfVars, 1, ba_surf, f_face_l[d1][d2]),
      printf(fh, "  double f_proj_l[~a];~%", numSurfBasis),
      for i : 1 thru numSurfBasis do (
        printf(fh, "  f_proj_l[~a] += ~a;~%", i-1,
          float(expand(f_proj_l[i])))
        ),
      printf(fh, "~%"),
      kill(f_proj_l),
      lst_f_proj_l : makelist(f_proj_l[i], i, 0, numSurfBasis-1),

      f_proj_u : calcInnerProdList(surfVars, 1, ba_surf, f_face_u[d1][d2]),
      printf(fh, "  double f_proj_u[~a];~%", numSurfBasis),
      for i : 1 thru numSurfBasis do (
        printf(fh, "  f_proj_u[~a] += ~a;~%", i-1,
          float(expand(f_proj_u[i])))
        ),
      printf(fh, "~%"),
      kill(f_proj_u),
      lst_f_proj_u : makelist(f_proj_u[i], i, 0, numSurfBasis-1),

      surf2_l : calcInnerProdList(surfVars, 1, subst(dir2=-1, diff(ba, dir1)),
        doExpand(lst_f_proj_l, ba_surf)*doExpand(lst_D_proj2_l, ba_surf)),
      surf2_u : calcInnerProdList(surfVars, 1, subst(dir2=1, diff(ba, dir1)),
        doExpand(lst_f_proj_u, ba_surf)*doExpand(lst_D_proj2_u, ba_surf)),
      
      kernel : (surf1_u - surf2_u - surf1_l + surf2_l)/2,

      for i : 1 thru numBasis do (
        printf(fh, "  out[~a] +=  J~a~a*(~a);~%", i-1, dir1, dir2,
          float(expand(kernel[i])))
        ),
      printf(fh, "}~%~%"),
      kill(kernel, surf1_l, surf1_u, surf2_l, surf2_u),
      close(fh)
      )
    )
  ) $




  
  /* qRec6u : calcRecovFaceGen("Ser", [x, y], dirs, 0, 0, polyOrder, 0, */
  /*   dg(dg(lstQclc), dg(lstQulc)), */
  /*   dg(dg(lstQccc), dg(lstQucc)), */
  /*   dg(dg(lstQcuc), dg(lstQuuc))), */
  /* qRec6l : calcRecovFaceGen("Ser", [x, y], dirs, 0, 0, polyOrder, 0, */
  /*   dg(dg(lstQllc), dg(lstQclc)), */
  /*   dg(dg(lstQlcc), dg(lstQccc)), */
  /*   dg(dg(lstQluc), dg(lstQcuc))), */
  /* qRec1 : calcRecov1CellGen("Ser", y, dirs, polyOrder, 0, */
  /*   dg(lstQclc), dg(lstQccc), dg(lstQcuc)), */
  /* surfu : integrate(integrate(subst(x=1, Dxye*ba) * diff(qRec6u, y), */
  /*     y, -1, 1), z, -1, 1), */
  /* surfl : integrate(integrate(subst(x=-1, Dxye*ba) * diff(qRec6l, y), */
  /*     y, -1, 1), z, -1, 1), */
  /* vol : calcInnerProdList(dirs, 1, diff(ba, x), Dxye*diff(qRec1, y)), */
  /* kernel : surfu - surfl - vol, */