/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
maxCdim_Ser : 2$

/* Tensor product basis. */
/* Note that Serendipity, p = 1, is equivalent to Tensor */
/* Thus no need to calculate p = 1 Tensor basis */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
maxCdim_Tensor : 0$

/* ...... END OF USER INPUTS........ */

bName        : ["ser","tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$

fname : sconcat("~/max-out/gkyl_fpo_vlasov_kernels.h") $
fh : openw(fname) $
printf(fh, "#pragma once~%") $
printf(fh, "#include <math.h>~%") $
printf(fh, "#include <gkyl_util.h>~%") $
printf(fh, "EXTERN_C_BEG~%~%") $

bName : "ser" $
dirs : [vx, vy, vz] $

for c : minCdim_Ser thru maxCdim_Ser do (
  minPolyOrderB : minPolyOrder[1],
  maxPolyOrderB : maxPolyOrder[1],
  if (c>1 and bName = "ser") then maxPolyOrderB : 1,

  for polyOrder : minPolyOrderB thru maxPolyOrderB do (
    printf(fh, sconcat("GKYL_CU_DH double fpo_vlasov_drag_vol_",c,"x3v_", bName, "_p", polyOrder, "(const double* w, const double* dx, const double* h, const double* f, double* GKYL_RESTRICT out);~%")),
    printf(fh, sconcat("GKYL_CU_DH double fpo_vlasov_diff_vol_",c,"x3v_", bName, "_p", polyOrder, "(const double* w, const double* dx, const double* g, const double* f, double* GKYL_RESTRICT out);~%")),
    for d1 : 1 thru 3 do (
      dir1 : dirs[d1],
      for d2 : 1 thru 3 do (
        dir2 : dirs[d2],
        printf(fh, sconcat("GKYL_CU_DH double fpo_vlasov_drag_surf", dir1, dir2, "_",c,"x3v_", bName, "_p", polyOrder, "(const double* w, const double* dx, const double* hl, const double* hc, const double* hu, const double* fl, const double* fc, const double* fu, double* GKYL_RESTRICT out);~%")),
        printf(fh, sconcat("GKYL_CU_DH double fpo_vlasov_diff_surf", dir1, dir2, "_",c,"x3v_", bName, "_p", polyOrder, "(const double* w, const double* dx, const double* g[], const double* f[], double* GKYL_RESTRICT out);~%"))
        )
      )
    )
)$
printf(fh, "~%") $

printf(fh, "EXTERN_C_END") $
close(fh) $
