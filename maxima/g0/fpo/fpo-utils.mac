/*
  Utility functions for FPO kernel generation, adapted from canonicalUtils
*/

load("modal-basis")$
load("nodal_operations/nodal_functions")$
load("out-scripts")$
load("recovery")$
load("utilities")$


/*   calcAndWrite_fUpwind(fh, pv, surfVars, bSurf, numSurf, fC_e, fR_e, basisFun, "R") */
calcAndWrite_fUpwind(fh, pv, pdim, polyOrder, surfVars, bSurf, fL_e, fR_e, basisFun, sideStr) := block(
  [],
  numSurf : length(bSurf),
  /* 
    Choose naming convention based on sideStr, specifies whether we are at a
    left- or right-side surface update on the center cell.
  */
  if (sideStr = "L") then (
    fLNm : eval_string("fL_r"),
    fRNm : eval_string("fC_l")
  )
  else (
    fLNm : eval_string("fC_r"),
    fRNm : eval_string("fR_l")
  ),
  
  fUpNm : eval_string(sconcat("fUp_",sideStr)),
  sgn_drag_coeff_surfNm : eval_string(sconcat("sgn_drag_coeff_surf_", sideStr)),
  sgn_drag_coeff_UpNm : eval_string(sconcat("sgn_drag_coeff_Up_", sideStr)),

  printf(fh, "  double ~a[~a] = {0.0}; ~%", fUpNm, numSurf),
  /* Evaluate f in left/right cell at right/left boundary and project onto surface basis */
  fSurfL_r_c : calcInnerProdList(surfVars, 1, bSurf, subst(pv=1, fL_e)),
  fSurfR_l_c : calcInnerProdList(surfVars, 1, bSurf, subst(pv=-1, fR_e)),
  fSurfL_r_e : doExpand1(fLNm, bSurf),
  fSurfR_l_e : doExpand1(fRNm, bSurf),

  /* 
    If sign(drag_coeff_surf) is constant along cell boundary, i.e. const_sgn_drag_coeff = 1:
    1. If sign(drag_coeff_surf) = 1 -> f^-
    2. If sign(drag_coeff_surf) = -1 -> f^+
  */
  printf(fh, "  if (const_sgn_drag_coeff_~a[0] == 1) { ~%", sideStr),
  printf(fh, "    if (sgn_drag_coeff_surf_~a[0] == 1.0) { ~%", sideStr),
  writeCExprs1(fUpNm, fSurfL_r_c),
  printf(fh, "    } else { ~%"),
  writeCExprs1(fUpNm, fSurfR_l_c),
  printf(fh, "   } ~%"),

  /* 
    Otherwise, use penalty flux to determine upwinded f
    1/2 * (f^+ + f^-) - 1/2 * sgn_drag_coeff_surf * (f^+ - f^-)
  */
  printf(fh, "  } else { ~%"),
  printf(fh, "  double ~a[~a] = {0.0}; ~%", fLNm, numSurf), 
  printf(fh, "  double ~a[~a] = {0.0}; ~%", fRNm, numSurf), 
  printf(fh, "  double sgn_drag_coeff_Up_~a[~a] = {0.0}; ~%", sideStr, numSurf),
  printf(fh, "  ~a_~ax_p~a_upwind_quad_to_modal(~a, ~a); ~%", basisFun, pdim, polyOrder, sgn_drag_coeff_surfNm, sgn_drag_coeff_UpNm),
  sgn_drag_coeffUp_e : doExpand1(sgn_drag_coeff_UpNm, bSurf),
  printf(fh, "~%"),
  writeCExprs1(fLNm, fSurfL_r_c),
  printf(fh, "~%"),
  writeCExprs1(fRNm, fSurfR_l_c),
  printf(fh, "~%"),
  flush_output(fh),
  fUp_c : calcInnerProdList(surfVars, 1, bSurf, 
    0.5*(fSurfL_r_e + fSurfR_l_e) - 0.5*sgn_drag_coeffUp_e*(fSurfR_l_e - fSurfL_r_e)),
  writeCExprs1(fUpNm, fUp_c),
  printf(fh, "~%"),
  flush_output(fh),
  printf(fh, "  } ~%")
)$


/* Calculate sign of drag_coeff_surf and const_sgn_drag_coeff */
calcAndWrite_sgn_drag_coeff(fh,surfVars,surfNodes,alphaSurf_e) := block(
  [alphaOrd_n],
  numNodes : length(surfNodes),
  /* Determine sign(alpha_surf) for upwinding at each surface quadrature node. */

  /* Evaluate alpha at ordinates.
     Note: alphaSurf_e is already a surface expansion. */
  alphaOrd_n : gcfac(float(evAtNodes(alphaSurf_e,surfNodes,surfVars))),
  
  printf(fh, "  int const_sgn_alpha_surf = 1;  ~%"),
  printf(fh, "  ~%"),
  /* Write out first quadrature point 
     We are going to compare the signs of the quadrature points to see if the sign is constant */
  printf(fh, "  if (~a > 0.) ~%", gcfac(float(expand(fullratsimp(alphaOrd_n[1]))))),
  printf(fh, "    sgn_alpha_surf[0] = 1.0; ~%"),
  printf(fh, "  else  ~%"),
  printf(fh, "    sgn_alpha_surf[0] = -1.0; ~%"),
  printf(fh, "  ~%"),
  /* Write out the other quadrature point evaluations and compare the signs point by point */
  for i : 2 thru numNodes do (
    printf(fh, "  if (~a > 0.) ~%", gcfac(float(expand(fullratsimp(alphaOrd_n[i]))))),
    printf(fh, "    sgn_alpha_surf[~a] = 1.0; ~%", i-1),
    printf(fh, "  else  ~%"),
    printf(fh, "    sgn_alpha_surf[~a] = -1.0; ~%", i-1),
    printf(fh, "  ~%"),
    printf(fh, "  if (sgn_alpha_surf[~a] == sgn_alpha_surf[~a]) ~%", i-1, i-2),
    printf(fh, "    const_sgn_alpha_surf = const_sgn_alpha_surf ? 1 : 0; ~%"),
    printf(fh, "  else  ~%"),
    printf(fh, "    const_sgn_alpha_surf = 0; ~%"),
    printf(fh, "  ~%")
  )
)$


