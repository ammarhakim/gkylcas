/* This script generates the kernels to calculate the drag coefficient 
   from an input potential.
   a = 2 * Gamma * grad(H)
*/
load("modal-basis")$
load("out-scripts")$
load(stringproc)$
load("recovery")$

calcFPODragCoeff(dir, fh, funcNm, cdim, vdim, basisFunc, polyOrder) := block(
  [varsC, bC, varsP, bP, NC, pv, lst_H_l, lst_H_c, lst_H_r, H_rec, drag_coeff],

  /* Clear variables for safety, then load basis */
  kill(varsC, bC, varsP, bP),
  [varsC, bC, varsP, bP] : loadPhaseBasis(basisFunc, cdim, vdim, polyOrder),
  
  /* Number of basis monomials */
  NC : length(bP),
  
  /* Variable to perform recovery in */
  recovDir : dir + cdim,
  pv : varsP[recovDir],
  display(pv),

  printf(fh, "GKYL_CU_DH void ~a~a_~ax~av_~a_p~a(const double *dxv, double gamma, const double *H_l, const double *H_c, const double *H_r, double *drag_coeff) {~%", funcNm, pv, cdim, vdim, basisFunc, polyOrder),
  printf(fh, "  // dxv[NDIM]: Cell spacing. ~%"),
  printf(fh, "  // H_l/c/r:   Input potential in left/center/right cells in recovery direction.~%  "),
  printf(fh, "~%"),

  printf(fh, "  const double dv1 = 2.0/dxv[~a]; ~%", dir-1+cdim),

  printf(fh, "  double *drag_coeff_x = &drag_coeff[~a]; ~%", 0*NC),
  printf(fh, "  double *drag_coeff_y = &drag_coeff[~a]; ~%", 1*NC),
  printf(fh, "  double *drag_coeff_z = &drag_coeff[~a]; ~%", 2*NC),
 
  /* Expansions of H in left, center, and right cells */
  lst_H_l : makelist(H_l[i], i, 0, NC-1),
  lst_H_c : makelist(H_c[i], i, 0, NC-1),
  lst_H_r : makelist(H_r[i], i, 0, NC-1),
  
  /* 1-Cell recovery of  H */
  H_rec : calcRecov1CellGen(basisFunc, pv, varsP, polyOrder, 0, 
      dg(lst_H_l), dg(lst_H_c), dg(lst_H_r)),
  
  /* a = dH/dvi, project derivative */ 
  a_c : calcInnerProdList(varsP, 1, bP, diff(H_rec, pv)),
  if (dir = 1) then (
    writeCExprs1(drag_coeff_x, 2.0*gamma*dv1*a_c)
  )
  elseif (dir = 2) then (
    writeCExprs1(drag_coeff_y, 2.0*gamma*dv1*a_c)
  )
  elseif (dir = 3) then (
    writeCExprs1(drag_coeff_z, 2.0*gamma*dv1*a_c)
  ),

  printf(fh, "} ~%"),
  printf(fh, "~%")
)$
