/* This script generates the kernels to calculate the drag coefficient 
   from an input potential.
   a = 2 * Gamma * grad(H)
*/
load("modal-basis")$
load("out-scripts")$
load(stringproc)$
load("recovery")$

calcFPODragCoeff(dir, fh, funcNm, cdim, basisFunc, polyOrder) := block(
  [varsC, bC, NC, cv, lst_H_l, lst_H_c, lst_H_r, H_rec, drag_coeff],

  /* Clear variables for safety, then load basis */
  kill(varsC, bC),
  [varsC, bC] : loadBasis(basisFunc, cdim, polyOrder),
  
  /* Number of basis monomials */
  NC : length(bC),
  
  /* Variable to perform recovery in */
  cv : varsC[dir],

  printf(fh, "GKYL_CU_DH void ~av~a_~av_~a_p~a(const double *dxv, const double *H_l, const double *H_c, const double *H_r, double *drag_coeff) {~%", funcNm, cv, cdim, basisFunc, polyOrder),
  printf(fh, "  // dxv[NDIM]: Cell spacing. ~%"),
  printf(fh, "  // H_l/c/r:   Input potential in left/center/right cells.~%  "),
  printf(fh, "~%"),

  printf(fh, "  const double dv1 = 2.0/dxv[~a]; ~%", dir-1),

  /* Expansions of H in left, center, and right cells */
  lst_H_l : makelist(H_l[i], i, 0, NC-1),
  lst_H_c : makelist(H_c[i], i, 0, NC-1),
  lst_H_r : makelist(H_r[i], i, 0, NC-1),
  
  /* 1-Cell recovery of  H */
  H_rec : calcRecov1CellGen(basisFunc, cv, varsC, polyOrder, 0, 
      dg(lst_H_l), dg(lst_H_c), dg(lst_H_r)),
  
  /* a = dH/dvi, project derivative */ 
  a_c : calcInnerProdList(varsC, 1, bC, diff(H_rec, cv)),
  writeCExprs1(drag_coeff, dv1*a_c),
  printf(fh, "} ~%"),
  printf(fh, "~%")
)$
