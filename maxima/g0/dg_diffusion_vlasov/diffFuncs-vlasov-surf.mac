load("modal-basis")$
load("recovery")$
load("out-scripts")$
fpprec : 24$

genDGdiffVlasovKernelSurf(fh, funcNm, cdim, vdim, basisType, polyOrder, dir, diffOrder) := block(
  [constCoeff,dim,vars,basis,varsC,basisC,vSub,numBasis,ql_c,qc_c,qr_c,coeffType,coeff_e,coeff_c,qRec,kernel,i],

  printf(fh, "#include <gkyl_dg_diffusion_vlasov_kernels.h>~%~%"),

  diffCoeffType : [true, false],
  /* Let's not generate inhomogeneous hyperdiff for now. */
  if (diffOrder>2) then (diffCoeffType : [true]),

  for constCoeff in diffCoeffType do (
      
    dim : cdim+vdim,
  
    bType : basisType,
    [varsC, basisC, vars, basis] : loadPhaseBasis(basisType, cdim, vdim, polyOrder),
    if polyOrder=1 then bType : "hyb",  /* Force p=1 to mean hybrid. */
    numBasis : length(basis),
  
    ql_c : makelist(ql[i-1], i, 1, numBasis),
    qc_c : makelist(qc[i-1], i, 1, numBasis),
    qr_c : makelist(qr[i-1], i, 1, numBasis),
  
    if constCoeff then (
      coeffType : "const",
      coeff_e : coeff[dir-1]
    ) else (
      coeffType : "var",
      /* Here we assume diffusion coefficient only depends on position space,
         but it coule be easily changed to vary with velocity space too. */
      if vdim=0 then basisC : basis,
      numBasisC : length(basisC),
      coeff_c : makelist(coeff[(dir-1)*numBasisC+i-1],i,1,numBasisC),
      coeff_e : doExpand(coeff_c, basisC)
    ),
  
    qRec : calcRecov1CellGen(bType, vars[dir], vars, polyOrder, diffOrder-1, dg(ql_c), dg(qc_c), dg(qr_c)),
  
    /* For higher order diffusion and spatially varying diffusion coefficient, it
       is not clear where the coefficient should appear, e.g. d_xxx( D d_x(f) )
       or d_xx( D d_xx(f)); different models appear in the literature. Since we don't
       a good physical justfication for either we just arbitrarily pick one. */
    kernel : calcInnerProdList(vars, 1, basis,
      ((-1)^(diffOrder/2+1))*diff(coeff_e*diff(qRec, vars[dir], diffOrder/2), vars[dir], diffOrder/2)),
    
    printf(fh, "GKYL_CU_DH double ~a_~acoeff(const double *w, const double *dx, const double *coeff, const double *ql, const double *qc, const double *qr, double* GKYL_RESTRICT out) ~%", funcNm, coeffType),
    printf(fh, "{~%"),
    printf(fh, "  // w[NDIM]: Cell-center coordinate.~%"),
    printf(fh, "  // dxv[NDIM]: Cell length.~%"),
    printf(fh, "  // coeff: Diffusion coefficient.~%"),
    printf(fh, "  // ql: Input field in the left cell.~%"),
    printf(fh, "  // qc: Input field in the center cell.~%"),
    printf(fh, "  // qr: Input field in the right cell.~%"),
    printf(fh, "  // out: Incremented output.~%~%"),

    printf(fh, "  const double Jfac = pow(2./dx[~a],~a.);~%~%", dir-1, diffOrder),
  
    writeCIncrExprsNoExpand(fullratsimp(Jfac*kernel)),
    printf(fh, "~%"),
  
    printf(fh, "  return 0.;~%~%"),
    printf(fh, "}~%~%")
  )
)$
