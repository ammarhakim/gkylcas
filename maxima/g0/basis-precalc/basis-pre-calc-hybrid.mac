/*
   Generate hybrid basis that are p=1, and also have the product of v_i^2 times
   the p=1 basis.
*/

load("basis-precalc/basis-pre-calc");

vars : [x,y,z,vx,vy,vz]$

makevarsC(cdim) := makelist(vars[i],i,cdim)$
makevarsV(vdim) := makelist(vars[3+i],i,vdim)$
makevarsP(cdim,vdim) := append(makelist(vars[i],i,cdim), makelist(vars[i],i,4,3+vdim))$

/* Compute and write hybrid basis to file */
writeHybBasisToFile(cdim, vdim, fname) := block(
  [varsC, varsV, varsP, basisC, basisP, bP, d],

  varsC : makevarsC(cdim),
  varsV : makevarsV(vdim),
  varsP : makevarsP(cdim,vdim),

  basisC : [ gsOrthoNorm(varsC, makeSerendipBasis(varsC, 1)) ],

  bP : makeSerendipBasis(varsP, 1),
  for d : 1 thru vdim do (
    bP : append(bP, varsV[d]^2*makeSerendipBasis(delete(varsV[d],varsP),1))
  ),
  basisP : [ gsOrthoNorm(varsP, bP) ],
  save(fname, varsC, varsP, basisC, basisP)
)$

/* Compute and write GK hybrid basis to file */
writeGkHybBasisToFile(cdim, vdim, fname) := block([varsC, varsP, basisC, basisP],
  varsC : makevarsC(cdim),
  varsP : makevarsP(cdim,vdim),
  basisC : [ gsOrthoNorm(varsC, makeSerendipBasis(varsC, 1)) ],
  basisP : [ gsOrthoNorm(varsP,
                         append(makeSerendipBasis(varsP, 1), vx^2*makeSerendipBasis(delete(vx, varsP), 1) )
                        )
           ],
  save(fname, varsC, varsP, basisC, basisP)
)$

/* Compute list of monomials */
calcHybMonoList(cdim, vdim) := block(
  [varsC, varsP, basisC, basisP],
  varsC : makevarsC(cdim),
  varsV : makevarsV(vdim),
  varsP : makevarsP(cdim,vdim),
  bP : makeSerendipBasis(varsP, 1),
  for d : 1 thru vdim do (
    bP : append(bP, varsV[d]^2*makeSerendipBasis(delete(varsV[d],varsP),1))
  ),
  return (bP)
)$  

calcGkHybMonoList(cdim, vdim) := block(
  [varsC, varsP, basisC, basisP],
  varsC : makevarsC(cdim),
  varsP : makevarsP(cdim,vdim),
  return (append( makeSerendipBasis(varsP, 1),
                  vx^2*makeSerendipBasis(delete(vx, varsP), 1) ))
)$  

/* Generate basis files. */
for c : 1 thru 3 do (
  /* Vlasov hybrid basis. */
  for v : c thru 3 do (
    writeHybBasisToFile(c, v, sconcat("~/max-out/basisHybrid",c,"x",v,"v.lisp"))
  ),

  /* GK hybrid basis. */
  if c=1 then ( writeGkHybBasisToFile(c, 1, "~/max-out/basisGkHybrid1x1v.lisp") ),
  writeGkHybBasisToFile(c, 2, sconcat("~/max-out/basisGkHybrid",c,"x2v.lisp"))
)$

/* MF 2022/07/03: I believe these are used by GINAC, but additional manual
   steps are still needed. I'd prefer that we get rid of the GINAC stuff for
   now and do everything in Maxima. */
fh : openw("~/max-out/mono-list")$

for c : 1 thru 3 do (
  for v : c thru 3 do (
    printf(fh, "~a", calcHybMonoList(c, v))
  ),
  if c=1 then (  printf(fh, "~a", calcGkHybMonoList(1, 1)) ),
  printf(fh, "~a", calcGkHybMonoList(c, 2))
)$

close(fh)$



