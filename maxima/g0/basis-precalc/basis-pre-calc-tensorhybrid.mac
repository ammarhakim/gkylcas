/*
   Generate hybrid basis that are p=1 in configuration space,
   and tensor p=2 in velocity space.
*/

load("basis-precalc/basis-pre-calc");

makevarsC(cdim) := block([vars],
  vars : [x,y,z,vx,vy,vz],
  return(makelist(vars[i],i,cdim))
)$
makevarsV(vdim) := block([vars],
  vars : [x,y,z,vx,vy,vz],
  makelist(vars[3+i],i,vdim)
)$
makevarsP(cdim,vdim) := block([vars],
  vars : [x,y,z,vx,vy,vz],
  append(makelist(vars[i],i,cdim), makelist(vars[i],i,4,3+vdim))
)$

/* Compute and write hybrid basis to file */
writeTensorHybBasisToFile(cdim, vdim, fname) := block(
  [varsC, varsV, varsP, basisC, basisP, bP, d, basis3x3vp2],

  varsC : makevarsC(cdim),
  varsV : makevarsV(vdim),
  varsP : makevarsP(cdim,vdim),

  bC : makeTensorBasis(varsC, 1),
  bV : makeTensorBasis(varsV, 2),
  bPs : listify(cartesian_product(setify(bC),setify(bV))),
  bP : makelist(prod(bPs[i][j],j,1,length(bPs[i])),i,1,length(bPs)),
  /* The Cartesian product orders thing is a slightly unconventional way.
     Let's order it by following the order in 6D p2. */
  basis3x3vp2 : makeTensorBasis(makevarsP(3,3), 2),
  placeMonoBefore(m1,m2) := block([m1idx,m2idx],
    m1idx : sublist_indices(basis3x3vp2,lambda([m], m=m1))[1],
    m2idx : sublist_indices(basis3x3vp2,lambda([m], m=m2))[1],
    return (m1idx < m2idx)
  ),
  bP : sort(bP, 'placeMonoBefore),

  basisC : [ gsOrthoNorm(varsC, bC) ],
  basisP : [ gsOrthoNorm(varsP, bP) ],
  save(fname, varsC, varsP, basisC, basisP)
)$

/* Compute list of monomials */
calcTensorHybMonoList(cdim, vdim) := block(
  [varsC, varsP, basisC, basisP],
  varsC : makevarsC(cdim),
  varsV : makevarsV(vdim),
  varsP : makevarsP(cdim,vdim),

  bC : makeTensorBasis(varsC, 1),
  bV : makeTensorBasis(varsV, 2),
  bPs : listify(cartesian_product(setify(bC),setify(bV))),
  bP : makelist(prod(bPs[i][j],j,1,length(bPs[i])),i,1,length(bPs)),
  /* The Cartesian product orders thing is a slightly unconventional way.
     Let's order it by following the order in 6D p2. */
  basis3x3vp2 : makeTensorBasis(makevarsP(3,3), 2),
  placeMonoBefore(m1,m2) := block([m1idx,m2idx],
    m1idx : sublist_indices(basis3x3vp2,lambda([m], m=m1))[1],
    m2idx : sublist_indices(basis3x3vp2,lambda([m], m=m2))[1],
    return (m1idx < m2idx)
  ),
  bP : sort(bP, 'placeMonoBefore),

  return (bP)
)$  
/* Generate hybrid basis files. Every combination to account for
   surface evaluations, GK and sims that are kinetic in 1v only. */
for c : 1 thru 3 do (
  for v : 1 thru 3 do (
    writeTensorHybBasisToFile(c, v, sconcat("~/max-out/basisTensorHybrid",c,"x",v,"v.lisp"))
  )
)$

/* MF 2022/07/03: I believe these are used by GINAC, but additional manual
   steps are still needed. I'd prefer that we get rid of the GINAC stuff for
   now and do everything in Maxima. */
fh : openw("~/max-out/mono-list")$
for c : 1 thru 3 do (
  for v : 1 thru 3 do (
    printf(fh, "~a", calcTensorHybMonoList(c, v))
  )
)$
close(fh)$
