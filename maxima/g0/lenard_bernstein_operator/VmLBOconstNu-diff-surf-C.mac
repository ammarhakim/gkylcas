load("modal-basis")$

load("out-scripts");

load(stringproc)$

load("nodalOperations/nodalFunctions")$

load("recovery")$

fpprec : 24$

/* This script generates the kernels for the surface term
   contribution from Lenard Bernstein operator using
   two integrations by parts for the diffusive term and
   a constant collisionality nu. */

varsV : [vx, vy, vz]$

cvars : [x, y, z]$

vvars : [vx, vy, vz]$

vidx(cdim,vdim)  := makelist(i,i,cdim+1,cdim+vdim)$

vidx1(cdim,vdim) := makelist(i,i,cdim,cdim+vdim-1)$

load ("scifac")$

writeCIncrExprs1s(lhs, rhs) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then printf(fh, "    ~a += ~a; ~%", lhs[i-1], expr[i])
  )
)$

calcConstNuDiffUpdateInDir(dir, fh, funcNm, cdim, vdim, basisFun, polyOrder, numFluxOp, isNonuniform) := block(
  [modNm,vid,vid1,vv,surfVars,bP,bC,NP,NC,bPp,hOrder,h_e,hsol],
  
  if (basisFun="ser") then basisFun:"Ser",
  if (basisFun="tensor") then basisFun:"Tensor",
  kill(varsC, varsP, basisC, basisP),
  /* Load basis of dimensionality requested. */
  load(sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v")),
  pDim : cdim+vdim,
  /* Variables. */
  vid  : vidx(cdim,vdim),
  vid1 : vidx1(cdim,vdim),
  vv   : varsV[dir],
  surfVars : delete(vv,varsP),
  /* Polynomial basis and its derivatives. */
  bP  : basisP[polyOrder],  NP : length(bP),
  bC  : basisC[polyOrder],  NC : length(bC),
  bPp : diff(bP,vv),
  /* Construct the recovery polynomial */
  h_e : calcRecov1CellGen(basisFun, vv, varsP, polyOrder, 1, dg(makelist(fl[i-1],i,1,NP)), dg(makelist(fc[i-1],i,1,NP)), dg(makelist(fr[i-1],i,1,NP))),
  if (basisFun="Ser") then basisFun:"ser",
  if (basisFun="Tensor") then basisFun:"tensor",
  /*............. RECOVERY DONE ..............................*/
    
  printf(fh, "GKYL_CU_DH void ~a(const double *w, const double *dxv, const double *nuSum, const double *nuUSum, const double *nuVtSqSum, const double *fl, const double *fc, const double *fr, double* GKYL_RESTRICT out) ~%{ ~%", funcNm),
  printf(fh, "  // w[~a]:         cell-center coordinates. ~%", cdim+vdim),
  printf(fh, "  // dxv[~a]:       cell spacing. ~%", cdim+vdim),
  printf(fh, "  // nuSum:         collisionalities added (self and cross species collisionalities). ~%"),
  printf(fh, "  // nuUSum[~a]:    sum of bulk velocities times their respective collisionalities. ~%", vdim*NC),
  printf(fh, "  // nuVtSqSum[~a]: sum of thermal speeds squared time their respective collisionalities. ~%", NC),
  printf(fh, "  // fl/fc/fr:      distribution function in cells ~%"),
  printf(fh, "  // out:           incremented distribution function in cell ~%"),
  printf(fh, "  double rdvSq4 = 4.0/(dxv[~a]*dxv[~a]); ~%", vid1[dir], vid1[dir]),
  printf(fh, "  double diff_incr[~a] = {0.0}; ~%", length(bP)),
  printf(fh, "~%"),
    
  /* First compute the contribution coming from the second
     differentiation by parts to left and right cells. */
  nuVtSqSum_e : doExpand1(nuVtSqSum,bC),
 
  diff_incr_e : calcInnerProdList(varsP, 1, bP, nuVtSqSum_e*diff(h_e, vv, 2)),
  tempVars : writeCExprs1(diff_incr, diff_incr_e),
  printf(fh, "~%"),
  
  writeCIncrExprs1(out, rdvSq4*makelist(diff_incr[i-1],i,1,NP)), 
  printf(fh, "} ~%")
);


