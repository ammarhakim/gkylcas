load("modal-basis")$
load("out-scripts");
load("utilities")$
load(stringproc)$
fpprec : 24$

/* This script generates the kernels for the diff volume
   kernel of the Lenard Bernstein operator for the
   Vlasov equation. It only computes the CFL frequency. */

vidx(cdim,vdim) := makelist(i,i,cdim,cdim+vdim-1)$
varsVAll : [vx, vy, vz]$
rdv2     : [rdvx2, rdvy2, rdvz2]$
rdvSq4   : [rdvxSq4, rdvySq4, rdvzSq4]$

calcVmLBODiffVolUpdater(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,NP,NC,pOrderV,zr,vid,dir,f_e,nuVtSqSum_e,
   facDiff_c,facDiff_NoZero,polyFact,incrDiff,vdir,expr,i],

  printf(fh, "#include <gkyl_lbo_vlasov_kernels.h> ~%"),

  /* Load basis of dimensionality requested. */
  [varsC,bC,varsP,bP] : loadPhaseBasis(basisFun, cdim, vdim, polyOrder),

  /* Number of basis monomials. */
  NP : length(bP),  NC : length(bC),

  /* Identify polyOrder in velocity space as p=2 for p=1 since we force p=1 to
     mean hybrid basis. */
  pOrderV : polyOrder,
  if polyOrder=1 then ( pOrderV : 2 ),

  /* Specify a point to evaluate alpha at for use in computing CFL */
  /* Here we choose to evaluate things in the middle of the cell, where
     coordinates = 0. */
  zr : makelist(varsP[d]=0, d, 1, length(varsP)),

  printf(fh, "GKYL_CU_DH double ~a(const double *w, const double *dxv, const double *nuSum, const double *nuPrimMomsSum, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm),
  printf(fh, "  // w[~a]: Cell-center coordinates. ~%", cdim+vdim),
  printf(fh, "  // dxv[~a]: Cell spacing. ~%", cdim+vdim),
  printf(fh, "  // nuSum: collisionalities added (self and cross species collisionalities). ~%"),
  printf(fh, "  // nuPrimMomsSum: sum of bulk velocities and thermal speeds squared times their respective collisionalities. ~%"),
  printf(fh, "  // f: Input distribution function.~%"),
  printf(fh, "  // out: Incremented output ~%"),
  vid : vidx(cdim,vdim),

  /* Create a pointer to nuVtSqSum. */
  printf(fh, "  const double *nuVtSqSum = &nuPrimMomsSum[~a];~%", vdim*NC),
  printf(fh, "~%"),

  for dir : 1 thru vdim do (
    printf(fh, "  const double rd~aSq4 = 4.0/(dxv[~a]*dxv[~a]); ~%", varsVAll[dir], vid[dir], vid[dir])
  ),
  printf(fh, "~%"),

  /* Expand distribution function f in phase basis. */
  f_e : doExpand1(f, bP),

  /* Expand flow speed sum(nu*vtSq) in configuration basis. */
  nuVtSqSum_e : doExpand1(nuVtSqSum, bC),

  /* facDiff = < psi, nuVtSqSum >. */
  facDiff_c : calcInnerProdList(varsC, 1, bC, nuVtSqSum_e),

  if polyOrder>1 then (
    /* facDiff = nuVtSqSum. Only used in increment if polyOrder>1. */
    printf(fh, "  double facDiff[~a]; ~%", NC),
    /* Write out the components of facDiff's expansion. */
    printf(fh, "  // Expand nuVtSqSum in phase basis.~%"),
    expr : gcfac(float(expand(radcan(facDiff_c)))),
    for i : 1 thru NC do (
      if expr[i] # 0.0 then printf(fh, "  ~a = ~a; ~%", facDiff[i-1], expr[i])
    ),
    printf(fh, "~%"),

    /* Zero out components of alpha which are empty. */
    facDiff_NoZero : doMakeExprLst(facDiff_c, facDiff)
  ) else (
    /* Zero out components of alpha which are empty. */
    facDiff_NoZero : doMakeExprLst(facDiff_c, nuVtSqSum)
  ),

  facDiff_NoZero_e : doExpand(facDiff_NoZero, bC),
  /* Evaluate facDiff at zr to approximate max(abs(facDiff))/(dv_i/(2*(p+1)))^2 */
  polyFact : (pOrderV+1)^2,

  incrDiff : 0,
  facDiff_mid : makelist(0, i, 1, vdim),
  for vdir : 1 thru vdim do (
     facDiff_mid[vdir] : rdvSq4[vdir]*gcfac(float(expand(subst(zr,polyFact*facDiff_NoZero_e))))
  ),

  if vdim = 1 then (
    printf(fh, "  return fabs(~a); ~%", facDiff_mid[1])
  ) elseif vdim = 2 then (
    printf(fh, "  return fabs(~a)+fabs(~a); ~%", facDiff_mid[1], facDiff_mid[2])
  ) else (
    printf(fh, "  return fabs(~a)+fabs(~a)+fabs(~a); ~%", facDiff_mid[1], facDiff_mid[2], facDiff_mid[3])
  ),

  printf(fh, "~%"),

  printf(fh, "} ~%")

);


