load("modal-basis")$
load("out-scripts");
load(stringproc)$

fpprec : 24$

/* This script generates the kernels for the volume term
   diffusion contribution from Lenard Bernstein operator to the
   Vlasov equation. */

cidx(cdim)      := makelist(i,i,0,cdim-1)$
vidx(cdim,vdim) := makelist(i,i,cdim,cdim+vdim-1)$
cvars  : [x, y, z]$
varsV  : [vx, vy, vz]$
rdv2   : [rdvx2, rdvy2, rdvz2]$
rdvSq4 : [rdvxSq4, rdvySq4, rdvzSq4]$

/* Helper functions for expanding (in basis functions) a quantity that should be sparse.  */
/* For example, alpha, the phase space flow only depends on a few phase space coordinates. */
doMakeExprLst(vals, S)  := makelist(if vals[i] # 0 then S[a0+i-1] else 0, i, 1, length(vals))$
doExpandLst(lst, basis) := sum(lst[i]*basis[i], i, 1, length(basis))$

calcVmLBODiffVolUpdater(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block([],
  printf(fh, "#include <gkyl_lbo_vlasov_kernels.h> ~%"),

  kill(varsC, varsP, basisC, basisP),
  /* Load basis of dimensionality requested. */
  if (basisFun="ser") then basisFun:"Ser",
  if (basisFun="tensor") then basisFun:"Tensor",
  modNm : sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v"),
  load(modNm),

  /* Polynomial basis and its derivatives. */
  bP : basisP[polyOrder],
  bC : basisC[polyOrder],
  NP : length(bP),
  NC : length(bC),

  /* Specify a point to evaluate alpha at for use in computing CFL */
  /* Here we choose to evaluate things in the middle of the cell, where
     coordinates = 0. */
  zr : makelist(varsP[d]=0, d, 1, length(varsP)),

  printf(fh, "GKYL_CU_DH double ~a(const double *w, const double *dxv, const double *nuSum, const double *nuUSum, const double *nuVtSqSum, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm),
  printf(fh, "  // w[~a]:      Cell-center coordinates. ~%", cdim+vdim),
  printf(fh, "  // dxv[~a]:    Cell spacing. ~%", cdim+vdim),
  printf(fh, "  // nuSum:     collisionalities added (self and cross species collisionalities). ~%"),
  printf(fh, "  // nuUSum:    sum of bulk velocities times their respective collisionalities. ~%"),
  printf(fh, "  // nuVtSqSum: sum of thermal speeds squared time their respective collisionalities. ~%"),
  printf(fh, "  // f:         Input distribution function.~%"),
  printf(fh, "  // out:       Incremented output ~%"),
  cid : cidx(cdim),
  vid : vidx(cdim,vdim),

  for dir : 1 thru vdim do (
      printf(fh, "  const double rd~aSq4 = 4.0/(dxv[~a]*dxv[~a]); ~%", varsV[dir], vid[dir], vid[dir])
  ),
  printf(fh, "~%"),

  /* Expand distribution function f in phase basis.            */
  f_e : doExpand1(f, bP),

  /* Expand flow speed sum(nu*u) and sum(nu*vtSq) in configuration basis. */
  nuSum_e     : doExpand1(nuSum, bC),
  nuUSum_e    : doExpand1(nuUSum, bC),
  nuVtSqSum_e : doExpand1(nuVtSqSum, bC),

  /* To allow for multiple components change the cofficient indices in u. */
  nuUSum_e : psubst(makelist(nuUSum[i]=nuUSum[a0+i],i,0,NC-1),nuUSum_e),

  /* facDiff = < psi, nuVtSqSum >. */
  facDiff_c : calcInnerProdList(varsC, 1, bC, nuVtSqSum_e),

  if polyOrder>1 then (
    /* facDiff = nuVtSqSum. Only used in increment if polyOrder>1. */
    printf(fh, "  double facDiff[~a]; ~%", NC),
    /* Write out the components of facDiff's expansion. */
    printf(fh, "  // Expand nuVtSqSum in phase basis.~%"),
    expr : gcfac(float(expand(radcan(facDiff_c)))),
    for i : 1 thru NC do (
      if expr[i] # 0.0 then printf(fh, "  ~a = ~a; ~%", facDiff[i-1], expr[i])
    ),
    printf(fh, "~%"),

    /* Zero out components of alpha which are empty. */
    facDiff_NoZero : doMakeExprLst(facDiff_c, facDiff)
  ) else (
    /* Zero out components of alpha which are empty. */
    facDiff_NoZero : doMakeExprLst(facDiff_c, nuVtSqSum)
  ),

  facDiff_NoZero_e : doExpandLst(facDiff_NoZero, bC),
  /* Evaluate facDiff at zr to approximate max(abs(facDiff))/dv_i */
  polyFact : ((polyOrder+1)^2)/(2*polyOrder+1),

  incrDiff : 0,
  facDiff_mid : makelist(0, i, 1, vdim),

  for vdir : 1 thru vdim do (
     facDiff_mid[vdir] : rdvSq4[vdir]*subst(a0=0,gcfac(float(expand(subst(zr,polyFact*facDiff_NoZero_e)))))
  ),

  if vdim = 1 then (
    printf(fh, "  return fabs(~a); ~%", facDiff_mid[1])
  ) elseif vdim = 2 then (
    printf(fh, "  return fabs(~a)+fabs(~a); ~%", facDiff_mid[1], facDiff_mid[2])
  ) else (
    printf(fh, "  return fabs(~a)+fabs(~a)+fabs(~a); ~%", facDiff_mid[1], facDiff_mid[2], facDiff_mid[3])
  ),

  printf(fh, "~%"),

  printf(fh, "} ~%")

);


