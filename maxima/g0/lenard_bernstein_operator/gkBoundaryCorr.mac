/* Generate kernels to that evaluate f and v*f at the boundaries
   and integrate it (the integral is global).
   This is used to correct u and vtSq in the primMoments updater. */

/* IMPORTANT: p=1 code below assumes vMin is negative and vMax positive. */
load("modal-basis");
load("out-scripts");
load(stringproc)$
fpprec : 24$

varsVAll : [vpar, mu]$
varsVCartAll : [vx, vy, vz]$

calcBoundaryIntegral(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [i,e,varsC,bC,varsP,bP,vSub,NP,NC,vv,surfVars,dv,fbIn_lower_e,fbIn_upper_e,
   mBlo_e,mBup_e,fBlo_c,fBup_c,expr,expr_v,param,param_v],
    
  /* Load basis of dimensionality requested. */
  [varsC,bC,varsP,bP,vSub] : loadGkBasis(basisFun, cdim, vdim, polyOrder),
  NC : length(bC),  NP : length(bP),
        
  printf(fh, "GKYL_CU_DH void ~a(const int *idx, enum gkyl_vel_edge edge, const double *vBoundary, const double *dxv, double _m, const double *fIn, double* GKYL_RESTRICT out) ~%{ ~%", funcNm),
  printf(fh, "  // edge:      indicator of which velocity grid edge is being considered (VX/VPAR, VY/MU, VZ). ~%"),
  printf(fh, "  // vBoundary: velocity at the boundary of the velocity grid. ~%"),
  printf(fh, "  // dxv[~a]:    cell length in each direction. ~%", cdim+vdim),
  printf(fh, "  // _m:        species mass. ~%"),
  printf(fh, "  // fIn[~a]:   distribution function at lower/upper velocity boundaries. ~%", NP),
  printf(fh, "  // out:       \int dS of f|^(vmax)_(vmin) [first vdim components] and vf^(vmax)_(vmin) [last component]. ~%"),
  printf(fh, " ~%"),

  printf(fh, "  double dS = 0.0; ~%"),
  printf(fh, " ~%"),

  /* Quantity to be integrated over velocity boundary surface.
     if fLo  this is -f_(vmin) or -(vf)_(vmin),
     if fUp this is f^(vmax) or (vf)^(vmax). */
  for dir : 1 thru vdim do (
    vv       : varsVAll[dir],
    surfVars : delete(vv,varsP),
    dv       : makelist(dxv[cdim+i], i, 0, vdim-1),

    /* Expand the distribution function in the cells at the
       lower and upper boundaries of the velocity domain. */
    fbIn_lower_e : doExpand1(fIn,bP),
    fbIn_upper_e : doExpand1(fIn,bP),
    /* if atLower=true this is -f_(vmin) or -(vf)_(vmin),
       if atLower=false this is f^(vmax) or (vf)^(vmax).
       integrated over the velocity boundary surface, and
       projected onto the configuration space basis function. */
    /* Vlasov Maxwell. */
    mBlo_e : -subst(vv=-1,fbIn_lower_e),
    mBup_e :  subst(vv=1,fbIn_upper_e),

    fBlo_c : calcInnerProdList(surfVars,1,bC,mBlo_e),
    fBup_c : calcInnerProdList(surfVars,1,bC,mBup_e),

    dvSurf   : delete(dxv[cdim+dir-1],dv),
    surfExpr : float(prod(dvSurf[i],i,1,vdim-1)),

    /* Surface integral above was done in [-1,1] computational space. Surface
       factor needs to be multiplied to obtain result from physical grid. */

    /* extra factor in integration */
    if (vdim=1) then (
      printf(fh, "  dS = ~a; ~%", float(1/(2.0^(vdim-1)))*surfExpr)
    ) else (
      if (dir = 1) then (
        printf(fh, "  dS = ~a/_m; ~%", float(2.0*%pi*1/(2.0^(vdim-1)))*surfExpr)
      ) else (
        printf(fh, "  dS = ~a/_m; ~%", float(4.0*%pi*1/(2.0^(vdim-1)))*surfExpr)
      )
    ),
    printf(fh, " ~%"),
    
    printf(fh, "  if (edge == GKYL_~a_LOWER) {~%", supcase(string(varsVCartAll[dir]))),
    printf(fh, " ~%"),
    if (dir = 1) then (
      expr : float(expand(dS*fBlo_c)),
      for i : 1 thru length(expr) do (
	if expr[i] # 0.0 then (
	  param : cons(expr[i], [dS]),
	  e : apply(collectterms, param),
	  printf(fh, "    ~a += ~a; ~%", out[i-1], e)
	)
      ),
      expr_v : float(expand(dS*(vBoundary[dir-1]*fBlo_c))),
      for i : 1 thru length(expr) do (
	if expr[i] # 0.0 then (
	  param_v : cons(expr_v[i], [dS, vBoundary]),
	  e : apply(collectterms, param_v),
	  printf(fh, "    ~a += ~a; ~%", out[NC+i-1], e)
	)
      )
    ) else if (dir = 2) then (
      expr_v : float(expand(dS*(vBoundary[dir-1]*fBlo_c))),
      for i : 1 thru length(expr) do (
	if expr[i] # 0.0 then (
	  param_v : cons(expr_v[i], [dS, vBoundary]),
	  e : apply(collectterms, param_v),
	  printf(fh, "    ~a += ~a; ~%", out[NC+i-1], e)
	)
      )
    ),
    printf(fh, " ~%"),
    printf(fh, "  } else if (edge == GKYL_~a_UPPER) {~%", supcase(string(varsVCartAll[dir]))),
    printf(fh, " ~%"),
    if (dir = 1) then (
      expr : float(expand(dS*fBup_c)),
      for i : 1 thru length(expr) do (
	if expr[i] # 0.0 then (
	  param : cons(expr[i], [dS]),
	  e : apply(collectterms, param),
	  printf(fh, "    ~a += ~a; ~%", out[i-1], e)
	)
      ),
      expr_v : float(expand(dS*(vBoundary[dir+vdim-1]*fBup_c))),
      for i : 1 thru length(expr) do (
	if expr[i] # 0.0 then (
	  param_v : cons(expr_v[i], [dS, vBoundary]),
	  e : apply(collectterms, param_v),
	  printf(fh, "    ~a += ~a; ~%", out[NC+i-1], e)
	)
      )
    ) else if (dir = 2) then (
      expr_v : float(expand(dS*(vBoundary[dir+vdim-1]*fBup_c))),
      for i : 1 thru length(expr) do (
	if expr[i] # 0.0 then (
	  param_v : cons(expr_v[i], [dS, vBoundary]),
	  e : apply(collectterms, param_v),
	  printf(fh, "    ~a += ~a; ~%", out[NC+i-1], e)
	)
      )
    ),
    printf(fh, "  }~%"),
    printf(fh, " ~%")
  ),
  printf(fh, "} ~%"),
  printf(fh, " ~%")
)$


