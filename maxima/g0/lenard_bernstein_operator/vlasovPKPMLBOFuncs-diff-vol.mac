load("modal-basis")$
load("out-scripts");
load("utilities")$
load(stringproc)$
fpprec : 24$

/* This script generates the kernels for the volume term
   diffusion contribution from Lenard Bernstein operator to the
   Vlasov equation. */

calcVlasovPKPMLBODiffVolUpdater(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,NP,NC,zr,nuVtSq_e,polyFact,facDiff_mid],

  printf(fh, "#include <gkyl_lbo_vlasov_kernels.h> ~%"),

  /* Load basis of dimensionality requested. */
  [varsC,bC,varsP,bP] : loadPhaseBasis(basisFun, cdim, vdim, polyOrder),

  /* Number of basis monomials. */
  NP : length(bP),  
  NC : length(bC),

  /* Specify a point to evaluate alpha at for use in computing CFL */
  /* Here we choose to evaluate things in the middle of the cell, where
     coordinates = 0. */
  zr : makelist(varsP[d]=0, d, 1, length(varsP)),

  printf(fh, "#include <gkyl_lbo_vlasov_kernels.h> ~%"),
  printf(fh, "GKYL_CU_DH double ~a(const double *w, const double *dxv, const double *nuVtSq, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm),
  printf(fh, "  // w[~a]:      Cell-center coordinates. ~%", cdim+vdim),
  printf(fh, "  // dxv[~a]:    Cell spacing. ~%", cdim+vdim),
  printf(fh, "  // nuVtSq:    Thermal speed squared times collisionality. ~%"),
  printf(fh, "  // f:         Input distribution function.~%"),
  printf(fh, "  // out:       Incremented output ~%"),

  printf(fh, "  const double rdvxSq4 = 4.0/(dxv[~a]*dxv[~a]); ~%", cdim, cdim),
  printf(fh, "~%"),

  /* Expand (nu*vtSq) in configuration basis. */
  nuVtSq_e : doExpand1(nuVtSq, bC),

  /* Evaluate facDiff at zr to approximate max(abs(facDiff))/dv_i */
  polyFact : ((polyOrder+1)^2)/(2*polyOrder+1),

  facDiff_mid : rdvxSq4*gcfac(float(expand(subst(zr,polyFact*nuVtSq_e)))),

  printf(fh, "  return fabs(~a); ~%", facDiff_mid),

  printf(fh, "~%"),

  printf(fh, "} ~%")

);


