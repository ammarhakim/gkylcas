load("lenard_bernstein_operator/gkLBOFuncs-drag-vol")$
load(stringproc)$

/* This script calls the functions which calculate the
   updates from the volume term contributions in the
   gyrokinetic LBO. */

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
minVdim_Ser : 1$    /* see beginning of v loop below though. */
maxCdim_Ser : 3$
maxVdim_Ser : 2$

/* Tensor product basis. */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
minVdim_Tensor : 1$    /* see begining of v loop below though. */
maxCdim_Tensor : 1$
maxVdim_Tensor : 2$

gkVdims : [[1,2], [2], [2]]$

/* ...... END OF USER INPUTS........ */

bName        : ["ser","tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
minVdim      : [minVdim_Ser, minVdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$
maxVdim      : [maxVdim_Ser, maxVdim_Tensor]$

for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    for gkV : 1 thru length(gkVdims[c]) do (
      v : gkVdims[c][gkV],

      maxPolyOrderB : maxPolyOrder[bInd],
      minPolyOrderB : minPolyOrder[bInd],
      if (c+v>4 and maxPolyOrderB > 2) then maxPolyOrderB : 2,
      for polyOrder : minPolyOrderB thru maxPolyOrderB do (
        disp(printf(false,sconcat("Creating drag volume GkLBO ",bName[bInd]," ~ax~av p~a"),c,v,polyOrder)),
        funcName : sconcat("lbo_gyrokinetic_drag_vol_", c, "x", v, "v_", bName[bInd],"_p",polyOrder),
        fname : sconcat("~/max-out/",funcName, ".c"),
        fh : openw(fname),
        calcGkLBODragVolUpdater(fh, funcName, c, v, bName[bInd], polyOrder),
        close(fh) 
      )
    )
  )
);


