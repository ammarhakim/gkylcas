/* Generate kernels that compute the moments of the distribution
   function in Vlasov and gyrokinetic models. */
load("g0/lenard_bernstein_operator/BoundaryCorr-C")$
load(stringproc)$

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 2$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
minVdim_Ser : 1$    /* but see v loop below. */
maxCdim_Ser : 3$
maxVdim_Ser : 3$

/* Tensor order basis. */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$    /* BoundaryEval fails for polyOrder>2 for some reason. */
minCdim_Tensor : 1$
minVdim_Tensor : 1$    /* but see v loop below. */
maxCdim_Tensor : 2$
maxVdim_Tensor : 3$

/* Number of velocity dimensions allowed for each
   configuration-space dimension. */
gkVdims      : [[1,2], [2], [2]]$

/* ...... END OF USER INPUTS........ */

bName        : ["ser","tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
minVdim      : [minVdim_Ser, minVdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$
maxVdim      : [maxVdim_Ser, maxVdim_Tensor]$

for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    for v : max(c,minVdim[bInd]) thru maxVdim[bInd] do (

      minPolyOrderB : minPolyOrder[bInd],
      maxPolyOrderB : maxPolyOrder[bInd],
      if (c+v>4 and maxPolyOrderB > 1) then maxPolyOrderB : 1,

      for polyOrder : minPolyOrderB thru maxPolyOrderB do (  
	/* Create a separate file w/ boundary corrections. */
	disp(printf(false,sconcat("Creating boundary corrections ~ax~av", bName[bInd]),c,v)),
	fname : sconcat("~/max-out/mom_bcorr_lbo_vlasov_", c, "x", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
	fh : openw(fname),
	printf(fh, "#include <gkyl_mom_bcorr_lbo_vlasov_kernels.h> ~%"),
	funcName : sconcat("mom_bcorr_lbo_vlasov_", c, "x", v, "v_", bName[bInd], "_p", polyOrder),
	calcBoundaryIntegral(fh, funcName, c, v, bName[bInd], polyOrder),
	close(fh)
      )
    )
  )
);


