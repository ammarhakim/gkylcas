load("modal-basis")$
load("out-scripts");
load(stringproc)$
load("nodalOperations/nodalFunctions")$
load("recovery")$

fpprec : 24$

/* This script generates the kernels for the boundary surface term
   drag contribution from Lenard Bernstein operator. */

varsV : [vx, vy, vz]$
cvars : [x, y, z]$
vvars : [vx, vy, vz]$
nuUSumx : [sumNuUx, sumNuUy, sumNuUz]$
vidx(cdim,vdim)  := makelist(i,i,cdim+1,cdim+vdim)$
vidx1(cdim,vdim) := makelist(i,i,cdim,cdim+vdim-1)$
doMakeExprLst(vals, S)  := makelist(if vals[i] # 0 then S[i-1] else 0, i, 1, length(vals))$
doExpandLst(lst, basis) := sum(lst[i]*basis[i], i, 1, length(basis))$

load ("scifac")$

writeCExprsCollect1c(lhs, rhs, clst) := block([expr],
  expr : float(expand(rhs)), 
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then (
      param : cons(expr[i], clst),
      e : apply(collectterms, param),
      printf(fh, "  ~a = ~a; ~%", lhs[i-1], gcfac(e))
    )
  )
)$

writeCExprsCollect1s(lhs, rhs, clst) := block([expr],
  expr : float(expand(rhs)), 
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then (
      param : cons(expr[i], clst),
      e : apply(collectterms, param),
      printf(fh, "    ~a = ~a; ~%", lhs[i-1], gcfac(e))
    )
  )
)$

writeCIncrExprs1s(lhs, rhs) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then printf(fh, "    ~a += ~a; ~%", lhs[i-1], expr[i])
  )
)$

calcBoundaryDragUpdateInDir(dir, fh, funcNm, cdim, vdim, basisFun, polyOrder, numFluxOp, isNonuniform) := block(
  [modNm,vid,vid1,vv,surfVars,bP,bC,NP,NC,bPp,hOrder,h_e,hsol],
  if (basisFun="ser") then basisFun:"Ser",
  if (basisFun="tensor") then basisFun:"Tensor",
  kill(varsC, varsP, basisC, basisP),
  /* Load basis of dimensionality requested. */
  load(sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v")),
  pDim : cdim+vdim,
  /* Variables. */
  vid  : vidx(cdim,vdim),
  vid1 : vidx1(cdim,vdim),
  vv   : varsV[dir],
  surfVars : delete(vv,varsP),
  /* Polynomial basis and its derivatives. */
  bP  : basisP[polyOrder],  NP : length(bP),
  bC  : basisC[polyOrder],  NC : length(bC),

  if (basisFun="Ser") then basisFun:"ser",
  if (basisFun="Tensor") then basisFun:"tensor",
    
  printf(fh, "GKYL_CU_DH void ~a(const double *w, const double *dxv, const double *nuSum, const double *nuUSum, const double *nuVtSqSum, const int edge, const double *fSkin, const double *fEdge, double* GKYL_RESTRICT out) ~%{ ~%", funcNm),
  printf(fh, "  // w[~a]:         Cell-center coordinates. ~%", cdim+vdim),
  printf(fh, "  // dxv[~a]:       Cell spacing. ~%", cdim+vdim),
  printf(fh, "  // nuSum:         collisionalities added (self and cross species collisionalities). ~%"),
  printf(fh, "  // nuUSum[~a]:    sum of bulk velocities times their respective collisionalities. ~%", vdim*NC),
  printf(fh, "  // nuVtSqSum[~a]: sum of thermal speeds squared time their respective collisionalities. ~%", NC),
  printf(fh, "  // fSkin/Edge:    Distribution function in cells ~%"),
  printf(fh, "  // out:           Incremented distribution function in cell ~%"),
  printf(fh, "  double rdv2 = 2.0/dxv[~a]; ~%", vid1[dir]),
  printf(fh, "~%"),
  /* First compute the contribution coming from the second
     differentiation by parts to left and right cells. */
  nuVtSqSum_e : doExpand1(nuVtSqSum,bC),
  nuSum_e : doExpand1(nuSum,bC),
  /* Now do the contribution from the generalized flux Ghat. */
  basisFlip : subst(vv=-1*vv, bP),
  signs     : fullratsimp(basisFlip/bP),
  /* Expand the mean flow speed in the configuration basis. */
  nuUSum_e : doExpand1(nuUSumx[dir],bC),
  /* Create pointer to component of u relevant to this surface. */
  printf(fh, "  const double *sumNuU~a = &nuUSum[~a]; ~%", cvars[dir], NC*(dir-1)),
  printf(fh, "~%"),
  /* Surface basis. Equivalent to basis of one lower
     dimensionality without surface variable. */
  bSurf : sqrt(2)*delete(0,fullratsimp(innerProd(varsP,1,bP,subst([vv^2=var2,var2=1/3,vv=0],bP)))*bP),
  /* Calculate the alpha-velocity due to drag. */
  alphaDr : nuSum_e*((1/2)*dxv[vid1[dir]]*vv+w[vid1[dir]])-nuUSum_e,
  /* Project alphaDrag evaluated at interior surface onto surf basis. */
  alphaDrSurf_l_c : fullratsimp(innerProd(surfVars, 1, bSurf, subst(vv=-1,alphaDr))),
  alphaDrSurf_r_c : fullratsimp(innerProd(surfVars, 1, bSurf, subst(vv=1,alphaDr))),
  alst_l          : doMakeExprLst(alphaDrSurf_l_c, alphaDrSurf),
  alst_r          : doMakeExprLst(alphaDrSurf_r_c, alphaDrSurf),
  alphaDrSurf_l_e : doExpand(alst_l, bSurf),
  alphaDrSurf_r_e : doExpand(alst_r, bSurf),
  /* Upwind the drag term using quadrature point evaluation. */
  /* Scale nodes of the nodal basis by corresponding factors to obtain the Gauss-Legendre quadrature points */
  /* We always use tensor basis for the quadrature and resulting nodal basis, regardless of base basis type */
  surfNodes : getNodes("Tensor", pDim-1, polyOrder),
  if polyOrder=1 then (surfNodes:surfNodes*(1/sqrt(3))) elseif polyOrder=2 then (surfNodes:surfNodes*sqrt(3/5)),

  /* Evaluate alpha at ordinates.
     Note: alphaSurf_e is already a surface expansion. 
     In addition, it is continuous and does not vary with respect to the surface variable.
     We still require a alpha_l (w - dv/2) and alpha_r (w + dv/2) for the two sides of the cell */
  alphaOrd_l_n : gcfac(float(evAtNodes(alphaDrSurf_l_e,surfNodes,surfVars))),
  alphaOrd_r_n : gcfac(float(evAtNodes(alphaDrSurf_r_e,surfNodes,surfVars))),

  /* Drag term flux does not depend on velocity space surface on which it sits
     i.e., drag term in vx does not depend on vy and vz
     so sort quadrature points between configuration space and velocity space */
  /* Get number of configuration space nodes */
  surfNodesConfig : getNodes("Tensor", cdim, polyOrder),
  numNodesConfig : length(surfNodesConfig),
  numNodes : length(surfNodes),
  numNodesVel : numNodes/numNodesConfig,
  printf(fh, "  double alphaDrSurf[~a] = {0.0}; ~%", length(bSurf)),
  printf(fh, "  double fUpwindQuad[~a] = {0.0};~%", numNodes),
  printf(fh, "  double fUpwind[~a] = {0.0};;~%", length(bSurf)),
  printf(fh, "  double drag_incr[~a] = {0.0}; ~%", length(bSurf)),
  printf(fh, "~%"),
  /* if edge == -1, we are doing the left edge boundary and the skin cell needs to be evauluated at +1 */
  /* In addition we need the drag term evaluated at +1 (so alphaDr evaluated on the right) */
  printf(fh, "  if (edge == -1) { ~%~%"),
  /* Write out drag term for far left edge boundary.
     Need alpha evaluated at +1 for skin-edge interface.
     NOTE: zero-flux boundary conditions means for far left boundary, no drag term on -1 surface */
  writeCExprsNoExpand1(alphaDrSurf, alphaDrSurf_r_c),
  printf(fh, "~%"),
  /* Write out fUpwindQuad for the far left edge */
  /* Within the skin cell, we need alpha_r (alpha evaluated at +1)
     just like how the skin cell is evaluated at +1 */
  for i : 1 thru numNodesConfig do (
    if polyOrder=1 then (
      /* This subst eliminates the need for another variable, and removes
         the common factor (for p=1) which is not needed to determine
         sign (not working for p>1). */
      rcoFac : 1./(content(alphaOrd_r_n[1],alphaDrSurf[0])[1]),
      printf(fh, "  if (~a < 0) { ~%", fullratsimp(alphaOrd_r_n[i]*rcoFac)),
      for j : 1 thru numNodesVel do (
        printf(fh, "    fUpwindQuad[~a] = ~a_~ax_p~a_surfx~a_quad_~a_r(fSkin); ~%", (j-1)*numNodesConfig+(i-1), basisFun, cdim+vdim, polyOrder, cdim+dir, (j-1)*numNodesConfig+(i-1))
      ),
      printf(fh, "  } else { ~%"),
      for j : 1 thru numNodesVel do (
        printf(fh, "    fUpwindQuad[~a] = ~a_~ax_p~a_surfx~a_quad_~a_l(fEdge); ~%", (j-1)*numNodesConfig+(i-1), basisFun, cdim+vdim, polyOrder, cdim+dir, (j-1)*numNodesConfig+(i-1))
      ),
      printf(fh, "  } ~%")
    /* If polyOrder > 1, we just evaluate alpha at the quadrature points with no further substitutions */
    ) else (
      printf(fh, "  if (~a < 0) { ~%", alphaOrd_r_n[i]),
      for j : 1 thru numNodesVel do (
        printf(fh, "    fUpwindQuad[~a] = ~a_~ax_p~a_surfx~a_quad_~a_r(fSkin); ~%", (j-1)*numNodesConfig+(i-1), basisFun, cdim+vdim, polyOrder, cdim+dir, (j-1)*numNodesConfig+(i-1))
      ),
      printf(fh, "  } else { ~%"),
      for j : 1 thru numNodesVel do (
        printf(fh, "    fUpwindQuad[~a] = ~a_~ax_p~a_surfx~a_quad_~a_l(fEdge); ~%", (j-1)*numNodesConfig+(i-1), basisFun, cdim+vdim, polyOrder, cdim+dir, (j-1)*numNodesConfig+(i-1))
      ),
      printf(fh, "  } ~%")
    )
  ),

  printf(fh, "~%"),
  printf(fh, "  // Project nodal basis back onto modal basis. ~%"),
  printf(fh, "  ~a_~ax_p~a_upwind(fUpwindQuad, fUpwind); ~%", basisFun, cdim+vdim, polyOrder),
  printf(fh, "~%"),

  /* Create expansions of f_hat (upwinded f) on the left and right in the surface basis. */
  fHatSurf_e : doExpand1(fUpwind, bSurf),

  GhatDrag_c : calcInnerProdList(surfVars,alphaDrSurf_r_e,bSurf,fHatSurf_e),
  /* Ghat_c (coefficients of Ghat) is what gets written. From here
  ** on we can simply refer to Ghat. */
  glst1      : doMakeExprLst(GhatDrag_c, drag_incr),
  GhatDrag_e     : doExpandLst(glst1, bSurf),
  /* Increments to the right cell (some dimensional factors missing).
  ** Here incr_r1 and incr_r2 have separate left/right symmetry. */
  drag_incr_r :  calcInnerProdList(surfVars, 1, subst(vv=1, bP), GhatDrag_e),
  
  clst: makelist(alphaDrag_r[i],i,0,NC-1),
  tempVars : writeCExprsCollect1(drag_incr, GhatDrag_c, clst),
  printf(fh, "~%"),
  flush_output(fh),
  
  /* Write out contribution right cell. */
  writeCIncrExprs1(out, rdv2*drag_incr_r),
  /* otherwise edge == +1, we are doing the right edge boundary and the skin cell needs to be evauluated at -1 */
  printf(fh, "~%  } else { ~%~%"),
  /* Write out drag term for far right edge boundary.
     Need alpha evaluated at -1 for skin-edge interface.
     NOTE: zero-flux boundary conditions means for far right boundary, no drag term on +1 surface */
  writeCExprsNoExpand1(alphaDrSurf, alphaDrSurf_l_c),
  printf(fh, "~%"),
  if (basisFun="Ser") then basisFun:"ser",
  if (basisFun="Tensor") then basisFun:"tensor",
  /* Write out fUpwindQuad for the far right edge */
  /* Within the skin cell, we need alpha_l (alpha evaluated at -1)
     just like how the skin cell is evaluated at -1 */
  for i : 1 thru numNodesConfig do (
    if polyOrder=1 then (
      /* This subst eliminates the need for another variable, and removes
         the common factor (for p=1) which is not needed to determine
         sign (not working for p>1). */
      rcoFac : 1./(content(alphaOrd_l_n[1],alphaDrSurf[0])[1]),
      printf(fh, "  if (~a < 0) { ~%", fullratsimp(alphaOrd_r_n[i]*rcoFac)),
      for j : 1 thru numNodesVel do (
        printf(fh, "    fUpwindQuad[~a] = ~a_~ax_p~a_surfx~a_quad_~a_r(fEdge); ~%", (j-1)*numNodesConfig+(i-1), basisFun, cdim+vdim, polyOrder, cdim+dir, (j-1)*numNodesConfig+(i-1))
      ),
      printf(fh, "  } else { ~%"),
      for j : 1 thru numNodesVel do (
        printf(fh, "    fUpwindQuad[~a] = ~a_~ax_p~a_surfx~a_quad_~a_l(fSkin); ~%", (j-1)*numNodesConfig+(i-1), basisFun, cdim+vdim, polyOrder, cdim+dir, (j-1)*numNodesConfig+(i-1))
      ),
      printf(fh, "  } ~%")
    /* If polyOrder > 1, we just evaluate alpha at the quadrature points with no further substitutions */
    ) else (
      printf(fh, "  if (~a < 0) { ~%", alphaOrd_l_n[i]),
      for j : 1 thru numNodesVel do (
        printf(fh, "    fUpwindQuad[~a] = ~a_~ax_p~a_surfx~a_quad_~a_r(fEdge); ~%", (j-1)*numNodesConfig+(i-1), basisFun, cdim+vdim, polyOrder, cdim+dir, (j-1)*numNodesConfig+(i-1))
      ),
      printf(fh, "  } else { ~%"),
      for j : 1 thru numNodesVel do (
        printf(fh, "    fUpwindQuad[~a] = ~a_~ax_p~a_surfx~a_quad_~a_l(fSkin); ~%", (j-1)*numNodesConfig+(i-1), basisFun, cdim+vdim, polyOrder, cdim+dir, (j-1)*numNodesConfig+(i-1))
      ),
      printf(fh, "  } ~%")
    )
  ),

  printf(fh, "~%"),
  printf(fh, "  // Project nodal basis back onto modal basis. ~%"),
  printf(fh, "  ~a_~ax_p~a_upwind(fUpwindQuad, fUpwind); ~%", basisFun, cdim+vdim, polyOrder),
  printf(fh, "~%"),

  /* Create expansions of f_hat (upwinded f) on the left and right in the surface basis. */
  fHatSurf_e : doExpand1(fUpwind, bSurf),

  GhatDrag_c : calcInnerProdList(surfVars,alphaDrSurf_l_e,bSurf,fHatSurf_e),
  /* Ghat_c (coefficients of Ghat) is what gets written. From here
  ** on we can simply refer to Ghat. */
  glst1      : doMakeExprLst(GhatDrag_c, drag_incr),
  GhatDrag_e     : doExpandLst(glst1, bSurf),
  /* Increments to the right cell (some dimensional factors missing).
  ** Here incr_r1 and incr_r2 have separate left/right symmetry. */
  drag_incr_l :  calcInnerProdList(surfVars, -1, subst(vv=-1, bP), GhatDrag_e),
  
  /* Populate Ghat including the diffusion term. */
  clst: append([rdv2DiffFac], makelist(alphaDrag_r[i],i,0,NC-1)),
  tempVars : writeCExprsCollect1(drag_incr, GhatDrag_c, clst),
  printf(fh, "~%"),
  flush_output(fh),
  
  /* Write out contribution right cell. */
  writeCIncrExprs1(out, rdv2*drag_incr_l),
  printf(fh, "~%"),
  printf(fh, "  } ~%"),
  printf(fh, "} ~%")
);


