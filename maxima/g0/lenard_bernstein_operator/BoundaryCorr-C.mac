/* Generate kernels to that evaluate f and v*f at the boundaries
   and integrate it (the integral is global).
   This is used to correct u and vtSq in the primMoments updater. */

/* IMPORTANT: p=1 code below assumes vMin is negative and vMax positive. */
load("modal-basis");
load("out-scripts");
load(stringproc)$
fpprec : 24$
varsV : [vx, vy, vz]$
VarsV : [VX, VY, VZ]$

/* These variables make it possible for the function
   calcBoundaryIntegral to generate the code for both
   the function that evaluates the surface integral of
   f|^(vmax)_(vmin) and that of vf|^(vmax)_(vmin). */
Fsuffix : [f, vf]$
Bfac    : [ 1 , vBoundary ]$

writeCIncrExprsCollect1s(lhs, rhs, clst) := block([i,e,expr,param],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (
    if expr[i] # 0.0 then (
      param : cons(expr[i], clst),
      e : apply(collectterms, param),
      printf(fh, "    ~a += ~a; ~%", lhs[i-1], e)
    )
  )
)$

calcBoundaryIntegral(wInd, fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [i,e,modNm,bC,bP,NP,NC,vv,surfVars,dv,fbIn_e,mBlo_e,mBup_e,fBlo_c,fBup_c,expr,param],
    
  kill(varsC, varsP, basisC, basisP),
  if (basisFun="ser") then basisFun:"Ser",
  if (basisFun="tensor") then basisFun:"Tensor",
  modNm : sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v"),
  load(modNm),
  if (basisFun="Ser") then basisFun:"ser",
  if (basisFun="Tensor") then basisFun:"tensor",
        
    printf(fh, "GKYL_CU_DH void ~a_~a_p~a(const int *idx, enum gkyl_vel_edge edge, const double *vBoundary, const double *dxv, const double *fIn, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, Fsuffix[wInd], polyOrder),
    printf(fh, "  // edge:   indicator of which velocity grid edge is being considered. ~%"),
    printf(fh, "  // vBoundary: velocity at the boundary of the velocity grid. ~%"),
    printf(fh, "  // dxv[~a]:   cell length in each direction. ~%", cdim+vdim),
    printf(fh, "  // fIn[~a]:    distribution function at velocity boundaries. ~%", NP),
    printf(fh, "  // out:       \int dS of f|^(vmax)_(vmin) or vf^(vmax)_(vmin). ~%"),
    printf(fh, " ~%"),
        
    bC : basisC[polyOrder],
    bP : basisP[polyOrder],
    NP : length(bP),
    NC : length(bC),
    
    printf(fh, "  double dS = 0.0; ~%"),
    printf(fh, " ~%"),

    /* Quantity to be integrated over velocity boundary surface.
       if atLower=true  this is -f_(vmin) or -(vf)_(vmin),
       if atLower=false this is f^(vmax) or (vf)^(vmax). */
    for dir : 1 thru vdim do (
      vv       : varsV[dir],
      surfVars : delete(vv,varsP),
      dv       : makelist(dxv[cdim+i], i, 0, vdim-1),

      /* Expand the distribution function in the cells at the
         boundaries of the velocity domain. */
      fbIn_e : doExpand1(fIn,bP),
      /* Vlasov Maxwell. */
      if (polyOrder=1 and wInd=2) then (
        mBlo_e : -(Bfac[wInd]+dv[dir]/2)*subst(vv=-1,fbIn_e), 
        mBup_e :  (Bfac[wInd]-dv[dir]/2)*subst(vv=1,fbIn_e)
      ) else (
        mBlo_e : -Bfac[wInd]*subst(vv=-1,fbIn_e),
        mBup_e :  Bfac[wInd]*subst(vv=1,fbIn_e)
      ),

    /* if atLower=true this is -f_(vmin) or -(vf)_(vmin),
       if atLower=false this is f^(vmax) or (vf)^(vmax).
       integrated over the velocity boundary surface, and
       projected onto the configuration space basis function. */
    fBlo_c : calcInnerProdList(surfVars,1,bC,mBlo_e),
    fBup_c : calcInnerProdList(surfVars,1,bC,mBup_e),

    dvSurf   : delete(dxv[cdim+dir-1],dv),
    surfExpr : float(prod(dvSurf[i],i,1,vdim-1)),

    /* Surface integral above was done in [-1,1] computational space. Surface
       factor needs to be multiplied to obtain result from physical grid. */

    printf(fh, "  if (edge == GKYL_~a_LOWER) {~%", VarsV[dir]),
    printf(fh, " ~%"),
    printf(fh, "    dS = ~a; ~%", float(1/(2^(vdim-1)))*surfExpr),
    if (wInd=1) then ( 
      expr : float(expand(dS*fBlo_c)),
      for i : 1 thru length(expr) do (
        if expr[i] # 0.0 then (
          param : cons(expr[i], [dS,vBoundary]),
          e : apply(collectterms, param),
          printf(fh, "    ~a += ~a; ~%", out[(dir-1)*NC+i-1], e)
        )
      )
    ) else (
      writeCIncrExprsCollect1s(out, subst(vBoundary[dir-1],vBoundary,dS*fBlo_c),[dS,vBoundary])
    ),
    printf(fh, " ~%"),
    printf(fh, "  } else if (edge == GKYL_~a_UPPER) {~%", VarsV[dir]),
    printf(fh, " ~%"),
    printf(fh, "    dS = ~a; ~%", float(1/(2^(vdim-1)))*surfExpr),
    if (wInd=1) then ( 
      expr : float(expand(dS*fBup_c)),
      for i : 1 thru length(expr) do (
        if expr[i] # 0.0 then (
          param : cons(expr[i], [dS,vBoundary]),
          e : apply(collectterms, param),
          printf(fh, "    ~a += ~a; ~%", out[(dir-1)*NC+i-1], e)
        )
      )
    ) else (
      writeCIncrExprsCollect1s(out, subst(vBoundary[dir+vdim-1],vBoundary,dS*fBup_c),[dS,vBoundary])
    ),
    printf(fh, " ~%"),
    printf(fh, "  }~%"),
    printf(fh, " ~%")
  ),
  printf(fh, "} ~%"),
  printf(fh, " ~%")
)$

calcSurfIntegralCorrections(fh, funcNm, cdim, vdim, basisFun, polyOrderMin, polyOrderMax) := block([],
    
    for polyOrder : polyOrderMin thru polyOrderMax do (
      calcBoundaryIntegral(1, fh, funcNm, cdim, vdim, basisFun, polyOrder),
      calcBoundaryIntegral(2, fh, funcNm, cdim, vdim, basisFun, polyOrder)
    )
)$


