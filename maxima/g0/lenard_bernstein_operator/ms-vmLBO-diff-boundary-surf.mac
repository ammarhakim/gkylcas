load("lenard_bernstein_operator/vmLBOFuncs-diff-boundary-surf")$
load(stringproc)$

/* This script calls the functions which calculate the
   updates from the surface term for the Lenard-Bernstein
   collision operator, grad_v dot ((v-u) f + vthSq grad_v f).
   The surface terms involve a single integration by parts
   for the drag term and two integrations by parts for the 
   diffusion term. */

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 2$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
minVdim_Ser : 2$    /* see begining of v loop below though. */
maxCdim_Ser : 1$
maxVdim_Ser : 2$

/* Tensor product basis. */
/* Note that Serendipity, p = 1, is equivalent to Tensor */
/* Thus no need to calculate p = 1 Tensor basis */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
minVdim_Tensor : 1$    /* see begining of v loop below though. */
maxCdim_Tensor : 0$
maxVdim_Tensor : 0$

/* ...... END OF USER INPUTS........ */

bName        : ["ser","tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
minVdim      : [minVdim_Ser, minVdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$
maxVdim      : [maxVdim_Ser, maxVdim_Tensor]$

vvarsAll : [vx, vy, vz]$

/* Is non-uniform booleans. */

for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    for v : max(c,minVdim[bInd]) thru maxVdim[bInd] do (
      minPolyOrderB : minPolyOrder[bInd],
      maxPolyOrderB : maxPolyOrder[bInd],
      if (c+v>5 and maxPolyOrderB > 1) then maxPolyOrderB : 1,
      for polyOrder : minPolyOrderB thru maxPolyOrderB do (
      
        disp(printf(false,sconcat("Creating diff surface Vlasov LBO ",bName[bInd]," ~ax~av p~a"),c,v,polyOrder)),
        for dir : 1 thru v do (
          fname : sconcat("~/max-out/lbo_vlasov_diff_boundary_surf", vvarsAll[dir],"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder , ".c"),
          fh : openw(fname),
          funcName : sconcat("lbo_vlasov_diff_boundary_surf", vvarsAll[dir],"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder),
          printf(fh, "#include <gkyl_lbo_vlasov_kernels.h> ~%"),
          calcBoundaryDiffUpdateInDir(dir, fh, funcName, c, v, bName[bInd], polyOrder),
          close(fh)
        )
      )
    )
  )
);


