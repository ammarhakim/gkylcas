/* Create kernels to inflate a surface DG field to the volume. */
load("inflate_surf/inflate-surf.mac")$
load(stringproc)$

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minDim_Ser : 1$
maxDim_Ser : 3$

/* ...... END OF USER INPUTS........ */

bName        : ["ser"]$
minPolyOrder : [minPolyOrder_Ser]$
maxPolyOrder : [maxPolyOrder_Ser]$
minDim       : [minDim_Ser]$
maxDim       : [maxDim_Ser]$

/* Configuration space dimensions to generate kernels for,
   and velocity space dimensions for each configuration space
   dimension. */
vDims : [[1,2],[2],[2]]$

for bInd : 1 thru length(bName) do (
  for polyOrder : minPolyOrder[bInd] thru maxPolyOrder[bInd] do (
    /* For configuration space quantities. */
    for cdim : minDim[bInd] thru maxDim[bInd] do (
      fName : sconcat("~/max-out/inflate_surf_", cdim, "x_", bName[bInd], "_", "p", polyOrder, ".c"),
      fh : openw(fName),
      printf(fh, "#include <gkyl_inflate_surf_kernels.h>~%~%"),
      disp(printf(false,sconcat("Creating inflate_surf ",bName[bInd]," ~ax p~a"),cdim,polyOrder)),
      /* Generate a kernel for deflating onto each surf. */
      for dir : max(1,minDim[bInd]) thru cdim do (
        inflateSurf(fh, cdim, 0, dir, bName[bInd], polyOrder)
      ),
      close(fh)
    ),

    /* For phase space quantities. */
    for cdim : minDim[bInd] thru maxDim[bInd] do (
      for vI : 1 thru length(vDims[cdim]) do (
        vdim : vDims[cdim][vI],

        fName : sconcat("~/max-out/inflate_surf_", cdim, "x", vdim, "v_", bName[bInd], "_", "p", polyOrder, ".c"),
        fh : openw(fName),
        printf(fh, "#include <gkyl_inflate_surf_kernels.h>~%~%"),
        disp(printf(false,sconcat("Creating inflate_surf ",bName[bInd]," ~ax~av p~a"),cdim,vdim,polyOrder)),
        /* Generate a kernel for deflating onto each surf. */
        for dir : max(1,minDim[bInd]) thru cdim do (
          inflateSurf(fh, cdim, vdim, dir, bName[bInd], polyOrder)
        ),
        close(fh)
      )
    )
  )
)$
