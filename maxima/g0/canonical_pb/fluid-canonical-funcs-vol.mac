/*
   Create kernels for the volume term of canonical poisson bracket
   for a fluid system such as incompressible Euler or Hasegawa-Wakatani.
  
   *hamil* is assumed to be written in canonical coordinates
   and for fluid systems is simply phi, the potential given by
   grad^2 phi = f, where f is (one of) the evolved quantities
   (vorticity in incompressible Euler and Hasegawa-Wakatani)
*/

load("modal-basis")$
load("out-scripts")$
load(stringproc)$
load("scifac")$
load("canonical_pb/canonicalUtils")$
load("utilities")$
fpprec : 24$

dxv : [dxv0, dxv1]$

cidx(cdim) := makelist(i,i,0,cdim-1)$
PB_vol(f,g,x,y) := diff(f,x)*diff(g,y) - diff(g,x)*diff(f,y)$

buildFluidCanonicalPBVolKernel(fh, funcNm, cdim, basisFun, polyOrder) := block(
  [varsC, bC, numC, f_e, phi_e, pb, pbBasis],

  kill(varsC,bC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),

  numC : length(bC), 

  printf(fh, "double ~a(const double *w, const double *dxv, const double *phi, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm),
  printf(fh, "  // w[NDIM]: cell-center.~%"),
  printf(fh, "  // dxv[NDIM]: cell length.~%"),
  printf(fh, "  // phi: Potential in fluid system given by grad^2 phi = f where f is (one of) the evolved quantities.~%"),
  printf(fh, "  // f: input state vector in center cell.~%"),
  printf(fh, "  // out: output increment in center cell.~%"),

  printf(fh, "  double dxdvInv = 4.0/(dxv[0]*dxv[1]); ~%"),

  f_e : doExpand1(f, bC),
  phi_e : doExpand1(phi, bC),

  pbBasis : PB_vol(bC,phi_e,varsC[1],varsC[2]),
  pb : fullratsimp(calcInnerProdList(varsC, 1, pbBasis, f_e)), 

  /* Cell average contribution from volume term is 0, but all other terms have non-zero values */
  for i : 2 thru length(pb) do (
    printf(fh, "  ~a += ~a; ~%", out[i-1], dxdvInv*(float(expand(pb[i]))))
  ), 
  
  /*  No CFL contribution, returns 0. */
  printf(fh, "  return 0.; ~%"),
  printf(fh, "} ~%"),
  flush_output(fh)
);

buildTwoFluidCanonicalPBVolKernel(fh, funcNm, cdim, basisFun, polyOrder) := block(
  [varsC, bC, numC, f_e, phi_e, pb, pbBasis],

  kill(varsC,bC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),

  numC : length(bC), 

  printf(fh, "double ~a(const double *w, const double *dxv, const double *phi, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm),
  printf(fh, "  // w[NDIM]: cell-center.~%"),
  printf(fh, "  // dxv[NDIM]: cell length.~%"),
  printf(fh, "  // phi: Potential in fluid system given by grad^2 phi = f where f is (one of) the evolved quantities.~%"),
  printf(fh, "  // f: input state vector in center cell.~%"),
  printf(fh, "  // out: output increment in center cell.~%"),

  printf(fh, "  double dxdvInv = 4.0/(dxv[0]*dxv[1]); ~%"),
  printf(fh, "  const double *f1 = &f[~a]; ~%", 0),
  printf(fh, "  const double *f2 = &f[~a]; ~%", numC),
  printf(fh, "  double *out1 = &out[~a]; ~%", 0),
  printf(fh, "  double *out2 = &out[~a]; ~%", numC),

  f1_e : doExpand1(f1, bC),
  f2_e : doExpand1(f2, bC),
  phi_e : doExpand1(phi, bC),

  pbBasis : PB_vol(bC,phi_e,varsC[1],varsC[2]),
  pb1 : fullratsimp(calcInnerProdList(varsC, 1, pbBasis, f1_e)), 
  pb2 : fullratsimp(calcInnerProdList(varsC, 1, pbBasis, f2_e)), 

  /* Cell average contribution from volume term is 0, but all other terms have non-zero values */
  for i : 2 thru length(pb1) do (
    printf(fh, "  ~a += ~a; ~%", out1[i-1], dxdvInv*(float(expand(pb1[i])))), 
    printf(fh, "  ~a += ~a; ~%", out2[i-1], dxdvInv*(float(expand(pb2[i]))))
  ), 
  
  /*  No CFL contribution, returns 0. */
  printf(fh, "  return 0.; ~%"),
  printf(fh, "} ~%"),
  flush_output(fh)
);
