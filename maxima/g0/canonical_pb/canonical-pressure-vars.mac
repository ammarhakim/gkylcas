/* This script generates the kernels for calculating the scalar pressure from the 
    pressure tensor and metric

    // Solve for d*P*Jv: d*P*Jv = h^{ij}*M2_{ij} - n*h^{ij}*u_i*u_j 
    //                     = h^{ij}*M2_{ij} - h^{ij}*M1i*V_drift_j 
    */

load("modal-basis")$
load("out-scripts")$
load(stringproc)$
load("scifac")$
fpprec : 24$

calcCanonicalPbPressure(fh, funcNm, cdim, basisFun, polyOrder) := block(
  [], /*Fill block*/

  kill(varsC, bC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),

  /* Number of basis monomials. */
  NC : length(bC),

  /* printf(fh, "#include <gkyl_euler_canonical_pb_kernels.h> ~%"), */
  printf(fh, "#include <gkyl_canonical_pb_kernels.h>  ~%"),
  printf(fh, "#include <gkyl_binop_mul_ser.h> ~%"),
  printf(fh, "GKYL_CU_DH void ~a(const double *h_ij_inv, const double *M2_ij, const double *v_j, const double *nv_i, double* GKYL_RESTRICT d_Jv_P) ~%{ ~%", funcNm, polyOrder),
  printf(fh, "  // h_ij_inv:         Input volume expansion of the inverse metric tensor.~%"),
  printf(fh, "  //                   [Hxx, Hxy, Hxz, ~%"),
  printf(fh, "  //                    Hxy, Hyy, Hyz, ~%"),
  printf(fh, "  //                    Hxz, Hyz, Hzz] ~%"),
  printf(fh, "  // M2_ij:             Input volume expansion of the M2_ij moment.~%"),
  printf(fh, "  //                   [M2xx, M2xy, M2xz, ~%"),
  printf(fh, "  //                    M2xy, M2yy, M2yz, ~%"),
  printf(fh, "  //                    M2xz, M2yz, M2zz] ~%"),
  printf(fh, "  // v_j:              Input volume expansion of V_drift.~%"),
  printf(fh, "  //                   [vx, vy, vz] ~%"),
  printf(fh, "  // nv_i:              Input volume expansion of M1i = N*Vdrift.~%"),
  printf(fh, "  //                   [nvx, nvy, nvz] ~%"),
  printf(fh, "  // d_Jv_P:            Output volume expansion of d*P*Jv = h^{ij}*M2_{ij} - n*h^{ij}*u_i*u_j .~%"),
  printf(fh, "~%"),

 
  printf(fh, "  const double *NVx = &nv_i[~a]; ~%", 0*NC),
  if (cdim > 1) then (
    printf(fh, "  const double *NVy = &nv_i[~a]; ~%", 1*NC)
  ),
  if (cdim > 2) then (
    printf(fh, "  const double *NVz = &nv_i[~a]; ~%", 2*NC)
  ),
  printf(fh, "~%"),


  printf(fh, "  const double *Vx = &v_j[~a]; ~%", 0*NC),
  if (cdim > 1) then (
    printf(fh, "  const double *Vy = &v_j[~a]; ~%", 1*NC)
  ),
  if (cdim > 2) then (
  printf(fh, "  const double *Vz = &v_j[~a]; ~%", 2*NC)
  ),
  printf(fh, "~%"),


  if (cdim = 1) then (
    printf(fh, "  const double *M2xx = &M2_ij[~a]; ~%", 0*NC)
  ),
  if (cdim = 2) then (
    printf(fh, "  const double *M2xx = &M2_ij[~a]; ~%", 0*NC),
    printf(fh, "  const double *M2xy = &M2_ij[~a]; ~%", 1*NC),
    printf(fh, "  const double *M2yy = &M2_ij[~a]; ~%", 2*NC)
  ),
  if (cdim = 3) then (
    printf(fh, "  const double *M2xx = &M2_ij[~a]; ~%", 0*NC),
    printf(fh, "  const double *M2xy = &M2_ij[~a]; ~%", 1*NC),
    printf(fh, "  const double *M2xz = &M2_ij[~a]; ~%", 2*NC),
    printf(fh, "  const double *M2yy = &M2_ij[~a]; ~%", 3*NC),
    printf(fh, "  const double *M2yz = &M2_ij[~a]; ~%", 4*NC),
    printf(fh, "  const double *M2zz = &M2_ij[~a]; ~%", 5*NC)
  ),
  printf(fh, "~%"),

  if (cdim = 1) then (
    printf(fh, "  const double *Hxx = &h_ij_inv[~a]; ~%", 0*NC)
  ),
  if (cdim = 2) then (
    printf(fh, "  const double *Hxx = &h_ij_inv[~a]; ~%", 0*NC),
    printf(fh, "  const double *Hxy = &h_ij_inv[~a]; ~%", 1*NC),
    printf(fh, "  const double *Hyy = &h_ij_inv[~a]; ~%", 2*NC)
  ),
  if (cdim = 3) then (
    printf(fh, "  const double *Hxx = &h_ij_inv[~a]; ~%", 0*NC),
    printf(fh, "  const double *Hxy = &h_ij_inv[~a]; ~%", 1*NC),
    printf(fh, "  const double *Hxz = &h_ij_inv[~a]; ~%", 2*NC),
    printf(fh, "  const double *Hyy = &h_ij_inv[~a]; ~%", 3*NC),
    printf(fh, "  const double *Hyz = &h_ij_inv[~a]; ~%", 4*NC),
    printf(fh, "  const double *Hzz = &h_ij_inv[~a]; ~%", 5*NC)
  ),
  printf(fh, "~%"),


  /* First construct the volume expansion of h^{ij}M2_ij */
  /* Temporary array of h^{ij}M2_ij*/
  printf(fh, "  // h^{ij}M2_ij ~%"),
  printf(fh, "  double Hxx_M2xx[~a] = {0.0}; ~%", NC),
  printf(fh, "  binop_mul_~ad_~a_p~a(Hxx, M2xx, Hxx_M2xx); ~%", cdim, basisFun, polyOrder),
  printf(fh, " ~%"),

  if (cdim > 1) then (
    printf(fh, "  double Hxy_M2xy[~a] = {0.0}; ~%", NC),
    printf(fh, "  binop_mul_~ad_~a_p~a(Hxy, M2xy, Hxy_M2xy); ~%", cdim, basisFun, polyOrder),
    printf(fh, " ~%"),

    printf(fh, "  double Hyy_M2yy[~a] = {0.0}; ~%", NC),
    printf(fh, "  binop_mul_~ad_~a_p~a(Hyy, M2yy, Hyy_M2yy); ~%", cdim, basisFun, polyOrder),
    printf(fh, " ~%")
  ),

  if (cdim > 2) then (
    printf(fh, "  double Hxz_M2xz[~a] = {0.0}; ~%", NC),
    printf(fh, "  binop_mul_~ad_~a_p~a(Hxz, M2xz, Hxz_M2xz); ~%", cdim, basisFun, polyOrder),
    printf(fh, " ~%"),

    printf(fh, "  double Hyz_M2yz[~a] = {0.0}; ~%", NC),
    printf(fh, "  binop_mul_~ad_~a_p~a(Hyz, M2yz, Hyz_M2yz); ~%", cdim, basisFun, polyOrder),
    printf(fh, " ~%"),

    printf(fh, "  double Hzz_M2zz[~a] = {0.0}; ~%", NC),
    printf(fh, "  binop_mul_~ad_~a_p~a(Hzz, M2zz, Hzz_M2zz); ~%", cdim, basisFun, polyOrder),
    printf(fh, " ~%")
  ),

  /* Second construct the volume expansion of h^{ij}*nv_i*v_j */
  /* Temporary array of h^{ij}*nv_i*v_j*/
  printf(fh, "  // h^{ij}*nv_i*v_j ~%"),
  printf(fh, "  double Hxx_M1x[~a] = {0.0}; ~%", NC),
  printf(fh, "  double Hxx_M1x_Vx[~a] = {0.0}; ~%", NC),
  printf(fh, "  binop_mul_~ad_~a_p~a(Hxx, NVx, Hxx_M1x); ~%", cdim, basisFun, polyOrder),
  printf(fh, "  binop_mul_~ad_~a_p~a(Hxx_M1x, Vx, Hxx_M1x_Vx); ~%", cdim, basisFun, polyOrder),
  printf(fh, " ~%"),

  if (cdim > 1) then (
    printf(fh, "  double Hxy_M1x[~a] = {0.0}; ~%", NC),
    printf(fh, "  double Hxy_M1x_Vy[~a] = {0.0}; ~%", NC),
    printf(fh, "  binop_mul_~ad_~a_p~a(Hxy, NVx, Hxy_M1x); ~%", cdim, basisFun, polyOrder),
    printf(fh, "  binop_mul_~ad_~a_p~a(Hxy_M1x, Vy, Hxy_M1x_Vy); ~%", cdim, basisFun, polyOrder),
    printf(fh, " ~%"),

    printf(fh, "  double Hyy_M1y[~a] = {0.0}; ~%", NC),
    printf(fh, "  double Hyy_M1y_Vy[~a] = {0.0}; ~%", NC),
    printf(fh, "  binop_mul_~ad_~a_p~a(Hyy, NVy, Hyy_M1y); ~%", cdim, basisFun, polyOrder),
    printf(fh, "  binop_mul_~ad_~a_p~a(Hyy_M1y, Vy, Hyy_M1y_Vy); ~%", cdim, basisFun, polyOrder),
    printf(fh, " ~%")
  ),

  if (cdim > 2) then (
    printf(fh, "  double Hxz_M1x[~a] = {0.0}; ~%", NC),
    printf(fh, "  double Hxz_M1x_Vz[~a] = {0.0}; ~%", NC),
    printf(fh, "  binop_mul_~ad_~a_p~a(Hxz, NVx, Hxz_M1x); ~%", cdim, basisFun, polyOrder),
    printf(fh, "  binop_mul_~ad_~a_p~a(Hxz_M1x, Vz, Hxz_M1x_Vz); ~%", cdim, basisFun, polyOrder),
    printf(fh, " ~%"),

    printf(fh, "  double Hyz_M1y[~a] = {0.0}; ~%", NC),
    printf(fh, "  double Hyz_M1y_Vz[~a] = {0.0}; ~%", NC),
    printf(fh, "  binop_mul_~ad_~a_p~a(Hyz, NVy, Hyz_M1y); ~%", cdim, basisFun, polyOrder),
    printf(fh, "  binop_mul_~ad_~a_p~a(Hyz_M1y, Vz, Hyz_M1y_Vz); ~%", cdim, basisFun, polyOrder),
    printf(fh, " ~%"),

    printf(fh, "  double Hzz_M1z[~a] = {0.0}; ~%", NC),
    printf(fh, "  double Hzz_M1z_Vz[~a] = {0.0}; ~%", NC),
    printf(fh, "  binop_mul_~ad_~a_p~a(Hzz, NVz, Hzz_M1z); ~%", cdim, basisFun, polyOrder),
    printf(fh, "  binop_mul_~ad_~a_p~a(Hzz_M1z, Vz, Hzz_M1z_Vz); ~%", cdim, basisFun, polyOrder),
    printf(fh, " ~%")
  ),

  for i : 1 thru NC do (
    printf(fh, "  d_Jv_P[~a] = 0.0; ~%", i-1),
    printf(fh, "  d_Jv_P[~a] +=  Hxx_M2xx[~a] - Hxx_M1x_Vx[~a]; ~%", i-1, i-1, i-1),
    if (cdim > 1) then (
    printf(fh, "  d_Jv_P[~a] += (Hxy_M2xy[~a] - Hxy_M1x_Vy[~a])*2.0; ~%", i-1, i-1, i-1),
    printf(fh, "  d_Jv_P[~a] +=  Hyy_M2yy[~a] - Hyy_M1y_Vy[~a]; ~%", i-1, i-1, i-1)
    ),
    if (cdim > 2) then (
      printf(fh, "  d_Jv_P[~a] += (Hxz_M2xz[~a] - Hxz_M1x_Vz[~a])*2.0; ~%", i-1, i-1, i-1),
      printf(fh, "  d_Jv_P[~a] += (Hyz_M2yz[~a] - Hyz_M1y_Vz[~a])*2.0; ~%", i-1, i-1, i-1),
      printf(fh, "  d_Jv_P[~a] +=  Hzz_M2zz[~a] - Hzz_M1z_Vz[~a]; ~%", i-1, i-1, i-1)
    )
  ),
  printf(fh, " ~%"),
  printf(fh, "} ~%")
)$
