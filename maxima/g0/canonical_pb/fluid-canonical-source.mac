/*
   Create kernels for the source terms of canonical poisson bracket
   for a fluid system such as Hasegawa-Mima or Hasegawa-Wakatani.
  
   the potential given by grad^2 phi = f, where f is (one of) the evolved quantities
   (vorticity in Hasegawa-Mima and Hasegawa-Wakatani)
*/

load("modal-basis")$
load("out-scripts")$
load(stringproc)$
load("scifac")$
load("canonical_pb/canonicalUtils")$
load("utilities")$
fpprec : 24$

buildFluidCanonicalPBSourceHasegawaMimaKernel(fh, funcNm, cdim, basisFun, polyOrder) := block(
  [varsC, bC, numC, phi_e, source_c],

  kill(varsC,bC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),

  numC : length(bC), 

  printf(fh, "void ~a(const double *dxv, double alpha, const double *phi, const double *n0, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm),
  printf(fh, "  // dxv[NDIM]: cell length.~%"),
  printf(fh, "  // alpha: Adiabaticity parameter for adiabatic coupling of vorticity and density (zero for Hasegawa-Mima).~%"),
  printf(fh, "  // phi: Potential in fluid system given by grad^2 phi = f where f is (one of) the evolved quantities.~%"),
  printf(fh, "  // n0: Background density gradient.~%"),
  printf(fh, "  // f: input state vector in center cell.~%"),
  printf(fh, "  // out: output increment in center cell.~%"),

  printf(fh, "  double dx = 2.0/dxv[0]; ~%"),
  printf(fh, "  double dy = 2.0/dxv[1]; ~%"),

  n0_e : doExpand1(n0, bC),
  phi_e : doExpand1(phi, bC),
  source_c : calcInnerProdList(varsC, 1, bC, dx*dy*(diff(phi_e, x)*diff(n0_e, y) - diff(phi_e, y)*diff(n0_e, x))), 
  writeCIncrExprs1(out, source_c),

  printf(fh, "} ~%"),
  flush_output(fh)
);

buildFluidCanonicalPBSourceHasegawaWakataniKernel(fh, funcNm, cdim, basisFun, polyOrder) := block(
  [varsC, bC, numC, phi_e, n_e, source_zeta_c, source_n_c],

  kill(varsC,bC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),

  numC : length(bC), 

  printf(fh, "void ~a(const double *dxv, double alpha, const double *phi, const double *n0, const double *adiabatic_coupling_phi_n, double* GKYL_RESTRICT out) ~%{ ~%", funcNm),
  printf(fh, "  // dxv[NDIM]: cell length.~%"),
  printf(fh, "  // alpha: Adiabaticity parameter for adiabatic coupling of vorticity and density (zero for Hasegawa-Mima).~%"),
  printf(fh, "  // phi: Potential in fluid system given by grad^2 phi = f where f is (one of) the evolved quantities.~%"),
  printf(fh, "  // n0: Background density gradient.~%"),
  printf(fh, "  // adiabatic_coupling_phi_n: (phi, n) array for adiabatic coupling, with potentially zonal component subtracted out.~%"),
  printf(fh, "  // out: output increment in center cell.~%"),

  printf(fh, "  double dx = 2.0/dxv[0]; ~%"),
  printf(fh, "  double dy = 2.0/dxv[1]; ~%"),
  printf(fh, "  const double *phi_adiabat = &adiabatic_coupling_phi_n[~a]; ~%", 0), 
  printf(fh, "  const double *n_adiabat = &adiabatic_coupling_phi_n[~a]; ~%", numC), 
  printf(fh, "  double *out_zeta = &out[~a]; ~%", 0),
  printf(fh, "  double *out_n = &out[~a]; ~%", numC),

  n0_e : doExpand1(n0, bC),
  /* phi and phi_adiabat may be different, as the total phi drives the turbulence through the 
     Poisson bracket term with the background gradient, but only the zonal component enters 
     into the adiabatic coupling when solving the modified Hasegawa-Wakatani. */
  phi_e : doExpand1(phi, bC),
  phi_adiabat_e : doExpand1(phi_adiabat, bC), 
  n_adiabat_e : doExpand1(n_adiabat, bC), 

  source_zeta_c : calcInnerProdList(varsC, 1, bC, alpha*(phi_adiabat_e - n_adiabat_e)), 
  source_n_c : calcInnerProdList(varsC, 1, bC, alpha*(phi_adiabat_e - n_adiabat_e) + dx*dy*(diff(phi_e, x)*diff(n0_e, y) - diff(phi_e, y)*diff(n0_e, x))), 
  writeCIncrExprs1(out_zeta, source_zeta_c),
  writeCIncrExprs1(out_n, source_n_c),

  printf(fh, "} ~%"),
  flush_output(fh)
);

buildFluidCanonicalPBSubtractZonalKernel(fh, funcNm, cdim, basisFun, polyOrder) := block(
  [varsC, bC, numC, phi_e, n_e, source_zeta_c, source_n_c],

  kill(varsC,bC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),
  /* 1D basis in x for subtracting zonal component */
  [varsC_1d,bC_1d] : loadBasis(basisFun, 1, polyOrder),

  numC : length(bC), 

  printf(fh, "void ~a(const double *phi_zonal, const double *n_zonal, double* GKYL_RESTRICT adiabatic_coupling_phi_n) ~%{ ~%", funcNm),
  printf(fh, "  // phi_zonal: 1/Ly int phi dy.~%"),
  printf(fh, "  // n_zonal: 1/Ly int n dy.~%"),
  printf(fh, "  // adiabatic_coupling_phi_n: (phi, n) array for adiabatic coupling, with zonal component subtracted out.~%"),
  printf(fh, "  double *out_phi = &adiabatic_coupling_phi_n[~a]; ~%", 0),
  printf(fh, "  double *out_n = &adiabatic_coupling_phi_n[~a]; ~%", numC),

  phi_zonal_e : doExpand1(phi_zonal, bC_1d), 
  n_zonal_e : doExpand1(n_zonal, bC_1d), 

  phi_zonal_c : calcInnerProdList(varsC, 1, bC, phi_zonal_e), 
  n_zonal_c : calcInnerProdList(varsC, 1, bC, n_zonal_e), 
  /* adiabatic_coupling_phi_n already contains (phi, n) so just subtract off the zonal piece from each component */
  for i : 1 thru numC do (
    if (phi_zonal_c[i] # 0) then (
      printf(fh, "  out_phi[~a] -= ~a; ~%", i-1, float(expand(phi_zonal_c[i]))),
      printf(fh, "  out_n[~a] -= ~a; ~%", i-1, float(expand(n_zonal_c[i])))
    )
  ), 

  printf(fh, "} ~%"),
  flush_output(fh)
);  