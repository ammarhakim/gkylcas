/* 
   Create kernels for the surface term of the specified 
   hamiltonian in canonical coordinates for a fluid
   canonical system such as incompressible Euler or
   Hasegawa-Wakatani.

   *hamil* is assumed to be written in canonical coordinates
   and for fluid systems is simply phi, the potential given by
   grad^2 phi = f, where f is (one of) the evolved quantities
   (vorticity in incompressible Euler and Hasegawa-Wakatani)
*/
load("modal-basis")$
load("out-scripts")$
load(stringproc)$
load("scifac")$
load("canonical_pb/canonicalUtils.mac")$
fpprec : 24$

calcFluidCanonicalPBSurfUpdateInDir(surfDir, fh, funcNm, cdim, basisFun, polyOrder) := block(
  [varsC, bC, numC, surfVar, varLabel, dirLabel, surfIntVars, surf_cvars, 
   surfNodes, bSurf, basisStr, NSurf, numNodes, NSurfIndexing, numNodesIndexing, rdSurfVar2, rdx2vec, 
   phi_e, alphaSurfL_e, alphaSurfR_e, fl_e, fc_e, fr_e, fUpL_e, fUpR_e, GhatL_c, GhatR_c, GhatL_e, GhatR_e, 
   incrL_c, incrR_c],

  kill(varsC,bC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),

  numC : length(bC), 

  surfVar : varsC[surfDir],         /* Surface variable. */
  varLabel : makelist(string(varsC[d]),d,1,cdim),
  dirLabel : varLabel[surfDir],

  surfIntVars : delete(surfVar,varsC), 
  surf_cvars : delete(surfVar, makelist(varsC[i],i,1,cdim)),
  nodeVars : surfIntVars,

  /* Generate surface basis. this produces the ndim-1 orthogonal basis with no surfVar dependence. */
  /* Also generate necessary basis strings and surface nodes given by tensor product of Gauss-Legendre quadrature points */
  bSurf : basisFromVars(basisFun,surfIntVars,polyOrder), 

  surfNodes : gaussOrd(polyOrder+1, cdim-1),

  basisStr : sconcat(basisFun, "_", cdim, "x", "_p", polyOrder),

  NSurf : length(bSurf),
  numNodes  : length(surfNodes),

  NSurfIndexing : NSurf,
  numNodesIndexing : numNodes,

  print("Working on ", funcNm),
  printf(fh, "GKYL_CU_DH double ~a(const double *w, const double *dxv, const double *phi, 
  const double *alpha_surf_l, const double *alpha_surf_r, 
  const double *sgn_alpha_surf_l, const double *sgn_alpha_surf_r, 
  const int *const_sgn_alpha_l, const int *const_sgn_alpha_r, 
  const double *fl, const double *fc, const double *fr, double* GKYL_RESTRICT out) ~%{ ~%", funcNm),
  printf(fh, "  // w[NDIM]: cell-center.~%"),
  printf(fh, "  // dxv[NDIM]: cell length.~%"),
  printf(fh, "  // phi: Potential in fluid system given by grad^2 phi = f where f is (one of) the evolved quantities.~%"),
  printf(fh, "  // alpha_surf_l: Surface expansion of phase space flux on the left.~%"),
  printf(fh, "  // alpha_surf_r: Surface expansion of phase space flux on the right.~%"),
  printf(fh, "  // sgn_alpha_surf_l: sign(alpha_surf_l) at quadrature points.~%"),
  printf(fh, "  // sgn_alpha_surf_r: sign(alpha_surf_r) at quadrature points.~%"),
  printf(fh, "  // const_sgn_alpha_l: Boolean array true if sign(alpha_surf_l) is only one sign, either +1 or -1.~%"),
  printf(fh, "  // const_sgn_alpha_r: Boolean array true if sign(alpha_surf_r) is only one sign, either +1 or -1.~%"),
  printf(fh, "  // fl,fc,fr: input state vector in left, center and right cells.~%"),
  printf(fh, "  // out: output increment in center cell.~%"),
  printf(fh, "~%"),

  /* Declare cell spacing for evaluating surface integrals. */
  rdx2vec : makelist(eval_string(sconcat("rd",varLabel[i],"2")),i,1,cdim),
  /* Initiate variables for canonical PB calculation 
     This creates the appropriate variable pair for fluids 
     so we can re-use all the same infrastructure we used for the 
     kinetic canonical PB computation. */
  varsP : [varsC[1], varsC[2]],

  rdSurfVar2 : eval_string(sconcat("rd",dirLabel,"2")),
  printf(fh, "  double ~a = 2.0/dxv[~a];~%", rdSurfVar2, surfDir-1),
  printf(fh, "~%"),

  /* Expand potential in the configuration basis. */
  phi_e : doExpand1(phi,bC),

  /* Compute the surface alpha but do *not* write it out; we already computed it
     We just need to re-compute it here in Maxima to get the right sparsity pattern */
  alphaSurfL_e : calc_canonical_pb_alpha_no_write(fh,surfDir,bC,varsP,bSurf,basisFun,rdx2vec,rdx2vec2,phi_e,"L",1,1,2),
  alphaSurfR_e : calc_canonical_pb_alpha_no_write(fh,surfDir,bC,varsP,bSurf,basisFun,rdx2vec,rdx2vec2,phi_e,"R",1,1,2),
  printf(fh, "  const double *alphaL = &alpha_surf_l[~a];~%", (surfDir-1)*NSurfIndexing),
  printf(fh, "  const double *alphaR = &alpha_surf_r[~a];~%", (surfDir-1)*NSurfIndexing),
  printf(fh, "  const double *sgn_alpha_surfL = &sgn_alpha_surf_l[~a];~%", (surfDir-1)*numNodesIndexing),
  printf(fh, "  const double *sgn_alpha_surfR = &sgn_alpha_surf_r[~a];~%", (surfDir-1)*numNodesIndexing),

  printf(fh, "  const int *const_sgn_alphaL = &const_sgn_alpha_l[~a];~%", surfDir-1),
  printf(fh, "  const int *const_sgn_alphaR = &const_sgn_alpha_r[~a];~%", surfDir-1),
  printf(fh, "~%"),
  fl_e : doExpand1(fl, bC),
  fc_e : doExpand1(fc, bC),
  fr_e : doExpand1(fr, bC),

  calcAndWrite_CanonicalPBfUpwind(fh,surfDir,surfVar,surfIntVars,bSurf,NSurf,fl_e,fc_e,basisStr,"L",cdim, vdim, polyOrder,basisFun,true),
  calcAndWrite_CanonicalPBfUpwind(fh,surfDir,surfVar,surfIntVars,bSurf,NSurf,fc_e,fr_e,basisStr,"R",cdim, vdim, polyOrder,basisFun,true),

  fUpL_e : doExpand1(fUpL, bSurf), 
  fUpR_e : doExpand1(fUpR, bSurf), 
  printf(fh, "  double GhatL[~a] = {0.};~%", NSurf),
  printf(fh, "  double GhatR[~a] = {0.};~%", NSurf), 
  GhatL_c : calcInnerProdList(surfIntVars, 1, bSurf, alphaSurfL_e*fUpL_e), 
  GhatR_c : calcInnerProdList(surfIntVars, 1, bSurf, alphaSurfR_e*fUpR_e), 
  writeCExprsNoExpand1(GhatL, gcfac(float(expand(GhatL_c)))),
  printf(fh, "~%"),
  flush_output(fh),
  writeCExprsNoExpand1(GhatR, gcfac(float(expand(GhatR_c)))),  
  printf(fh, "~%"),
  flush_output(fh),
  GhatL_e : doExpand1(GhatL, bSurf), 
  GhatR_e : doExpand1(GhatR, bSurf), 

  incrL_c : calcInnerProdList(surfIntVars, 1.0, subst(surfVar=-1, bC), GhatL_e),
  incrR_c : calcInnerProdList(surfIntVars, -1.0, subst(surfVar=1, bC), GhatR_e),

  /* Write the actual increments to the left and right cells, which are
     built with incr, dxv factors and some sign changes. */
  writeCIncrExprsNoExpand1(out, rdSurfVar2*(incrL_c+incrR_c)),
  printf(fh, "~%"),
  flush_output(fh),

  /* Extra 1/2 factor is because we are multiplying by 2/dx and we only need 1/dx 
     Also need to divide out 1/sqrt(2^(pDim-1)) to convert 0th component of surface alpha
     expansion to cell average (so we take the surface averaged alpha as our estimate of the
     maximum velocity to compute the largest frequency) */
  printf(fh, "  double cflFreq = fmax(fabs(alphaL[0]), fabs(alphaR[0])); ~%"),
  printf(fh, "  return ~a*cflFreq; ~%",float(0.5*(2*polyOrder+1)*rdSurfVar2*2.0^(-0.5*(cdim-1)))),
  printf(fh, "~%"),

  printf(fh, "} ~%"),
  flush_output(fh)

)$

calcTwoFluidCanonicalPBSurfUpdateInDir(surfDir, fh, funcNm, cdim, basisFun, polyOrder) := block(
  [varsC, bC, numC, surfVar, varLabel, dirLabel, surfIntVars, surf_cvars, 
   surfNodes, bSurf, basisStr, NSurf, numNodes, NSurfIndexing, numNodesIndexing, rdSurfVar2, rdx2vec, 
   phi_e, alphaSurfL_e, alphaSurfR_e, fl_e, fc_e, fr_e, fUpL_e, fUpR_e, GhatL_c, GhatR_c, GhatL_e, GhatR_e, 
   incrL_c, incrR_c],
  /* NOTE: THIS FUNCTION REQUIRES A FURTHER SEARCH AND REPLACE AFTER GENERATION TO fUpL -> f1/2UpL, SAME FOR R */
  kill(varsC,bC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),

  numC : length(bC), 

  surfVar : varsC[surfDir],         /* Surface variable. */
  varLabel : makelist(string(varsC[d]),d,1,cdim),
  dirLabel : varLabel[surfDir],

  surfIntVars : delete(surfVar,varsC), 
  surf_cvars : delete(surfVar, makelist(varsC[i],i,1,cdim)),
  nodeVars : surfIntVars,

  /* Generate surface basis. this produces the ndim-1 orthogonal basis with no surfVar dependence. */
  /* Also generate necessary basis strings and surface nodes given by tensor product of Gauss-Legendre quadrature points */
  bSurf : basisFromVars(basisFun,surfIntVars,polyOrder), 

  surfNodes : gaussOrd(polyOrder+1, cdim-1),

  basisStr : sconcat(basisFun, "_", cdim, "x", "_p", polyOrder),

  NSurf : length(bSurf),
  numNodes  : length(surfNodes),

  NSurfIndexing : NSurf,
  numNodesIndexing : numNodes,

  print("Working on ", funcNm),
  printf(fh, "GKYL_CU_DH double ~a(const double *w, const double *dxv, const double *phi, 
  const double *alpha_surf_l, const double *alpha_surf_r, 
  const double *sgn_alpha_surf_l, const double *sgn_alpha_surf_r, 
  const int *const_sgn_alpha_l, const int *const_sgn_alpha_r, 
  const double *fl, const double *fc, const double *fr, double* GKYL_RESTRICT out) ~%{ ~%", funcNm),
  printf(fh, "  // w[NDIM]: cell-center.~%"),
  printf(fh, "  // dxv[NDIM]: cell length.~%"),
  printf(fh, "  // phi: Potential in fluid system given by grad^2 phi = f where f is (one of) the evolved quantities.~%"),
  printf(fh, "  // alpha_surf_l: Surface expansion of phase space flux on the left.~%"),
  printf(fh, "  // alpha_surf_r: Surface expansion of phase space flux on the right.~%"),
  printf(fh, "  // sgn_alpha_surf_l: sign(alpha_surf_l) at quadrature points.~%"),
  printf(fh, "  // sgn_alpha_surf_r: sign(alpha_surf_r) at quadrature points.~%"),
  printf(fh, "  // const_sgn_alpha_l: Boolean array true if sign(alpha_surf_l) is only one sign, either +1 or -1.~%"),
  printf(fh, "  // const_sgn_alpha_r: Boolean array true if sign(alpha_surf_r) is only one sign, either +1 or -1.~%"),
  printf(fh, "  // fl,fc,fr: input state vector in left, center and right cells.~%"),
  printf(fh, "  // out: output increment in center cell.~%"),
  printf(fh, "~%"),

  /* Declare cell spacing for evaluating surface integrals. */
  rdx2vec : makelist(eval_string(sconcat("rd",varLabel[i],"2")),i,1,cdim),
  /* Initiate variables for canonical PB calculation 
     This creates the appropriate variable pair for fluids 
     so we can re-use all the same infrastructure we used for the 
     kinetic canonical PB computation. */
  varsP : [varsC[1], varsC[2]],

  rdSurfVar2 : eval_string(sconcat("rd",dirLabel,"2")),
  printf(fh, "  double ~a = 2.0/dxv[~a];~%", rdSurfVar2, surfDir-1),
  printf(fh, "~%"),

  /* Expand potential in the configuration basis. */
  phi_e : doExpand1(phi,bC),

  /* Compute the surface alpha but do *not* write it out; we already computed it
     We just need to re-compute it here in Maxima to get the right sparsity pattern */
  alphaSurfL_e : calc_canonical_pb_alpha_no_write(fh,surfDir,bC,varsP,bSurf,basisFun,rdx2vec,rdx2vec2,phi_e,"L",1,1,2),
  alphaSurfR_e : calc_canonical_pb_alpha_no_write(fh,surfDir,bC,varsP,bSurf,basisFun,rdx2vec,rdx2vec2,phi_e,"R",1,1,2),
  printf(fh, "  const double *alphaL = &alpha_surf_l[~a];~%", (surfDir-1)*NSurfIndexing),
  printf(fh, "  const double *alphaR = &alpha_surf_r[~a];~%", (surfDir-1)*NSurfIndexing),
  printf(fh, "  const double *sgn_alpha_surfL = &sgn_alpha_surf_l[~a];~%", (surfDir-1)*numNodesIndexing),
  printf(fh, "  const double *sgn_alpha_surfR = &sgn_alpha_surf_r[~a];~%", (surfDir-1)*numNodesIndexing),

  printf(fh, "  const int *const_sgn_alphaL = &const_sgn_alpha_l[~a];~%", surfDir-1),
  printf(fh, "  const int *const_sgn_alphaR = &const_sgn_alpha_r[~a];~%", surfDir-1),
  printf(fh, "~%"),

  printf(fh, "  const double *f1l = &fl[~a]; ~%", 0),
  printf(fh, "  const double *f2l = &fl[~a]; ~%", numC),
  printf(fh, "  const double *f1c = &fc[~a]; ~%", 0),
  printf(fh, "  const double *f2c = &fc[~a]; ~%", numC),
  printf(fh, "  const double *f1r = &fr[~a]; ~%", 0),
  printf(fh, "  const double *f2r = &fr[~a]; ~%", numC),
  printf(fh, "  double *out1 = &out[~a]; ~%", 0),
  printf(fh, "  double *out2 = &out[~a]; ~%", numC),
  f1l_e : doExpand1(f1l, bC),
  f2l_e : doExpand1(f2l, bC),
  f1c_e : doExpand1(f1c, bC),
  f2c_e : doExpand1(f2c, bC),
  f1r_e : doExpand1(f1r, bC),
  f2r_e : doExpand1(f2r, bC),

  calcAndWrite_CanonicalPBfUpwind(fh,surfDir,surfVar,surfIntVars,bSurf,NSurf,f1l_e,f1c_e,basisStr,"L",cdim, vdim, polyOrder,basisFun,true),
  calcAndWrite_CanonicalPBfUpwind(fh,surfDir,surfVar,surfIntVars,bSurf,NSurf,f1c_e,f1r_e,basisStr,"R",cdim, vdim, polyOrder,basisFun,true),

  f1UpL_e : doExpand1(f1UpL, bSurf), 
  f1UpR_e : doExpand1(f1UpR, bSurf), 
  printf(fh, "  double Ghat1L[~a] = {0.};~%", NSurf),
  printf(fh, "  double Ghat1R[~a] = {0.};~%", NSurf), 
  Ghat1L_c : calcInnerProdList(surfIntVars, 1, bSurf, alphaSurfL_e*f1UpL_e), 
  Ghat1R_c : calcInnerProdList(surfIntVars, 1, bSurf, alphaSurfR_e*f1UpR_e), 
  writeCExprsNoExpand1(Ghat1L, gcfac(float(expand(Ghat1L_c)))),
  printf(fh, "~%"),
  flush_output(fh),
  writeCExprsNoExpand1(Ghat1R, gcfac(float(expand(Ghat1R_c)))),  
  printf(fh, "~%"),
  flush_output(fh),
  Ghat1L_e : doExpand1(Ghat1L, bSurf), 
  Ghat1R_e : doExpand1(Ghat1R, bSurf), 

  incr1L_c : calcInnerProdList(surfIntVars, 1.0, subst(surfVar=-1, bC), Ghat1L_e),
  incr1R_c : calcInnerProdList(surfIntVars, -1.0, subst(surfVar=1, bC), Ghat1R_e),

  /* Write the actual increments to the left and right cells, which are
     built with incr, dxv factors and some sign changes. */
  writeCIncrExprsNoExpand1(out1, rdSurfVar2*(incr1L_c+incr1R_c)),
  printf(fh, "~%"),
  flush_output(fh),

  /* Now update the second fluid identically to the first */
  calcAndWrite_CanonicalPBfUpwind(fh,surfDir,surfVar,surfIntVars,bSurf,NSurf,f2l_e,f2c_e,basisStr,"L",cdim, vdim, polyOrder,basisFun,true),
  calcAndWrite_CanonicalPBfUpwind(fh,surfDir,surfVar,surfIntVars,bSurf,NSurf,f2c_e,f2r_e,basisStr,"R",cdim, vdim, polyOrder,basisFun,true),

  f2UpL_e : doExpand1(f2UpL, bSurf), 
  f2UpR_e : doExpand1(f2UpR, bSurf), 
  printf(fh, "  double Ghat2L[~a] = {0.};~%", NSurf),
  printf(fh, "  double Ghat2R[~a] = {0.};~%", NSurf), 
  Ghat2L_c : calcInnerProdList(surfIntVars, 1, bSurf, alphaSurfL_e*f2UpL_e), 
  Ghat2R_c : calcInnerProdList(surfIntVars, 1, bSurf, alphaSurfR_e*f2UpR_e), 
  writeCExprsNoExpand1(Ghat2L, gcfac(float(expand(Ghat2L_c)))),
  printf(fh, "~%"),
  flush_output(fh),
  writeCExprsNoExpand1(Ghat2R, gcfac(float(expand(Ghat2R_c)))),  
  printf(fh, "~%"),
  flush_output(fh),
  Ghat2L_e : doExpand1(Ghat2L, bSurf), 
  Ghat2R_e : doExpand1(Ghat2R, bSurf), 

  incr2L_c : calcInnerProdList(surfIntVars, 1.0, subst(surfVar=-1, bC), Ghat2L_e),
  incr2R_c : calcInnerProdList(surfIntVars, -1.0, subst(surfVar=1, bC), Ghat2R_e),

  /* Write the actual increments to the left and right cells, which are
     built with incr, dxv factors and some sign changes. */
  writeCIncrExprsNoExpand1(out2, rdSurfVar2*(incr2L_c+incr2R_c)),
  printf(fh, "~%"),
  flush_output(fh),

  /* Extra 1/2 factor is because we are multiplying by 2/dx and we only need 1/dx 
     Also need to divide out 1/sqrt(2^(pDim-1)) to convert 0th component of surface alpha
     expansion to cell average (so we take the surface averaged alpha as our estimate of the
     maximum velocity to compute the largest frequency) */
  printf(fh, "  double cflFreq = fmax(fabs(alphaL[0]), fabs(alphaR[0])); ~%"),
  printf(fh, "  return ~a*cflFreq; ~%",float(0.5*(2*polyOrder+1)*rdSurfVar2*2.0^(-0.5*(cdim-1)))),
  printf(fh, "~%"),

  printf(fh, "} ~%"),
  flush_output(fh)

)$
