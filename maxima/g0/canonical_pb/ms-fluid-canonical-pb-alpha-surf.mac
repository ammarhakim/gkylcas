/*
  Generate the kernel for surface expansions of the characteristics
  in a fluid canonical Poisson bracket equation system. Only works 
  in 2x for now (incompressible Euler, Hasegawa-Wakatani, etc.)

  The functions called in this file are in fluid-canonical-alpha-surf.mac.
*/
load("canonical_pb/fluid-canonical-alpha-surf")$
ratprint: false;

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 2$
maxCdim_Ser : 2$

/* Tensor product basis. */
minPolyOrder_Tensor : 1$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 2$
maxCdim_Tensor : 0$

/* ...... END OF USER INPUTS........ */

/* To generate other bases, just add corresponding column to arrays below. */
bName        : ["ser","tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$

clabels : ["x","y","z"]$

/* Generate kernels of selected types. */
for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    for polyOrder : minPolyOrder[bInd] thru maxPolyOrder[bInd] do (
      /* Surface alpha in direction dir in configuration space.*/
      for dir : 1 thru c do (
        fname : sconcat("~/max-out/canonical_pb_alpha_surf",clabels[dir],"_", c, "x_", bName[bInd], "_p", polyOrder, ".c"),
        disp(printf(false,"Creating alpha surf~a file: ~a",clabels[dir],fname)),
  
        fh : openw(fname),
        printf(fh, "#include <gkyl_canonical_pb_kernels.h> ~%"),
        funcName : sconcat("canonical_pb_alpha_surf",clabels[dir],"_", c, "x_", bName[bInd], "_p", polyOrder),
        buildCanonicalPBFluidAlphaKernel(dir, fh, funcName, c, bName[bInd], polyOrder, false), /* Not an edge */
        close(fh),

        fname : sconcat("~/max-out/canonical_pb_alpha_edge_surf",clabels[dir],"_", c, "x_", bName[bInd], "_p", polyOrder, ".c"),
        disp(printf(false,"Creating alpha edge surf~a file: ~a",clabels[dir],fname)),
  
        fh : openw(fname),
        printf(fh, "#include <gkyl_canonical_pb_kernels.h> ~%"),

        funcName : sconcat("canonical_pb_alpha_edge_surf",clabels[dir],"_", c, "x_", bName[bInd], "_p", polyOrder),
        buildCanonicalPBFluidAlphaKernel(dir, fh, funcName, c, bName[bInd], polyOrder, true), /* An edge */
        close(fh)
      )
    )
  )
)$
