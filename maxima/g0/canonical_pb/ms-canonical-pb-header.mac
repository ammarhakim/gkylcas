/* Compute the header file for canonical_pb kernels. */

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
maxCdim_Ser : 3$

/* Tensor order basis. No need to generate p=1. */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
maxCdim_Tensor : 0$

/* ...... END OF USER INPUTS........ */

/* To generate other bases, just add corresponding column to arrays below. */
bName        : ["ser"]$
minPolyOrder : [minPolyOrder_Ser]$
maxPolyOrder : [maxPolyOrder_Ser]$
minCdim      : [minCdim_Ser]$
maxCdim      : [maxCdim_Ser]$

clabels : ["x","y","z"]$
vlabels : ["vx","vy","vz"]$

printPrototypes() := block([],
  for bInd : 1 thru length(bName) do (
    for c : minCdim[bInd] thru maxCdim[bInd] do (
      v : c,

      maxPolyOrderB : maxPolyOrder[bInd],
      if (c=3) then maxPolyOrderB : 1, /* Only declare p=1 kernels for 3x3v */
      for polyOrder : 1 thru maxPolyOrderB do (

        printf(fh, "GKYL_CU_DH double canonical_pb_vol_~ax~av_~a_p~a(const double *w, const double *dxv, const double *hamil,  const double *fin, double* GKYL_RESTRICT out); ~%", c, v, bName[bInd], polyOrder),
      
        for surfDir : 1 thru c*2 do (
          if surfDir<=c then (dirlabel : clabels[surfDir]) else (dirlabel : vlabels[surfDir-c]),

          printf(fh, "GKYL_CU_DH int canonical_pb_alpha_surf~a_~ax~av_~a_p~a(const double *w, const double *dxv, const double *hamil, 
            double* GKYL_RESTRICT alpha_surf, double* GKYL_RESTRICT sgn_alpha_surf); ~%", dirlabel, c, v, bName[bInd], polyOrder),
          if (surfDir < c+1) then (
            printf(fh, "GKYL_CU_DH int canonical_pb_alpha_edge_surf~a_~ax~av_~a_p~a(const double *w, const double *dxv, const double *hamil,
              double* GKYL_RESTRICT alpha_surf, double* GKYL_RESTRICT sgn_alpha_surf); ~%", dirlabel, c, v, bName[bInd], polyOrder)
          ),
          printf(fh, "GKYL_CU_DH double canonical_pb_surf~a_~ax~av_~a_p~a(const double *w, const double *dxv, const double *hamil, 
          const double *alpha_surf_l, const double *alpha_surf_r, 
          const double *sgn_alpha_surf_l, const double *sgn_alpha_surf_r, 
          const int *const_sgn_alpha_l, const int *const_sgn_alpha_r, 
          const double *fl, const double *fc, const double *fr, double* GKYL_RESTRICT out); ~%", dirlabel, c, v, bName[bInd], polyOrder),
          printf(fh, "GKYL_CU_DH double canonical_pb_boundary_surf~a_~ax~av_~a_p~a(const double *w, const double *dxv, const double *hamil,
          const double *alpha_surf_edge, const double *alpha_surf_skin, 
          const double *sgn_alpha_surf_edge, const double *sgn_alpha_surf_skin, 
          const int *const_sgn_alpha_edge, const int *const_sgn_alpha_skin, 
          const int edge, const double *fedge, const double *fskin, double* GKYL_RESTRICT out); ~%", dirlabel, c, v, bName[bInd], polyOrder)
        ), 
        printf(fh, "~%")
      )
    )
  )
)$

fh : openw("~/max-out/gkyl_canonical_pb_kernels.h")$
printf(fh, "#pragma once~%")$
printf(fh, "~%")$
printf(fh, "#include <math.h>~%")$
printf(fh, "#include <gkyl_util.h>~%")$
printf(fh, "~%")$
printf(fh, "EXTERN_C_BEG~%")$
printf(fh, "~%")$
printPrototypes()$
printf(fh, "~%")$
printf(fh, "EXTERN_C_END~%")$
close(fh)$
