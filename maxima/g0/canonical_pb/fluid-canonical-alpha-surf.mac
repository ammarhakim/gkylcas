/*
   Create kernels for the surface expansions of the flux alpha 
   for a canonical Poisson bracket fluid system, e.g., incomressible Euler or Hasegawa-Wakatani.
   Evaluates the Poisson bracket alpha = dz/dt = {z, phi} at the corresponding surface
   and then projects the resulting evaluation onto a surface basis in each direction
   of the update. Each cell owns the *lower* surface expansion in that direction.

   Note that dz/dt = {z, phi} is a higher order expansion and this order of operations
   1. Expand alpha = dz/dt = {z, phi}
   2. Evaluate alpha at desired surface
   3. Project alpha onto surface basis
   *must* be respected to insure alpha is continuous at phase space interfaces like 
   we require it to be (if we create lower order intermediate variables or pre-project
   alpha in the volume and then evaluate it at surfaces, we may destroy the continuity
   of the surface alpha).

   *hamil* is assumed to be written in canonical coordinates
*/

load("modal-basis")$
load("out-scripts")$
load(stringproc)$
load("scifac")$
load("canonical_pb/canonicalUtils.mac")$
/*load("nodal_operations/nodal_functions")$*/
fpprec : 24$

buildCanonicalPBFluidAlphaKernel(surfDir, fh, funcNm, cdim, basisFun, polyOrder, edge) := block(
  [bC, varsC, numC, surfVar, varLabel, dirLabel, surfIntVars, surf_cvars, 
  surfNodes, nodeVars, bSurf,  NSurf, numNodes, NSurfIndexing, numNodesIndexing, 
  rdx2vec, phi_e, alphaSurf],

  kill(varsC,bC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),

  numC : length(bC), 

  surfVar : varsC[surfDir],         /* Surface variable. */
  varLabel : makelist(string(varsC[d]),d,1,cdim),
  dirLabel : varLabel[surfDir],

  surfIntVars : delete(surfVar,varsC), 
  surf_cvars : delete(surfVar, makelist(varsC[i],i,1,cdim)),
  nodeVars : surfIntVars,

  /* Generate surface basis. this produces the ndim-1 orthogonal basis with no surfVar dependence. */
  /* Also generate necessary basis strings and surface nodes given by tensor product of Gauss-Legendre quadrature points */
  bSurf : basisFromVars(basisFun,surfIntVars,polyOrder), 

  surfNodes : gaussOrd(polyOrder+1, cdim-1),

  basisStr : sconcat(basisFun, "_", cdim, "x", "_p", polyOrder),

  NSurf : length(bSurf),
  numNodes  : length(surfNodes),

  NSurfIndexing : NSurf,
  numNodesIndexing : numNodes,

  print("Working on ", funcNm),
  printf(fh, "GKYL_CU_DH int ~a(const double *w, const double *dxv, const double *phi,
   double* GKYL_RESTRICT alpha_surf, double* GKYL_RESTRICT sgn_alpha_surf) ~%{ ~%", funcNm),
  printf(fh, "  // w[NDIM]: cell-center.~%"),
  printf(fh, "  // dxv[NDIM]: cell length.~%"),
  printf(fh, "  // phi: Potential in fluid system given by grad^2 phi = f where f is (one of) the evolved quantities.~%"),
  printf(fh, "  // alpha_surf: output surface phase space flux in each direction (cdim + 1 components).~%"),
  printf(fh, "  //             Note: Each cell owns their *lower* edge surface evaluation.~%"),
  printf(fh, "  // sgn_alpha_surf: output sign(alpha_surf) in each direction at quadrature points (cdim + 1 components).~%"),
  printf(fh, "  //                 Note: Each cell owns their *lower* edge sign(alpha_surf).~%"),
  printf(fh, "  // returns int const_sgn_alpha (true if sign(alpha_surf) is only one sign, either +1 or -1).~%"),
  printf(fh, "~%"),

  /* Declare cell-center variables and variables multiplying gradients. */
  for d : 1 thru cdim do (
    printf(fh, "  double w~a = w[~a];~%", varLabel[d], d-1),
    printf(fh, "  double rd~a2 = 2.0/dxv[~a];~%", varLabel[d], d-1)
  ),
  printf(fh, "~%"),
  rdx2vec : makelist(eval_string(sconcat("rd",varLabel[i],"2")),i,1,cdim),
  /* Initiate variables for canonical PB calculation 
     This creates the appropriate variable pair for fluids 
     so we can re-use all the same infrastructure we used for the 
     kinetic canonical PB computation. */
  varsP : [varsC[1], varsC[2]],

  /* Expand potential in the configuration basis. */
  phi_e : doExpand1(phi,bC),

  /* Calculate and write phase space velocity alpha in direction surfDir. */
  /* We assume alpha.n is continuous across boundary, although phi may not be. */
  if (edge = true) then (
    /* alpha_surf owns the *lower* edge surface expansion, so write out a separate
       set of kernels if we are on the edge so we also can evaluate the correct 
       alpha_surf at the upper configuration space boundary without evaluating
       quantities such as geometry in the ghost cells where they are not defined */
    printf(fh, "  double *alphaR = &alpha_surf[~a];~%", (surfDir-1)*NSurfIndexing),
    printf(fh, "  double *sgn_alpha_surfR = &sgn_alpha_surf[~a];~%", (surfDir-1)*numNodesIndexing),
    alphaSurf : calcAndWrite_CanonicalPB_alpha(fh,surfDir,bC,varsP,bSurf,basisFun,rdx2vec,rdx2vec2,phi_e,"R",1,1,2),
    calcAndWrite_sgn_CanonicalPB_alpha(fh,nodeVars,surfNodes,numNodes,alphaSurf,"R")
  )
  else (
    printf(fh, "  double *alphaL = &alpha_surf[~a];~%", (surfDir-1)*NSurfIndexing),
    printf(fh, "  double *sgn_alpha_surfL = &sgn_alpha_surf[~a];~%", (surfDir-1)*numNodesIndexing),
    alphaSurf : calcAndWrite_CanonicalPB_alpha(fh,surfDir,bC,varsP,bSurf,basisFun,rdx2vec,rdx2vec2,phi_e,"L",1,1,2),
    calcAndWrite_sgn_CanonicalPB_alpha(fh,nodeVars,surfNodes,numNodes,alphaSurf,"L")
  ),
  printf(fh, "  return const_sgn_alpha_surf; ~%"),
  printf(fh, "~%"),
  flush_output(fh),
  printf(fh, "} ~%")
)$  