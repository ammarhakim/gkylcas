/*
   Create kernels for the volume term of the canonical_pb equation.
*/

load("modal-basis")$
load("out-scripts")$
load(stringproc)$
load("scifac")$
load("canonical_pb/canonicalUtils")$
load("utilities")$
fpprec : 24$

buildCanonicalPBVolKernel(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC, varsP, bC, bP, numC, numP, pDim, varsV, varLabel, rdx2vec, rdv2vec, 
   alphaSum_e, vd, dir, dirLabel, wDir, rdDirVar2, dirVar, z, q, p, dq, dp, 
   alpha, alphaUp, alpha_c, alphaLabel, clst, alphaNoZero_c, alphaDotGradBasis_e, hamil],

  kill(varsC,varsP,bC,bP),

  [varsC,bC,varsP,bP] : loadPhaseBasis(basisFun, cdim, vdim, polyOrder),
  numC : length(bC),  numP : length(bP), pDim  : length(varsP),
  varsV : slcn_v(varsP,cdim),

  varLabel : makelist(string(varsP[d]),d,1,pDim),

  print("Working on ", funcNm),
  printf(fh, "GKYL_CU_DH double ~a(const double *w, const double *dxv, const double *hamil, const double *fin, double* GKYL_RESTRICT out) ~%{ ~%", funcNm),
  printf(fh, "  // w[NDIM]: cell-center.~%"),
  printf(fh, "  // dxv[NDIM]: cell length.~%"),
  printf(fh, "  // hamil: hamiltonian.~%"),
  printf(fh, "  // fin: Distribution function.~%"),
  printf(fh, "  // out: output increment.~%"),
  printf(fh, "~%"),

  /* Declare cell-center variables and variables multiplying gradients. */
  for d : 1 thru pDim do (
    printf(fh, "  double w~a = w[~a];~%", varLabel[d], d-1),
    printf(fh, "  double rd~a2 = 2.0/dxv[~a];~%", varLabel[d], d-1)
  ),
  printf(fh, "~%"),
  rdx2vec : makelist(eval_string(sconcat("rd",varLabel[i],"2")),i,1,cdim),
  rdv2vec : makelist(eval_string(sconcat("rd",varLabel[i],"2")),i,cdim+1,pDim),

    /* Declare variables with squared of cell centers and rdx2 variables. */
  for d : 1 thru pDim do (
    printf(fh, "  double w~aSq = w[~a]*w[~a];~%", varLabel[d], d-1, d-1),
    printf(fh, "  double rd~a2Sq = rd~a2*rd~a2;~%", varLabel[d], varLabel[d], varLabel[d])
  ),
  printf(fh, "~%"),

  /* Compute Hamiltonian and expand it on the phase basis. */
  hamil : doExpand1(hamil,bP),

  alphaSum_e : 0,
  /* Note: no contribution from mu. */
  /* if vdim = 0 then (vd : 0) else (vd : 1), */
  for dir : 1 thru cdim+vdim do (

    dirLabel : varLabel[dir],
      
    /* Calculate phase space velocity alpha_d = {z[d], H} = dz[d]/dt. */
    wDir      : eval_string(sconcat("w",dirLabel)),
    rdDirVar2 : eval_string(sconcat("rd",dirLabel,"2")),
    dirVar    : varsP[dir],         /* Variable in current direction. */
    z : wDir+dirVar/rdDirVar2,
    q : varsC, 
    p : varsV, 
    dq : rdx2vec, /* Rename */
    dp : rdv2vec,
    alpha : PB(z,hamil,q,p,dq,dp),
    alphaUp : alpha,

    /* Project alpha on basis and write to array. */
    printf(fh, "  double alpha~a[~a] = {0.}; ~%", dirLabel, numP),
    inner_prod_val : calcInnerProdList(varsP, 1, bP, alpha),
    alpha_c    : fullratsimp(inner_prod_val*rdDirVar2),
    alphaLabel : eval_string(sconcat("alpha", dirLabel)),
    replaceList : [rdx2^2=rdx2Sq, rdy2^2=rdy2Sq , rdz2^2=rdz2Sq, rdvx2^2=rdvx2Sq, rdvy2^2=rdvy2Sq , rdvz2^2=rdvz2Sq],
    writeCExprsNoExpand1(alphaLabel, gcfac(expand(facsum(subst(replaceList, alpha_c),append(rdx2vec,rdv2vec))))),
    /* clst : [rdx2vec, rdv2vec],
    writeCExprsCollect1(alphaLabel, alpha_c, clst), */
    printf(fh, "~%"),
    flush_output(fh),
    alphaNoZero_c : doMakeExprLst(alpha_c, alphaLabel),
    alpha       : doExpand(alphaNoZero_c, bP),

    /* Note: factor of 2/dxv already included in alpha. */
    alphaDotGradBasis_e : alpha*diff(bP, dirVar),

    /* Accumulate alpha.grad(w) in this direction to the direction-summed alpha.grad(w). */
    alphaSum_e : alphaSum_e + alphaDotGradBasis_e
  ),

  /* Expand distribution function on basis. */
  f_e : doExpand1(fin,bP),

  volTerm_c : fullratsimp(innerProd(varsP, 1, f_e, alphaSum_e)),
  writeCIncrExprsNoExpand(gcfac(float(subst(replaceList, facsum(volTerm_c,append(rdx2vec,rdv2vec)))))),
  /* writeCIncrExprsNoExpand(gcfac(float(expand(volTerm_c)))), */
  flush_output(fh),
  printf(fh, "~%"),

  /* Evaluate CFL frequency in surface kernels. */
  printf(fh, "  return 0.; ~%"),
  printf(fh, "} ~%"),
  flush_output(fh)
)$