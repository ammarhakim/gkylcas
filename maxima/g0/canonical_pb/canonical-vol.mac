/*
   Create kernels for the volume term of canonical poisson bracket.
  
   *hamil* is assumed to be written in canonical coordinates
*/

load("modal-basis")$
load("out-scripts")$
load(stringproc)$
load("scifac")$
load("canonical_pb/canonicalUtils")$
load("utilities")$
fpprec : 24$

varsV : [vx, vy, vz]$
dxv : [dxv0, dxv1, dxv2, dxv3, dxv4, dxv5]$
dxdvInv : [dxdvInv0, dxdvInv1, dxdvInv2]$
dxInv : [dxInv0, dxInv1, dxInv2]$
dvInv : [dvInv0, dvInv1, dvInv2]$

cidx(cdim) := makelist(i,i,0,cdim-1)$
vidx(cdim,vdim) := makelist(i,i,cdim,cdim+vdim-1)$
PB_vol(f,g,x,y) := diff(f,x)*diff(g,y) - diff(g,x)*diff(f,y)$

buildCanonicalPBVolKernel(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC, varsP, basisC, basisP, modNm, i, bP, bC, numC, cid, vid, dir, 
    pbfac, volfac, fl, Hl, pb, pbBasis],

  kill(varsC, varsP, bC, bP),
  pOrderV : polyOrder,
  /* Load basis of dimensionality requested. */
  if (basisFun="tensor") then (
    /* If we are using the tensor basis, just use the simple load command */
    [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),
    [varsP,bP] : loadBasis(basisFun, cdim+vdim, polyOrder),
    /* Do a variable substitution for the lower dimensional tensor basis functions
       to construct the correct set of variables for the subsequent operations */
    if (cdim+vdim = 2) then (
      varsSub : [y=vx],
      bP : subst(varsSub, copylist(bP)),  
      varsP : subst(varsSub, copylist(varsP))
    )
    else if (cdim+vdim = 3) then (
      varsSub : [y=vx, z=vy],
      bP : subst(varsSub, copylist(bP)),  
      varsP : subst(varsSub, copylist(varsP))
    )
    else if (cdim = 2 and vdim = 2) then (
      varsSub : [vx=y, vy=vx, vz=vy],
      bP : subst(varsSub, copylist(bP)),  
      varsP : subst(varsSub, copylist(varsP))
    )
  )
  else (
    /* Load the specific desired basis, including the loading of the hybrid basis if p=1 */
    [varsC,bC,varsP,bP] : loadPhaseBasis(basisFun, cdim, vdim, polyOrder),

    /* Identify polyOrder in velocity space as p=2 for p=1 since we force p=1 to
       mean hybrid basis. */
    if polyOrder=1 then ( pOrderV : 2 )
  ),

  numC : length(bC),
  printf(fh, "double ~a(const double *w, const double *dxv, const double *hamil, const double *f, double *out) ~%{ ~%", funcNm),
  printf(fh, "// w[NDIM]: Cell-center coordinates. dxv[NDIM]: Cell spacing. H/f: Input Hamiltonian/distribution function. out: Incremented output ~%"),
  cid : cidx(cdim),
  vid : vidx(cdim,vdim),
  for dir : 1 thru cdim do (
    pbfac[dir] : 4*dxdvInv[dir]
  ),
  for dir : 1 thru cdim do (
    printf(fh, "  double dxdvInv~a = 1.0/(dxv[~a]*dxv[~a]); ~%", dir-1, cid[dir], vid[dir])
  ),
  for dir : 1 thru cdim do (
    printf(fh, "  double dxInv~a = 1.0/dxv[~a]; ~%", dir-1, cid[dir])
  ),
  for dir : 1 thru vdim do (
    printf(fh, "  double dvInv~a = 1.0/dxv[~a]; ~%", dir-1, vid[dir])
  ),
  fl : doExpand1(f, bP),
  Hl : doExpand1(hamil, bP),
  /* For cdim /= vdim, we assume the ignorable coordinates are the last pairs.
  For instance if we have varsC = [x,y,z] with:
  - 1 ignorable coordinate: [x,y, \dot{x},\dot{y}] are all that show up in {f,H} 
  - 2 ignorable coordinates: [x, \dot{x},] are all that show up in {f,H} 
  It's assumed that H does not depend on these ignorable coordinates */
  pb : (pb : 0, for dir : 1 thru cdim do (
     pbBasis : pbfac[dir]*(PB_vol(bP,Hl,varsC[dir],varsV[dir])),
     pb : pb + fullratsimp(calcInnerProdList(varsP, 1, pbBasis, fl))
     ),
  pb),
  writeCIncrExprsNoExpand(facsum(fullratsimp(pb),dxv)),
  
  /*  No CFL contribution, returns 0. */
  printf(fh, "  return 0.; ~%"),
  printf(fh, "} ~%"),
  flush_output(fh)
);