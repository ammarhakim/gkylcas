/*
  Utility functions for canonical poisson bracket Maxima scripts.

  *hamil* is assumed to be written in canonical coordinates
*/
load("out-scripts")$
load("vect")$
load("nodal_operations/nodal_functions")$
load("nodal_operations/quadrature_functions")$
load("utilities")$

/* Helper functions for expanding in basis functions a quantity we know should be sparse  */
doMakeExprLst(vals, S)  := makelist(if vals[i] # 0 then S[i-1] else 0, i, 1, length(vals))$
slcn(lst, n) := makelist(lst[i], i, 1, n)$
slcn_v(lst, n) := makelist(lst[i], i, n+1, length(lst))$

PB(f, g, x_vec, y_vec, dx_vec, dy_vec) := 
  sum(
      (dx_vec[i]*dy_vec[i])*(diff(f, x_vec[i]) * diff(g, y_vec[i]) - diff(g, x_vec[i]) * diff(f, y_vec[i])),
    i, 1, length(x_vec)
  )$

calcAndWrite_CanonicalPB_alpha(fH,surfDir,bP,varsP,bSurf,basisType,rdx2V,rdv2V,hamil,sideStr,cdim,vdim,pDim) := block(
  [varsC, varsV, varLabel, dirLabel, wSurf, rdSurfVar2, surfVar, surfIntVars, rdx2vec, rdv2vec,
   z, q, p, dq, dp, alpha, alphaUp, numSurf, evPoint, replaceList, alpha_c, printf, alphaCvar,
   alphaNoZero_c, alphaSurf, alphaUpSurf], 
  /* Calculate phase space velocity alpha in direction of surfVar. */
  /* We assume alpha.n and hamil is continuous across boundary. */
  /* Distinguish between alpha and alphaUp, where alphaUp is the one used to
     determine upwind direction. */

  varsC : slcn(varsP, cdim),
  varsV : slcn_v(varsP, cdim), /* cdim offset */
  varLabel : makelist(string(varsP[d]),d,1,pDim),
  dirLabel : varLabel[surfDir],

  wSurf      : eval_string(sconcat("w",dirLabel)),
  rdSurfVar2 : eval_string(sconcat("rd",dirLabel,"2")),

  surfVar     : varsP[surfDir],         /* Surface variable. */
  surfIntVars : delete(surfVar,varsP),  /* Surface integral variables. */

  /* print("varsC ",varsC),
  print("varsV ",varsV),
  print("varsR ",varsR), */

  /* Calculate phase space velocity alpha_d = {z[d], H} = dz[d]/dt. */
  rdx2vec : makelist(eval_string(sconcat("rd",varLabel[i],"2")),i,1,cdim),
  rdv2vec : makelist(eval_string(sconcat("rd",varLabel[i],"2")),i,cdim+1,pDim),
  z : wSurf+surfVar/rdSurfVar2,
  q : varsC, 
  p : varsV, 
  dq : rdx2vec, /* Rename */
  dp : rdv2vec,
  alpha : PB(z,hamil,q,p,dq,dp),

  numSurf : length(bSurf),

  if sideStr="L" then (evPoint : -1)
  else if sideStr="R" then (evPoint : 1),

  /* Project full alpha expression evaluated at interior surface
     onto surface basis and print to C variable alpha. */
  alpha_c : calcInnerProdList(surfIntVars, 1, bSurf, subst(surfVar=evPoint,alpha)),
  alphaCvar : eval_string(sconcat("alpha",sideStr)),
  clst : [rdx2vec, rdv2vec, m_, q_, wvpar],
  writeCExprsCollect1(alphaCvar, alpha_c, clst),
  printf(fh, "~%"),
  flush_output(fh),
  alphaNoZero_c : doMakeExprLst(alpha_c, alphaCvar),
  alphaSurf_e   : doExpand(alphaNoZero_c, bSurf),

  return(alphaSurf_e)
)$



calc_canonical_pb_alpha_no_write(fH,surfDir,bP,varsP,bSurf,basisType,rdx2V,rdv2V,
                   hamil,sideStr,cdim,vdim,pDim) := block(
  [varsC, varsV, varLabel, dirLabel, wSurf, rdSurfVar2, surfVar, surfIntVars, rdx2vec, rdv2vec,
   z, q, p, dq, dp, alpha, alphaUp, numSurf, evPoint, replaceList, alpha_c, printf, alphaCvar,
   alphaNoZero_c, alphaSurf, alphaUpSurf],
  /* Calculate phase space velocity alpha in direction of surfVar. */
  /* We assume alpha.n is continuous across boundary, although H may not be. */
  /* Distinguish between alpha and alphaUp, where alphaUp is the one used to
     determine upwind direction. */

  varsC : slcn(varsP, cdim),
  varsV : slcn_v(varsP, cdim),
  varLabel : makelist(string(varsP[d]),d,1,pDim),
  dirLabel : varLabel[surfDir],

  wSurf      : eval_string(sconcat("w",dirLabel)),
  rdSurfVar2 : eval_string(sconcat("rd",dirLabel,"2")),

  surfVar     : varsP[surfDir],         /* Surface variable. */
  surfIntVars : delete(surfVar,varsP),  /* Surface integral variables. */

  /* Calculate phase space velocity alpha_d = {z[d], H} = dz[d]/dt. */
  rdx2vec : makelist(eval_string(sconcat("rd",varLabel[i],"2")),i,1,cdim),
  rdv2vec : makelist(eval_string(sconcat("rd",varLabel[i],"2")),i,cdim+1,pDim),
  z : wSurf+surfVar/rdSurfVar2,
  q : varsC, 
  p : varsV, 
  dq : rdx2vec, /* Rename */
  dp : rdv2vec,
  alpha : PB(z,hamil,q,p,dq,dp),

  numSurf : length(bSurf),

  if sideStr="L" then (evPoint : -1)
  else if sideStr="R" then (evPoint : 1),

  /* Project full alpha expression evaluated at interior surface
     onto surface basis and print to C variable alpha. */
  alpha_c : calcInnerProdList(surfIntVars, 1, bSurf, subst(surfVar=evPoint,alpha)),
  alphaCvar : eval_string(sconcat("alpha",sideStr)),
  alphaNoZero_c : doMakeExprLst(alpha_c, alphaCvar),
  alphaSurf_e   : doExpand(alphaNoZero_c, bSurf),

  return(alphaSurf_e)
)$


/* Determine the upwinded distribution function in canonical pb */
calcAndWrite_CanonicalPBfUpwind(file_handle,surfDir,surfVar,surfIntVars,bSurf,NSurf,fl_e,fr_e,basisStr,sideStr,
                    cdim, vdim, polyOrder, basisFun, conf_only) := block(
  [fstrL, fstrR, fLNm, fRNm, fUpNm, sgn_alpha_surfNm, sgn_alphaUpNm, fSurfl_c, fSurfr_c, 
   fSurfl_e, fSurfr_e, sgn_alphaUp_e, fUp_c],
   
    /* Naming convention for subsequent distribution function evaluations 
       for a cell-based update. If performing the left surface update 
       we need fl(surfVar=+1) and fc(surfVar=-1) (f_lr and f_cl) and if we are performing
       the right surface update we need fc(surfVar=+1) and fr(surfVar=-1) (f_cr and f_rl) */
    if (sideStr = "L") then (
      fstrL : "lr",
      fstrR : "cl"
    )
    else (
      fstrL : "cr",
      fstrR : "rl"
    ),
    fLNm : eval_string(sconcat("f_",fstrL)),
    fRNm : eval_string(sconcat("f_",fstrR)),
    fUpNm : eval_string(sconcat("fUp",sideStr)),
    sgn_alpha_surfNm : eval_string(sconcat("sgn_alpha_surf",sideStr)),
    sgn_alphaUpNm : eval_string(sconcat("sgn_alphaUp",sideStr)),

    printf(file_handle, "  double fUp~a[~a] = {0.};~%", sideStr, NSurf),
    fSurfl_c : calcInnerProdList(surfIntVars, 1, bSurf, subst(surfVar=1, fl_e)),
    fSurfr_c : calcInnerProdList(surfIntVars, 1, bSurf, subst(surfVar=-1, fr_e)),
    fSurfl_e : doExpand1(fLNm, bSurf), 
    fSurfr_e : doExpand1(fRNm, bSurf), 

    /* If sign(alpha_surf) is single signed
       1. f^- (if sign(alpha_surf) = 1), 
       2. f^+ (if sign(alpha_surf) = -1) */
    printf(file_handle, "  if (const_sgn_alpha~a[0] == 1) {  ~%", sideStr),
    printf(file_handle, "    if (sgn_alpha_surf~a[0] == 1.0) {  ~%", sideStr),
    writeCExprs1(fUpNm, fSurfl_c),
    printf(file_handle, "    } else { ~%"),
    writeCExprs1(fUpNm, fSurfr_c),
    printf(file_handle, "    } ~%"),

    /* Else sign(alpha_surf) is changing quadrature point to quadrature point
       1/2*(f^+ + f^-) - 1/2*sgn_alpha_surf*(f^+ - f^-) */
    printf(file_handle, "  } else { ~%"),
    printf(file_handle, "  double f_~a[~a] = {0.};~%", fstrL, NSurf),
    printf(file_handle, "  double f_~a[~a] = {0.};~%", fstrR, NSurf),
    printf(file_handle, "  double sgn_alphaUp~a[~a] = {0.};~%", sideStr, NSurf),
    
    /*printf(file_handle, "  ~a_upwind_quad_to_modal(~a, ~a); ~%", basisStr, sgn_alpha_surfNm, sgn_alphaUpNm),*/
    printf(file_handle, "  // Project tensor nodal quadrature basis back onto modal basis. ~%"),
    if (polyOrder=1 and basisFun="ser" and (not conf_only)) then ( 
      /* Force p=1 Serendipity for kinetic equations to use hybrid basis. */
      if (surfDir - cdim > 0) then ( 
        /* Velocity space */
        printf(file_handle, "  hyb_~ax~av_p1_vdir_upwind_quad_to_modal(~a, ~a); ~%", cdim, vdim, sgn_alpha_surfNm, sgn_alphaUpNm)
      ) else ( 
        /* configuration space */
        printf(file_handle, "  hyb_~ax~av_p1_xdir_upwind_quad_to_modal(~a, ~a); ~%", cdim, vdim, sgn_alpha_surfNm, sgn_alphaUpNm)
      )
    ) else (
      printf(file_handle, "  ~a_upwind_quad_to_modal(~a, ~a); ~%", basisStr, sgn_alpha_surfNm, sgn_alphaUpNm)
    ),


    sgn_alphaUp_e : doExpand1(sgn_alphaUpNm, bSurf),
    printf(file_handle, "~%"),
    writeCExprs1(fLNm, fSurfl_c),
    printf(file_handle, "~%"),
    flush_output(file_handle),
    writeCExprs1(fRNm, fSurfr_c),
    printf(file_handle, "~%"),
    flush_output(file_handle),
    fUp_c : calcInnerProdList(surfIntVars, 1, bSurf, 0.5*(fSurfl_e + fSurfr_e) - 0.5*sgn_alphaUp_e*(fSurfr_e - fSurfl_e)),
    writeCExprsNoExpand1(fUpNm, gcfac(float(expand(fUp_c)))),
    printf(file_handle, "~%"),
    flush_output(file_handle),

    printf(file_handle, "  } ~%")
)$

/* Determine the upwinded distribution function in gyrokinetics */
calcAndWrite_sgn_CanonicalPB_alpha(file_handle,surfIntVars,surfNodes,numNodes,alphaSurf_e,sideStr) := block(
  [alphaOrd_n],
  /* Determine sign(alpha_surf) for upwinding at each surface quadrature node. */

  /* Evaluate alpha at ordinates.
     Note: alphaSurf_e is already a surface expansion. */
  alphaOrd_n : gcfac(float(evAtNodes(alphaSurf_e,surfNodes,surfIntVars))),
  
  printf(file_handle, "  int const_sgn_alpha_surf = 1;  ~%"),
  printf(file_handle, "  ~%"),
  /* Write out first quadrature point 
     We are going to compare the signs of the quadrature points to see if the sign is constant */
  printf(file_handle, "  if (~a > 0.) ~%", gcfac(float(expand(fullratsimp(alphaOrd_n[1]))))),
  printf(file_handle, "    sgn_alpha_surf~a[0] = 1.0; ~%", sideStr),
  printf(file_handle, "  else  ~%"),
  printf(file_handle, "    sgn_alpha_surf~a[0] = -1.0; ~%", sideStr),
  printf(file_handle, "  ~%"),
  /* Write out the other quadrature point evaluations and compare the signs point by point */
  for i : 2 thru numNodes do (
    printf(file_handle, "  if (~a > 0.) ~%", gcfac(float(expand(fullratsimp(alphaOrd_n[i]))))),
    printf(file_handle, "    sgn_alpha_surf~a[~a] = 1.0; ~%", sideStr, i-1),
    printf(file_handle, "  else  ~%"),
    printf(file_handle, "    sgn_alpha_surf~a[~a] = -1.0; ~%", sideStr, i-1),
    printf(file_handle, "  ~%"),
    printf(file_handle, "  if (sgn_alpha_surf~a[~a] == sgn_alpha_surf~a[~a]) ~%", sideStr, i-1, sideStr, i-2),
    printf(file_handle, "    const_sgn_alpha_surf = const_sgn_alpha_surf ? 1 : 0; ~%"),
    printf(file_handle, "  else  ~%"),
    printf(file_handle, "    const_sgn_alpha_surf = 0; ~%"),
    printf(file_handle, "  ~%")
  )
)$