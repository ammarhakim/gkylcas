/*
  Generate the volume kernels for a canonical-pb fluid system such as
  incompressible Euler or Hasegawa-Wakatani.

  The functions called in this file are in fluid-canonical-funcs-vol.mac.
*/
load("canonical_pb/fluid-canonical-funcs-vol")$
ratprint: false;

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 2$
maxCdim_Ser : 2$

/* Tensor product basis. */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 2$
maxCdim_Tensor : 0$

/* ...... END OF USER INPUTS........ */

/* To generate other bases, just add corresponding column to arrays below. */
bName        : ["ser","tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$
maxVdim      : [maxVdim_Ser, maxVdim_Tensor]$

clabels : ["x","y","z"]$

/* Generate kernels of selected types. */
for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    for polyOrder : minPolyOrder[bInd] thru maxPolyOrder[bInd] do (
      fname : sconcat("~/max-out/canonical_pb_vol_", c, "x_", bName[bInd], "_p", polyOrder, ".c"),
      disp(printf(false,"Creating volume file: ~a",fname)),

      fh : openw(fname),
      printf(fh, "#include <gkyl_canonical_pb_kernels.h> ~%"),

      funcName : sconcat("canonical_pb_vol_", c, "x_", bName[bInd], "_p", polyOrder),
      buildFluidCanonicalPBVolKernel(fh, funcName, c, bName[bInd], polyOrder), 
      close(fh), 

      fname : sconcat("~/max-out/canonical_pb_two_fluid_vol_", c, "x_", bName[bInd], "_p", polyOrder, ".c"),
      disp(printf(false,"Creating volume file: ~a",fname)),

      fh : openw(fname),
      printf(fh, "#include <gkyl_canonical_pb_kernels.h> ~%"),

      funcName : sconcat("canonical_pb_two_fluid_vol_", c, "x_", bName[bInd], "_p", polyOrder),
      buildTwoFluidCanonicalPBVolKernel(fh, funcName, c, bName[bInd], polyOrder), 
      close(fh)        
    )
  )
)$
