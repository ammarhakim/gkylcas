/*
  Generate the kernel for surface expansions of the phase space characteristics.

  The functions called in this file are in canonical-alpha-surf.mac.
*/
load("canonical_pb/canonical-alpha-surf")$
ratprint: false;

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
maxCdim_Ser : 3$
maxVdim_Ser : 3$

/* Tensor product basis. */
/* Note that Serendipity, p=1, is hybrid and p=1 Tensor is *pure* p=1 */
minPolyOrder_Tensor : 1$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
maxCdim_Tensor : 3$
maxVdim_Tensor : 3$

/* ...... END OF USER INPUTS........ */

/* To generate other bases, just add corresponding column to arrays below. */
bName        : ["ser","tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$
maxVdim      : [maxVdim_Ser, maxVdim_Tensor]$

clabels : ["x","y","z"]$
vlabels : ["vx","vy","vz"]$

/* Generate kernels of selected types. */
for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    for v : c thru maxVdim[bInd] do (
      maxPolyOrderB : maxPolyOrder[bInd],
      if (c=3) then maxPolyOrderB : 1, /* Only generate p=1 kernels for 3x3v */
      for polyOrder : minPolyOrder[bInd] thru maxPolyOrderB do (
        if not(c = 3 and bName[bInd] = "ser") and not(c = 2 and v = 3 and bName[bInd] = "tensor" and polyOrder = 2) then ( /* SKIP hybrid in 3d */

          /* Surface alpha in direction dir in configuration space.*/
          for dir : 1 thru c do (
            fname : sconcat("~/max-out/canonical_pb_alpha_surf",clabels[dir],"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
            disp(printf(false,"Creating alpha surf~a file: ~a",clabels[dir],fname)),
      
            fh : openw(fname),
            printf(fh, "#include <gkyl_canonical_pb_kernels.h> ~%"),
            if (polyOrder=1 and bName[bInd]="ser") then (  /* Force p=1 Serendipity to use hybrid basis. */
              printf(fh, "#include <gkyl_basis_hyb_~ax~av_p1_surfx~a_eval_quad.h> ~%", c, v, c+dir),
              printf(fh, "#include <gkyl_basis_hyb_~ax~av_p1_upwind_quad_to_modal.h> ~%", c, v)
            ) 
            else (
              printf(fh, "#include <gkyl_basis_~a_~ax_p~a_surfx~a_eval_quad.h> ~%", bName[bInd], c+v, polyOrder, c+dir),
              printf(fh, "#include <gkyl_basis_~a_~ax_p~a_upwind_quad_to_modal.h> ~%", bName[bInd], c+v, polyOrder)
            ),

            funcName : sconcat("canonical_pb_alpha_surf",clabels[dir],"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder),
            buildCanonicalPBAlphaKernel(dir, fh, funcName, c, v, bName[bInd], polyOrder, false), /* Not an edge */
            close(fh),

            fname : sconcat("~/max-out/canonical_pb_alpha_edge_surf",clabels[dir],"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
            disp(printf(false,"Creating alpha edge surf~a file: ~a",clabels[dir],fname)),
      
            fh : openw(fname),
            printf(fh, "#include <gkyl_canonical_pb_kernels.h> ~%"),
            if (polyOrder=1 and bName[bInd]="ser") then (  /* Force p=1 Serendipity to use hybrid basis. */
              printf(fh, "#include <gkyl_basis_hyb_~ax~av_p1_surfx~a_eval_quad.h> ~%", c, v, c+dir),
              printf(fh, "#include <gkyl_basis_hyb_~ax~av_p1_upwind_quad_to_modal.h> ~%", c, v)
            ) 
            else (
              printf(fh, "#include <gkyl_basis_~a_~ax_p~a_surfx~a_eval_quad.h> ~%", bName[bInd], c+v, polyOrder, c+dir),
              printf(fh, "#include <gkyl_basis_~a_~ax_p~a_upwind_quad_to_modal.h> ~%", bName[bInd], c+v, polyOrder)
            ),

            funcName : sconcat("canonical_pb_alpha_edge_surf",clabels[dir],"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder),
            buildCanonicalPBAlphaKernel(dir, fh, funcName, c, v, bName[bInd], polyOrder, true), /* An edge */
            close(fh)
          ),

          /* Surface alpha in v direction.*/
          for v_sub_indx : 1 thru v do (
            fname : sconcat("~/max-out/canonical_pb_alpha_surf",vlabels[v_sub_indx],"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
            disp(printf(false,"Creating alpha surfvx file: ~a",fname)),

            fh : openw(fname),
            printf(fh, "#include <gkyl_canonical_pb_kernels.h> ~%"),
            if (polyOrder=1 and bName[bInd]="ser") then (  /* Force p=1 Serendipity to use hybrid basis. */
              printf(fh, "#include <gkyl_basis_hyb_~ax~av_p1_surfx~a_eval_quad.h> ~%", c, v, c+v_sub_indx),
              printf(fh, "#include <gkyl_basis_hyb_~ax~av_p1_upwind_quad_to_modal.h> ~%", c, v)
            ) 
            else (
              printf(fh, "#include <gkyl_basis_~a_~ax_p~a_surfx~a_eval_quad.h> ~%", bName[bInd], c+v, polyOrder, c+v_sub_indx),
              printf(fh, "#include <gkyl_basis_~a_~ax_p~a_upwind_quad_to_modal.h> ~%", bName[bInd], c+v, polyOrder)
            ),

            funcName : sconcat("canonical_pb_alpha_surf",vlabels[v_sub_indx],"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder),
            buildCanonicalPBAlphaKernel(c+v_sub_indx, fh, funcName, c, v, bName[bInd], polyOrder, false), /* Not an edge */
            close(fh)
          )
        )
      )
    )
  )
)$
