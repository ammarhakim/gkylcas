/* This script calls the functions which generate the kernels for calculating the
   the covariant components of u either from M1i (Jnu^i) or u^i
*/

load("modal-basis")$
load("out-scripts")$
load(stringproc)$
load("scifac")$
fpprec : 24$

calcCanonicalPbUCovariant(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC, bC, NC],

  kill(varsC, bC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),

  /* Number of basis monomials. */
  NC : length(bC),

  /* For p2 tensor, choose tensor, otherwise just use ser */
  if not(basisFun = "tensor" and polyOrder = 2 and cdim > 1) then (
    basisFun : "ser"
  ),

  /* printf(fh, "#include <gkyl_euler_canonical_pb_kernels.h> ~%"), */
  printf(fh, "#include <gkyl_canonical_pb_kernels.h>  ~%"),
  printf(fh, "#include <gkyl_binop_mul_ser.h> ~%"),
  printf(fh, "GKYL_CU_DH void ~a(const double *h_ij, const double *v_j, const double *nv_i, double* GKYL_RESTRICT v_j_cov, double* GKYL_RESTRICT nv_i_cov) ~%{ ~%", funcNm, polyOrder),
  printf(fh, "  // h_ij:         Input volume expansion of the covariant components of the metric tensor.~%"),
  printf(fh, "  //                   [Hxx, Hxy, Hxz, ~%"),
  printf(fh, "  //                    Hxy, Hyy, Hyz, ~%"),
  printf(fh, "  //                    Hxz, Hyz, Hzz] ~%"),
  printf(fh, "  // v_j:              Input volume expansion of V_drift (contravariant components).~%"),
  printf(fh, "  //                   [vx, vy, vz] ~%"),
  printf(fh, "  // nv_i:              Input volume expansion of M1i = N*Vdrift (contravariant components).~%"),
  printf(fh, "  //                   [nvx, nvy, nvz] ~%"),
  printf(fh, "  // v_j_cov:           Input volume expansion of V_drift (covariant components).~%"),
  printf(fh, "  //                   [vx, vy, vz] ~%"),
  printf(fh, "  // nv_i_cov:          Input volume expansion of M1i = N*Vdrift (covariant components).~%"),
  printf(fh, "  //                   [nvx, nvy, nvz] ~%"),
  printf(fh, "~%"),

 
  /* Contravariant components */
  printf(fh, "  const double *NVx = &nv_i[~a]; ~%", 0*NC),
  if (vdim > 1) then (
    printf(fh, "  const double *NVy = &nv_i[~a]; ~%", 1*NC)
  ),
  if (vdim > 2) then (
    printf(fh, "  const double *NVz = &nv_i[~a]; ~%", 2*NC)
  ),
  printf(fh, "~%"),


  printf(fh, "  const double *Vx = &v_j[~a]; ~%", 0*NC),
  if (vdim > 1) then (
    printf(fh, "  const double *Vy = &v_j[~a]; ~%", 1*NC)
  ),
  if (vdim > 2) then (
  printf(fh, "  const double *Vz = &v_j[~a]; ~%", 2*NC)
  ),
  printf(fh, "~%"),


  /* Covariant components */
  printf(fh, "  double *NVx_cov = &nv_i_cov[~a]; ~%", 0*NC),
  if (vdim > 1) then (
    printf(fh, "  double *NVy_cov = &nv_i_cov[~a]; ~%", 1*NC)
  ),
  if (vdim > 2) then (
    printf(fh, "  double *NVz_cov = &nv_i_cov[~a]; ~%", 2*NC)
  ),
  printf(fh, "~%"),

  printf(fh, "  double *Vx_cov = &v_j_cov[~a]; ~%", 0*NC),
  if (vdim > 1) then (
    printf(fh, "  double *Vy_cov = &v_j_cov[~a]; ~%", 1*NC)
  ),
  if (vdim > 2) then (
  printf(fh, "  double *Vz_cov = &v_j_cov[~a]; ~%", 2*NC)
  ),
  printf(fh, "~%"),


  /* Metric */
  if (vdim = 1) then (
    printf(fh, "  const double *Hxx = &h_ij[~a]; ~%", 0*NC)
  ),
  if (vdim = 2) then (
    printf(fh, "  const double *Hxx = &h_ij[~a]; ~%", 0*NC),
    printf(fh, "  const double *Hxy = &h_ij[~a]; ~%", 1*NC),
    printf(fh, "  const double *Hyy = &h_ij[~a]; ~%", 2*NC)
  ),
  if (vdim = 3) then (
    printf(fh, "  const double *Hxx = &h_ij[~a]; ~%", 0*NC),
    printf(fh, "  const double *Hxy = &h_ij[~a]; ~%", 1*NC),
    printf(fh, "  const double *Hxz = &h_ij[~a]; ~%", 2*NC),
    printf(fh, "  const double *Hyy = &h_ij[~a]; ~%", 3*NC),
    printf(fh, "  const double *Hyz = &h_ij[~a]; ~%", 4*NC),
    printf(fh, "  const double *Hzz = &h_ij[~a]; ~%", 5*NC)
  ),
  printf(fh, "~%"),


  /* 1. Compute u_i = h_ij u^j*/
  printf(fh, "  // h_{ij}v^j ~%"),
  printf(fh, "  double Hxx_Vx[~a] = {0.0}; ~%", NC),
  printf(fh, "  binop_mul_~ad_~a_p~a(Hxx, Vx, Hxx_Vx); ~%", cdim, basisFun, polyOrder),
  printf(fh, " ~%"),

  if (vdim > 1) then (
    printf(fh, "  double Hxy_Vx[~a] = {0.0}; ~%", NC),
    printf(fh, "  binop_mul_~ad_~a_p~a(Hxy, Vx, Hxy_Vx); ~%", cdim, basisFun, polyOrder),
    printf(fh, " ~%"),

    printf(fh, "  double Hxy_Vy[~a] = {0.0}; ~%", NC),
    printf(fh, "  binop_mul_~ad_~a_p~a(Hxy, Vy, Hxy_Vy); ~%", cdim, basisFun, polyOrder),
    printf(fh, " ~%"),

    printf(fh, "  double Hyy_Vy[~a] = {0.0}; ~%", NC),
    printf(fh, "  binop_mul_~ad_~a_p~a(Hyy, Vy, Hyy_Vy); ~%", cdim, basisFun, polyOrder),
    printf(fh, " ~%")
  ),

  if (vdim > 2) then (
    printf(fh, "  double Hxz_Vx[~a] = {0.0}; ~%", NC),
    printf(fh, "  binop_mul_~ad_~a_p~a(Hxz, Vx, Hxz_Vx); ~%", cdim, basisFun, polyOrder),
    printf(fh, " ~%"),

    printf(fh, "  double Hyz_Vy[~a] = {0.0}; ~%", NC),
    printf(fh, "  binop_mul_~ad_~a_p~a(Hyz, Vy, Hyz_Vy); ~%", cdim, basisFun, polyOrder),
    printf(fh, " ~%"),

    printf(fh, "  double Hxz_Vz[~a] = {0.0}; ~%", NC),
    printf(fh, "  binop_mul_~ad_~a_p~a(Hxz, Vz, Hxz_Vz); ~%", cdim, basisFun, polyOrder),
    printf(fh, " ~%"),

    printf(fh, "  double Hyz_Vz[~a] = {0.0}; ~%", NC),
    printf(fh, "  binop_mul_~ad_~a_p~a(Hyz, Vz, Hyz_Vz); ~%", cdim, basisFun, polyOrder),
    printf(fh, " ~%"),

    printf(fh, "  double Hzz_Vz[~a] = {0.0}; ~%", NC),
    printf(fh, "  binop_mul_~ad_~a_p~a(Hzz, Vz, Hzz_Vz); ~%", cdim, basisFun, polyOrder),
    printf(fh, " ~%")
  ),


  /* 2. Compute Jnu_i = h_ij Jnu^j*/
  printf(fh, "  // h_{ij}Jnv^j ~%"),
  printf(fh, "  double Hxx_NVx[~a] = {0.0}; ~%", NC),
  printf(fh, "  binop_mul_~ad_~a_p~a(Hxx, NVx, Hxx_NVx); ~%", cdim, basisFun, polyOrder),
  printf(fh, " ~%"),

  if (vdim > 1) then (
    printf(fh, "  double Hxy_NVx[~a] = {0.0}; ~%", NC),
    printf(fh, "  binop_mul_~ad_~a_p~a(Hxy, NVx, Hxy_NVx); ~%", cdim, basisFun, polyOrder),
    printf(fh, " ~%"),

    printf(fh, "  double Hxy_NVy[~a] = {0.0}; ~%", NC),
    printf(fh, "  binop_mul_~ad_~a_p~a(Hxy, NVy, Hxy_NVy); ~%", cdim, basisFun, polyOrder),
    printf(fh, " ~%"),

    printf(fh, "  double Hyy_NVy[~a] = {0.0}; ~%", NC),
    printf(fh, "  binop_mul_~ad_~a_p~a(Hyy, NVy, Hyy_NVy); ~%", cdim, basisFun, polyOrder),
    printf(fh, " ~%")
  ),

  if (vdim > 2) then (
    printf(fh, "  double Hxz_NVx[~a] = {0.0}; ~%", NC),
    printf(fh, "  binop_mul_~ad_~a_p~a(Hxz, NVx, Hxz_NVx); ~%", cdim, basisFun, polyOrder),
    printf(fh, " ~%"),

    printf(fh, "  double Hyz_NVy[~a] = {0.0}; ~%", NC),
    printf(fh, "  binop_mul_~ad_~a_p~a(Hyz, NVy, Hyz_NVy); ~%", cdim, basisFun, polyOrder),
    printf(fh, " ~%"),

    printf(fh, "  double Hxz_NVz[~a] = {0.0}; ~%", NC),
    printf(fh, "  binop_mul_~ad_~a_p~a(Hxz, NVz, Hxz_NVz); ~%", cdim, basisFun, polyOrder),
    printf(fh, " ~%"),

    printf(fh, "  double Hyz_NVz[~a] = {0.0}; ~%", NC),
    printf(fh, "  binop_mul_~ad_~a_p~a(Hyz, NVz, Hyz_NVz); ~%", cdim, basisFun, polyOrder),
    printf(fh, " ~%"),

    printf(fh, "  double Hzz_NVz[~a] = {0.0}; ~%", NC),
    printf(fh, "  binop_mul_~ad_~a_p~a(Hzz, NVz, Hzz_NVz); ~%", cdim, basisFun, polyOrder),
    printf(fh, " ~%")
  ),

  printf(fh, "  // u_i_cov = h_{ij}v^j ~%"),
  for i : 1 thru NC do (
    printf(fh, "  Vx_cov[~a] = Hxx_Vx[~a]; ~%", i-1, i-1),
    if (vdim > 1) then (
      printf(fh, "  Vx_cov[~a] += Hxy_Vy[~a]; ~%", i-1, i-1),
      printf(fh, "  Vy_cov[~a] = Hxy_Vx[~a]; ~%", i-1, i-1),
      printf(fh, "  Vy_cov[~a] += Hyy_Vy[~a]; ~%", i-1, i-1)
    ),
    if (vdim > 2) then (
      printf(fh, "  Vx_cov[~a] += Hxz_Vz[~a]; ~%", i-1, i-1),
      printf(fh, "  Vy_cov[~a] += Hyz_Vz[~a]; ~%", i-1, i-1),
      printf(fh, "  Vz_cov[~a] = Hxz_Vx[~a]; ~%", i-1, i-1),
      printf(fh, "  Vz_cov[~a] += Hyz_Vy[~a]; ~%", i-1, i-1),
      printf(fh, "  Vz_cov[~a] += Hzz_Vz[~a]; ~%", i-1, i-1)
    )
  ),
  printf(fh, " ~%"),
  printf(fh, "  // Jnu_i_cov = h_{ij}Jnv^j ~%"),
  for i : 1 thru NC do (
    printf(fh, "  NVx_cov[~a] = Hxx_NVx[~a]; ~%", i-1, i-1),
    if (vdim > 1) then (
      printf(fh, "  NVx_cov[~a] += Hxy_NVy[~a]; ~%", i-1, i-1),
      printf(fh, "  NVy_cov[~a] = Hxy_NVx[~a]; ~%", i-1, i-1),
      printf(fh, "  NVy_cov[~a] += Hyy_NVy[~a]; ~%", i-1, i-1)
    ),
    if (vdim > 2) then (
      printf(fh, "  NVx_cov[~a] += Hxz_NVz[~a]; ~%", i-1, i-1),
      printf(fh, "  NVy_cov[~a] += Hyz_NVz[~a]; ~%", i-1, i-1),
      printf(fh, "  NVz_cov[~a] = Hxz_NVx[~a]; ~%", i-1, i-1),
      printf(fh, "  NVz_cov[~a] += Hyz_NVy[~a]; ~%", i-1, i-1),
      printf(fh, "  NVz_cov[~a] += Hzz_NVz[~a]; ~%", i-1, i-1)
    )
  ),
  printf(fh, " ~%"),
  printf(fh, "} ~%")
)$
