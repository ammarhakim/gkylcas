/*
  Generate the surface kernels for canonical-pb with general geometry.
  Assumes surface alpha pre-computed so kernels are agnostic to different
  forms of canonical-pb 

  The functions called in this file are in canonicalFuncs-surf.mac.
*/
load("canonical_pb/canonicalFuncs-surf")$
ratprint: false;

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
maxCdim_Ser : 3$ /* Start with 1, was 3 */

/* Tensor order basis. No need to generate p=1. */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
maxCdim_Tensor : 0$

/* ...... END OF USER INPUTS........ */

/* To generate other bases, just add corresponding column to arrays below. */
bName        : ["ser"]$
minPolyOrder : [minPolyOrder_Ser]$
maxPolyOrder : [maxPolyOrder_Ser]$
minCdim      : [minCdim_Ser]$
maxCdim      : [maxCdim_Ser]$

clabels : ["x","y","z"]$
vlabels : ["vx","vy","vz"]$

includeSurfHeaders(fhIn, bname, c, v, porder, dir) := block([],
  printf(fhIn, "#include <gkyl_canonical_pb_kernels.h>~%"),
  printf(fhIn, "#include <gkyl_basis_~a_~ax_p~a_upwind_quad_to_modal.h> ~%", bname, c+v, porder)
)$
printf(fh, "~%"),

/* Generate kernels of selected types. */
for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    v : c,

    maxPolyOrderB : maxPolyOrder[bInd],
    if (c=3) then maxPolyOrderB : 1, /* Only generate p=1 kernels for 3x2v */
    for polyOrder : minPolyOrder[bInd] thru maxPolyOrderB do (
      for dir : 1 thru c do (
        /* Advection in configuration space.*/
        fname : sconcat("~/max-out/canonical_pb_surf",clabels[dir],"_", c, "x", v, "v_", bName[bInd], "_p",polyOrder, ".c"),
        disp(printf(false,"Creating surface file: ~a",fname)),

        fh : openw(fname),
        includeSurfHeaders(fh, bName[bInd], c, v, polyOrder, dir),
        funcName : sconcat("canonical_pb_surf",clabels[dir],"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder),
        calcCanonicalPBSurfUpdateInDir(dir, fh, funcName, c, v, bName[bInd], polyOrder),
        close(fh),

        /* Advection in configuration space in the skin cell (for boundary flux operations) .*/
        fname : sconcat("~/max-out/canonical_pb_boundary_surf",clabels[dir],"_", c, "x", v, "v_", bName[bInd], "_p",polyOrder, ".c"),
        disp(printf(false,"Creating surface file: ~a",fname)),

        fh : openw(fname),
        includeSurfHeaders(fh, bName[bInd], c, v, polyOrder, dir),
        funcName : sconcat("canonical_pb_boundary_surf",clabels[dir],"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder),
        calcCanonicalPBBoundarySurfUpdateInDir(dir, fh, funcName, c, v, bName[bInd], polyOrder),
        close(fh)
      ),
      /* Advection in velocity space.*/
      for v_sub_indx : 1 thru v do (
        fname : sconcat("~/max-out/canonical_pb_surf",vlabels[v_sub_indx],"_", c, "x", v, "v_", bName[bInd], "_p",polyOrder, ".c"),
        disp(printf(false,"Creating surface file: ~a",fname)),

        fh : openw(fname),
        includeSurfHeaders(fh, bName[bInd], c, v, polyOrder, c+v_sub_indx),
        funcName : sconcat("canonical_pb_surf",vlabels[v_sub_indx],"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder),
        calcCanonicalPBSurfUpdateInDir(c+v_sub_indx, fh, funcName, c, v, bName[bInd], polyOrder),
        close(fh),

        /* Advection in velocity space in the skin cell along vpar (for zero-flux BCs).*/
        fname : sconcat("~/max-out/canonical_pb_boundary_surf",vlabels[v_sub_indx],"_", c, "x", v, "v_", bName[bInd], "_p",polyOrder, ".c"),
        disp(printf(false,"Creating surface file: ~a",fname)),

        fh : openw(fname),
        includeSurfHeaders(fh, bName[bInd], c, v, polyOrder, c+v_sub_indx),
        funcName : sconcat("canonical_pb_boundary_surf",vlabels[v_sub_indx],"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder),
        calcCanonicalPBBoundarySurfUpdateInDir(c+v_sub_indx, fh, funcName, c, v, bName[bInd], polyOrder),
        close(fh)
      )
    )
  )
)$
