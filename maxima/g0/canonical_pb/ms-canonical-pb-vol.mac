/*
  Generate the volume kernels canonical_pbs with general geometry.

  The functions called in this file are in canonicalFuncs-vol.mac.
*/
load("canonical_pb/canonical-vol")$
ratprint: false;

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
maxCdim_Ser : 3$

/* Tensor product basis. */
/* Note that Serendipity, p=1, is hybrid and p=1 Tensor is *pure* p=1 */
minPolyOrder_Tensor : 1$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
maxCdim_Tensor : 3$

/* ...... END OF USER INPUTS........ */

/* To generate other bases, just add corresponding column to arrays below. */
bName        : ["ser","tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$

clabels : ["x","y","z"]$
vlabels : ["vx","vy","vz"]$

/* Generate kernels of selected types. */
for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    v : c, /* Canonical PB only supports equal cdim and vdim */

   maxPolyOrderB : maxPolyOrder[bInd],
   if (c=3) then maxPolyOrderB : 1, /* Only generate p=1 kernels for 3x2v */
   for polyOrder : minPolyOrder[bInd] thru maxPolyOrderB do (
      fname : sconcat("~/max-out/canonical_pb_vol_", c, "x", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
      disp(printf(false,"Creating volume file: ~a",fname)),

      fh : openw(fname),
      printf(fh, "#include <gkyl_canonical_pb_kernels.h> ~%"),

      funcName : sconcat("canonical_pb_vol_", c, "x", v, "v_", bName[bInd], "_p", polyOrder),
      buildCanonicalPBVolKernel(fh, funcName, c, v, bName[bInd], polyOrder)
   )
  )
)$
