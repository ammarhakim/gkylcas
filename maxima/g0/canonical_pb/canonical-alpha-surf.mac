/*
   Create kernels for the surface expansions of the phase space flux alpha.
   Evaluates the Poisson bracket alpha = dz/dt = {z, H} at the corresponding surface
   and then projects the resulting evaluation onto a surface basis in each direction
   of the update. Each cell owns the *lower* surface expansion in that direction.

   Note that dz/dt = {z, H} is a higher order expansion and this order of operations
   1. Expand alpha = dz/dt = {z, H}
   2. Evaluate alpha at desired surface
   3. Project alpha onto surface basis
   *must* be respected to insure alpha is continuous at phase space interfaces like 
   we require it to be (if we create lower order intermediate variables or pre-project
   alpha in the volume and then evaluate it at surfaces, we may destroy the continuity
   of the surface alpha).

   *hamil* is assumed to be written in canonical coordinates
*/

load("modal-basis")$
load("out-scripts")$
load(stringproc)$
load("scifac")$
load("canonical_pb/canonicalUtils.mac")$
/*load("nodal_operations/nodal_functions")$*/
fpprec : 24$

buildCanonicalPBAlphaKernel(surfDir, fh, funcNm, cdim, vdim, basisFun, polyOrder, edge) := block(
  [modNm, bP, bC, varsC, numC, numP, pDim, surfVar, varLabel, dirLabel, surfIntVars, surf_cvars, 
  surf_vvars, surfNodes, nodeVars, bSurf,  NSurf, numNodes, NSurfIndexing, numNodesIndexing, 
  rdx2vec, rdv2vec, hamil, alphaSurf],

  kill(varsC,varsP,bC,bP),

  pOrderV : polyOrder,
  /* Load basis of dimensionality requested. */
  if (basisFun="tensor") then (
    /* If we are using the tensor basis, just use the simple load command */
    [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),
    [varsP,bP] : loadBasis(basisFun, cdim+vdim, polyOrder),
    /* Do a variable substitution for the lower dimensional tensor basis functions
       to construct the correct set of variables for the subsequent operations */
    if (cdim+vdim = 2) then (
      varsSub : [y=vx],
      bP : subst(varsSub, copylist(bP)),  
      varsP : subst(varsSub, copylist(varsP))
    )
    else if (cdim+vdim = 3) then (
      varsSub : [y=vx, z=vy],
      bP : subst(varsSub, copylist(bP)),  
      varsP : subst(varsSub, copylist(varsP))
    )
    else if (cdim = 2 and vdim = 2) then (
      varsSub : [vx=y, vy=vx, vz=vy],
      bP : subst(varsSub, copylist(bP)),  
      varsP : subst(varsSub, copylist(varsP))
    )
  )
  else (
    /* Load the specific desired basis, including the loading of the hybrid basis if p=1 */
    [varsC,bC,varsP,bP] : loadPhaseBasis(basisFun, cdim, vdim, polyOrder),

    /* Identify polyOrder in velocity space as p=2 for p=1 since we force p=1 to
       mean hybrid basis. */
    if polyOrder=1 then ( pOrderV : 2 )
  ),
  numC : length(bC),  numP : length(bP), pDim  : length(varsP),

  surfVar : varsP[surfDir],         /* Surface variable. */
  varLabel : makelist(string(varsP[d]),d,1,pDim),
  dirLabel : varLabel[surfDir],

  surfIntVars : delete(surfVar,varsP), 
  surf_cvars : delete(surfVar, makelist(varsP[i],i,1,cdim)),
  surf_vvars : delete(surfVar, makelist(varsP[cdim+i],i,1,vdim)),
  nodeVars : surfIntVars,

  /* Generate surface basis. this produces the ndim-1 orthogonal basis with no vv dependence. */
  /* Also generate necessary basis strings and surface nodes given by tensor product of Gauss-Legendre quadrature points */
  if (polyOrder=1 and basisFun="ser") then (  /* Force p=1 Serendipity to use hybrid basis. */
    bSurf : basisFromVars("hyb",surfIntVars,polyOrder),
    if (surfDir <= cdim) then (
      surf_cdim : cdim-1,  surf_vdim : vdim
    ) 
    else (
      surf_cdim : cdim,  surf_vdim : vdim-1
    ),
    surfNodes : gaussOrdHyb(1+1, surf_cdim, surf_vdim),

    basisStr : sconcat("hyb_", cdim, "x", vdim, "v", "_p", polyOrder)
  ) 
  else (
    bSurf : basisFromVars(basisFun,surfIntVars,polyOrder), 

    surfNodes : gaussOrd(polyOrder+1, pDim-1),

    basisStr : sconcat(basisFun, "_", cdim+vdim, "x", "_p", polyOrder)
  ),

  NSurf : length(bSurf),
  numNodes  : length(surfNodes),

  NSurfIndexing : NSurf,
  numNodesIndexing : numNodes,

  /* print("bSurf ", bSurf),
  print("surfNodes ", surfNodes),
  print("NSurf ", NSurf),
  print("numNodes ",numNodes), */

  print("Working on ", funcNm),
  printf(fh, "GKYL_CU_DH int ~a(const double *w, const double *dxv, const double *hamil,
   double* GKYL_RESTRICT alpha_surf, double* GKYL_RESTRICT sgn_alpha_surf) ~%{ ~%", funcNm),
  printf(fh, "  // w[NDIM]: cell-center.~%"),
  printf(fh, "  // dxv[NDIM]: cell length.~%"),
  printf(fh, "  // hamil: hamiltonian.~%"),
  printf(fh, "  // alpha_surf: output surface phase space flux in each direction (cdim + 1 components).~%"),
  printf(fh, "  //             Note: Each cell owns their *lower* edge surface evaluation.~%"),
  printf(fh, "  // sgn_alpha_surf: output sign(alpha_surf) in each direction at quadrature points (cdim + 1 components).~%"),
  printf(fh, "  //                 Note: Each cell owns their *lower* edge sign(alpha_surf).~%"),
  printf(fh, "  // returns int const_sgn_alpha (true if sign(alpha_surf) is only one sign, either +1 or -1).~%"),
  printf(fh, "~%"),

  /* Declare cell-center variables and variables multiplying gradients. */
  for d : 1 thru pDim do (
    printf(fh, "  double w~a = w[~a];~%", varLabel[d], d-1),
    printf(fh, "  double rd~a2 = 2.0/dxv[~a];~%", varLabel[d], d-1)
  ),
  printf(fh, "~%"),
  rdx2vec : makelist(eval_string(sconcat("rd",varLabel[i],"2")),i,1,cdim),
  rdv2vec : makelist(eval_string(sconcat("rd",varLabel[i],"2")),i,cdim+1,pDim),

  /* Compute Hamiltonian and expand it on the phase basis. */
  hamil : doExpand1(hamil,bP),

  /* Calculate and write phase space velocity alpha in direction surfDir. */
  /* We assume alpha.n is continuous across boundary, although H may not be. */
  if (edge = true) then (
    /* alpha_surf owns the *lower* edge surface expansion, so write out a separate
       set of kernels if we are on the edge so we also can evaluate the correct 
       alpha_surf at the upper configuration space boundary without evaluating
       quantities such as geometry in the ghost cells where they are not defined */
    printf(fh, "  double *alphaR = &alpha_surf[~a];~%", (surfDir-1)*NSurfIndexing),
    printf(fh, "  double *sgn_alpha_surfR = &sgn_alpha_surf[~a];~%", (surfDir-1)*numNodesIndexing),
    alphaSurf : calcAndWrite_CanonicalPB_alpha(fh,surfDir,bP,varsP,bSurf,basisFun,rdx2vec,rdv2vec,hamil,"R"),
    calcAndWrite_sgn_CanonicalPB_alpha(fh,nodeVars,surfNodes,numNodes,alphaSurf,"R")
  )
  else (
    printf(fh, "  double *alphaL = &alpha_surf[~a];~%", (surfDir-1)*NSurfIndexing),
    printf(fh, "  double *sgn_alpha_surfL = &sgn_alpha_surf[~a];~%", (surfDir-1)*numNodesIndexing),
    alphaSurf : calcAndWrite_CanonicalPB_alpha(fh,surfDir,bP,varsP,bSurf,basisFun,rdx2vec,rdv2vec,hamil,"L"),
    calcAndWrite_sgn_CanonicalPB_alpha(fh,nodeVars,surfNodes,numNodes,alphaSurf,"L")
  ),
  printf(fh, "  return const_sgn_alpha_surf; ~%"),
  printf(fh, "~%"),
  flush_output(fh),
  printf(fh, "} ~%")
)$  