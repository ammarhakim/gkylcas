/* This script generates the kernels for the surface term of the 
   advection in velocity space for the Vlasov equation
   in the parallel-kinetic-perpendicular-moment (pkpm) model */

load("modal-basis");
load("out-scripts");
load(stringproc)$
load("scifac")$
load("nodal_operations/nodal_functions")$
fpprec : 24$

cvars : [x, y, z]$
dvdx : [dvpardx0, dvpardx1, dvpardx2]$
wdx  : [wpardx0, wpardx1, wpardx2]$

cidx(cdim)      := makelist(i,i,0,cdim-1)$
vidx(cdim,vdim) := makelist(i,i,cdim,cdim+vdim-1)$

/* Helper functions for expanding in basis functions a quantity we know should be sparse  */
/* For example, alpha, the phase space flow only depends on a few phase space coordinates */
doMakeExprLst(vals, S)  := makelist(if vals[i] # 0 then S[i-1] else 0, i, 1, length(vals))$

calcVlasovPKPMStreamUpdateInDir(dir, fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC, bC, varsP, bP, NP, pDim, cid, vid, cv, surfVars, bSurf, surfNodes, numNodes,
   fl_e, ul_e, bl_e, fc_e, uc_e, bc_e, fr_e, ur_e, br_e, alpha_l_e, alpha_c_e, alpha_r_e,
   alpha_lr_c, alpha_cl_c, alpha_cr_c, alpha_rl_c,
   alphaNoZero_lr, alphaNoZero_cl, alphaNoZero_cr, alphaNoZero_rl, 
   alpha_lr_e, alpha_cl_e, alpha_cr_e, alpha_rl_e,
   alphaOrd_lr_n, alphaOrd_cl_n, alphaOrd_cr_n, alphaOrd_rl_n,
   f_lr, f_cl, f_cr, f_rl, avg_l, avg_r, jump_l, jump_r, alphaMax_l_e, alphaMax_r_e,
   Ghat_r_c, GhatNoZero_r, Ghat_r_e, Ghat_l_c, GhatNoZero_l, Ghat_l_e, incr_r, incr_l],

  [varsC,bC,varsP,bP] : loadPhaseBasis(basisFun, cdim, vdim, polyOrder),

  /* Number of basis monomials. */
  NP : length(bP),
  NC : length(bC),
  pDim  : length(varsP),

  printf(fh, "GKYL_CU_DH void ~a~a_~ax~av_~a_p~a(const double *w, const double *dxv, 
     const double *u_il, const double *u_ic, const double *u_ir, const double *bvarl, const double *bvarc, const double *bvarr, 
     const double *fl, const double *fc, const double *fr, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, cvars[dir], cdim, vdim, basisFun, polyOrder),
  printf(fh, "  // w[NDIM]:   Cell-center coordinates.~%"),
  printf(fh, "  // dxv[NDIM]: Cell spacing.~%"),
  printf(fh, "  // u_il/u_ic/u_ir:  Input bulk velocity (ux,uy,uz) in left/center/right cells.~%"),
  printf(fh, "  // bvarl/bvarc/bvarr:  Input magnetic field unit vector in left/center/right cells.~%"),
  printf(fh, "  // fl/fc/fr:  Input Distribution function in left/center/right cells.~%"),
  printf(fh, "  // out:       Incremented distribution function in center cell.~%"),

  cid : cidx(cdim),
  vid : vidx(cdim,vdim),

  /* Surface contribution is defined as integral(phi^- Ghat) over the surface. */

  /* cv = variable in direction of surface update. */
  cv : varsP[dir],

  /* Surface variables to integrate over. */
  surfVars : delete(cv,varsP),

  /* Generate surface basis. this produces the ndim-1 orthogonal basis with no cv dependence. */
  if polyOrder=1 then (  /* Force p=1 to use hybrid basis. */
    bSurf : basisFromVars("hyb",surfVars,polyOrder)
  ) else (
    bSurf : basisFromVars(basisFun,surfVars,polyOrder)
  ),

  printf(fh, "  const double dx1 = 2.0/dxv[~a]; ~%", dir-1),
  printf(fh, "  const double dvpar = dxv[~a], wvpar = w[~a]; ~%", cdim, cdim),
  printf(fh, "  const double *ul_0 = &u_il[~a]; ~%", NC*(dir-1)),
  printf(fh, "  const double *uc_0 = &u_ic[~a]; ~%", NC*(dir-1)),
  printf(fh, "  const double *ur_0 = &u_ir[~a]; ~%", NC*(dir-1)),
  printf(fh, "  const double *bl_0 = &bvarl[~a]; ~%", NC*(dir-1)),
  printf(fh, "  const double *bc_0 = &bvarc[~a]; ~%", NC*(dir-1)),
  printf(fh, "  const double *br_0 = &bvarr[~a]; ~%", NC*(dir-1)),

  /* Expand bulk velocity, magnetic field unit vector, and distribution function 
      in left, center, and right cells */
  ul_e : doExpand1(ul_0,bC),
  bl_e : doExpand1(bl_0,bC),
  fl_e : doExpand1(fl,bP),

  uc_e : doExpand1(uc_0,bC),
  bc_e : doExpand1(bc_0,bC),
  fc_e : doExpand1(fc,bP),

  ur_e : doExpand1(ur_0,bC),
  br_e : doExpand1(br_0,bC),
  fr_e : doExpand1(fr,bP),

  /* Compute phase space flux in left, center, and right cells */
  alpha_l_e : (vx*dvpar/2.0+wvpar)*bl_e + ul_e,
  alpha_c_e : (vx*dvpar/2.0+wvpar)*bc_e + uc_e,
  alpha_r_e : (vx*dvpar/2.0+wvpar)*br_e + ur_e,

  /* alpha_l/c/r are the phase space fluxes at the surface. */
  /* Note we need alpha_c at both sides of the cell */
  printf(fh, "  double alpha_lr[~a] = {0.0}; ~%", length(bSurf)),
  printf(fh, "  double alpha_cl[~a] = {0.0}; ~%", length(bSurf)),
  printf(fh, "  double alpha_cr[~a] = {0.0}; ~%", length(bSurf)),
  printf(fh, "  double alpha_rl[~a] = {0.0}; ~%", length(bSurf)),
  printf(fh, "~%"),

  /* Project alpha_l/c/r onto surface basis, and print resulting coefficients. */
  /* Note that there are two alpha_c (alpha_cl and alpha_cr) for alpha_c on each side of the cell */
  alpha_lr_c : fullratsimp(calcInnerProdList(surfVars, 1, bSurf, subst(cv=1, alpha_l_e))),
  alpha_cl_c : fullratsimp(calcInnerProdList(surfVars, 1, bSurf, subst(cv=-1, alpha_c_e))),
  alpha_cr_c : fullratsimp(calcInnerProdList(surfVars, 1, bSurf, subst(cv=1, alpha_c_e))),
  alpha_rl_c : fullratsimp(calcInnerProdList(surfVars, 1, bSurf, subst(cv=-1, alpha_r_e))),

  writeCExprs1(alpha_lr, alpha_lr_c),
  printf(fh, "~%"),
  flush_output(fh),

  writeCExprs1(alpha_cl, alpha_cl_c),
  printf(fh, "~%"),
  flush_output(fh),

  writeCExprs1(alpha_cr, alpha_cr_c),
  printf(fh, "~%"),
  flush_output(fh),

  writeCExprs1(alpha_rl, alpha_rl_c),
  printf(fh, "~%"),
  flush_output(fh),

  /* Zero out components of alpha_l/c/r which are empty. */
  alphaNoZero_lr : doMakeExprLst(alpha_lr_c, alpha_lr),
  alpha_lr_e     : doExpand(alphaNoZero_lr, bSurf),

  alphaNoZero_cl : doMakeExprLst(alpha_cl_c, alpha_cl),
  alpha_cl_e     : doExpand(alphaNoZero_cl, bSurf),

  alphaNoZero_cr : doMakeExprLst(alpha_cr_c, alpha_cr),
  alpha_cr_e     : doExpand(alphaNoZero_cr, bSurf),

  alphaNoZero_rl : doMakeExprLst(alpha_rl_c, alpha_rl),
  alpha_rl_e     : doExpand(alphaNoZero_rl, bSurf),

  /* Surface nodes given by tensor product of Gauss-Legendre quadrature points */
  if polyOrder = 1 then (  /* Force p=1 to use hybrid basis. */
    surf_cdim : cdim-1,  surf_vdim : vdim,
    surfNodes : gaussOrdHyb(1+1, surf_cdim, surf_vdim)
  ) else (
    surfNodes : gaussOrd(polyOrder+1, pDim-1)
  ),
  numNodes : length(surfNodes),

  /* Evaluate alpha at ordinates.
     Note: alphaSurf_e is already a surface expansion. */
  alphaOrd_lr_n : gcfac(float(evAtNodes(alpha_lr_e,surfNodes,surfVars))),
  alphaOrd_cl_n : gcfac(float(evAtNodes(alpha_cl_e,surfNodes,surfVars))),
  alphaOrd_cr_n : gcfac(float(evAtNodes(alpha_cr_e,surfNodes,surfVars))),
  alphaOrd_rl_n : gcfac(float(evAtNodes(alpha_rl_e,surfNodes,surfVars))),

  printf(fh, "  double alphaQuad_l[~a] = {0.0};~%", numNodes),
  printf(fh, "  double alphaQuad_r[~a] = {0.0};~%", numNodes),
  printf(fh, "  double alphaMax_l[~a] = {0.0};;~%", length(bSurf)),
  printf(fh, "  double alphaMax_r[~a] = {0.0};~%", length(bSurf)),
  printf(fh, "  double Ghat_l[~a] = {0.0}; ~%", length(bSurf)),
  printf(fh, "  double Ghat_r[~a] = {0.0}; ~%", length(bSurf)),

  printf(fh, "  double alpha_l_r = 0.0; ~%"),
  printf(fh, "  double alpha_c_l = 0.0; ~%"),
  printf(fh, "  double alpha_c_r = 0.0; ~%"),
  printf(fh, "  double alpha_r_l = 0.0; ~%"),
  printf(fh, "~%"),
  for i : 1 thru numNodes do (
    printf(fh, "  alpha_l_r = ~a; ~%", alphaOrd_lr_n[i]),
    printf(fh, "  alpha_c_l = ~a; ~%", alphaOrd_cl_n[i]),
    printf(fh, "  alpha_c_r = ~a; ~%", alphaOrd_cr_n[i]),
    printf(fh, "  alpha_r_l = ~a; ~%", alphaOrd_rl_n[i]),

    printf(fh, "  alphaQuad_l[~a] = fmax(fabs(alpha_l_r), fabs(alpha_c_l)); ~%", i-1),
    printf(fh, "  alphaQuad_r[~a] = fmax(fabs(alpha_c_r), fabs(alpha_r_l)); ~%", i-1)
  ),

  printf(fh, "~%"),
  printf(fh, "  // Project tensor nodal quadrature basis back onto modal basis. ~%"),
  printf(fh, "  ~a_~ax_p~a_upwind_quad_to_modal(alphaQuad_l, alphaMax_l); ~%", basisFun, pDim, polyOrder),
  printf(fh, "  ~a_~ax_p~a_upwind_quad_to_modal(alphaQuad_r, alphaMax_r); ~%", basisFun, pDim, polyOrder),

  /* Evaluate distribution function at the interfaces, -1 (lower) or +1 (upper) */
  f_lr : subst(cv=1, fl_e),
  f_cl : subst(cv=-1, fc_e),
  f_cr : subst(cv=1, fc_e),
  f_rl : subst(cv=-1, fr_e),

  /* Ghat = 1/2 * (alpha_l*f_l + alpha_r*f_r) - 1/2 * |max(alpha_l, alpha_r)| (f_r - f_l) */
  avg_l : 0.5*(alpha_lr_e*f_lr + alpha_cl_e*f_cl),
  avg_r : 0.5*(alpha_cr_e*f_cr + alpha_rl_e*f_rl),
  jump_l : 0.5*(f_cl - f_lr),
  jump_r : 0.5*(f_rl - f_cr),

  /* Create expansions of u_max (|u_max| evaluated at the surface) on the left and right in the surface basis. */
  alphaMax_l_e : doExpand1(alphaMax_l, bSurf),
  alphaMax_r_e : doExpand1(alphaMax_r, bSurf),

  /* Print C exprs for Ghat across surface boundary, (LEFT BOUNDARY) */
  Ghat_l_c : fullratsimp(innerProd(surfVars, 1, bSurf, avg_l - alphaMax_l_e*jump_l)),
  writeCExprs1(Ghat_l, Ghat_l_c),
  printf(fh, "~%"),
  flush_output(fh),

  /* Zero out components of Ghat which are empty. */
  GhatNoZero_l : doMakeExprLst(Ghat_l_c, Ghat_l),
  Ghat_l_e     : doExpand(GhatNoZero_l, bSurf),

  /* Print C exprs for Ghat across surface boundary, (RIGHT BOUNDARY) */
  Ghat_r_c : fullratsimp(innerProd(surfVars, 1, bSurf, avg_r - alphaMax_r_e*jump_r)),
  writeCExprs1(Ghat_r, Ghat_r_c),
  printf(fh, "~%"),
  flush_output(fh),

  /* Zero out components of Ghat which are empty. */
  GhatNoZero_r : doMakeExprLst(Ghat_r_c, Ghat_r),
  Ghat_r_e     : doExpand(GhatNoZero_r, bSurf),

  /* Compute surface contribution integral(phi^- Ghat) on the left and right. */
  incr_l : calcInnerProdList(surfVars, 1, subst(cv=-1.0, bP), Ghat_l_e),
  incr_r : calcInnerProdList(surfVars, -1, subst(cv=1.0, bP), Ghat_r_e),
  writeCIncrExprsCollect1lhsc(out, dx1*incr_l + dx1*incr_r),  
  printf(fh, "~%"),

  printf(fh, "} ~%")
);

calcVlasovPKPMAccelUpdate(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC, bC, varsP, bP, NP, pDim, cid, vid, cv, surfVars, bSurf, surfNodes, numNodes,
   fl_e, fc_e, fr_e, acc_e,
   ux_e, uy_e, uz_e, Pxx_e, Pxy_e, Pxz_e, Pyy_e, Pyz_e, Pzz_e, 
   bx_e, by_e, bz_e, bxbx_e, bxby_e, bxbz_e, byby_e, bybz_e, bzbz_e, 
   rho_inv_bx_e, rho_inv_by_e, rho_inv_bz_e, 
   alphaSurf_l_c, alphaSurf_r_c, alst_l, alst_r, alphaSurf_l_e, alphaSurf_r_e,
   alphaOrd_l_n, alphaOrd_r_n, 
   fHatSurf_l_e,fHatSurf_r_e,Ghat_l_c,GhatNoZero_l,
   Ghat_l_e,GhatNoZero_r,Ghat_r_e,incr_l,incr_r],

  [varsC,bC,varsP,bP] : loadPhaseBasis(basisFun, cdim, vdim, polyOrder),

  /* Number of basis monomials. */
  NP : length(bP),
  NC : length(bC),
  pDim  : length(varsP),

  printf(fh, "GKYL_CU_DH void ~a_~ax~av_~a_p~a(const double *w, const double *dxv, 
     const double *u_i, const double *p_ij, const double *bvar, const double *rho_inv_b, 
     const double *fl, const double *fc, const double *fr, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, cdim, vdim, basisFun, polyOrder),
  printf(fh, "  // w[NDIM]:   Cell-center coordinates.~%"),
  printf(fh, "  // dxv[NDIM]: Cell spacing.~%"),
  printf(fh, "  // u_i:      bulk flow velocity (ux, uy, uz).~%"),
  printf(fh, "  // p_ij:     pressure tensor (P_xx, P_xy, P_xz, P_yy, P_yz, P_zz).~%"),
  printf(fh, "  // bvar:      magnetic field unit vector (nine components; first three components, b_i, other six components, b_i b_j.) ~%"),
  printf(fh, "  // rho_inv_b: b_i/rho (for pressure force 1/rho * b . div(P)).~%"),
  printf(fh, "  // fl/fc/fr:  Input Distribution function in left/center/right cells.~%"),
  printf(fh, "  // out:       Incremented distribution function in center cell.~%"),

  cid : cidx(cdim),
  vid : vidx(cdim,vdim),

  /* grid spacing in v_parallel and v_parallel coordinate */
  printf(fh, "  const double dv1par = 2.0/dxv[~a]; ~%", cdim),
  printf(fh, "  const double dvpar = dxv[~a], wvpar = w[~a]; ~%", cdim, cdim),
  /* access flow, pressure tensor, and magnetic field unit vector data */
  printf(fh, "  const double *ux = &u_i[~a]; ~%", 0),
  printf(fh, "  const double *uy = &u_i[~a]; ~%", NC),
  printf(fh, "  const double *uz = &u_i[~a]; ~%", NC*2),

  printf(fh, "~%"),

  printf(fh, "  const double *Pxx = &p_ij[~a]; ~%", 0),
  printf(fh, "  const double *Pxy = &p_ij[~a]; ~%", NC),
  printf(fh, "  const double *Pxz = &p_ij[~a]; ~%", NC*2),
  printf(fh, "  const double *Pyy = &p_ij[~a]; ~%", NC*3),
  printf(fh, "  const double *Pyz = &p_ij[~a]; ~%", NC*4),
  printf(fh, "  const double *Pzz = &p_ij[~a]; ~%", NC*5),

  printf(fh, "~%"),

  printf(fh, "  const double *bx = &bvar[~a]; ~%", 0),
  printf(fh, "  const double *by = &bvar[~a]; ~%", NC),
  printf(fh, "  const double *bz = &bvar[~a]; ~%", NC*2),
  printf(fh, "  const double *bxbx = &bvar[~a]; ~%", NC*3),
  printf(fh, "  const double *bxby = &bvar[~a]; ~%", NC*4),
  printf(fh, "  const double *bxbz = &bvar[~a]; ~%", NC*5),
  printf(fh, "  const double *byby = &bvar[~a]; ~%", NC*6),
  printf(fh, "  const double *bybz = &bvar[~a]; ~%", NC*7),
  printf(fh, "  const double *bzbz = &bvar[~a]; ~%", NC*8),

  printf(fh, "~%"),

  printf(fh, "  const double *rho_inv_bx = &rho_inv_b[~a]; ~%", 0),
  printf(fh, "  const double *rho_inv_by = &rho_inv_b[~a]; ~%", NC),
  printf(fh, "  const double *rho_inv_bz = &rho_inv_b[~a]; ~%", NC*2),

  printf(fh, "~%"),

  /* Expand u, P, and b in configuration space basis */
  ux_e : doExpand1(ux, bC),
  uy_e : doExpand1(uy, bC),
  uz_e : doExpand1(uz, bC),
  u_e : [ux_e, uy_e, uz_e],

  Pxx_e : doExpand1(Pxx, bC),
  Pxy_e : doExpand1(Pxy, bC),
  Pxz_e : doExpand1(Pxz, bC),
  Pyy_e : doExpand1(Pyy, bC),
  Pyz_e : doExpand1(Pyz, bC),
  Pzz_e : doExpand1(Pzz, bC),
  P_e : [Pxx_e, Pxy_e, Pxz_e, Pyy_e, Pyz_e, Pzz_e],

  bx_e : doExpand1(bx, bC),
  by_e : doExpand1(by, bC),
  bz_e : doExpand1(bz, bC),
  b_e : [bx_e, by_e, bz_e],

  bxbx_e : doExpand1(bxbx, bC),
  bxby_e : doExpand1(bxby, bC),
  bxbz_e : doExpand1(bxbz, bC),
  byby_e : doExpand1(byby, bC),
  bybz_e : doExpand1(bybz, bC),
  bzbz_e : doExpand1(bzbz, bC),
  bb_e : [bxbx_e, bxby_e, bxbz_e, byby_e, bybz_e, bzbz_e], 

  rho_inv_bx_e : doExpand1(rho_inv_bx, bC),
  rho_inv_by_e : doExpand1(rho_inv_by, bC),
  rho_inv_bz_e : doExpand1(rho_inv_bz, bC),

  /* Create expansions of f_left, f_center, and f_right on volume basis. */
  fl_e : doExpand1(fl, bP),
  fc_e : doExpand1(fc, bP),
  fr_e : doExpand1(fr, bP),

  /* alpha_vdim = [1/rho * b . div(P) - v_parallel bb : grad(u)] df/dvpar */
  if cdim = 1 then (
    acc_e : rho_inv_bx_e*diff(Pxx_e,varsC[1]) + rho_inv_by_e*diff(Pxy_e,varsC[1]) + rho_inv_bz_e*diff(Pxz_e,varsC[1]) 
            - (vx*dvpar/2.0+wvpar)*(bxbx_e*diff(ux_e, varsC[1]) + bxby_e*diff(uy_e, varsC[1]) + bxbz_e*diff(uz_e, varsC[1]))
  )
  elseif cdim = 2 then (
    acc_e : rho_inv_bx_e*diff(Pxx_e,varsC[1]) + rho_inv_by_e*diff(Pxy_e,varsC[1]) + rho_inv_bz_e*diff(Pxz_e,varsC[1]) 
            + rho_inv_bx_e*diff(Pxy_e,varsC[2]) + rho_inv_by_e*diff(Pyy_e,varsC[2]) + rho_inv_bz_e*diff(Pyz_e,varsC[2])
            - (vx*dvpar/2.0+wvpar)*(bxbx_e*diff(ux_e, varsC[1]) + bxby_e*diff(uy_e, varsC[1]) + bxbz_e*diff(uz_e, varsC[1])
            + bxby_e*diff(ux_e, varsC[2]) + byby_e*diff(uy_e, varsC[2]) + bybz_e*diff(uz_e, varsC[2]))
  )
  else (
    acc_e : rho_inv_bx_e*diff(Pxx_e,varsC[1]) + rho_inv_by_e*diff(Pxy_e,varsC[1]) + rho_inv_bz_e*diff(Pxz_e,varsC[1]) 
            + rho_inv_bx_e*diff(Pxy_e,varsC[2]) + rho_inv_by_e*diff(Pyy_e,varsC[2]) + rho_inv_bz_e*diff(Pyz_e,varsC[2]) 
            + rho_inv_bx_e*diff(Pxz_e,varsC[3]) + rho_inv_by_e*diff(Pyz_e,varsC[3]) + rho_inv_bz_e*diff(Pzz_e,varsC[3]) 
            - (vx*dvpar/2.0+wvpar)*(bxbx_e*diff(ux_e, varsC[1]) + bxby_e*diff(uy_e, varsC[1]) + bxbz_e*diff(uz_e, varsC[1])
            + bxby_e*diff(ux_e, varsC[2]) + byby_e*diff(uy_e, varsC[2]) + bybz_e*diff(uz_e, varsC[2])   
            + bxbz_e*diff(ux_e, varsC[3]) + bybz_e*diff(uy_e, varsC[3]) + bzbz_e*diff(uz_e, varsC[3]))
  ),

  /* Surface contribution is defined as integral(phi^- Ghat) over the surface. */

  /* Surface variables to integrate over. */
  surfVars : delete(vx,varsP),

  /* Generate surface basis. this produces the ndim-1 orthogonal basis with no vx dependence. */
  if polyOrder=1 then (  /* Force p=1 to use hybrid basis. */
    bSurf : basisFromVars("hyb",surfVars,polyOrder)
  ) else (
    bSurf : basisFromVars(basisFun,surfVars,polyOrder)
  ),

  /* Project alpha evaluated at interior surface onto surf basis. */
  alphaSurf_l_c : fullratsimp(innerProd(surfVars, 1, bSurf, subst(vx=-1,acc_e))),
  alphaSurf_r_c : fullratsimp(innerProd(surfVars, 1, bSurf, subst(vx=1,acc_e))),
  alst_l          : doMakeExprLst(alphaSurf_l_c, alphaSurf_l),
  alst_r          : doMakeExprLst(alphaSurf_r_c, alphaSurf_r),
  alphaSurf_l_e : doExpand(alst_l, bSurf),
  alphaSurf_r_e : doExpand(alst_r, bSurf),
  printf(fh, "  double alphaSurf_l[~a] = {0.0}; ~%", length(bSurf)),
  writeCExprs1(alphaSurf_l, alphaSurf_l_c),
  printf(fh, "~%"),
  printf(fh, "  double alphaSurf_r[~a] = {0.0}; ~%", length(bSurf)),
  writeCExprs1(alphaSurf_r, alphaSurf_r_c),
  printf(fh, "~%"),

  /* Surface nodes given by tensor product of Gauss-Legendre quadrature points */
  if polyOrder = 1 then (  /* Force p=1 to use hybrid basis. */
    surf_cdim : cdim,  surf_vdim : 0,
    surfNodes : gaussOrdHyb(1+1, surf_cdim, surf_vdim)
  ) else (
    surfNodes : gaussOrd(polyOrder+1, pDim-1)
  ),
  numNodes : length(surfNodes),

  /* Evaluate alpha at ordinates.
     Note: alphaSurf_e is already a surface expansion. 
     In addition, it is continuous and does not vary with respect to the surface variable.
     We still require a alpha_l (w - dv/2) and alpha_r (w + dv/2) for the two sides of the cell */
  alphaOrd_l_n : gcfac(float(evAtNodes(alphaSurf_l_e,surfNodes,surfVars))),
  alphaOrd_r_n : gcfac(float(evAtNodes(alphaSurf_r_e,surfNodes,surfVars))),

  printf(fh, "  double fUpwindQuad_l[~a] = {0.0};~%", numNodes),
  printf(fh, "  double fUpwindQuad_r[~a] = {0.0};~%", numNodes),
  printf(fh, "  double fUpwind_l[~a] = {0.0};;~%", length(bSurf)),
  printf(fh, "  double fUpwind_r[~a] = {0.0};~%", length(bSurf)),
  printf(fh, "  double Ghat_l[~a] = {0.0}; ~%", length(bSurf)),
  printf(fh, "  double Ghat_r[~a] = {0.0}; ~%", length(bSurf)),
  printf(fh, "~%"),
  /* Check sign of each quadrature point and choose appropriate distribution function at 
     quadrature points. If alpha > 0, need f_l (at +1) and f_c (at +1). If alpha < 0, 
     need f_c (at -1) and f_r (at -1). */
  for i : 1 thru length(alphaOrd_l_n) do (
    printf(fh, "  if (~a > 0) { ~%", alphaOrd_l_n[i]),
    printf(fh, "    fUpwindQuad_l[~a] = ~a_~ax_p~a_surfx~a_eval_quad_node_~a_r(fl); ~%", i-1, basisFun, pDim, polyOrder, cdim+1, i-1),
    printf(fh, "  } else { ~%"),
    printf(fh, "    fUpwindQuad_l[~a] = ~a_~ax_p~a_surfx~a_eval_quad_node_~a_l(fc); ~%", i-1, basisFun, pDim, polyOrder, cdim+1, i-1),
    printf(fh, "  } ~%"),
    printf(fh, "  if (~a > 0) { ~%", alphaOrd_r_n[i]),
    printf(fh, "    fUpwindQuad_r[~a] = ~a_~ax_p~a_surfx~a_eval_quad_node_~a_r(fc); ~%", i-1, basisFun, pDim, polyOrder, cdim+1, i-1),
    printf(fh, "  } else { ~%"),
    printf(fh, "    fUpwindQuad_r[~a] = ~a_~ax_p~a_surfx~a_eval_quad_node_~a_l(fr); ~%", i-1, basisFun, pDim, polyOrder, cdim+1, i-1),
    printf(fh, "  } ~%")
  ),

  printf(fh, "~%"),
  printf(fh, "  // Project tensor nodal quadrature basis back onto modal basis. ~%"),
  if polyOrder=1 then (  /* Force p=1 to use hybrid basis. */
    printf(fh, "  hyb_~ax~av_p1_vdir_upwind_quad_to_modal(fUpwindQuad_l, fUpwind_l); ~%", cdim, vdim),
    printf(fh, "  hyb_~ax~av_p1_vdir_upwind_quad_to_modal(fUpwindQuad_r, fUpwind_r); ~%", cdim, vdim)
  ) else (
    printf(fh, "  ~a_~ax_p~a_upwind_quad_to_modal(fUpwindQuad_l, fUpwind_l); ~%", basisFun, cdim+vdim, polyOrder),
    printf(fh, "  ~a_~ax_p~a_upwind_quad_to_modal(fUpwindQuad_r, fUpwind_r); ~%", basisFun, cdim+vdim, polyOrder)
  ),
  printf(fh, "~%"),

  /* Create expansions of f_hat (upwinded f) on the left and right in the surface basis. */
  fHatSurf_l_e : doExpand1(fUpwind_l, bSurf),
  fHatSurf_r_e : doExpand1(fUpwind_r, bSurf),

  /* Print C exprs for Ghat across surface boundary, (LEFT BOUNDARY) */
  Ghat_l_c : fullratsimp(innerProd(surfVars, alphaSurf_l_e, bSurf, fHatSurf_l_e)),
  writeCExprs1(Ghat_l, Ghat_l_c),
  printf(fh, "~%"),
  flush_output(fh),

  /* Zero out components of Ghat which are empty. */
  GhatNoZero_l : doMakeExprLst(Ghat_l_c, Ghat_l),
  Ghat_l_e     : doExpand(GhatNoZero_l, bSurf),

  /* Print C exprs for Ghat across surface boundary, (RIGHT BOUNDARY) */
  Ghat_r_c : fullratsimp(innerProd(surfVars, alphaSurf_r_e, bSurf, fHatSurf_r_e)),
  writeCExprs1(Ghat_r, Ghat_r_c),
  printf(fh, "~%"),
  flush_output(fh),

  /* Zero out components of Ghat which are empty. */
  GhatNoZero_r : doMakeExprLst(Ghat_r_c, Ghat_r),
  Ghat_r_e     : doExpand(GhatNoZero_r, bSurf),

  /* Compute surface contribution integral(phi^- Ghat) on the left and right. */
  incr_l : calcInnerProdList(surfVars, 1, subst(vx=-1.0, bP), Ghat_l_e),
  incr_r : calcInnerProdList(surfVars, -1, subst(vx=1.0, bP), Ghat_r_e),
  writeCIncrExprsCollect1lhsc(out, dv1par*incr_l + dv1par*incr_r),  
  printf(fh, "~%"),

  printf(fh, "} ~%")
);