load("vlasov/vlasovMaxwellFuncs-boundary-surf-C")$
load(stringproc)$
/* This script calls the functions which calculate the
   updates from the surface term for the E + v x B term
   in the Vlasov equation at the boundary in velocity space
   (used in zero-flux boundary conditions where one side of the
   cell is not updated in a cell-based update). */

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
minVdim_Ser : 1$    /* see begining of v loop below though. */
maxCdim_Ser : 3$
maxVdim_Ser : 3$

/* Tensor product basis. */
/* Note that Serendipity, p = 1, is equivalent to Tensor */
/* Thus no need to calculate p = 1 Tensor basis */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
minVdim_Tensor : 1$    /* see begining of v loop below though. */
maxCdim_Tensor : 0$
maxVdim_Tensor : 0$

/* ...... END OF USER INPUTS........ */

bName        : ["ser","tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
minVdim      : [minVdim_Ser, minVdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$
maxVdim      : [maxVdim_Ser, maxVdim_Tensor]$

clabels : ["x","y","z"]$
vlabels : ["vx","vy","vz"]$

includeSurfHeaders(fhIn, bname, c, v, porder, dir) := block([],
  printf(fhIn, "#include <gkyl_vlasov_kernels.h> ~%"),
  if porder=1 then (
    /* Force hybrid basis (p=2) in velocity space. */
    printf(fhIn, "#include <gkyl_basis_hyb_~ax~av_p1_surfx~a_eval_quad.h> ~%", c, v, c+dir),
    printf(fhIn, "#include <gkyl_basis_hyb_~ax~av_p1_upwind_quad_to_modal.h> ~%", c, v)
  ) elseif porder>1 then (
    printf(fhIn, "#include <gkyl_basis_~a_~ax_p~a_surfx~a_eval_quad.h> ~%", bname, c+v, porder, c+dir),
    printf(fhIn, "#include <gkyl_basis_~a_~ax_p~a_upwind_quad_to_modal.h> ~%", bname, c+v, porder)
  )
)$

/* Compute the surface contribution in velocity space from the acceleration term */
for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    for v : max(c,minVdim[bInd]) thru maxVdim[bInd] do (

      minPolyOrderB : minPolyOrder[bInd],
      maxPolyOrderB : maxPolyOrder[bInd],
      if (c+v>5 and maxPolyOrderB > 1) then maxPolyOrderB : 1,

      for polyOrder : minPolyOrderB thru maxPolyOrderB do (
        disp(printf(false,sconcat("Creating boundary surface Vlasov ",bName[bInd]," ~ax~av_p~a"),c,v,polyOrder)),
        
        /* Boundary surf kernels in conf-directions for boundary flux calculations. */
        for dir : 1 thru c do ( 
          fname : sconcat("~/max-out/vlasov_boundary_surf", clabels[dir], "_", c, "x", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
          fh : openw(fname),
          printf(fh, "#include <gkyl_vlasov_kernels.h> ~%"),
          funcName : sconcat("vlasov_boundary_surf",clabels[dir],"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder),
          calcVlasovStreamBoundaryUpdateInDir(dir, fh, funcName, c, v, bName[bInd], polyOrder), 
          close(fh)
        ),

        /* Boundary surf kernels in velocity directions. */
        for dir : 1 thru v do ( 
          fname : sconcat("~/max-out/vlasov_boundary_surf", vlabels[dir], "_", c, "x", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
          fh : openw(fname),
          includeSurfHeaders(fh, bName[bInd], c, v, polyOrder, dir),
          funcName : sconcat("vlasov_boundary_surf"),
          calcVlasovLorentzBoundaryUpdateInDir(dir, fh, funcName, c, v, bName[bInd], polyOrder),
          close(fh)
        )
      )
    )
  )
);
