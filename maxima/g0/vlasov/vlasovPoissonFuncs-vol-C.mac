/* Functions called to generate the kernels for the volume terms due
   to the streaming (v.grad(f)) and -grad(phi) . del_v(f) terms
   in the Vlasov-Poisson equation, with the option to add a contribution
   due to external fields via curl(A) where A is the vector potential.
   NOTE: kernels expect phi and A to be scaled by appropriate factors
   i.e., q/m for plasmas, and G*m for self-gravitation systems. */

load("modal-basis")$
load("out-scripts")$
load(stringproc)$
fpprec : 24$

varsV    : [vx, vy, vz]$
cvars    : [X, Y, Z]$
vvars    : [VX, VY, VZ]$
varsCall : [x, y, z]$

dvdx : [dv0dx0, dv1dx1, dv2dx2]$
wdx  : [w0dx0, w1dx1, w2dx2]$
dx11 : [dx10, dx11, dx12]$
dv11 : [dv10, dv11, dv12]$

Afld : [A0, A1, A2]$

cidx(cdim)      := makelist(i,i,0,cdim-1)$
vidx(cdim,vdim) := makelist(i,i,cdim,cdim+vdim-1)$

/* Helper functions for expanding in basis functions a quantity we know should be sparse  */
/* For example, alpha, the phase space flow only depends on a few phase space coordinates */
doMakeExprLst(vals, S)  := makelist(if vals[i] # 0 then S[a0+i-1] else 0, i, 1, length(vals))$

calcVlasovPhiVolUpdater(fh, funcNm, cdim, vdim, basisFun, polyOrder, hasB) := block(
  [bP,bC,varsC,varsP,numC,numP,cflPt,cid,vid,dir,d,f_e,phi_e,Ax_e,Ay_e,Az_e,
   Bx_e,By_e,Bz_e,cdir,vdir,alpha_cdim_c,alpha_vdim_c,i,expr,alpha_cdim_NoZero,
   alpha_cdim_NoZero_e,incr_cdim,incr_vdim,acc_e,vTransSubs,alpha_vdim_NoZero,
   alpha_vdim_NoZero_e],

  /* Load basis of dimensionality requested. */
  [varsC,bC,varsP,bP] : loadPhaseBasis(basisFun, cdim, vdim, polyOrder),

  numC : length(bC),
  numP : length(bP),

  /* Point at which to evaluate alpha for use in computing CFL. */
  cflPt : makelist(varsP[d]=0, d, 1, cdim+vdim),

  printf(fh, "GKYL_CU_DH double ~a_p~a(const double *w, const double *dxv, const double *fac_phi, const double *vecA, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, polyOrder),
  printf(fh, "  // w[NDIM]:   Cell-center coordinates.~%"),
  printf(fh, "  // dxv[NDIM]: Cell spacing.~%"),
  printf(fh, "  // fac_phi:   potential (scaled by appropriate factors).~%"),
  printf(fh, "  // vecA:      vector potential (scaled by appropriate factors). Unused in pure Vlasov-Poisson. ~%"),
  printf(fh, "  // f:         Input distribution function.~%"),
  printf(fh, "  // out:       Incremented output.~%"),

  cid : cidx(cdim),
  vid : vidx(cdim,vdim),

  /* common expressions in streaming (v dot grad(f)) term and grad(phi) */
  for dir : 1 thru cdim do (
    printf(fh, "  double dv~adx~a = dxv[~a]/dxv[~a]; ~%", dir-1, dir-1, vid[dir], cid[dir]),
    printf(fh, "  double w~adx~a = w[~a]/dxv[~a]; ~%", dir-1, dir-1, vid[dir], cid[dir]),
    printf(fh, "  const double dx1~a = 2/dxv[~a]; ~%", dir-1, cid[dir])
  ),

  /* access potential data */
   printf(fh, "  const double *phi = &fac_phi[~a]; ~%", 0),
  /* set cell-spacing */
  for dir : 1 thru vdim do (
    printf(fh, "  const double dv1~a = 2/dxv[~a]; ~%", dir-1, vid[dir]),
    printf(fh, "  const double dv~a = dxv[~a], wv~a = w[~a]; ~%", dir, vid[dir], dir, vid[dir])
  ),
  printf(fh, "~%"),

  if (hasB) then (
    if vdim > 1 then (
      /* If vdim = 1, then no magnetic field. */
      if vdim = 2 then (
        /* In 2 velocity dimensions, only Ax and Ay. */
        for d : 1 thru 2 do (
          printf(fh, "  const double *A~a = &vecA[~a]; ~%", d-1, numC*(d-1))
        )
      ),
      if vdim = 3 then (
        for d : 1 thru 3 do (
          printf(fh, "  const double *A~a = &vecA[~a]; ~%", d-1, numC*(d-1))
        )
      )
    )
  ),

  /* alpha_mid is our approximation of sum_i max(abs(alpha_i))/dx_i */
  printf(fh, "  double alpha_mid = 0.0; ~%"),

  /* alpha_cdim = v, alpha_vdim = -fac*grad(phi) */
  /* fac = q/m for plasma, fac = G*m for self gravitating systems */
  /* In case of external fields, also add q/m*curl(A) */
  printf(fh, "  double alpha_cdim[~a]; ~%", cdim*numP),
  printf(fh, "  double alpha_vdim[~a]; ~%~%", vdim*numP),

  /* Expand distribution function f in phase basis, and potential in conf basis. */
  f_e   : doExpand1(f, bP),
  phi_e : doExpand1(phi, bC),
  Ax_e : doExpand1(Afld[1], bC),
  Ay_e : doExpand1(Afld[2], bC),
  Az_e : doExpand1(Afld[3], bC),

  /* B = curl(A); NOTE: already contains q/m factor */
  Bx_e : dx11[2]*diff(Az_e, varsCall[2]) - dx11[3]*diff(Ay_e, varsCall[3]),
  By_e : dx11[3]*diff(Ax_e, varsCall[3]) - dx11[1]*diff(Az_e, varsCall[1]),
  Bz_e : dx11[1]*diff(Ay_e, varsCall[1]) - dx11[2]*diff(Ax_e, varsCall[2]),

  incr_cdim : 0,
  /* alpha_cdim = v dot grad(f) */
  for cdir : 1 thru cdim do (
    alpha_cdim_c : calcInnerProdList(varsP, 1, bP, 2*wdx[cdir]+dvdx[cdir]*varsV[cdir]),
    expr : gcfac(float(expand(radcan(alpha_cdim_c)))),

    /* Write out the components of alpha_cdim's phase space expansion. */
    for i : 1 thru numP do (
      if expr[i] # 0.0 then printf(fh, "  ~a = ~a; ~%", alpha_cdim[numP*(cdir-1)+i-1], expr[i])
    ),

    printf(fh, "  alpha_mid += fabs(~a)+~a; ~%", wdx[cdir], 0.5*dvdx[cdir]),
    printf(fh, "~%"),

    /* Zero out components of alpha which are empty. */
    alpha_cdim_NoZero   : doMakeExprLst(alpha_cdim_c, alpha_cdim),
    alpha_cdim_NoZero_e : doExpand(alpha_cdim_NoZero, bP),

    /* Volume increment from configuration space. */
    incr_cdim : incr_cdim+subst(a0=numP*(cdir-1),calcInnerProdList(varsP, 1, diff(bP,varsP[cdir]), alpha_cdim_NoZero_e*f_e))
  ),

  incr_vdim : 0,
  for vdir : 1 thru vdim do (

    /* Calculate the acceleration. */
    if (vdir = 1) then (
      acc_e : -dx11[vdir]*diff(phi_e,varsCall[1]),
      if (hasB) then ( acc_e : acc_e + vvy*Bz_e - vvz*By_e )
    ) elseif (vdir = 2) then (
      acc_e : -dx11[vdir]*diff(phi_e,varsCall[2]),
      if (hasB) then ( acc_e : acc_e + vvz*Bx_e - vvx*Bz_e )
    ) else (
      acc_e : -dx11[vdir]*diff(phi_e,varsCall[3]),
      if (hasB) then ( acc_e : acc_e + vvx*By_e - vvy*Bx_e )
    ),
    vzero(vdim)  := if vdim = 1 then [vvy=0, vvz=0] elseif vdim = 2 then [vvz=0] else [],
    vTransSubs   : [vvx=vx*dv1/2+wv1, vvy=vy*dv2/2+wv2, vvz=vz*dv3/2+wv3],
    acc_e        : subst(append(vzero(vdim),vTransSubs), acc_e),

    alpha_vdim_c : calcInnerProdList(varsP, 1, bP, dv11[vdir]*acc_e),
    expr         : gcfac(float(expand(radcan(alpha_vdim_c)))),

    /* Write out the components of alpha_vdim's phase space expansion. */
    for i : 1 thru numP do (
      if expr[i] # 0.0 then printf(fh, "  ~a = ~a; ~%", alpha_vdim[numP*(vdir-1)+i-1], expr[i])
    ),

    /* Zero out components of alpha which are empty. */
    alpha_vdim_NoZero   : doMakeExprLst(alpha_vdim_c, alpha_vdim),
    alpha_vdim_NoZero_e : doExpand(alpha_vdim_NoZero, bP),

    /* Evaluate alpha_vdim at cflPt to approximate max(abs(alpha_vdim))/dv_i. */
    amid : gcfac(float(expand(subst(cflPt,0.5*subst(a0=numP*(vdir-1),alpha_vdim_NoZero_e))))),
    printf(fh, "  alpha_mid += fabs(~a); ~%", amid),
    printf(fh, "~%"),

    /* Volume increment from configuration space. */
    incr_vdim : incr_vdim+subst(a0=numP*(vdir-1),calcInnerProdList(varsP, 1, diff(bP,varsP[cdim+vdir]), alpha_vdim_NoZero_e*f_e))
  ),
  
  /* Write out first attempts to simplify the radicals with radcan,
     e.g. force sqrt(3)*sqrt(5) = sqrt(15). */
  /* outscripts loads scifac and uses the aggressive factorization routine "gcfac". */
  writeCExprsCollect1c(radcan(incr_cdim+incr_vdim)),

  printf(fh, "~%"),
  printf(fh, "  return alpha_mid; ~%"),
  printf(fh, "} ~%"),
  printf(fh, "~%")
)$
