/* Compute the surface expansion of v^i = v . e^i for use in
   surface fluxes of general geometry neutrals. */

load("modal-basis")$
load("out-scripts")$
load(stringproc)$
load("scifac")$
load("vlasov/vlasovUtil")$
fpprec : 24$

dvdx : [dv0dx0, dv1dx1, dv2dx2]$
wdx  : [w0dx0, w1dx1, w2dx2]$
dv11 : [dv10, dv11, dv12]$
vc   : [vx_c, vy_c, vz_c]$

/* Helper function for switching to eta = (v - w)/(dv/2) coordinates */
vTransSubs : [vvx=vx*dv1/2+wv1, vvy=vy*dv2/2+wv2, vvz=vz*dv3/2+wv3]$

cidx(cdim)      := makelist(i,i,0,cdim-1)$
vidx(cdim,vdim) := makelist(i,i,cdim,cdim+vdim-1)$

/* Helper functions for expanding in basis functions a quantity we know should be sparse  */
/* For example, alpha, the phase space flow only depends on a few phase space coordinates */
doMakeExprLst(vals, S)  := makelist(if vals[i] # 0 then S[i-1] else 0, i, 1, length(vals))$
doExpandLst(lst, basis) := sum(lst[i]*basis[i], i, 1, length(basis))$

calcVlasovAlphaGenGeo(dir, fh, funcNm, cdim, vdim, basisFun, polyOrder, edge) := block(
  [varsC, bC, varsP, bP, NP, NC, varsV, 
   cv, surfVars, surfVars_conf, bSurf_p1, bSurf_conf_p1, cid, vid, 
   gix_e, giy_e, giz_e, 
   e_1x_e, e_1y_e, e_1z_e, 
   e_2x_e, e_2y_e, e_2z_e, 
   e_3x_e, e_3y_e, e_3z_e, evPoint, 
   ei_x_surf_c, ei_y_surf_c, ei_z_surf_c,  
   ei_x_surf_e, ei_y_surf_e, ei_z_surf_e, 
   alpha_surf_c],

  /* Load basis of dimensionality requested. */
  [varsC,bC,varsP,bP] : loadPhaseBasis(basisFun, cdim, vdim, polyOrder),
  NP : length(bP),
  NC : length(bC),
  varsV : makelist(varsP[i],i,cdim+1,cdim+vdim),

  /* cv = variable in direction of surface update. */
  cv : varsP[dir],
  /* Surface variables to integrate over (phase space and configuration space). */
  surfVars : delete(cv,varsP),
  surfVars_conf : delete(cv,varsC),
  bSurf_p1 : basisFromVars(basisFun,surfVars,1),
  bSurf_conf_p1 : basisFromVars(basisFun,surfVars_conf,1),
  NSurf_p1 : length(bSurf_p1),

  surfNodes_p1 : gaussOrd(2, cdim+vdim-1),
  nodeVars : surfVars,
  numNodes_p1 : length(surfNodes_p1),

  printf(fh, "GKYL_CU_DH int ~a(const double *w, const double *dxv, const double *tvComp, const double *gij, double* GKYL_RESTRICT alpha_surf, double* GKYL_RESTRICT sgn_alpha_surf) ~%{ ~%", funcNm),
  printf(fh, "  // w[NDIM]:    Cell-center coordinates.~%"),
  printf(fh, "  // dxv[NDIM]:  Cell spacing.~%"),
  printf(fh, "  // tvComp[~a]: Components for tangent basis vectors.~%", NC*9),
  printf(fh, "  // gij[~a]:    Contravariant components of metric tensor.~%", NC*6),
  printf(fh, "  // alpha_surf: output surface phase space flux, v^i, in each direction (cdim components).~%"),
  printf(fh, "  //             Note: Each cell owns their *lower* edge surface evaluation.~%"),
  printf(fh, "  // sgn_alpha_surf: output sign(alpha_surf) in each direction at quadrature points (cdim components).~%"),
  printf(fh, "  //                 Note: Each cell owns their *lower* edge sign(alpha_surf).~%"),
  printf(fh, "  // returns int const_sgn_alpha (true if sign(alpha_surf) is only one sign, either +1 or -1).~%"),
  printf(fh, "~%"),

  cid : cidx(cdim),
  vid : vidx(cdim,vdim),

  /* Need to construct e^i cotangent vectors at surface 
     e^i = g^ij . e_j = (g^ix e_1x + g^iy e_2x + g^iz e_3x, 
                         g^ix e_1y + g^iy e_2y + g^iz e_3y, 
                         g^ix e_1z + g^iy e_2z + g^iz e_3z)  */ 
  if (dir = 1) then (
    printf(fh, "  const double *gix = &gij[~a]; ~%", NC*0),
    printf(fh, "  const double *giy = &gij[~a]; ~%", NC*1),
    printf(fh, "  const double *giz = &gij[~a]; ~%", NC*2),
    printf(fh, "~%")
  )
  else if (dir = 2) then (
    printf(fh, "  const double *gix = &gij[~a]; ~%", NC*1),
    printf(fh, "  const double *giy = &gij[~a]; ~%", NC*3),
    printf(fh, "  const double *giz = &gij[~a]; ~%", NC*4),
    printf(fh, "~%")
  )
  else (
    printf(fh, "  const double *gix = &gij[~a]; ~%", NC*2),
    printf(fh, "  const double *giy = &gij[~a]; ~%", NC*4),
    printf(fh, "  const double *giz = &gij[~a]; ~%", NC*5),
    printf(fh, "~%")
  ),
  printf(fh, "  const double *e_1x = &tvComp[~a]; ~%", NC*0),
  printf(fh, "  const double *e_1y = &tvComp[~a]; ~%", NC*1),
  printf(fh, "  const double *e_1z = &tvComp[~a]; ~%", NC*2),
  printf(fh, "  const double *e_2x = &tvComp[~a]; ~%", NC*3),
  printf(fh, "  const double *e_2y = &tvComp[~a]; ~%", NC*4),
  printf(fh, "  const double *e_2z = &tvComp[~a]; ~%", NC*5),
  printf(fh, "  const double *e_3x = &tvComp[~a]; ~%", NC*6),
  printf(fh, "  const double *e_3y = &tvComp[~a]; ~%", NC*7),
  printf(fh, "  const double *e_3z = &tvComp[~a]; ~%", NC*8),
  printf(fh, "~%"),
  /* expand the needed metric coefficients and tangent vectors */
  gix_e : doExpand1(gix, bC),
  giy_e : doExpand1(giy, bC),
  giz_e : doExpand1(giz, bC),
  e_1x_e : doExpand1(e_1x, bC),
  e_1y_e : doExpand1(e_1y, bC),
  e_1z_e : doExpand1(e_1z, bC),
  e_2x_e : doExpand1(e_2x, bC),
  e_2y_e : doExpand1(e_2y, bC),
  e_2z_e : doExpand1(e_2z, bC),
  e_3x_e : doExpand1(e_3x, bC),
  e_3y_e : doExpand1(e_3y, bC),
  e_3z_e : doExpand1(e_3z, bC),

  /* Substitute the surface variable in direction dir */
  if (edge) then (
    printf(fh, "  double *alpha_surfR = &alpha_surf[~a]; ~%", (dir-1)*NSurf_p1),
    printf(fh, "  double *sgn_alpha_surfR = &sgn_alpha_surf[~a];~%", (dir-1)*numNodes_p1),
    printf(fh, "~%"),
    evPoint : 1
  )
  else (
    printf(fh, "  double *alpha_surfL = &alpha_surf[~a]; ~%", (dir-1)*NSurf_p1),
    printf(fh, "  double *sgn_alpha_surfL = &sgn_alpha_surf[~a];~%", (dir-1)*numNodes_p1),
    printf(fh, "~%"),
    evPoint : -1
  ),
  /* Compute cotangent vectors e^i = g^ij e_j */
  printf(fh, "  double ei_x_surf[~a] = {0.0};~%", length(bSurf_conf_p1)),
  printf(fh, "  double ei_y_surf[~a] = {0.0};~%", length(bSurf_conf_p1)),
  printf(fh, "  double ei_z_surf[~a] = {0.0};~%", length(bSurf_conf_p1)),
  printf(fh, "~%"), 
  ei_x_surf_c : calcInnerProdList(surfVars_conf, 1, bSurf_conf_p1, subst(cv=evPoint, gix_e*e_1x_e + giy_e*e_2x_e + giz_e*e_3x_e)), 
  ei_y_surf_c : calcInnerProdList(surfVars_conf, 1, bSurf_conf_p1, subst(cv=evPoint, gix_e*e_1y_e + giy_e*e_2y_e + giz_e*e_3y_e)), 
  ei_z_surf_c : calcInnerProdList(surfVars_conf, 1, bSurf_conf_p1, subst(cv=evPoint, gix_e*e_1z_e + giy_e*e_2z_e + giz_e*e_3z_e)), 
  writeCExprs1(ei_x_surf, ei_x_surf_c),
  printf(fh, "~%"),
  writeCExprs1(ei_y_surf, ei_y_surf_c),
  printf(fh, "~%"),
  writeCExprs1(ei_z_surf, ei_z_surf_c),
  printf(fh, "~%"),

  ei_x_surf_e : doExpand1(ei_x_surf, bSurf_conf_p1),
  ei_y_surf_e : doExpand1(ei_y_surf, bSurf_conf_p1),
  ei_z_surf_e : doExpand1(ei_z_surf, bSurf_conf_p1),

  alpha_surf_c : calcInnerProdList(surfVars, 1, bSurf_p1, (dxv[vid[1]]/2.0*varsV[1] + w[vid[1]])*ei_x_surf_e 
                                                        + (dxv[vid[2]]/2.0*varsV[2] + w[vid[2]])*ei_y_surf_e 
                                                        + (dxv[vid[3]]/2.0*varsV[3] + w[vid[3]])*ei_z_surf_e), 
  if (edge) then (
    writeCExprs1(alpha_surfR, alpha_surf_c),
    alphaNoZero_c : doMakeExprLst(alpha_surf_c, alpha_surfR),
    alphaSurf_e : doExpand(alphaNoZero_c, bSurf_p1),
    calcAndWrite_sgn_alpha(fh,nodeVars,surfNodes_p1,numNodes_p1,alphaSurf_e,"R")
  )
  else (
    writeCExprs1(alpha_surfL, alpha_surf_c),
    alphaNoZero_c : doMakeExprLst(alpha_surf_c, alpha_surfL),
    alphaSurf_e : doExpand(alphaNoZero_c, bSurf_p1),
    calcAndWrite_sgn_alpha(fh,nodeVars,surfNodes_p1,numNodes_p1,alphaSurf_e,"L")
  ),
  printf(fh, "  return const_sgn_alpha_surf; ~%"),
  printf(fh, "~%"),
  flush_output(fh),
  printf(fh, "} ~%")
)$
