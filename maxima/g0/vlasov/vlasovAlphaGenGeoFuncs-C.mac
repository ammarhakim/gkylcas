/* Compute the volume term for the streaming (v . grad(f)) term
   in the Vlasov neutral eqn with general geometry. */

load("modal-basis");
load("out-scripts");
load(stringproc)$
fpprec : 24$

dvdx : [dv0dx0, dv1dx1, dv2dx2]$
wdx  : [w0dx0, w1dx1, w2dx2]$
dv11 : [dv10, dv11, dv12]$
vc   : [vx_c, vy_c, vz_c]$

/* Helper function for switching to eta = (v - w)/(dv/2) coordinates */
vTransSubs : [vvx=vx*dv1/2+wv1, vvy=vy*dv2/2+wv2, vvz=vz*dv3/2+wv3]$

cidx(cdim)      := makelist(i,i,0,cdim-1)$
vidx(cdim,vdim) := makelist(i,i,cdim,cdim+vdim-1)$

/* Helper functions for expanding in basis functions a quantity we know should be sparse  */
/* For example, alpha, the phase space flow only depends on a few phase space coordinates */
doMakeExprLst(vals, S)  := makelist(if vals[i] # 0 then S[a0+i-1] else 0, i, 1, length(vals))$
doExpandLst(lst, basis) := sum(lst[i]*basis[i], i, 1, length(basis))$

calcVlasovAlphaGenGeo(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block([bP,bC,NP,NC,cflPt,cid,vid,dir,f_e,incr_cdim,incr_vdim,cdir,vdir,expr,alpha_cdim_c,alpha_vdim_c,amid],

  printf(fh, "#include <gkyl_dg_vlasov_alpha_gen_geo_kernels.h> ~%"),

  /* Load basis of dimensionality requested. */
  [varsC,bC,varsP,bP] : loadPhaseBasis(basisFun, cdim, vdim, polyOrder),
  NC : length(bC),
  NP : length(bP),
  print("NP", NP),
  varsV : makelist(varsP[i],i,cdim+1,cdim+vdim),
  print(varsV),

  /* specify a point to evaluate alpha at for use in computing CFL */
  cflPt : makelist(varsP[d]=0, d, 1, length(varsP)),

  printf(fh, "GKYL_CU_DH void ~a_p~a(const double *w, const double *dxv, const double *tvComp, const double *gij, double* GKYL_RESTRICT alpha_geo) ~%{ ~%", funcNm, polyOrder),
  printf(fh, "  // w[NDIM]:    Cell-center coordinates.~%"),
  printf(fh, "  // dxv[NDIM]:  Cell spacing.~%"),
  printf(fh, "  // tvComp[~a]: Components for tangent basis vectors.~%", NC*9),
  printf(fh, "  // gij[~a]:    Contravariant components of metric tensor.~%", NC*6),
  printf(fh, "  // v_i:        Covariant components of velocity.~%"),
  printf(fh, "  // alpha_geo:        Output alpha field.~%"),

  cid : cidx(cdim),
  vid : vidx(cdim,vdim),

  printf(fh, "~%"),
  printf(fh, "  double v_x[~a] = {0.0};~%", NP),
  printf(fh, "  double v_y[~a] = {0.0};~%", NP),
  printf(fh, "  double v_z[~a] = {0.0};~%", NP),
  printf(fh, "~%"),	

  printf(fh, "  const double *gxx = &gij[~a]; ~%", NC*0),
  printf(fh, "  const double *gxy = &gij[~a]; ~%", NC*1),
  printf(fh, "  const double *gxz = &gij[~a]; ~%", NC*2),
  printf(fh, "  const double *gyy = &gij[~a]; ~%", NC*3),
  printf(fh, "  const double *gyz = &gij[~a]; ~%", NC*4),
  printf(fh, "  const double *gzz = &gij[~a]; ~%", NC*5),
  printf(fh, "~%"),

  tvComp_e : doExpand1(tvComp, bC),
  gxx_e : doExpand1(gxx, bC),
  gxy_e : doExpand1(gxy, bC),
  gxz_e : doExpand1(gxz, bC),
  gyy_e : doExpand1(gyy, bC),
  gyz_e : doExpand1(gyz, bC),
  gzz_e : doExpand1(gzz, bC),

  /* For multiple components, change indices. */
  tvComp_e : psubst(makelist(tvComp[i]=tvComp[a0+i],i,0,NC-1),tvComp_e),

  vTemp_c :  makelist(0, i, 1, vdim), 				 
  /* Calculate v_i components: v_x = v_X*dX/dx + v_Y*dY/dx + v_Z*dZ/dx, ...  */
   for dir1 : 1 thru vdim do (
    /*vTemp_c[dir1] : calcInnerProdList(varsP, 1, bP, dxv[vid[dir1]]/2*varsV[dir1] + w[vid[dir1]])*/
    vTemp_c[dir1] : 0,
    for dir2 : 1 thru vdim do (
    	tvi : (dir1 - 1)*cdim + (dir2-1),
    	vTemp_c[dir1] : vTemp_c[dir1]
             +calcInnerProdList(varsP, 1, bP, (dxv[vid[dir2]]/2*varsV[dir2] + w[vid[dir2]])*subst(a0=NC*(tvi),tvComp_e)))
  ),
  print("loop ended"),

  writeCExprsCollect1lhsc(v_x, vTemp_c[1]),
  writeCExprsCollect1lhsc(v_y, vTemp_c[2]),
  writeCExprsCollect1lhsc(v_z, vTemp_c[3]),
  printf(fh, "~%"),

  /* Expand in phase basis. */
  v_x_e : doExpand1(v_x, bP),
  v_y_e : doExpand1(v_y, bP),
  v_z_e : doExpand1(v_z, bP),

  /* Calculate v^i : v^x = gxx*v_x + gxy*v_y + gxz*v_z, ... */
  vx_c : calcInnerProdList(varsP, 1, bP, (gxx_e*v_x_e + gxy_e*v_y_e + gxz_e*v_z_e)),
  vy_c : calcInnerProdList(varsP, 1, bP, (gxy_e*v_x_e + gyy_e*v_y_e + gyz_e*v_z_e)),
  vz_c : calcInnerProdList(varsP, 1, bP, (gxz_e*v_x_e + gyz_e*v_y_e + gzz_e*v_z_e)),
  /*vx_c : calcInnerProdList(varsP, 1, bP, v_x_e),
  vy_c : calcInnerProdList(varsP, 1, bP, v_y_e),
  vz_c : calcInnerProdList(varsP, 1, bP, v_z_e),*/

  /* alpha_mid is our approximation of sum_i max(abs(alpha_i))/dx_i */

  /* This code eliminates zero coefficients. */
  incr_cdim : 0,
  /* alpha_cdim = v dot grad */
  for cdir : 1 thru vdim do ( 
    vc_e : doExpandLst(vc[cdir], bP), 
    alpha_geo_c : calcInnerProdList(varsP, 1, bP, vc_e),
    expr : gcfac(float(expand(radcan(alpha_geo_c)))),

    /* Write out the component of alpha_cdim's phase space expansion */
    for i : 1 thru NP do (
      if expr[i] # 0.0 then printf(fh, "  ~a = ~a; ~%", alpha_geo[NP*(cdir-1)+i-1], expr[i])
      /*if expr[i] # 0.0 then printf(fh, "  ~a = ~a; ~%", alpha_geo[i-1], expr[i])*/
    )

  ),

  /* write out first attempts to simplify the radicals with radcan, e.g. force sqrt(3)*sqrt(5) = sqrt(15) */
  /* outscripts loads scifac and uses the aggressive factorization routine "gcfac" */

  printf(fh, "~%"),
  printf(fh, "} ~%")
)$

bName : ["ser"]$
maxPolyOrder : [1]$

for bInd : 1 thru length(bName) do (
  for c : 3 thru 3 do (
      for v : 3 thru 3 do (
      	  disp(printf(false,sconcat("Creating alpha ", bName[bInd]," ~ax~av"),c,v)),
    	  fname : sconcat("~/max-out/vlasov_alpha_gen_geo_", c, "x", v, "v_", bName[bInd], ".c"),
    	  fh : openw(fname),

	  print("attempting to print",c,"x",v,"v functions..."),
    	  /*. Calculate velocity components  */
    	  funcNm : sconcat("vlasov_alpha_gen_geo_", c, "x", v, "v_", bName[bInd]),
    	  calcVlasovAlphaGenGeo(fh, funcNm, c, v, bName[bInd], maxPolyOrder[bInd]),
    	  close(fh)
  	  )
  )	
)$
