/* This script generates the kernels for the volume term contribution from 
   the Vlasov equation (full EM, both streaming and acceleration) */

load("modal-basis");
load("out-scripts");
load("utilities")$
load ("scifac")$
load(stringproc)$
fpprec : 24$

varsV : [vx, vy, vz]$
cvars : [X, Y, Z]$
vvars : [VX, VY, VZ]$

dvdx : [dv0dx0, dv1dx1, dv2dx2]$
wdx  : [w0dx0, w1dx1, w2dx2]$
dv11 : [dv10, dv11, dv12]$
Efld : [E0, E1, E2]$
Bfld : [B0, B1, B2]$

/* Helper function for switching to eta = (v - w)/(dv/2) coordinates */
vTransSubs : [vvx=vx*dv1/2+wv1, vvy=vy*dv2/2+wv2, vvz=vz*dv3/2+wv3]$

ax(vx, vy, vz, bc) := doExpand1(Efld[1],bc) + vy*doExpand1(Bfld[3],bc) - vz*doExpand1(Bfld[2],bc)$
ay(vx, vy, vz, bc) := doExpand1(Efld[2],bc) + vz*doExpand1(Bfld[1],bc) - vx*doExpand1(Bfld[3],bc)$
az(vx, vy, vz, bc) := doExpand1(Efld[3],bc) + vx*doExpand1(Bfld[2],bc) - vy*doExpand1(Bfld[1],bc)$

vzero(vdim) := if vdim = 1 then [vvy=0, vvz=0] elseif vdim = 2 then [vvz=0] else [] $

calcAccel(vdir, vdim, bc) :=
  if vdir = 1 then
    subst(vTransSubs, subst(vzero(vdim), ax(vvx,vvy,vvz,bc)))
  elseif vdir = 2 then
    subst(vTransSubs, subst(vzero(vdim), ay(vvx,vvy,vvz,bc)))
  else
    subst(vTransSubs, subst(vzero(vdim), az(vvx,vvy,vvz,bc)))$

cidx(cdim)      := makelist(i,i,0,cdim-1)$
vidx(cdim,vdim) := makelist(i,i,cdim,cdim+vdim-1)$

calcVlasovMaxwellVolUpdater(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [bP,bC,NP,NC,cflPt,cid,vid,dir,f_e,incr_cdim,incr_vdim,cdir,vdir,expr,alpha_cdim_c,alpha_vdim_c,amid],

  printf(fh, "#include <gkyl_vlasov_kernels.h> ~%"),

  pOrderV : polyOrder,
  /* Load basis of dimensionality requested. */
  if (basisFun="tensor") then (
    /* If we are using the tensor basis, just use the simple load command */
    [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),
    [varsP,bP] : loadBasis(basisFun, cdim+vdim, polyOrder),
    /* Do a variable substitution for the lower dimensional tensor basis functions
       to construct the correct set of variables for the subsequent operations */
    if (cdim+vdim = 2) then (
      varsSub : [y=vx],
      bP : subst(varsSub, copylist(bP)),  
      varsP : subst(varsSub, copylist(varsP))
    )
    else if (cdim+vdim = 3) then (
      varsSub : [y=vx, z=vy],
      bP : subst(varsSub, copylist(bP)),  
      varsP : subst(varsSub, copylist(varsP))
    )
    else if (cdim = 2 and vdim = 2) then (
      varsSub : [vx=y, vy=vx, vz=vy],
      bP : subst(varsSub, copylist(bP)),  
      varsP : subst(varsSub, copylist(varsP))
    )
  )
  else (
    /* Load the specific desired basis, including the loading of the hybrid basis if p=1 */
    [varsC,bC,varsP,bP] : loadPhaseBasis(basisFun, cdim, vdim, polyOrder),

    /* Identify polyOrder in velocity space as p=2 for p=1 since we force p=1 to
       mean hybrid basis. */
    if polyOrder=1 then ( pOrderV : 2 )
  ),

  /* Number of basis monomials. */
  NP : length(bP),
  NC : length(bC),

  /* specify a point to evaluate alpha at for use in computing CFL */
  cflPt : makelist(varsP[d]=0, d, 1, length(varsP)),

  printf(fh, "GKYL_CU_DH double ~a_p~a(const double *w, const double *dxv, const double *field, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, polyOrder),
  printf(fh, "  // w[NDIM]:   Cell-center coordinates.~%"),
  printf(fh, "  // dxv[NDIM]: Cell spacing.~%"),
  printf(fh, "  // field:      q/m*EM fields.~%"),
  printf(fh, "  // cot_vec:   Only used in gen geo.~%"),
  printf(fh, "  // f:         Input distribution function.~%"),
  printf(fh, "  // out:       Incremented output.~%"),

  cid : cidx(cdim),
  vid : vidx(cdim,vdim),

  /* common expressions in streaming (v dot grad(f)) term */
  for dir : 1 thru cdim do (
    printf(fh, "  double dv~adx~a = dxv[~a]/dxv[~a]; ~%", dir-1, dir-1, vid[dir], cid[dir]),
    printf(fh, "  double w~adx~a = w[~a]/dxv[~a]; ~%", dir-1, dir-1, vid[dir], cid[dir])
  ),

  /* set cell-spacing and access q/m*EM field data */
  for dir : 1 thru vdim do (
    printf(fh, "  const double dv1~a = 2/dxv[~a]; ~%", dir-1, vid[dir]),
    printf(fh, "  const double *E~a = &field[~a]; ~%", dir-1, NC*(dir-1)),
    printf(fh, "  const double dv~a = dxv[~a], wv~a = w[~a]; ~%", dir, vid[dir], dir, vid[dir])
  ),
  printf(fh, "~%"),
  /* if vdim = 1, then no magnetic field */
  if vdim > 1 then (
    if vdim = 2 then (
      /* in 2 velocity dimensions, only Bz */
      printf(fh, "  const double *B~a = &field[~a]; ~%", 2, NC*2+3*NC)
    ),
    if vdim = 3 then (
      for dir : 1 thru 3 do (
        printf(fh, "  const double *B~a = &field[~a]; ~%", dir-1, NC*(dir-1)+3*NC)
      )            
    )
  ),

  /* cflFreq_mid is our approximation of sum_i max(abs(alpha_i))/(dx_i/(2p+1)) */
  printf(fh, "  double cflFreq_mid = 0.0; ~%"),

  /* alpha_cdim = v, alpha_vdim = q/m (E + v x B) */
  printf(fh, "  double alpha_cdim[~a] = {0.0}; ~%", cdim*NP),
  printf(fh, "  double alpha_vdim[~a] = {0.0}; ~%~%", vdim*NP),

  /* Expand distribution function f in phase basis. */
  f_e : doExpand1(f, bP),

  incr_cdim : 0,
  /* alpha_cdim = v dot grad(f) */
  for cdir : 1 thru cdim do (
    alpha_cdim_c : calcInnerProdList(varsP, 1, bP, 2*wdx[cdir]+dvdx[cdir]*varsV[cdir]),
    expr : gcfac(float(expand(radcan(alpha_cdim_c)))),

    /* Write out the component of alpha_cdim's phase space expansion */
    for i : 1 thru NP do (
      if expr[i] # 0.0 then printf(fh, "  ~a = ~a; ~%", alpha_cdim[NP*(cdir-1)+i-1], expr[i])
    ),
    printf(fh, "  cflFreq_mid += ~a*(fabs(~a)+~a); ~%", float(2*polyOrder+1), wdx[cdir], 0.5*dvdx[cdir]),
    printf(fh, "~%"),
    /* zero out components of alpha which are empty */
    alpha_cdim_NoZero   : makelistNoZerosOff1(alpha_cdim_c, alpha_cdim, a0),
    alpha_cdim_NoZero_e : doExpand(alpha_cdim_NoZero, bP),

    /* Volume increment from configuration space. */
    incr_cdim : incr_cdim+subst(a0=NP*(cdir-1),calcInnerProdList(varsP, 1, diff(bP,varsP[cdir]), alpha_cdim_NoZero_e*f_e))
  ),

  incr_vdim : 0,
  /* alpha_vdim = (q/m)*(E + v x B) dot grad_v(f) */
  for vdir : 1 thru vdim do (
    acc : calcAccel(vdir, vdim, bC),
    alpha_vdim_c : calcInnerProdList(varsP, 1, bP, dv11[vdir]*acc),
    expr : gcfac(float(expand(radcan(alpha_vdim_c)))),

    /* Write out the component of alpha_vdim's phase space expansion */
    for i : 1 thru NP do (
      if expr[i] # 0.0 then printf(fh, "  ~a = ~a; ~%", alpha_vdim[NP*(vdir-1)+i-1], expr[i])
    ),

    /* zero out components of alpha which are empty */
    alpha_vdim_NoZero   : makelistNoZerosOff1(alpha_vdim_c, alpha_vdim, a0),
    alpha_vdim_NoZero_e : doExpand(alpha_vdim_NoZero, bP),

    /* evaluate alpha_vdim at cflPt to approximate
    ** max(abs(alpha_vdim))/(dv_i/(2p+1)) */
    amid : gcfac(float(expand(subst(cflPt,0.5*subst(a0=NP*(vdir-1),alpha_vdim_NoZero_e))))),
    printf(fh, "  cflFreq_mid += ~a*fabs(~a); ~%", float(2*pOrderV+1), amid),
    printf(fh, "~%"),
    /* Volume increment from configuration space. */
    incr_vdim : incr_vdim+subst(a0=NP*(vdir-1),calcInnerProdList(varsP, 1, diff(bP,varsP[cdim+vdir]), alpha_vdim_NoZero_e*f_e))
  ),

  /* write out first attempts to simplify the radicals with radcan, e.g. force sqrt(3)*sqrt(5) = sqrt(15) */
  /* outscripts loads scifac and uses the aggressive factorization routine "gcfac" */
  writeCExprsCollect1c(radcan(incr_cdim+incr_vdim)),

  printf(fh, "~%"),
  printf(fh, "  return cflFreq_mid; ~%"),
  printf(fh, "} ~%")
)$
