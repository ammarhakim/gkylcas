/* Compute the cartesian components of
bmag unit vector using dual vectors. */

load("modal-basis");
load("out-scripts");
load(stringproc)$
fpprec : 24$

cidx(cdim)      := makelist(i,i,0,cdim-1)$
vidx(cdim,vdim) := makelist(i,i,cdim,cdim+vdim-1)$

doExpandLst(lst, basis) := sum(lst[i]*basis[i], i, 1, length(basis))$

calcVlasovBmagCart(fh, funcNm, cdim, basisFun, polyOrder) := block(
  [varsC,bC,NC,varsC_p1,bC_p1,cid,vid,
   e1_X_e,e1_Y_e,e1_Z_e,
   e2_X_e,e2_Y_e,e2_Z_e,
   e3_X_e,e3_Y_e,e3_Z_e,
   b_1_e, b_2_e, b_3_e,clst],

  printf(fh, "~%"),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),
  NC : length(bC),

  printf(fh, "GKYL_CU_DH void ~a_p~a(const double *cot_vec, const double *b_i, double* GKYL_RESTRICT b_cart_i) ~%{ ~%", funcNm, polyOrder),
  printf(fh, "  // cot_vec:   cotangent vectors.~%"),
  printf(fh, "  // b_i:       unit bmag vector.~%"),
  printf(fh, "  // b_cart_i:  unit bmag Cartesian components.~%"),

  cid : cidx(cdim),

  printf(fh, "  const double *e1_X = &cot_vec[~a]; ~%", NC*0),
  printf(fh, "  const double *e1_Y = &cot_vec[~a]; ~%", NC*1),
  printf(fh, "  const double *e1_Z = &cot_vec[~a]; ~%", NC*2),
  printf(fh, "  const double *e2_X = &cot_vec[~a]; ~%", NC*3),
  printf(fh, "  const double *e2_Y = &cot_vec[~a]; ~%", NC*4),
  printf(fh, "  const double *e2_Z = &cot_vec[~a]; ~%", NC*5),
  printf(fh, "  const double *e3_X = &cot_vec[~a]; ~%", NC*6),
  printf(fh, "  const double *e3_Y = &cot_vec[~a]; ~%", NC*7),
  printf(fh, "  const double *e3_Z = &cot_vec[~a]; ~%", NC*8),
  printf(fh, "~%"),

  printf(fh, "  const double *b_1 = &b_i[~a]; ~%", NC*0),
  printf(fh, "  const double *b_2 = &b_i[~a]; ~%", NC*1),
  printf(fh, "  const double *b_3 = &b_i[~a]; ~%", NC*2),
  printf(fh, "~%"),

  printf(fh, "  double *b_X = &b_cart_i[~a]; ~%", NC*0),
  printf(fh, "  double *b_Y = &b_cart_i[~a]; ~%", NC*1),
  printf(fh, "  double *b_Z = &b_cart_i[~a]; ~%", NC*2),
  printf(fh, "~%"),

  /* Expand the cotangent vectors in configuration space */
  e1_X_e : doExpand1(e1_X, bC),
  e1_Y_e : doExpand1(e1_Y, bC),
  e1_Z_e : doExpand1(e1_Z, bC),
  e2_X_e : doExpand1(e2_X, bC),
  e2_Y_e : doExpand1(e2_Y, bC),
  e2_Z_e : doExpand1(e2_Z, bC),
  e3_X_e : doExpand1(e3_X, bC),
  e3_Y_e : doExpand1(e3_Y, bC),
  e3_Z_e : doExpand1(e3_Z, bC),

  /* Expand the unit bmag vector in configuration space */
  b_1_e : doExpand1(b_1, bC),
  b_2_e : doExpand1(b_2, bC),
  b_3_e : doExpand1(b_3, bC),

  b_X_c : calcInnerProdList(varsC, 1, bC, b_1_e*e1_X_e + b_2_e*e2_X_e + b_3_e*e3_X_e), 
  b_Y_c : calcInnerProdList(varsC, 1, bC, b_1_e*e1_Y_e + b_2_e*e2_Y_e + b_3_e*e3_Y_e), 
  b_Z_c : calcInnerProdList(varsC, 1, bC, b_1_e*e1_Z_e + b_2_e*e2_Z_e + b_3_e*e3_Z_e),  

  writeCExprsNoExpand1(b_1, gcfac(float(expand(b_1_c)))),
  printf(fh, "~%"),
  writeCExprsNoExpand1(b_2, gcfac(float(expand(b_2_c)))),
  printf(fh, "~%"),
  writeCExprsNoExpand1(b_3, gcfac(float(expand(b_3_c)))),
  printf(fh, "~%"),
  flush_output(fh),
  printf(fh, "} ~%"),
  printf(fh, "~%")
)$
