/*  Generate kernels for 
    1. Gamma^2 = 1/(1 - V^2/c^2),
    2. Gamma = 1/sqrt(1 - V^2/c^2),
    3. Gamma_inv = sqrt(1 - V^2/c^2)
    variations of the Lorentz boost factor for a velocity V.
    Uses basis_exp_sq (obtain expansion of A^2 for a DG field A),
    basis_inv (obtain expansion of 1/A for a DG field A),
    basis_sqrt (obtain expansion of sqrt(A) for a DG field A) */

load("modal-basis");
load("out-scripts");
load("nodal_operations/nodal_functions")$
load(stringproc)$
fpprec : 24$

calcGamma2(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [bC, NC, VxSq_e, VySq_e, VzSq_e, denom_e],

  kill(varsC, bC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),

  NC  : length(bC),

  printf(fh, "#include <gkyl_sr_Gamma_kernels.h> ~%"),
  printf(fh, "#include <gkyl_basis_~a_~ax_p~a_exp_sq.h> ~%", basisFun, cdim, polyOrder),
  printf(fh, "#include <gkyl_basis_~a_~ax_p~a_inv.h> ~%", basisFun, cdim, polyOrder),
  /* Function declaration with input/output variables. */
  printf(fh, "GKYL_CU_DH void ~a(const double *V, double* GKYL_RESTRICT Gamma2) ~%{ ~%", funcNm),
  printf(fh, "  // V:      Input velocity. ~%"),
  printf(fh, "  // Gamma2: Gamma^2 = 1/(1 - V^2/c^2). ~%"),
  printf(fh, " ~%"),

  /* Get pointers to components of velocity (based on how many components are present). */
  for dir : 1 thru vdim do (
    printf(fh, "  const double *V_~a = &V[~a]; ~%", dir-1, (dir-1)*NC),
    printf(fh, "  double V_~a_sq[~a] = {0.0}; ~%", dir-1, NC),
    printf(fh, "  ~a_~ax_p~a_exp_sq(V_~a, V_~a_sq); ~%", basisFun, cdim, polyOrder, dir-1, dir-1),
    printf(fh, " ~%")
  ),

  VxSq_e : doExpand1(V_0_sq, bC),
  VySq_e : doExpand1(V_1_sq, bC),
  VzSq_e : doExpand1(V_2_sq, bC),

  if (vdim = 1) then (
    denom_e : calcInnerProdList(varsC, 1, bC, 1 - VxSq_e)
  )
  elseif (vdim = 2) then (
    denom_e : calcInnerProdList(varsC, 1, bC, 1 - VxSq_e - VySq_e)
  )
  else (
    denom_e : calcInnerProdList(varsC, 1, bC, 1 - VxSq_e - VySq_e - VzSq_e)
  ),

  printf(fh, "  double Gamma2_inv[~a] = {0.0}; ~%", NC),

  printf(fh, " ~%"),
  writeCExprs1(Gamma2_inv, denom_e),
  printf(fh, "~%"),
  flush_output(fh),

  Gamma2_inv_e : doExpand1(Gamma2_inv, bC),

  printf(fh, "  bool notCellAvg = true;~%"),
  nodes : getNodes(basisFun, cdim, 1),
  Gamma2_inv_Corners : expand(float(evAtNodes(Gamma2_inv_e,nodes,varsC))),
  for i : 1 thru length(nodes) do (
    printf(fh, "  if (notCellAvg && (~a < 0)) notCellAvg = false; ~%", Gamma2_inv_Corners[i])
  ),

  printf(fh, " ~%"),
  printf(fh, "  if (notCellAvg) { ~%"),
  printf(fh, "  ~a_~ax_p~a_inv(Gamma2_inv, Gamma2); ~%", basisFun, cdim, polyOrder),
  printf(fh, "  } else { ~%"),
  unit : calcInnerProdList(varsC, 1, bC, 1.0),
  printf(fh, "  Gamma2[0] = ~a/Gamma2_inv[0]; ~%", float(expand(unit[1]*unit[1]))), 
  for i : 2 thru NC do (
    printf(fh, "  Gamma2[~a] = 0.0; ~%", i-1)
  ),
  printf(fh, "  } ~%"),

  printf(fh, "} ~%"),
  printf(fh, " ~%")
)$

calcGamma(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [bC, NC, VxSq_e, VySq_e, VzSq_e, denom_e],

  kill(varsC, bC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),

  NC  : length(bC),

  printf(fh, "#include <gkyl_sr_Gamma_kernels.h> ~%"),
  printf(fh, "#include <gkyl_basis_~a_~ax_p~a_exp_sq.h> ~%", basisFun, cdim, polyOrder),
  printf(fh, "#include <gkyl_basis_~a_~ax_p~a_inv.h> ~%", basisFun, cdim, polyOrder),
  printf(fh, "#include <gkyl_basis_~a_~ax_p~a_sqrt.h> ~%", basisFun, cdim, polyOrder),
  /* Function declaration with input/output variables. */
  printf(fh, "GKYL_CU_DH void ~a(const double *V, double* GKYL_RESTRICT Gamma) ~%{ ~%", funcNm),
  printf(fh, "  // V:     Input velocity. ~%"),
  printf(fh, "  // Gamma: Gamma = 1/sqrt(1 - V^2/c^2). ~%"),
  printf(fh, " ~%"),

  /* Get pointers to components of velocity (based on how many components are present). */
  for dir : 1 thru vdim do (
    printf(fh, "  const double *V_~a = &V[~a]; ~%", dir-1, (dir-1)*NC),
    printf(fh, "  double V_~a_sq[~a] = {0.0}; ~%", dir-1, NC),
    printf(fh, "  ~a_~ax_p~a_exp_sq(V_~a, V_~a_sq); ~%", basisFun, cdim, polyOrder, dir-1, dir-1),
    printf(fh, " ~%")
  ),

  VxSq_e : doExpand1(V_0_sq, bC),
  VySq_e : doExpand1(V_1_sq, bC),
  VzSq_e : doExpand1(V_2_sq, bC),

  if (vdim = 1) then (
    denom_e : calcInnerProdList(varsC, 1, bC, 1 - VxSq_e)
  )
  elseif (vdim = 2) then (
    denom_e : calcInnerProdList(varsC, 1, bC, 1 - VxSq_e - VySq_e)
  )
  else (
    denom_e : calcInnerProdList(varsC, 1, bC, 1 - VxSq_e - VySq_e - VzSq_e)
  ),

  printf(fh, "  double Gamma2_inv[~a] = {0.0}; ~%", NC),
  printf(fh, "  double Gamma2[~a] = {0.0}; ~%", NC),

  printf(fh, " ~%"),
  writeCExprs1(Gamma2_inv, denom_e),
  printf(fh, "~%"),
  flush_output(fh),

  Gamma2_inv_e : doExpand1(Gamma2_inv, bC),

  printf(fh, "  bool notCellAvg = true;~%"),
  nodes : getNodes(basisFun, cdim, 1),
  Gamma2_inv_Corners : expand(float(evAtNodes(Gamma2_inv_e,nodes,varsC))),
  for i : 1 thru length(nodes) do (
    printf(fh, "  if (notCellAvg && (~a < 0)) notCellAvg = false; ~%", Gamma2_inv_Corners[i])
  ),

  printf(fh, " ~%"),
  printf(fh, "  if (notCellAvg) { ~%"),
  printf(fh, "  ~a_~ax_p~a_inv(Gamma2_inv, Gamma2); ~%", basisFun, cdim, polyOrder),
  printf(fh, "  } else { ~%"),
  unit : calcInnerProdList(varsC, 1, bC, 1.0),
  printf(fh, "  Gamma2[0] = ~a/Gamma2_inv[0]; ~%", float(expand(unit[1]*unit[1]))), 
  for i : 2 thru NC do (
    printf(fh, "  Gamma2[~a] = 0.0; ~%", i-1)
  ),
  printf(fh, "  } ~%"),

  printf(fh, "  ~a_~ax_p~a_sqrt(Gamma2, Gamma); ~%", basisFun, cdim, polyOrder),

  printf(fh, "} ~%"),
  printf(fh, " ~%")
)$

calcGammaInv(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [bC, NC, VxSq_e, VySq_e, VzSq_e, denom_e],

  kill(varsC, basisC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),

  NC  : length(bC),

  printf(fh, "#include <gkyl_sr_Gamma_kernels.h> ~%"),
  printf(fh, "#include <gkyl_basis_~a_~ax_p~a_exp_sq.h> ~%", basisFun, cdim, polyOrder),
  printf(fh, "#include <gkyl_basis_~a_~ax_p~a_sqrt.h> ~%", basisFun, cdim, polyOrder),
  /* Function declaration with input/output variables. */
  printf(fh, "GKYL_CU_DH void ~a(const double *V, double* GKYL_RESTRICT Gamma_inv) ~%{ ~%", funcNm),
  printf(fh, "  // V:     Input velocity. ~%"),
  printf(fh, "  // Gamma: Gamma = 1/sqrt(1 - V^2/c^2). ~%"),
  printf(fh, " ~%"),

  /* Get pointers to components of velocity (based on how many components are present). */
  for dir : 1 thru vdim do (
    printf(fh, "  const double *V_~a = &V[~a]; ~%", dir-1, (dir-1)*NC),
    printf(fh, "  double V_~a_sq[~a] = {0.0}; ~%", dir-1, NC),
    printf(fh, "  ~a_~ax_p~a_exp_sq(V_~a, V_~a_sq); ~%", basisFun, cdim, polyOrder, dir-1, dir-1),
    printf(fh, " ~%")
  ),

  VxSq_e : doExpand1(V_0_sq, bC),
  VySq_e : doExpand1(V_1_sq, bC),
  VzSq_e : doExpand1(V_2_sq, bC),

  if (vdim = 1) then (
    denom_e : calcInnerProdList(varsC, 1, bC, 1 - VxSq_e)
  )
  elseif (vdim = 2) then (
    denom_e : calcInnerProdList(varsC, 1, bC, 1 - VxSq_e - VySq_e)
  )
  else (
    denom_e : calcInnerProdList(varsC, 1, bC, 1 - VxSq_e - VySq_e - VzSq_e)
  ),

  printf(fh, "  double Gamma2_inv[~a] = {0.0}; ~%", NC),

  printf(fh, " ~%"),
  writeCExprs1(Gamma2_inv, denom_e),
  printf(fh, "~%"),
  flush_output(fh),

  Gamma2_inv_e : doExpand1(Gamma2_inv, bC),

  printf(fh, "  bool notCellAvg = true;~%"),
  nodes : getNodes(basisFun, cdim, 1),
  Gamma2_inv_Corners : expand(float(evAtNodes(Gamma2_inv_e,nodes,varsC))),
  for i : 1 thru length(nodes) do (
    printf(fh, "  if (notCellAvg && (~a < 0)) notCellAvg = false; ~%", Gamma2_inv_Corners[i])
  ),

  printf(fh, " ~%"),
  printf(fh, "  if (notCellAvg) { ~%"),
  printf(fh, "  ~a_~ax_p~a_sqrt(Gamma2_inv, Gamma_inv); ~%", basisFun, cdim, polyOrder),
  printf(fh, "  } else { ~%"),
  for i : 2 thru NC do (
    printf(fh, "  Gamma2_inv[~a] = 0.0; ~%", i-1)
  ),
  printf(fh, "  ~a_~ax_p~a_sqrt(Gamma2_inv, Gamma_inv); ~%", basisFun, cdim, polyOrder),
  printf(fh, "  } ~%"),

  printf(fh, "} ~%"),
  printf(fh, " ~%")
)$