/* Compute the surf term for ONLY the streaming term (v . grad(f))
   for Vlasov neutrals in general geometry. */
load("modal-basis")$
load("out-scripts")$
load(stringproc)$
load("nodal_operations/nodal_functions")$
load("scifac")$
fpprec : 24$

varsV : [vx, vy, vz]$
cvars : [x, y, z]$
vvars : [vx, vy, vz]$

dvdx  : [dv0dx0, dv1dx1, dv2dx2]$
wdx   : [w0dx0, w1dx1, w2dx2]$
dx11  : [dx10, dx11, dx12]$

alphaFld : [ag0, ag1, ag2]$

cidx(cdim)      := makelist(i,i,0,cdim-1)$
vidx(cdim,vdim) := makelist(i,i,cdim,cdim+vdim-1)$

/* Helper functions for expanding in basis functions a quantity we know should be sparse  */
/* For example, alpha, the phase space flow only depends on a few phase space coordinates */
doMakeExprLst(vals, S)  := makelist(if vals[i] # 0 then S[i-1] else 0, i, 1, length(vals))$
doExpandLst(lst, basis) := sum(lst[i]*basis[i], i, 1, length(basis))$

calcVlasovStreamGenGeoUpdateInDir(dir, fh, funcNm, cdim, vdim, basisFun, p) := block([bP,numBasisP,cid,vid,wvl,wvr,dvl,dvr,cv,vv,surfVars,fL_e,fR_e,fhat,surfTerm,incr_r,clst,incr_s],

  kill(varsC, varsP, basisC, basisP),

  load(sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v")),

  [varsC,bC,varsP,bP] : loadPhaseBasis(basisFun, cdim, vdim, polyOrder),

  numBasisP : length(bP),

  printf(fh, "GKYL_CU_DH void ~a~a_~ax~av_~a_p~a(const double *w, const double *dxv, const double *alpha_geo, const double *fl, const double *fc, const double *fr, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, cvars[dir], cdim, vdim, basisFun, polyOrder),
  printf(fh, "  // w[NDIM]:   Cell-center coordinates.~%"),
  printf(fh, "  // dxv[NDIM]: Cell spacing.~%"),
  printf(fh, "  // alpha_geo:  General geometry alpha.~%"),
  printf(fh, "  // fl/fc/fr:  Input Distribution function in left/center/right cells.~%"),
  printf(fh, "  // out:       Incremented distribution function in center cell.~%"),

  cid : cidx(cdim),
  vid : vidx(cdim,vdim),

  /* cv = variable in direction of surface update. */
  cv : varsP[dir],
  vv : varsV[dir],

  /* Surface variables to integrate over. */
  surfVars : delete(cv,varsP),

  /* Generate surface basis. this produces the ndim-1 orthogonal basis with no vv dependence. */
  if polyOrder=1 then (  /* Force p=1 to use hybrid basis. */
    bSurf : basisFromVars("hyb",surfVars,polyOrder)
  ) else (
    bSurf : basisFromVars(basisFun,surfVars,polyOrder)
  ),

  printf(fh, "~%"),

  /* Create expansions of f_left, f_center, and f_right on volume basis. */
  fl_e : doExpand1(fl, bP),
  fc_e : doExpand1(fc, bP),
  fr_e : doExpand1(fr, bP),
  printf(fh, "  const double dx1~a = 2/dxv[~a]; ~%", dir-1, cid[dir]),
  printf(fh, "  const double dv = dxv[~a], wv = w[~a]; ~%", vid[dir], vid[dir]),
  printf(fh, "  double Ghat_r[~a] = {0.0}; ~%", length(bSurf)),
  printf(fh, "  double Ghat_l[~a] = {0.0}; ~%", length(bSurf)),
  printf(fh, "~%"),      

  printf(fh, "  const double *ag~a = &alpha_geo[~a]; ~%", dir-1, numBasisP*(dir-1)),
  printf(fh, "~%"),

  alpha_geo_e : doExpand1(alphaFld[dir], bP),
  printf(fh, "  double alphal[~a] = {0.0}; ~%", length(bSurf)),
  printf(fh, "  double alphar[~a] = {0.0}; ~%", length(bSurf)),
  printf(fh, "~%"),

  /* Project alpha onto surface basis, and print resulting coefficients. */
  alphal_c : calcInnerProdList(surfVars, 1, bSurf, subst(cv=-1, alpha_geo_e)),
  alphar_c : calcInnerProdList(surfVars, 1, bSurf, subst(cv=1, alpha_geo_e)),
  writeCExprs1(alphal, alphal_c),
  writeCExprs1(alphar, alphar_c),
  printf(fh, "~%"),
  flush_output(fh),
  /* Zero out components of alpha which are empty. */
  alphaNoZero : doMakeExprLst(alphal_c, alphal),
  alphal_e     : doExpand(alphaNoZero, bSurf),
  alphaNoZero : doMakeExprLst(alphar_c, alphar),
  alphar_e     : doExpand(alphaNoZero, bSurf),

  /* Surface nodes given by tensor product of Gauss-Legendre quadrature points */
  if polyOrder = 1 then (  /* Force p=1 to use hybrid basis. */
    surf_cdim : cdim-1,  surf_vdim : vdim,
    surfNodes : gaussOrdHyb(1+1, surf_cdim, surf_vdim)
  ) else (
    surfNodes : gaussOrd(polyOrder+1, pDim-1)
  ),
  numNodes : length(surfNodes),

  alphaOrdL_n : gcfac(float(evAtNodes(alphal_e,surfNodes,surfVars))),
  alphaOrdR_n : gcfac(float(evAtNodes(alphar_e,surfNodes,surfVars))),

  printf(fh, "  double fUpwindQuad_l[~a] = {0.0};~%", numNodes),
  printf(fh, "  double fUpwindQuad_r[~a] = {0.0};~%", numNodes),
  printf(fh, "  double fUpwind_l[~a] = {0.0};;~%", length(bSurf)),
  printf(fh, "  double fUpwind_r[~a] = {0.0};~%", length(bSurf)),
  printf(fh, "~%"),
  /* Check sign of each quadrature point and choose appropriate distribution function at 
     quadrature points. If alpha > 0, need f_l (at +1) and f_c (at +1). If alpha < 0, 
     need f_c (at -1) and f_r (at -1). */
  /* Only need p = 1 basis. */
  for i : 1 thru length(alphaOrdL_n) do (
    printf(fh, "  if (~a > 0) { ~%", alphaOrdL_n[i]),
    printf(fh, "    fUpwindQuad_l[~a] = hyb_~ax~av_p1_surfx~a_eval_quad_node_~a_r(fl); ~%", i-1, cdim, vdim, dir, i-1),
    printf(fh, "  } else { ~%"),
    printf(fh, "    fUpwindQuad_l[~a] = hyb_~ax~av_p1_surfx~a_eval_quad_node_~a_l(fc); ~%", i-1, cdim, vdim, dir, i-1),
    printf(fh, "  } ~%"),
    printf(fh, "  if (~a > 0) { ~%", alphaOrdR_n[i]),
    printf(fh, "    fUpwindQuad_r[~a] = hyb_~ax~av_p1_surfx~a_eval_quad_node_~a_r(fc); ~%", i-1, cdim, vdim, dir, i-1),
    printf(fh, "  } else { ~%"),
    printf(fh, "    fUpwindQuad_r[~a] = hyb_~ax~av_p1_surfx~a_eval_quad_node_~a_l(fr); ~%", i-1, cdim, vdim, dir, i-1),
    printf(fh, "  } ~%")
  ),

  printf(fh, "~%"),
  printf(fh, "  // Project tensor nodal quadrature basis back onto modal basis. ~%"),
  /* Only need p = 1 basis. */
  printf(fh, "  hyb_~ax~av_p1_xdir_upwind_quad_to_modal(fUpwindQuad_l, fUpwind_l); ~%", cdim, vdim),
  printf(fh, "  hyb_~ax~av_p1_xdir_upwind_quad_to_modal(fUpwindQuad_r, fUpwind_r); ~%", cdim, vdim),
  printf(fh, "~%"),

  /* Create expansions of f_hat (upwinded f) on the left and right in the surface basis. */
  fHatSurf_l_e : doExpand1(fUpwind_l, bSurf),
  fHatSurf_r_e : doExpand1(fUpwind_r, bSurf),

  /* Print C exprs for Ghat across surface boundary, (LEFT BOUNDARY) */
  Ghat_l_c : fullratsimp(innerProd(surfVars, alphal_e, bSurf, fHatSurf_l_e)),
  writeCExprs1(Ghat_l, Ghat_l_c),
  printf(fh, "~%"),
  flush_output(fh),

  /* Print C exprs for Ghat across surface boundary, (RIGHT BOUNDARY) */
  Ghat_r_c : fullratsimp(innerProd(surfVars, alphar_e, bSurf, fHatSurf_r_e)),
  writeCExprs1(Ghat_r, Ghat_r_c),
  printf(fh, "~%"),
  flush_output(fh),

  /* Expand G_hat in surface basis. */
  Ghat_l_e : doExpand1(Ghat_l, bSurf),
  Ghat_r_e : doExpand1(Ghat_r, bSurf),

  /* Compute surface contribution integral(phi^- Ghat) on the left and right. */
  incr_l : calcInnerProdList(surfVars, 1, subst(cv=-1.0, bP), Ghat_l_e),
  incr_r : calcInnerProdList(surfVars, -1, subst(cv=1.0, bP), Ghat_r_e),
  writeCIncrExprsCollect1lhsc(out, dx11[dir]*incr_l + dx11[dir]*incr_r),  
  printf(fh, "~%"),

  printf(fh, "} ~%")
);