load("vlasov/vlasovPKPMFuncs-boundary-surf-C")$
load(stringproc)$
/* This script calls the functions which calculate the
   updates from the surface term contributions in the Vlasov 
   kinetic equation for parallel-kinetic-perpendicular-moment (pkpm) model. */

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 2$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
maxCdim_Ser : 3$

/* Tensor product basis. */
/* Note that Serendipity, p = 1, is equivalent to Tensor */
/* Thus no need to calculate p = 1 Tensor basis */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
maxCdim_Tensor : 0$

/* ...... END OF USER INPUTS........ */

bName        : ["ser", "tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$


for bInd : 1 thru length(bName) do (
  for d : minCdim[bInd] thru maxCdim[bInd] do (
    minPolyOrderB : minPolyOrder[bInd],
    maxPolyOrderB : maxPolyOrder[bInd],

    for polyOrder : minPolyOrderB thru maxPolyOrderB do (
      disp(printf(false,sconcat("Creating boundary surface Vlasov PKPM",bName[bInd]," ~axp~a"),d,polyOrder)),
      fname : sconcat("~/max-out/vlasov_pkpm_boundary_surfvpar_", d, "x1v_", bName[bInd], "_p", polyOrder, ".c"),
      fh : openw(fname),
      funcName : sconcat("vlasov_pkpm_boundary_surfvpar"),
      printf(fh, "#include <gkyl_vlasov_kernels.h> ~%"),
      if polyOrder = 1 then (  /* Force hybrid basis (p=2 in velocity space). */
        printf(fh, "#include <gkyl_basis_hyb_~ax~av_p1_surfx~a_eval_quad.h> ~%", d, 1, d+1),
        printf(fh, "#include <gkyl_basis_hyb_~ax~av_p1_upwind_quad_to_modal.h> ~%", d, 1)
      ) elseif polyOrder > 1 then (
        printf(fh, "#include <gkyl_basis_~a_~ax_p~a_surfx~a_eval_quad.h> ~%", bName[bInd], d+1, polyOrder, d+1),
        printf(fh, "#include <gkyl_basis_~a_~ax_p~a_upwind_quad_to_modal.h> ~%", bName[bInd], d+1, polyOrder)
      ),
      calcVlasovPKPMBoundaryAccelUpdate(fh, funcName, d, 1, bName[bInd], polyOrder), 
      close(fh)
    )
  )
);
