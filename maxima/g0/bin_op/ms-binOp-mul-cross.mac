/* Generate kernels that perform binary multiplication between
   two fields, one a configuration space field and one a phase space field, 
   with option to accumulate to the output or just write out the result. 

   For the accumulation, generate two sets of kernels, one with 
   parallelization over components and one without. */

load("bin_op/binOp-mul-cross")$
load(stringproc)$

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 3$
minCdim_Ser : 1$
minVdim_Ser : 1$    /* see begining of v loop below though. */
maxCdim_Ser : 3$
maxVdim_Ser : 3$

/* Tensor product basis. */
/* Note that Serendipity, p = 1, is equivalent to Tensor */
/* Thus no need to calculate p = 1 Tensor basis */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
minVdim_Tensor : 1$    /* see begining of v loop below though. */
maxCdim_Tensor : 2$
maxVdim_Tensor : 3$

/* ...... END OF USER INPUTS........ */

bName        : ["ser","tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
minVdim      : [minVdim_Ser, minVdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$
maxVdim      : [maxVdim_Ser, maxVdim_Tensor]$

for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    for v : minVdim[bInd] thru maxVdim[bInd] do (

      minPolyOrderB : minPolyOrder[bInd],
      maxPolyOrderB : maxPolyOrder[bInd],
      if (c+v>4 and maxPolyOrderB > 2) then maxPolyOrderB : 2,
      if (c+v>5 and maxPolyOrderB > 1) then maxPolyOrderB : 1,
      if (v=1) then maxPolyOrderB : 3,
      for polyOrder : minPolyOrderB thru maxPolyOrderB do (
        /* With parallelization over components */
        fname : sconcat("~/max-out/binop_cross_mul_accumulate_comp_par_", c, "d_", c+v, "d_",bName[bInd],"_p", polyOrder, ".c"),
        fh : openw(fname),
        disp(printf(false,sconcat("Creating ~ax ~ax ", bName[bInd], " p", polyOrder), c, c+v)),
        funcName : sconcat("binop_cross_mul_accumulate_comp_par_", c, "d_", c+v, "d_" ,bName[bInd],"_p", polyOrder),
        disp(printf(false,sconcat("Working on dg bin_op multiply ", c, "x ", c+v, "x ", bName[bInd]))),
        calcBinOpCrossMultiply(fh, funcName, c, v, bName[bInd], polyOrder, true, true),
        close(fh), 

        /* No parallelization over components */
        fname : sconcat("~/max-out/binop_cross_mul_accumulate_", c, "d_", c+v, "d_",bName[bInd],"_p", polyOrder, ".c"),
        fh : openw(fname),
        disp(printf(false,sconcat("Creating ~ax ~ax ", bName[bInd], " p", polyOrder), c, c+v)),
        funcName : sconcat("binop_cross_mul_accumulate_", c, "d_", c+v, "d_" ,bName[bInd],"_p", polyOrder),
        disp(printf(false,sconcat("Working on dg bin_op multiply ", c, "x ", c+v, "x ", bName[bInd]))),
        calcBinOpCrossMultiply(fh, funcName, c, v, bName[bInd], polyOrder, false, true),
        close(fh), 

        /* No accumulation of output */
        fname : sconcat("~/max-out/binop_cross_mul_", c, "d_", c+v, "d_",bName[bInd],"_p", polyOrder, ".c"),
        fh : openw(fname),
        disp(printf(false,sconcat("Creating ~ax ~ax ", bName[bInd], " p", polyOrder), c, c+v)),
        funcName : sconcat("binop_cross_mul_", c, "d_", c+v, "d_" ,bName[bInd],"_p", polyOrder),
        disp(printf(false,sconcat("Working on dg bin_op multiply ", c, "x ", c+v, "x ", bName[bInd]))),
        calcBinOpCrossMultiply(fh, funcName, c, v, bName[bInd], polyOrder, false, false),
        close(fh)
      )
    )
  )
)$
disp(printf(false,sconcat("Done with serendipity and tensor")))$

/* Hybrid basis. */
minCdim_hyb : 1$
maxCdim_hyb : 3$
vDims_hyb : [[1,2,3], [1,2,3], [1,2,3]]$  /* Vdim for each of Cdim. */

/* GK hybrid basis. */
minCdim_gkhyb : 1$
maxCdim_gkhyb : 3$
vDims_gkhyb : [[1,2], [2], [2]]$  /* Vdim for each of Cdim. */

/* ...... END OF USER INPUTS........ */
bNameHyb   : ["hyb", "gkhyb"]$
minCdimHyb : [minCdim_hyb, minCdim_gkhyb]$
maxCdimHyb : [maxCdim_hyb, maxCdim_gkhyb]$
vDims      : [vDims_hyb, vDims_gkhyb]$

/* Generate the hybrid basis kernels. */
polyOrder : 1$
for bInd : 1 thru length(bNameHyb) do (
  for c : minCdimHyb[bInd] thru maxCdimHyb[bInd] do (
    vmin : xreduce(min,vDims[bInd][c]),
    vmax : xreduce(max,vDims[bInd][c]),
    for v : vmin thru vmax do (
      /* With parallelization over components */
      fname : sconcat("~/max-out/binop_cross_mul_accumulate_comp_par_", c, "x", v, "v_",bNameHyb[bInd],"_p", polyOrder, ".c"),
      fh : openw(fname),
      disp(printf(false,sconcat("Creating cross multiply kernels for ",bNameHyb[bInd]," ~ax~av_p1"),c,v)),
      funcName : sconcat("binop_cross_mul_accumulate_comp_par_", c, "x", v, "v_" ,bNameHyb[bInd],"_p", polyOrder),
      calcBinOpCrossMultiplyHyb(fh, funcName, c, v, bNameHyb[bInd], polyOrder, true, true),
      close(fh),

      /* No parallelization over components */
      fname : sconcat("~/max-out/binop_cross_mul_accumulate_", c, "x", v, "v_",bNameHyb[bInd],"_p", polyOrder, ".c"),
      fh : openw(fname),
      disp(printf(false,sconcat("Creating cross multiply kernels for ",bNameHyb[bInd]," ~ax~av_p1"),c,v)),
      funcName : sconcat("binop_cross_mul_accumulate_", c, "x", v, "v_" ,bNameHyb[bInd],"_p", polyOrder),
      calcBinOpCrossMultiplyHyb(fh, funcName, c, v, bNameHyb[bInd], polyOrder, false, true),
      close(fh),

      /* No accumulation of output */
      fname : sconcat("~/max-out/binop_cross_mul_", c, "x", v, "v_",bNameHyb[bInd],"_p", polyOrder, ".c"),
      fh : openw(fname),
      disp(printf(false,sconcat("Creating cross multiply kernels for ",bNameHyb[bInd]," ~ax~av_p1"),c,v)),
      funcName : sconcat("binop_cross_mul_", c, "x", v, "v_" ,bNameHyb[bInd],"_p", polyOrder),
      calcBinOpCrossMultiplyHyb(fh, funcName, c, v, bNameHyb[bInd], polyOrder, false, false),
      close(fh)
    )
  )
)$
disp(printf(false,sconcat("Done with hyb and gkhyb")))$
