/* Generate kernels that perform weak multiplication of two
   fields, say if C = A*B where A, B, and C are DG fields. */

load("modal-basis");
load("out-scripts");
load(stringproc)$
load("nodal_operations/nodal_functions")$

fpprec : 24$

calcBinOpCrossMultiply(fh, funcNm, cdim, vdim, basisFun, polyOrder, comp_par, accumulate) := block(
  [varsC, bC, varsP, bP, NP, f_e, g_e, fg_c],

  if (basisFun="ser") then bType : "Ser"
  elseif (basisFun="tensor") then bType : "Tensor",

  /* Load basis of dimensionality requested. */
  if (polyOrder = 1) then (
    /* If we are using the p=1 basis, just use the simple load command to avoid loading 
       hybrid basis (since hybrid basis is treated separately) */
    [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),
    [varsP,bP] : loadBasis(basisFun, cdim+vdim, polyOrder), 
    /* Do a variable substitution for the lower dimensional p=1 basis functions
       to construct the correct set of variables for the subsequent operations */
    if (cdim+vdim = 2) then (
      varsSub : [y=vx],
      bP : subst(varsSub, copylist(bP)),  
      varsP : subst(varsSub, copylist(varsP))
    )
    else if (cdim = 1 and vdim = 2) then (
      varsSub : [y=vx, z=vy],
      bP : subst(varsSub, copylist(bP)),  
      varsP : subst(varsSub, copylist(varsP))
    )
    else if (cdim = 2 and vdim = 1) then (
      varsSub : [z=vx],
      bP : subst(varsSub, copylist(bP)),  
      varsP : subst(varsSub, copylist(varsP))
    )
    else if (cdim = 2 and vdim = 2) then (
      varsSub : [vx=y, vy=vx, vz=vy],
      bP : subst(varsSub, copylist(bP)),  
      varsP : subst(varsSub, copylist(varsP))
    )
    else if (cdim = 3 and vdim = 1) then (
      varsSub : [vx=y, vy=z, vz=vx],
      bP : subst(varsSub, copylist(bP)),
      varsP : subst(varsSub, copylist(varsP))
    )  
    else if (cdim = 3 and vdim = 2) then (
      varsSub : [vx=z, vy=vx, vz=vy],
      bP : subst(varsSub, copylist(bP)),
      varsP : subst(varsSub, copylist(varsP))
    )
  )
  else (
    /* If p>1, load the specific desired basis */
    [varsC,bC,varsP,bP] : loadPhaseBasis(basisFun, cdim, vdim, polyOrder)
  ),
  print(varsC),
  print(varsP),
  NP  : length(bP),

  /* Function declaration with input/output variables. */
  printf(fh, "#include <gkyl_binop_cross_mul_~a.h> ~%", basisFun),      
  printf(fh, " ~%"),
  printf(fh, "GKYL_CU_DH~%"),
  printf(fh, "void~%"),
  if (comp_par) then (
    printf(fh, "~a(double a, const double *f, const double *g, double *fg, int linc2) ~%{ ~%", funcNm)
  )
  else (
    if (accumulate) then (
      printf(fh, "~a(double a, const double *f, const double *g, double *fg) ~%{ ~%", funcNm)
    )
    else (
      printf(fh, "~a(const double *f, const double *g, double *fg) ~%{ ~%", funcNm)
    )
  ),
  
  printf(fh, "  // f:  First input DG field. ~%"),
  printf(fh, "  // g:  Second input DG field. ~%"),  
  printf(fh, "  // fg: Output DG field f*g using weak multiplication. ~%"),
  printf(fh, " ~%"),

  f_e : doExpand1(f, bC),
  g_e : doExpand1(g, bP),

  fg_c : calcInnerProdList(varsP, 1, bP, f_e*g_e),

  if (comp_par) then (
    printf(fh, "  switch (linc2) { ~%"), 
    for i : 1 thru length(fg_c) do (
      printf(fh, "    case ~a: ~%", i-1),
      printf(fh, "      fg[~a] += a*(~a); ~%", i-1, float(expand(fg_c[i])))
    ), 
    flush_output(fh),
    printf(fh, "  } ~%")
  )
  else (
    if (accumulate) then (
      for i : 1 thru length(fg_c) do (
        printf(fh, "  fg[~a] += a*(~a); ~%", i-1, float(expand(fg_c[i])))
      )
    )
    else (
      /* Make a temporary variable to permit in-place operations i.e., 
         g = a*g where g is a phase space field and a is a configuration space field */
      printf(fh, "  double tmp[~a] = {0.0}; ~%", NP), 
      for i : 1 thru length(fg_c) do (
        printf(fh, "  tmp[~a] = ~a; ~%", i-1, float(expand(fg_c[i])))
      ), 
      flush_output(fh), 
      printf(fh, " ~%"),
      for i : 1 thru length(fg_c) do (
        printf(fh, "  fg[~a] = tmp[~a]; ~%", i-1, i-1)
      )
    ),
    flush_output(fh)
  ), 
  printf(fh, "} ~%")
)$

calcBinOpCrossMultiplyHyb(fh, funcNm, cdim, vdim, basisFun, polyOrder, comp_par, accumulate) := block(
  [varsC, bC, varsP, bP, NP, f_e, g_e, fg_c],

  if (basisFun = "hyb") then (
    [varsC,bC,varsP,bP] : loadPhaseBasis(basisFun, cdim, vdim, 1),
    printf(fh, "#include <gkyl_binop_cross_mul_hyb.h> ~%"),      
    printf(fh, " ~%")
  ) 
  else if (basisFun = "gkhyb") then (
    [varsC,bC,varsP,bP,vsub] : loadGkBasis(basisFun, cdim, vdim, 1),
    printf(fh, "#include <gkyl_binop_cross_mul_gkhyb.h> ~%"),      
    printf(fh, " ~%")
  ),
  NP  : length(bP),

  /* Function declaration with input/output variables. */
  printf(fh, "GKYL_CU_DH~%"),
  printf(fh, "void~%"),
  if (comp_par) then (
    printf(fh, "~a(double a, const double *f, const double *g, double *fg, int linc2) ~%{ ~%", funcNm)
  )
  else (
    if (accumulate) then (
      printf(fh, "~a(double a, const double *f, const double *g, double *fg) ~%{ ~%", funcNm)
    )
    else (
      printf(fh, "~a(const double *f, const double *g, double *fg) ~%{ ~%", funcNm)
    )
  ),
  
  printf(fh, "  // f:  First input DG field. ~%"),
  printf(fh, "  // g:  Second input DG field. ~%"),  
  printf(fh, "  // fg: Output DG field f*g using weak multiplication. ~%"),
  printf(fh, " ~%"),

  f_e : doExpand1(f, bC),
  g_e : doExpand1(g, bP),

  fg_c : calcInnerProdList(varsP, 1, bP, f_e*g_e),

  if (comp_par) then (
    printf(fh, "  switch (linc2) { ~%"), 
    for i : 1 thru length(fg_c) do (
      printf(fh, "    case ~a: ~%", i-1),
      printf(fh, "      fg[~a] += a*(~a); ~%", i-1, float(expand(fg_c[i])))
    ), 
    flush_output(fh),
    printf(fh, "  } ~%")
  )
  else (
    if (accumulate) then (
      for i : 1 thru length(fg_c) do (
        printf(fh, "  fg[~a] += a*(~a); ~%", i-1, float(expand(fg_c[i])))
      )
    )
    else (
      /* Make a temporary variable to permit in-place operations i.e., 
         g = a*g where g is a phase space field and a is a configuration space field */
      printf(fh, "  double tmp[~a] = {0.0}; ~%", NP), 
      for i : 1 thru length(fg_c) do (
        printf(fh, "  tmp[~a] = ~a; ~%", i-1, float(expand(fg_c[i])))
      ), 
      flush_output(fh),
      printf(fh, " ~%"),
      for i : 1 thru length(fg_c) do (
        printf(fh, "  fg[~a] = tmp[~a]; ~%", i-1, i-1)
      )
    ),
    flush_output(fh)
  ), 
  printf(fh, "} ~%")
)$