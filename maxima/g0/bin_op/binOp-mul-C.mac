/* Generate kernels that perform weak multiplication of two
   fields, say if C = A*B where A, B, and C are DG fields. */

load("modal-basis");
load("out-scripts");
load(stringproc)$
load("nodal_operations/nodal_functions")$

fpprec : 24$

calcBinOpConfMultiply(fh, funcNm, cdim, basisFun, polyOrder) := block(
  [bType, pOrder, varsC, basisC, bW, varsW, wdim, N, f_e, g_e, fg_c],

  if (basisFun="ser") then bType : "Ser"
  elseif (basisFun="tensor") then bType : "Tensor",

  if polyOrder>0 then pOrder : polyOrder else pOrder : 1,

  [varsC, basisC] : loadBasis(bType, cdim, pOrder),

  if polyOrder=0 then
    bW : [basisC[1]]
  else
    bW : copylist(basisC),
  varsW : copylist(varsC),
  wdim  : cdim,
  N     : length(bW),
    
  /* Function declaration with input/output variables. */
  printf(fh, "GKYL_CU_DH void ~a(const double *f, const double *g, double *fg) ~%{ ~%", funcNm),
  printf(fh, "  // f:  First input DG field. ~%"),
  printf(fh, "  // g:  Second input DG field. ~%"),  
  printf(fh, "  // fg: Output DG field f*g using weak multiplication. ~%"),
  printf(fh, " ~%"),

  f_e : doExpand1(f, bW),
  g_e : doExpand1(g, bW),

  fg_c : calcInnerProdList(varsW, 1, bW, f_e*g_e),
  writeCExprs1(fg, fg_c),
  printf(fh, " ~%"),
  flush_output(fh),
  printf(fh, "} ~%")
)$