/* Generate kernels that perform weak multiplication between
   two fields. */

load("bin_op/binOp-mul")$
load(stringproc)$

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 0$
maxPolyOrder_Ser : 3$
minCdim_Ser : 1$
minVdim_Ser : 1$
maxCdim_Ser : 3$
maxVdim_Ser : 3$

/* Tensor product basis. */
/* Note that Serendipity, p = 1, is equivalent to Tensor */
/* Thus no need to calculate p = 1 Tensor basis */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
minVdim_Tensor : 1$
maxCdim_Tensor : 0$
maxVdim_Tensor : 0$

/* ...... END OF USER INPUTS........ */

bName        : ["ser", "tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
minVdim      : [minVdim_Ser, minVdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$
maxVdim      : [maxVdim_Ser, maxVdim_Tensor]$

for bInd : 1 thru length(bName) do (
  /* Generate kernels for operations between two fields defined on
     spaces with same dimensions (1D, 2D, 3D). */
  for c : minCdim[bInd] thru maxCdim[bInd] do (

    minPolyOrderB : minPolyOrder[bInd],
    maxPolyOrderB : maxPolyOrder[bInd],

/*
    for polyOrder : minPolyOrderB thru maxPolyOrderB do (
      fname : sconcat("~/max-out/binop_mul_", c, "d_",bName[bInd],"_p", polyOrder, ".c"),
      fh : openw(fname),
      disp(printf(false,sconcat("Creating ~a ", fname))),
      printf(fh, "#include <gkyl_binop_mul_ser.h> ~%"),      
      printf(fh, " ~%"),
      funcName : sconcat("binop_mul_", c, "d_",bName[bInd],"_p", polyOrder),
      calcBinOpConfMultiply(fh, funcName, c, bName[bInd], polyOrder),
      close(fh)
    ),
    */

    for v : max(c,minVdim[bInd]) thru maxVdim[bInd] do (
      if (c+v>5 and maxPolyOrderB > 1) then maxPolyOrderB : 1,

      for polyOrder : minPolyOrder[bInd] thru maxPolyOrderB do (
        fname : sconcat("~/max-out/binop_cross_mul_", c, "d_", c+v, "d_", bName[bInd],"_p", polyOrder, ".c"),
        fh : openw(fname),
        print(sconcat("Creating ", fname)),
        printf(fh, "#include <gkyl_binop_cross_mul_ser.h> ~%"),      
        printf(fh, " ~%"),
        funcName : sconcat("binop_cross_mul_", c, "d_", c+v, "d_", bName[bInd],"_p", polyOrder),
        calcBinOpCrossMultiply(fh, funcName, c, v, bName[bInd], polyOrder),
        close(fh)
      )
    )
  )
)$
