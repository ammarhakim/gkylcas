/* Generate kernels that perform binary operations between
   two fields. Currently two operations are supported:
     1) Weak division by a scalar function.
     2) Weak multiplication.
   This script calls the functions calcBinOp for weak multiplication. */

load("bin_op/binOp-mul-C")$
load(stringproc)$

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 0$
maxPolyOrder_Ser : 3$
minCdim_Ser : 1$
maxCdim_Ser : 0$

/* Tensor product basis. */
/* Note that Serendipity, p = 1, is equivalent to Tensor */
/* Thus no need to calculate p = 1 Tensor basis */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
maxCdim_Tensor : 3$

/* ...... END OF USER INPUTS........ */

bName        : ["ser", "tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
minVdim      : [minVdim_Ser, minVdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$
maxVdim      : [maxVdim_Ser, maxVdim_Tensor]$

for bInd : 1 thru length(bName) do (
  /* Generate kernels for operations between two fields defined on
     spaces with same dimensions (1D, 2D, 3D). */
  for polyOrder : minPolyOrder[bInd] thru maxPolyOrder[bInd] do (
    for c : minCdim[bInd] thru maxCdim[bInd] do (
      fname : sconcat("~/max-out/binop_mul_", c, "d_",bName[bInd],"_p", polyOrder, ".c"),
      fh : openw(fname),
      disp(printf(false,sconcat("Creating ~ax ", bName[bInd]),c)),
      printf(fh, "#include <gkyl_binop_mul_ser.h> ~%"),      
      printf(fh, " ~%"),
      funcName : sconcat("binop_mul_", c, "d_",bName[bInd],"_p", polyOrder),
      disp(printf(false,sconcat("Working on dg bin_op multiply ", c, "x ", bName[bInd]))),
      calcBinOpConfMultiply(fh, funcName, c, bName[bInd], polyOrder),
      close(fh)
    )
  )
)$
