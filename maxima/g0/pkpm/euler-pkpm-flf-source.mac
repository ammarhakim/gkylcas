/* This script generates the kernels for the source terms in the
   fluid equations of the parallel-kinetic-perpendicular-moment (pkpm) model,
   in a 1D field line following coordinate system.
   Current supports source terms for Jrhou_parallel equation = Jrho*E_parallel - Jp_perp*(1/B dB/dz) */

load("modal-basis")$
load("out-scripts")$
fpprec : 24$

calcEulerPKPMFLFSource(fh, funcNm, cdim, basisFun, polyOrder) := block(
  [varsC, bC, NC, rho_e, Ex_e, Ey_e, Ez_e, Bx_e, By_e, Bz_e, 
   incr_rhoux, incr_rhouy, incr_rhouz, incr_E_perp],

  kill(varsC, bC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),

  /* Number of basis monomials. */
  NC : length(bC),

  printf(fh, "#include <gkyl_euler_pkpm_kernels.h> ~%"),
  printf(fh, "GKYL_CU_DH void ~a_p~a(const double *qmem, const double *vlasov_pkpm_moms, const double *div_b, double* out) ~%{ ~%", funcNm, polyOrder),
  printf(fh, "  // qmem:             q/m*EM fields.~%"),
  printf(fh, "  // div_b:            Input geometry factor div(b) = -1/B*dB/dz.~%"),
  printf(fh, "  // vlasov_pkpm_moms: [Jrho, Jp_parallel, Jp_perp], Moments computed from kinetic equation in pkpm model.~%"),
  printf(fh, "  //                   Includes Jacobian factor 1/B.~%"),
  printf(fh, "  // out:              Output increment"),
  printf(fh, "~%"),

  printf(fh, "  const double *Jrho = &vlasov_pkpm_moms[~a]; ~%", 0),
  printf(fh, "  const double *Jp_perp = &vlasov_pkpm_moms[~a]; ~%", 2*NC),
  printf(fh, "  const double *Epar = &qmem[~a]; ~%", 0*NC),
  printf(fh, "~%"),

  printf(fh, "  double *outrhoux = &out[~a]; ~%", 0*NC),
  printf(fh, "~%"),

  Jrho_e : doExpand1(Jrho, bC),
  Jp_perp_e : doExpand1(Jp_perp, bC),
  Epar_e : doExpand1(Epar, bC),
  div_b_e : doExpand1(div_b, bC),

  incr_rhoux : calcInnerProdList(varsC, 1, bC, Jrho_e*Epar_e + Jp_perp_e*div_b_e),
  writeCIncrExprs1(outrhoux, incr_rhoux),
  printf(fh, "~%"),
  flush_output(fh),

  printf(fh, "} ~%")
)$
