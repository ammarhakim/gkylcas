/* This script generates the kernels for the surface term
   diffusion contribution from Lenard Bernstein operator. */

load("modal-basis")$
load("out-scripts");
load("recovery")$
load(stringproc)$
fpprec : 24$

calcVlasovPKPMLBODiffSurfUpdater(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,NP,NC,pDim,bType,h_e,nuVtSq_e,temp_diff_c,diff_incr_c],

  /* Load basis of dimensionality requested. */
  [varsC,bC,varsP,bP] : loadPhaseBasis(basisFun, cdim, vdim, polyOrder),

  /* Number of basis monomials. */
  NP : length(bP),  NC : length(bC),
  
  pDim : cdim+vdim,

  /* Construct the recovery polynomial */
  if polyOrder=1 then /* Force p=1 to mean hybrid. */
    bType : "hyb"
  else
    bType : basisFun,
  h_e : calcRecov1CellGen(bType, vx, varsP, polyOrder, 1, dg(makelist(fl[i-1],i,1,NP)), dg(makelist(fc[i-1],i,1,NP)), dg(makelist(fr[i-1],i,1,NP))),
  /*............. RECOVERY DONE ..............................*/

  printf(fh, "#include <gkyl_lbo_vlasov_kernels.h> ~%"),    
  printf(fh, "GKYL_CU_DH void ~a(const double *w, const double *dxv, const double *nuVtSq, const double *fl, const double *fc, const double *fr, double* GKYL_RESTRICT out) ~%{ ~%", funcNm),
  printf(fh, "  // w[~a]:         cell-center coordinates. ~%", cdim+vdim),
  printf(fh, "  // dxv[~a]:       cell spacing. ~%", cdim+vdim),
  printf(fh, "  // nuVtSqSum[~a]: sum of thermal speeds squared time their respective collisionalities. ~%", NC),
  printf(fh, "  // fl/fc/fr:      distribution function in cells ~%"),
  printf(fh, "  // out:           incremented distribution function in cell ~%"),
  printf(fh, "  double rdvSq4 = 4.0/(dxv[~a]*dxv[~a]); ~%", cdim, cdim),
  printf(fh, "  double temp_diff[~a] = {0.0}; ~%", NP),
  printf(fh, "  double diff_incr[~a] = {0.0}; ~%", NP),
  printf(fh, "~%"),
    
  /* Write out the second derivative of the recovered distribution. */
  nuVtSq_e : doExpand1(nuVtSq,bC),
    
  temp_diff_c : calcInnerProdList(varsP, 1, bP, diff(h_e, vx, 2)),
  writeCExprs1(temp_diff, temp_diff_c),
  printf(fh, "~%"),
    
  diff_incr_c : calcInnerProdList(varsP, nuVtSq_e, bP, doExpand1(temp_diff,bP)),
  writeCExprs1(diff_incr, diff_incr_c),
  printf(fh, "~%"),
  
  writeCIncrExprs1(out, rdvSq4*makelist(diff_incr[i-1],i,1,NP)), 
  printf(fh, "} ~%")
);


