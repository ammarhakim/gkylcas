load("modal-basis")$
load("out-scripts")$
fpprec : 24$

calcEulerPKPMPressure(fh, funcNm, cdim, basisFun, polyOrder) := block(
  [varsC, bC, NC, p_perp_e, p_par_e, 
   bxbx_e, bxby_e, bxbz_e, byby_e, bybz_e, bzbz_e,  
   Pxx_l, Pxy_l, Pxz_l, Pyy_l, Pyz_l, Pzz_l],

  kill(varsC, bC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),

  /* Number of basis monomials. */
  NC : length(bC),

  printf(fh, "#include <gkyl_euler_kernels.h> ~%"),

  printf(fh, "GKYL_CU_DH void ~a_p~a(const double *bvar, const double *vlasov_pkpm_moms, const double *statevec, double* GKYL_RESTRICT p_ij) ~%{ ~%", funcNm, polyOrder),
  printf(fh, "  // bvar: Magnetic field unit vector and tensor.~%"),
  printf(fh, "  // vlasov_pkpm_moms: [rho, p_parallel, q_parallel], Moments computed from kinetic equation in pkpm model.~%"),
  printf(fh, "  // statevec: [rho ux, rho uy, rho uz, p_perp], Fluid input state vector.~%"),
  printf(fh, "  // p_ij: Output pressure tensor, p_ij = (p_parallel - p_perp)bb + p_perp I.~%"),
  printf(fh, "~%"),

  printf(fh, "  const double *p_perp = &statevec[~a]; ~%", 3*NC),

  printf(fh, "  // Parallel pressure is first component of pkpm moment array and unit tensor are last six components of bvar array.~%"),
  printf(fh, "  const double *p_parallel = &vlasov_pkpm_moms[~a]; ~%", NC),
  printf(fh, "  const double *bxbx = &bvar[~a]; ~%", NC*3),
  printf(fh, "  const double *bxby = &bvar[~a]; ~%", NC*4),
  printf(fh, "  const double *bxbz = &bvar[~a]; ~%", NC*5),
  printf(fh, "  const double *byby = &bvar[~a]; ~%", NC*6),
  printf(fh, "  const double *bybz = &bvar[~a]; ~%", NC*7),
  printf(fh, "  const double *bzbz = &bvar[~a]; ~%", NC*8),
  printf(fh, "~%"),

  printf(fh, "  double *Pxx = &p_ij[~a]; ~%", 0),
  printf(fh, "  double *Pxy = &p_ij[~a]; ~%", NC),
  printf(fh, "  double *Pxz = &p_ij[~a]; ~%", NC*2),
  printf(fh, "  double *Pyy = &p_ij[~a]; ~%", NC*3),
  printf(fh, "  double *Pyz = &p_ij[~a]; ~%", NC*4),
  printf(fh, "  double *Pzz = &p_ij[~a]; ~%", NC*5),
  printf(fh, "~%"),

  p_perp_e : doExpand1(p_perp, bC),

  /* Expansion of parallel pressure and magnetic field unit tensor */
  p_par_e : doExpand1(p_parallel, bC),
  bxbx_e : doExpand1(bxbx, bC),
  bxby_e : doExpand1(bxby, bC),
  bxbz_e : doExpand1(bxbz, bC),
  byby_e : doExpand1(byby, bC),
  bybz_e : doExpand1(bybz, bC),
  bzbz_e : doExpand1(bzbz, bC),

  Pxx_l : calcInnerProdList(varsC, 1, bC, (p_par_e - p_perp_e)*bxbx_e + p_perp_e), 
  Pxy_l : calcInnerProdList(varsC, 1, bC, (p_par_e - p_perp_e)*bxby_e), 
  Pxz_l : calcInnerProdList(varsC, 1, bC, (p_par_e - p_perp_e)*bxbz_e), 
  Pyy_l : calcInnerProdList(varsC, 1, bC, (p_par_e - p_perp_e)*byby_e + p_perp_e), 
  Pyz_l : calcInnerProdList(varsC, 1, bC, (p_par_e - p_perp_e)*bybz_e), 
  Pzz_l : calcInnerProdList(varsC, 1, bC, (p_par_e - p_perp_e)*bzbz_e + p_perp_e), 

  writeCExprs1(Pxx, Pxx_l),
  printf(fh, "~%"),
  writeCExprs1(Pxy, Pxy_l),
  printf(fh, "~%"),
  writeCExprs1(Pxz, Pxz_l),
  printf(fh, "~%"),
  writeCExprs1(Pyy, Pyy_l),
  printf(fh, "~%"),
  writeCExprs1(Pyz, Pyz_l),
  printf(fh, "~%"),
  writeCExprs1(Pzz, Pzz_l),

  printf(fh, "} ~%")
)$
