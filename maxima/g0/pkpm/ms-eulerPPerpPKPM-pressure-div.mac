load("pkpm/eulerPPerpPKPM-pressure-div")$
load(stringproc)$
/* This script calls the functions which calculate the
   divergence of the pressure tensor with recovery. */

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 3$
minCdim_Ser : 1$
maxCdim_Ser : 1$

/* Tensor product basis. */
/* Note that Serendipity, p = 1, is equivalent to Tensor */
/* Thus no need to calculate p = 1 Tensor basis */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
maxCdim_Tensor : 0$

/* ...... END OF USER INPUTS........ */

bName        : ["ser", "tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$

for bInd : 1 thru length(bName) do (
  for d : minCdim[bInd] thru maxCdim[bInd] do (
    minPolyOrderB : minPolyOrder[bInd],
    maxPolyOrderB : maxPolyOrder[bInd],

    for polyOrder : minPolyOrderB thru maxPolyOrderB do (
      disp(printf(false,sconcat("Creating surface euler pkpm model",bName[bInd]," ~axp~a"),d,polyOrder)),
      for dir : 1 thru d do ( 
        if (dir = 1) then fname : sconcat("~/max-out/euler_pkpm_pressure_div_x_", d, "x_", bName[bInd], "_p", polyOrder, ".c"),
        if (dir = 2) then fname : sconcat("~/max-out/euler_pkpm_pressure_div_y_", d, "x_", bName[bInd], "_p", polyOrder, ".c"),
        if (dir = 3) then fname : sconcat("~/max-out/euler_pkpm_pressure_div_z_", d, "x_", bName[bInd], "_p", polyOrder, ".c"),
        fh : openw(fname),
        funcName : sconcat("euler_pkpm_pressure_div_"),
        printf(fh, "#include <gkyl_euler_kernels.h> ~%"),
        calcEulerPKPMDivPressure(dir, fh, funcName, d, bName[bInd], polyOrder),
        close(fh)
      )
    )
  )
);
