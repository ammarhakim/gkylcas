/* This script generates the kernels for calculating the distribution function
   in the mirror force for the T_perp/m*G = T_perp/m*(F_0 - F_1) kinetic equation,
   g_dist_source = 2.0*(T_perp/m*G) - T_perp/m*F_0 + T_perp/m*F_2
   Note that T_perp/m*G is the evolved quantity for the first Laguerre moment. 
   Also outputs F_1 from T_perp/m*G for the evolution of F_2 if F_2 is present. 
   To simplify internal Gkeyll logic, kernels assume F_2 is present and outputs F_1 even if F_2 = 0.0. */

load("modal-basis")$
load("out-scripts")$
fpprec : 24$

calcPKPMDistMirrorForce(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC, bC, varsP, bP, NC, NP, 
   F_0_e, G_1_e, F_2_e, T_perp_over_m_e, T_perp_over_m_inv_e, 
   F_2_m_F_0_c, F_2_m_F_0_e, T_perp_F_0_c, T_perp_F_0_e, 
   T_perp_g_dist_c, T_perp_g_dist_e, out_g_dist_c, 
   F_0_m_F_1_c, F_0_m_F_1_e, out_F_1_c],

  /* Load basis of dimensionality requested. */
  [varsC,bC,varsP,bP] : loadPhaseBasis(basisFun, cdim, vdim, polyOrder),

  /* Number of basis monomials. */
  NP : length(bP),
  NC : length(bC),

  printf(fh, "#include <gkyl_euler_pkpm_kernels.h> ~%"),
  printf(fh, "GKYL_CU_DH void ~a_p~a(const double* T_perp_over_m, const double* T_perp_over_m_inv, const double* f, const double* F_k_p_1, double* g_dist_source, double* F_k_m_1) ~%{ ~%", funcNm, polyOrder),
  printf(fh, "  // T_perp_over_m: Input p_perp/rho = T_perp/m.~%"),
  printf(fh, "  // T_perp_over_m_inv: Input (T_perp/m)^-1.~%"),
  printf(fh, "  // f:             Input distribution function [F_0, T_perp/m G = T_perp/m (F_0 - F_1)].~%"),
  printf(fh, "  // F_k_p_1:       Input k+1 distribution function. F_2 expansion is the first NP coefficients. ~%"),
  printf(fh, "  // g_dist_source: Output 2.0*T_perp/m*(2.0*T_perp/m G + T_perp/m (F_2 - F_0)).~%"), 
  printf(fh, "  // F_k_m_1:       Output k-1 distribution function. F_1 expansion is the first NP coefficients. ~%"),
  printf(fh, "~%"),

  /* Access F_0 and T_perp/m G, first two Laguerre moments */
  printf(fh, "  const double *F_0 = &f[~a]; ~%", 0),
  printf(fh, "  const double *G_1 = &f[~a]; ~%", NP),
  printf(fh, "  const double *F_2 = &F_k_p_1[~a]; ~%", 0),  
  printf(fh, "~%"), 

  /* Access the output components of F_k_m_1 (only first NP components are F_1) */
  printf(fh, "  double *out_F_1 = &F_k_m_1[~a]; ~%", 0), 
  printf(fh, "~%"), 

  /* Expand distribution functions F_0 and T_perp/m G in phase basis. */
  F_0_e : doExpand1(F_0, bP),
  G_1_e : doExpand1(G_1, bP),
  F_2_e : doExpand1(F_2, bP),

  T_perp_over_m_e : doExpand1(T_perp_over_m, bC),
  T_perp_over_m_inv_e : doExpand1(T_perp_over_m_inv, bC),

  printf(fh, "  double tmp_F_2_m_F_0[~a] = {0.0}; ~%", NP),
  printf(fh, "  double tmp_T_perp_F_0[~a] = {0.0}; ~%", NP),
  printf(fh, "  double tmp_T_perp_g_dist[~a] = {0.0}; ~%", NP),
  printf(fh, "  double tmp_F_0_m_F_1[~a] = {0.0}; ~%", NP),
  printf(fh, "~%"),  

  F_2_m_F_0_c : calcInnerProdList(varsP, 1, bP, F_2_e - F_0_e),
  writeCExprs1(tmp_F_2_m_F_0, F_2_m_F_0_c),
  printf(fh, "~%"),  

  F_2_m_F_0_e : doExpand1(tmp_F_2_m_F_0, bP),
  T_perp_F_0_c : calcInnerProdList(varsP, 1, bP, T_perp_over_m_e*F_2_m_F_0_e),
  writeCExprs1(tmp_T_perp_F_0, T_perp_F_0_c),
  printf(fh, "~%"),  

  T_perp_F_0_e : doExpand1(tmp_T_perp_F_0, bP),
  T_perp_g_dist_c : calcInnerProdList(varsP, 1, bP, 2.0*G_1_e + T_perp_F_0_e), 
  writeCExprs1(tmp_T_perp_g_dist, T_perp_g_dist_c),
  printf(fh, "~%"),  

  T_perp_g_dist_e : doExpand1(tmp_T_perp_g_dist, bP),
  out_g_dist_c : calcInnerProdList(varsP, 1, bP, 2.0*T_perp_over_m_e*T_perp_g_dist_e),
  writeCExprs1(g_dist_source, out_g_dist_c),
  printf(fh, "~%"), 

  F_0_m_F_1_c : calcInnerProdList(varsP, 1, bP, T_perp_over_m_inv_e*G_1_e),
  writeCExprs1(tmp_F_0_m_F_1, F_0_m_F_1_c),
  printf(fh, "~%"),

  F_0_m_F_1_e : doExpand1(tmp_F_0_m_F_1, bP),
  out_F_1_c : calcInnerProdList(varsP, 1, bP, F_0_e - F_0_m_F_1_e),
  writeCExprs1(out_F_1, out_F_1_c),

  printf(fh, "} ~%")
)$
