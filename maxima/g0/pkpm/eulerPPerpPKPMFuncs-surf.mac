/* This script generates the kernels for the surface term of Euler's equations
   for the parallel-kinetic-perpendicular-moment (pkpm) model */

load("modal-basis");
load("out-scripts");
load(stringproc)$
load("scifac")$
load("nodal_operations/nodal_functions")$
load("recovery")$
fpprec : 24$

cvars : [x, y, z]$
dx11 : [dx10, dx11, dx12]$

statevec : [rhou0, rhou1, rhou2, p_perp]$
lhs : [outrhou0, outrhou1, outrhou2, outp_perp]$

/* Helper functions for expanding in basis functions a quantity we know should be sparse  */
/* For example, alpha, the phase space flow only depends on a few phase space coordinates */
doMakeExprLst(vals, S)  := makelist(if vals[i] # 0 then S[i-1] else 0, i, 1, length(vals))$
doExpandLst(lst, basis) := sum(lst[i]*basis[i], i, 1, length(basis))$

/* 1D Euler special since only involves evaluations */
calcEulerPKPM1xUpdateInDir(dir, fh, funcNm, cdim, basisFun, polyOrder) := block(
  [bC,NC,cid,cv,surfVars,
  rhouxl_e,rhouyl_e,rhouzl_e,p_perpl_e,
  rhouxc_e,rhouyc_e,rhouzc_e,p_perpc_e,
  rhouxr_e,rhouyr_e,rhouzr_e,p_perpr_e,
  uxl_e,uxc_e,uxr_e,
  uyl_e,uyc_e,uyr_e,
  uzl_e,uzc_e,uzr_e,
  rhouxl_r,rhouyl_r,rhouzl_r,p_perpl_r,
  rhouxc_l,rhouyc_l,rhouzc_l,p_perpc_l,
  rhouxc_r,rhouyc_r,rhouzc_r,p_perpc_r,
  rhouxr_l,rhouyr_l,rhouzr_l,p_perpr_l,
  Ghat_rhoux_l_exp,Ghat_rhoux_r_exp,Ghat_rhouy_l_exp,Ghat_rhouy_r_exp,Ghat_rhouz_l_exp,Ghat_rhouz_r_exp,Ghat_p_perp_l_exp,Ghat_p_perp_r_exp,
  incr_rhoux_l,incr_rhoux_r,incr_rhouy_l,incr_rhouy_r,incr_rhouz_l,incr_rhouz_r,incr_p_perp_l,incr_p_perp_r],

  kill(varsC, bC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),

  /* Number of basis monomials. */
  NC : length(bC),

  printf(fh, "GKYL_CU_DH void ~a~a_~ax_~a_p~a(const double *w, const double *dxv, 
  const double *u_il, const double *u_ic, const double *u_ir,
  const double *statevecl, const double *statevecc, const double *statevecr, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, cvars[dir], cdim, basisFun, polyOrder),
  printf(fh, "  // w[NDIM]:   Cell-center coordinates.~%"),
  printf(fh, "  // dxv[NDIM]: Cell spacing.~%"),
  printf(fh, "  // u_il/u_ic/u_ir:  Input bulk velocity (ux,uy,uz) in left/center/right cells.~%"),
  printf(fh, "  // statevecl/statevecc/statevecr: [rho ux, rho uy, rho uz, p_perp], Fluid input state vector in left/center/right cells.~%"),
  printf(fh, "  // out: Incremented output.~%"),
  printf(fh, "~%"),

  /* cv = variable in direction of surface update. */
  cv : varsC[dir],

  /* Surface variables to integrate over. */
  surfVars : delete(cv,varsC),

  printf(fh, "  const double dx1 = 2.0/dxv[~a]; ~%", dir-1),
  printf(fh, "~%"),

  printf(fh, "  const double *rhoux_l = &statevecl[~a]; ~%", 0*NC),
  printf(fh, "  const double *rhouy_l = &statevecl[~a]; ~%", 1*NC),
  printf(fh, "  const double *rhouz_l = &statevecl[~a]; ~%", 2*NC),
  printf(fh, "  const double *p_perp_l = &statevecl[~a]; ~%", 3*NC),

  printf(fh, "~%"),

  printf(fh, "  const double *rhoux_c = &statevecc[~a]; ~%", 0*NC),
  printf(fh, "  const double *rhouy_c = &statevecc[~a]; ~%", 1*NC),
  printf(fh, "  const double *rhouz_c = &statevecc[~a]; ~%", 2*NC),
  printf(fh, "  const double *p_perp_c = &statevecc[~a]; ~%", 3*NC),

  printf(fh, "~%"),

  printf(fh, "  const double *rhoux_r = &statevecr[~a]; ~%", 0*NC),
  printf(fh, "  const double *rhouy_r = &statevecr[~a]; ~%", 1*NC),
  printf(fh, "  const double *rhouz_r = &statevecr[~a]; ~%", 2*NC),
  printf(fh, "  const double *p_perp_r = &statevecr[~a]; ~%", 3*NC),

  printf(fh, "~%"),

  printf(fh, "  const double *ux_l = &u_il[~a]; ~%", 0*NC),
  printf(fh, "  const double *ux_c = &u_ic[~a]; ~%", 0*NC),
  printf(fh, "  const double *ux_r = &u_ir[~a]; ~%", 0*NC),

  printf(fh, "~%"),

  printf(fh, "  double *outrhou0 = &out[~a]; ~%", 0*NC),
  printf(fh, "  double *outrhou1 = &out[~a]; ~%", 1*NC),
  printf(fh, "  double *outrhou2 = &out[~a]; ~%", 2*NC),
  printf(fh, "  double *outp_perp = &out[~a]; ~%", 3*NC),

  printf(fh, "~%"),

  rhouxl_e : doExpand1(rhoux_l, bC),
  rhouyl_e : doExpand1(rhouy_l, bC),
  rhouzl_e : doExpand1(rhouz_l, bC),
  p_perpl_e : doExpand1(p_perp_l, bC),

  rhouxc_e : doExpand1(rhoux_c, bC),
  rhouyc_e : doExpand1(rhouy_c, bC),
  rhouzc_e : doExpand1(rhouz_c, bC),
  p_perpc_e : doExpand1(p_perp_c, bC),

  rhouxr_e : doExpand1(rhoux_r, bC),
  rhouyr_e : doExpand1(rhouy_r, bC),
  rhouzr_e : doExpand1(rhouz_r, bC),
  p_perpr_e : doExpand1(p_perp_r, bC),

  rhouxl_r : subst(cv=1, rhouxl_e),
  rhouyl_r : subst(cv=1, rhouyl_e),
  rhouzl_r : subst(cv=1, rhouzl_e),
  p_perpl_r : subst(cv=1, p_perpl_e),

  rhouxc_l : subst(cv=-1, rhouxc_e),
  rhouyc_l : subst(cv=-1, rhouyc_e),
  rhouzc_l : subst(cv=-1, rhouzc_e),
  p_perpc_l : subst(cv=-1, p_perpc_e),

  rhouxc_r : subst(cv=1, rhouxc_e),
  rhouyc_r : subst(cv=1, rhouyc_e),
  rhouzc_r : subst(cv=1, rhouzc_e),
  p_perpc_r : subst(cv=1, p_perpc_e),

  rhouxr_l : subst(cv=-1, rhouxr_e),
  rhouyr_l : subst(cv=-1, rhouyr_e),
  rhouzr_l : subst(cv=-1, rhouzr_e),
  p_perpr_l : subst(cv=-1, p_perpr_e),

  /* We use recovery to compute the interface u_i values for momentum fluxes */
  /* Create safety lists for recovery */
  lst_ux_l : makelist(ux_l[i], i, 0, NC-1),
  lst_ux_c : makelist(ux_c[i], i, 0, NC-1),
  lst_ux_r : makelist(ux_r[i], i, 0, NC-1),

  /* Recovery */
  ux_rec_l : calcRecov2CellGen(basisFun, cv, varsC, polyOrder,
    dg(lst_ux_l), dg(lst_ux_c)),
  ux_rec_r : calcRecov2CellGen(basisFun, cv, varsC, polyOrder,
    dg(lst_ux_c), dg(lst_ux_r)),

  /* evaluate recovery u at surface interfaces to find sign and value */
  printf(fh, "  double uxrec_l = ~a; ~%", float(expand(subst(cv=0, ux_rec_l)))),
  printf(fh, "  double uxrec_r = ~a; ~%", float(expand(subst(cv=0, ux_rec_r)))),
  printf(fh, "~%"),

  printf(fh, "  double Ghat_rhoux_l = 0.0; ~%"),
  printf(fh, "  double Ghat_rhoux_r = 0.0; ~%"),
  printf(fh, "  double Ghat_rhouy_l = 0.0; ~%"),
  printf(fh, "  double Ghat_rhouy_r = 0.0; ~%"),
  printf(fh, "  double Ghat_rhouz_l = 0.0; ~%"),
  printf(fh, "  double Ghat_rhouz_r = 0.0; ~%"),  

  printf(fh, "  double Ghat_p_perp_l = 0.0; ~%"),
  printf(fh, "  double Ghat_p_perp_r = 0.0; ~%"),  

  printf(fh, "  if (uxrec_l > 0) { ~%"),

  printf(fh, "  Ghat_rhoux_l = ~a; ~%", uxrec_l*float(expand(rhouxl_r))),
  printf(fh, "  Ghat_rhouy_l = ~a; ~%", uxrec_l*float(expand(rhouyl_r))),
  printf(fh, "  Ghat_rhouz_l = ~a; ~%", uxrec_l*float(expand(rhouzl_r))),
  printf(fh, "  Ghat_p_perp_l = ~a; ~%", uxrec_l*float(expand(p_perpl_r))),

  printf(fh, "  } else { ~%"),

  printf(fh, "  Ghat_rhoux_l = ~a; ~%", uxrec_l*float(expand(rhouxc_l))),
  printf(fh, "  Ghat_rhouy_l = ~a; ~%", uxrec_l*float(expand(rhouyc_l))),
  printf(fh, "  Ghat_rhouz_l = ~a; ~%", uxrec_l*float(expand(rhouzc_l))),
  printf(fh, "  Ghat_p_perp_l = ~a; ~%", uxrec_l*float(expand(p_perpc_l))),

  printf(fh, "  } ~%"),

  printf(fh, "  if (uxrec_r > 0) { ~%"),

  printf(fh, "  Ghat_rhoux_r = ~a; ~%", uxrec_r*float(expand(rhouxc_r))),
  printf(fh, "  Ghat_rhouy_r = ~a; ~%", uxrec_r*float(expand(rhouyc_r))),
  printf(fh, "  Ghat_rhouz_r = ~a; ~%", uxrec_r*float(expand(rhouzc_r))),
  printf(fh, "  Ghat_p_perp_r = ~a; ~%", uxrec_r*float(expand(p_perpc_r))),

  printf(fh, "  } else { ~%"),

  printf(fh, "  Ghat_rhoux_r = ~a; ~%", uxrec_r*float(expand(rhouxr_l))),
  printf(fh, "  Ghat_rhouy_r = ~a; ~%", uxrec_r*float(expand(rhouyr_l))),
  printf(fh, "  Ghat_rhouz_r = ~a; ~%", uxrec_r*float(expand(rhouzr_l))),
  printf(fh, "  Ghat_p_perp_r = ~a; ~%", uxrec_r*float(expand(p_perpr_l))),
  printf(fh, "  } ~%"),

  printf(fh, "~%"),

  incr_rhoux_l : calcInnerProdList(surfVars, 1, subst(cv=-1, bC), Ghat_rhoux_l),
  incr_rhoux_r : calcInnerProdList(surfVars, -1, subst(cv=1, bC), Ghat_rhoux_r),

  incr_rhouy_l : calcInnerProdList(surfVars, 1, subst(cv=-1, bC), Ghat_rhouy_l),
  incr_rhouy_r : calcInnerProdList(surfVars, -1, subst(cv=1, bC), Ghat_rhouy_r),

  incr_rhouz_l : calcInnerProdList(surfVars, 1, subst(cv=-1, bC), Ghat_rhouz_l),
  incr_rhouz_r : calcInnerProdList(surfVars, -1, subst(cv=1, bC), Ghat_rhouz_r),

  incr_p_perp_l : calcInnerProdList(surfVars, 1, subst(cv=-1, bC), Ghat_p_perp_l),
  incr_p_perp_r : calcInnerProdList(surfVars, -1, subst(cv=1, bC), Ghat_p_perp_r),

  surfTerms : [incr_rhoux_l + incr_rhoux_r,incr_rhouy_l + incr_rhouy_r,incr_rhouz_l + incr_rhouz_r,incr_p_perp_l + incr_p_perp_r],
  for m : 1 thru 4 do (
    surf : surfTerms[m],
    writeCIncrExprs1(lhs[m], dx1*surf),
    printf(fh, "~%")
  ),

  printf(fh, "} ~%")
);
