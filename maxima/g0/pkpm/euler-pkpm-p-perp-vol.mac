load("modal-basis")$
load("out-scripts")$
fpprec : 24$

statevec : [rhoux, rhouy, rhouz, p_perp]$
dx1  : [dx10, dx11, dx12]$
lhs : [outrhoux, outrhouy, outrhouz, outp_perp]$

cvars : [x, y, z]$

calcEulerPKPMVolUpdater(fh, funcNm, cdim, basisFun, polyOrder) := block(
  [varsC,bC,NC,cflPt,cid,
  rhoux_e,rhouy_e,rhouz_e,p_perp_e,
  ux_e, uy_e, uz_e, u_e,
  Pxx_e, Pxy_e, Pxz_e, Pyy_e, Pyz_e, Pzz_e, 
  umid,t2,t3,t4,t5,volTerms,vol,expr],

  kill(varsC, bC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),

  /* Number of basis monomials. */
  NC : length(bC),

  printf(fh, "#include <gkyl_euler_kernels.h> ~%"),

  /* specify a point to evaluate maximum speed at for use in computing CFL */
  cflPt : makelist(varsC[d]=0, d, 1, length(varsC)),

  printf(fh, "GKYL_CU_DH double ~a_p~a(const double *w, const double *dxv, const double *u_i, const double *div_p, const double *statevec, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, polyOrder),
  printf(fh, "  // w[NDIM]: Cell-center coordinates.~%"),
  printf(fh, "  // dxv[NDIM]: Cell spacing.~%"),
  printf(fh, "  // u_i:       bulk flow velocity (ux, uy, uz).~%"),
  printf(fh, "  // div_p:     divergence of the pressure tensor.~%"),
  printf(fh, "  // statevec: [rho ux, rho uy, rho uz], Fluid input state vector.~%"),
  printf(fh, "  // out: Incremented output.~%"),
  printf(fh, "~%"),
  for dir : 1 thru cdim do (
    printf(fh, "  double dx1~a = 2./dxv[~a]; ~%", dir-1, dir-1)
  ),
  printf(fh, "~%"),

  printf(fh, "  const double *rhoux = &statevec[~a]; ~%", 0*NC),
  printf(fh, "  const double *rhouy = &statevec[~a]; ~%", 1*NC),
  printf(fh, "  const double *rhouz = &statevec[~a]; ~%", 2*NC),
  printf(fh, "~%"),

  /* access flow, pressure tensor, and heat flux data */
  printf(fh, "  const double *ux = &u_i[~a]; ~%", 0),
  printf(fh, "  const double *uy = &u_i[~a]; ~%", NC),
  printf(fh, "  const double *uz = &u_i[~a]; ~%", NC*2),
  printf(fh, "~%"),

  printf(fh, "  const double *div_p_x = &div_p[~a]; ~%", 0),
  printf(fh, "  const double *div_p_y = &div_p[~a]; ~%", NC),
  printf(fh, "  const double *div_p_z = &div_p[~a]; ~%", NC*2),
  printf(fh, "~%"),

  printf(fh, "  double *outrhoux = &out[~a]; ~%", 0*NC),
  printf(fh, "  double *outrhouy = &out[~a]; ~%", 1*NC),
  printf(fh, "  double *outrhouz = &out[~a]; ~%", 2*NC),
  printf(fh, "~%"),

  /* cflFreq_mid is our approximation of sum_i max(abs(alpha_i))/(dx_i/(2p+1)) */
  printf(fh, "  double cflFreq_mid = 0.0; ~%"),

  rhoux_e : doExpand1(statevec[1], bC),
  rhouy_e : doExpand1(statevec[2], bC),
  rhouz_e : doExpand1(statevec[3], bC),

  /* Expand flow, u_i, pressure tensor, P_ij, and parallel heat flux, q_parallel b_i, in configuration space basis */
  ux_e : doExpand1(ux, bC),
  uy_e : doExpand1(uy, bC),
  uz_e : doExpand1(uz, bC),
  u_e : [ux_e, uy_e, uz_e],

  div_p_x_e : doExpand1(div_p_x, bC),
  div_p_y_e : doExpand1(div_p_y, bC),
  div_p_z_e : doExpand1(div_p_z, bC),

  /* compute stable time step, max speed = |u| */
  for dir : 1 thru cdim do (
    /* evaluate velocity at center of cell */
    umid : gcfac(float(expand(subst(cflPt, u_e[dir])))),
    printf(fh, "  cflFreq_mid += 0.5*~a*(fabs(~a)); ~%", float(2*polyOrder+1)*dx1[dir], umid)
  ),
  printf(fh, "~%"),

  /* Momentum update, flux = rho*u*u + pperp*I + (ppar - pperp)bb, where I is the identity matrix */
  /* Note we express P =  pperp*I + (ppar - pperp)bb as P_ij */
  t2 : (t2 : 0, for dir : 1 thru cdim do (
     if (dir = 1) then (t2 : t2 + dx1[dir]*calcInnerProdList(varsC, 1, diff(bC, varsC[dir]), rhoux_e*ux_e) 
                                - calcInnerProdList(varsC, 1, bC, div_p_x_e)),
     if (dir = 2) then (t2 : t2 + dx1[dir]*calcInnerProdList(varsC, 1, diff(bC, varsC[dir]), rhoux_e*uy_e)),
     if (dir = 3) then (t2 : t2 + dx1[dir]*calcInnerProdList(varsC, 1, diff(bC, varsC[dir]), rhoux_e*uz_e))
     ),
  t2),
  t3 : (t3 : 0, for dir : 1 thru cdim do (
     if (dir = 1) then (t3 : t3 + dx1[dir]*calcInnerProdList(varsC, 1, diff(bC, varsC[dir]), rhouy_e*ux_e)
                                - calcInnerProdList(varsC, 1, bC, div_p_y_e)),
     if (dir = 2) then (t3 : t3 + dx1[dir]*calcInnerProdList(varsC, 1, diff(bC, varsC[dir]), rhouy_e*uy_e)),
     if (dir = 3) then (t3 : t3 + dx1[dir]*calcInnerProdList(varsC, 1, diff(bC, varsC[dir]), rhouy_e*uz_e))
     ),
  t3),
  t4 : (t4 : 0, for dir : 1 thru cdim do (
     if (dir = 1) then (t4 : t4 + dx1[dir]*calcInnerProdList(varsC, 1, diff(bC, varsC[dir]), rhouz_e*ux_e)
                                - calcInnerProdList(varsC, 1, bC, div_p_z_e)),
     if (dir = 2) then (t4 : t4 + dx1[dir]*calcInnerProdList(varsC, 1, diff(bC, varsC[dir]), rhouz_e*uy_e)),
     if (dir = 3) then (t4 : t4 + dx1[dir]*calcInnerProdList(varsC, 1, diff(bC, varsC[dir]), rhouz_e*uz_e))
     ),
  t4),

  volTerms : [t2,t3,t4],
  for m : 1 thru 3 do (
    vol : volTerms[m],
    writeCIncrExprs1(lhs[m], vol),
    printf(fh, "~%")
  ),

  printf(fh, "  return cflFreq_mid; ~%"),
  printf(fh, "} ~%")

)$
