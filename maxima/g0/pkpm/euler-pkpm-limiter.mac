/* This script generates the kernels for limiting the momentum equation in the 
   PKPM system. Limiter is a characteristic limiter that computes the waves and 
   limits the slopes based on the characteristic variables. */

load("modal-basis")$
load("out-scripts")$
fpprec : 24$

calcEulerPKPMLimiter(dir, fh, funcNm, cdim, basisFun, polyOrder) := block(
  [varsC, bC, NC],

  kill(varsC, bC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),

  /* Number of basis monomials. */
  NC : length(bC),

  printf(fh, "#include <gkyl_euler_pkpm_kernels.h> ~%"),
  printf(fh, "GKYL_CU_DH void ~a(double limiter_fac, const struct gkyl_wv_eqn *wv_eqn, 
  const struct gkyl_wave_cell_geom *geom, const double *prim_c, 
  const double *vlasov_pkpm_moms_l, const double *vlasov_pkpm_moms_c, const double *vlasov_pkpm_moms_r,
  const double *p_ij_l, const double *p_ij_c, const double *p_ij_r, 
  double *euler_pkpm_l, double *euler_pkpm_c, double *euler_pkpm_r)~%{ ~%", funcNm),
  printf(fh, "  // limiter_fac:            Factor for relationship between cell slopes and cell average differences (by default: 1/sqrt(3)).~%"),
  printf(fh, "  // wv_eqn:                 Wave equation for computing waves for limiting characteristics.~%"),
  printf(fh, "  // geom:                   Geometry on the left (*only works with Cartesian components*).~%"),
  printf(fh, "  // prim_c:                 Input flow velocity in the center cell.~%"),
  printf(fh, "  // vlasov_pkpm_moms_l/c/r: Input pkpm moments in left/center/right cells.~%"),
  printf(fh, "  // p_ij_l/c/r:             Input volume expansion of p_ij = (p_par - p_perp) b_i b_j + p_perp g_ij in left/center/right cells.~%"),
  printf(fh, "  // euler_pkpm_l/c/r:       [rho ux, rho uy, rho uz], Fluid input and output (after limiting) state vector in left/center/right cells..~%"),
  printf(fh, "~%"),

  printf(fh, "  const double *norm = geom->norm[~a]; ~%", dir-1),
  printf(fh, "  const double *tau1 = geom->tau1[~a]; ~%", dir-1),
  printf(fh, "  const double *tau2 = geom->tau2[~a]; ~%", dir-1),
  printf(fh, "~%"),

  printf(fh, "  const double *ux_c = &prim_c[~a]; ~%", 0*NC),
  printf(fh, "  const double *uy_c = &prim_c[~a]; ~%", 1*NC),
  printf(fh, "  const double *uz_c = &prim_c[~a]; ~%", 2*NC),
  printf(fh, "~%"),

  printf(fh, "  const double *rho_l = &vlasov_pkpm_moms_l[~a]; ~%", 0*NC),
  printf(fh, "  const double *rho_c = &vlasov_pkpm_moms_c[~a]; ~%", 0*NC),
  printf(fh, "  const double *rho_r = &vlasov_pkpm_moms_r[~a]; ~%", 0*NC),
  printf(fh, "~%"),

  printf(fh, "  const double *Pxx_l = &p_ij_l[~a]; ~%", 0*NC),
  printf(fh, "  const double *Pxy_l = &p_ij_l[~a]; ~%", 1*NC),
  printf(fh, "  const double *Pxz_l = &p_ij_l[~a]; ~%", 2*NC),
  printf(fh, "  const double *Pyy_l = &p_ij_l[~a]; ~%", 3*NC),
  printf(fh, "  const double *Pyz_l = &p_ij_l[~a]; ~%", 4*NC),
  printf(fh, "  const double *Pzz_l = &p_ij_l[~a]; ~%", 5*NC),
  printf(fh, "~%"),

  printf(fh, "  const double *Pxx_c = &p_ij_c[~a]; ~%", 0*NC),
  printf(fh, "  const double *Pxy_c = &p_ij_c[~a]; ~%", 1*NC),
  printf(fh, "  const double *Pxz_c = &p_ij_c[~a]; ~%", 2*NC),
  printf(fh, "  const double *Pyy_c = &p_ij_c[~a]; ~%", 3*NC),
  printf(fh, "  const double *Pyz_c = &p_ij_c[~a]; ~%", 4*NC),
  printf(fh, "  const double *Pzz_c = &p_ij_c[~a]; ~%", 5*NC),
  printf(fh, "~%"),

  printf(fh, "  const double *Pxx_r = &p_ij_r[~a]; ~%", 0*NC),
  printf(fh, "  const double *Pxy_r = &p_ij_r[~a]; ~%", 1*NC),
  printf(fh, "  const double *Pxz_r = &p_ij_r[~a]; ~%", 2*NC),
  printf(fh, "  const double *Pyy_r = &p_ij_r[~a]; ~%", 3*NC),
  printf(fh, "  const double *Pyz_r = &p_ij_r[~a]; ~%", 4*NC),
  printf(fh, "  const double *Pzz_r = &p_ij_r[~a]; ~%", 5*NC),
  printf(fh, "~%"),

  printf(fh, "  double *rhoux_l = &euler_pkpm_l[~a]; ~%", 0*NC),
  printf(fh, "  double *rhouy_l = &euler_pkpm_l[~a]; ~%", 1*NC),
  printf(fh, "  double *rhouz_l = &euler_pkpm_l[~a]; ~%", 2*NC),
  printf(fh, "~%"),

  printf(fh, "  double *rhoux_c = &euler_pkpm_c[~a]; ~%", 0*NC),
  printf(fh, "  double *rhouy_c = &euler_pkpm_c[~a]; ~%", 1*NC),
  printf(fh, "  double *rhouz_c = &euler_pkpm_c[~a]; ~%", 2*NC),
  printf(fh, "~%"),

  printf(fh, "  double *rhoux_r = &euler_pkpm_r[~a]; ~%", 0*NC),
  printf(fh, "  double *rhouy_r = &euler_pkpm_r[~a]; ~%", 1*NC),
  printf(fh, "  double *rhouz_r = &euler_pkpm_r[~a]; ~%", 2*NC),
  printf(fh, "~%"),

  /* State vector from cell averages on left, center, and right */
  printf(fh, "  double q_avg_l[10] = {0.0}; ~%"),
  printf(fh, "  q_avg_l[0] = rho_l[0]; ~%"),
  printf(fh, "  q_avg_l[1] = rhoux_l[0]; ~%"),
  printf(fh, "  q_avg_l[2] = rhouy_l[0]; ~%"),
  printf(fh, "  q_avg_l[3] = rhouz_l[0]; ~%"),
  printf(fh, "  q_avg_l[4] = Pxx_l[0] + q_avg_l[1]*q_avg_l[1]/q_avg_l[0]; ~%"),
  printf(fh, "  q_avg_l[5] = Pxy_l[0] + q_avg_l[1]*q_avg_l[2]/q_avg_l[0]; ~%"),
  printf(fh, "  q_avg_l[6] = Pxz_l[0] + q_avg_l[1]*q_avg_l[3]/q_avg_l[0]; ~%"),
  printf(fh, "  q_avg_l[7] = Pyy_l[0] + q_avg_l[2]*q_avg_l[2]/q_avg_l[0]; ~%"),
  printf(fh, "  q_avg_l[8] = Pyz_l[0] + q_avg_l[2]*q_avg_l[3]/q_avg_l[0]; ~%"),
  printf(fh, "  q_avg_l[9] = Pzz_l[0] + q_avg_l[3]*q_avg_l[3]/q_avg_l[0]; ~%"),

  printf(fh, "  double q_avg_c[10] = {0.0}; ~%"),
  printf(fh, "  q_avg_c[0] = rho_c[0]; ~%"),
  printf(fh, "  q_avg_c[1] = rhoux_c[0]; ~%"),
  printf(fh, "  q_avg_c[2] = rhouy_c[0]; ~%"),
  printf(fh, "  q_avg_c[3] = rhouz_c[0]; ~%"),
  printf(fh, "  q_avg_c[4] = Pxx_c[0] + q_avg_c[1]*q_avg_c[1]/q_avg_c[0]; ~%"),
  printf(fh, "  q_avg_c[5] = Pxy_c[0] + q_avg_c[1]*q_avg_c[2]/q_avg_c[0]; ~%"),
  printf(fh, "  q_avg_c[6] = Pxz_c[0] + q_avg_c[1]*q_avg_c[3]/q_avg_c[0]; ~%"),
  printf(fh, "  q_avg_c[7] = Pyy_c[0] + q_avg_c[2]*q_avg_c[2]/q_avg_c[0]; ~%"),
  printf(fh, "  q_avg_c[8] = Pyz_c[0] + q_avg_c[2]*q_avg_c[3]/q_avg_c[0]; ~%"),
  printf(fh, "  q_avg_c[9] = Pzz_c[0] + q_avg_c[3]*q_avg_c[3]/q_avg_c[0]; ~%"),

  printf(fh, "  double q_avg_r[10] = {0.0}; ~%"),
  printf(fh, "  q_avg_r[0] = rho_r[0]; ~%"),
  printf(fh, "  q_avg_r[1] = rhoux_r[0]; ~%"),
  printf(fh, "  q_avg_r[2] = rhouy_r[0]; ~%"),
  printf(fh, "  q_avg_r[3] = rhouz_r[0]; ~%"),
  printf(fh, "  q_avg_r[4] = Pxx_r[0] + q_avg_r[1]*q_avg_r[1]/q_avg_r[0]; ~%"),
  printf(fh, "  q_avg_r[5] = Pxy_r[0] + q_avg_r[1]*q_avg_r[2]/q_avg_r[0]; ~%"),
  printf(fh, "  q_avg_r[6] = Pxz_r[0] + q_avg_r[1]*q_avg_r[3]/q_avg_r[0]; ~%"),
  printf(fh, "  q_avg_r[7] = Pyy_r[0] + q_avg_r[2]*q_avg_r[2]/q_avg_r[0]; ~%"),
  printf(fh, "  q_avg_r[8] = Pyz_r[0] + q_avg_r[2]*q_avg_r[3]/q_avg_r[0]; ~%"),
  printf(fh, "  q_avg_r[9] = Pzz_r[0] + q_avg_r[3]*q_avg_r[3]/q_avg_r[0]; ~%"),

  /* Rotate to local coordinates */
  printf(fh, "  double q_l_local[10] = {0.0}; ~%"),
  printf(fh, "  double q_c_local[10] = {0.0}; ~%"),
  printf(fh, "  double q_r_local[10] = {0.0}; ~%"),
  printf(fh, "  gkyl_wv_eqn_rotate_to_local(wv_eqn, tau1, tau2, norm, q_avg_l, q_l_local); ~%"),
  printf(fh, "  gkyl_wv_eqn_rotate_to_local(wv_eqn, tau1, tau2, norm, q_avg_c, q_c_local); ~%"),
  printf(fh, "  gkyl_wv_eqn_rotate_to_local(wv_eqn, tau1, tau2, norm, q_avg_r, q_r_local); ~%"),
  printf(fh, "~%"),

  /* Compute jumps for calculating fluctuations */
  printf(fh, "  double delta_l[10] = {0.0}; ~%"),
  printf(fh, "  double delta_r[10] = {0.0}; ~%"),

  printf(fh, "  delta_l[0] = limiter_fac*(q_c_local[0] - q_l_local[0]); ~%"),
  printf(fh, "  delta_l[1] = limiter_fac*(q_c_local[1] - q_l_local[1]); ~%"),
  printf(fh, "  delta_l[2] = limiter_fac*(q_c_local[2] - q_l_local[2]); ~%"),
  printf(fh, "  delta_l[3] = limiter_fac*(q_c_local[3] - q_l_local[3]); ~%"),
  printf(fh, "  delta_l[4] = limiter_fac*(q_c_local[4] - q_l_local[4]); ~%"),
  printf(fh, "  delta_l[5] = limiter_fac*(q_c_local[5] - q_l_local[5]); ~%"),
  printf(fh, "  delta_l[6] = limiter_fac*(q_c_local[6] - q_l_local[6]); ~%"),
  printf(fh, "  delta_l[7] = limiter_fac*(q_c_local[7] - q_l_local[7]); ~%"),
  printf(fh, "  delta_l[8] = limiter_fac*(q_c_local[8] - q_l_local[8]); ~%"),
  printf(fh, "  delta_l[9] = limiter_fac*(q_c_local[9] - q_l_local[9]); ~%"),  

  printf(fh, "  delta_r[0] = limiter_fac*(q_r_local[0] - q_c_local[0]); ~%"),
  printf(fh, "  delta_r[1] = limiter_fac*(q_r_local[1] - q_c_local[1]); ~%"),
  printf(fh, "  delta_r[2] = limiter_fac*(q_r_local[2] - q_c_local[2]); ~%"),
  printf(fh, "  delta_r[3] = limiter_fac*(q_r_local[3] - q_c_local[3]); ~%"),
  printf(fh, "  delta_r[4] = limiter_fac*(q_r_local[4] - q_c_local[4]); ~%"),
  printf(fh, "  delta_r[5] = limiter_fac*(q_r_local[5] - q_c_local[5]); ~%"),
  printf(fh, "  delta_r[6] = limiter_fac*(q_r_local[6] - q_c_local[6]); ~%"),
  printf(fh, "  delta_r[7] = limiter_fac*(q_r_local[7] - q_c_local[7]); ~%"),
  printf(fh, "  delta_r[8] = limiter_fac*(q_r_local[8] - q_c_local[8]); ~%"),
  printf(fh, "  delta_r[9] = limiter_fac*(q_r_local[9] - q_c_local[9]); ~%"),  
  printf(fh, "~%"),

  rhouxc_e : doExpand1(rhoux_c, bC),
  rhouyc_e : doExpand1(rhouy_c, bC),
  rhouzc_e : doExpand1(rhouz_c, bC),
  uxc_e : doExpand1(ux_c, bC),
  uyc_e : doExpand1(uy_c, bC),
  uzc_e : doExpand1(uz_c, bC), 
  Pxxc_e : doExpand1(Pxx_c, bC),
  Pxyc_e : doExpand1(Pxy_c, bC),
  Pxzc_e : doExpand1(Pxz_c, bC),
  Pyyc_e : doExpand1(Pyy_c, bC),
  Pyzc_e : doExpand1(Pyz_c, bC),
  Pzzc_e : doExpand1(Pzz_c, bC),

  Sxx_c : calcInnerProdList(varsC, 1, bC, Pxxc_e + rhouxc_e*uxc_e),
  Sxy_c : calcInnerProdList(varsC, 1, bC, Pxyc_e + rhouxc_e*uyc_e),
  Sxz_c : calcInnerProdList(varsC, 1, bC, Pxzc_e + rhouxc_e*uzc_e),
  Syy_c : calcInnerProdList(varsC, 1, bC, Pyyc_e + rhouyc_e*uyc_e),
  Syz_c : calcInnerProdList(varsC, 1, bC, Pyzc_e + rhouyc_e*uzc_e),
  Szz_c : calcInnerProdList(varsC, 1, bC, Pzzc_e + rhouzc_e*uzc_e),

  printf(fh, "  double delta_c[10] = {0.0}; ~%"),
  printf(fh, "  delta_c[0] = rho_c[~a]; ~%", dir),
  printf(fh, "  delta_c[1] = rhoux_c[~a]; ~%", dir),
  printf(fh, "  delta_c[2] = rhouy_c[~a]; ~%", dir),
  printf(fh, "  delta_c[3] = rhouz_c[~a]; ~%", dir),
  /* Need to compute the actual slope of the stress tensor, which is a nonlinear product */
  printf(fh, "  delta_c[4] = ~a; ~%", float(expand(Sxx_c[dir+1]))),
  printf(fh, "  delta_c[5] = ~a; ~%", float(expand(Sxy_c[dir+1]))),
  printf(fh, "  delta_c[6] = ~a; ~%", float(expand(Sxz_c[dir+1]))),
  printf(fh, "  delta_c[7] = ~a; ~%", float(expand(Syy_c[dir+1]))),
  printf(fh, "  delta_c[8] = ~a; ~%", float(expand(Syz_c[dir+1]))),
  printf(fh, "  delta_c[9] = ~a; ~%", float(expand(Szz_c[dir+1]))),

  /* Rotate the slopes into the local coordinate system */
  printf(fh, "  double delta_c_local[10] = {0.0}; ~%"),
  printf(fh, "  gkyl_wv_eqn_rotate_to_local(wv_eqn, tau1, tau2, norm, delta_c, delta_c_local); ~%"),
  printf(fh, "~%"),

  /* Compute local waves and speeds at interface */
  printf(fh, "  double waves_slope_l[50] = {0.0}; ~%"),
  printf(fh, "  double waves_slope_c[50] = {0.0}; ~%"),  
  printf(fh, "  double waves_slope_r[50] = {0.0}; ~%"),  
  printf(fh, "  double speeds[5] = {0.0}; ~%"),
  printf(fh, "  double my_max_speed_l = gkyl_wv_eqn_waves(wv_eqn, GKYL_WV_HIGH_ORDER_FLUX, delta_l, q_c_local, q_c_local, waves_slope_l, speeds); ~%"),
  printf(fh, "  double my_max_speed_c = gkyl_wv_eqn_waves(wv_eqn, GKYL_WV_HIGH_ORDER_FLUX, delta_c_local, q_c_local, q_c_local, waves_slope_c, speeds); ~%"),
  printf(fh, "  double my_max_speed_r = gkyl_wv_eqn_waves(wv_eqn, GKYL_WV_HIGH_ORDER_FLUX, delta_r, q_c_local, q_c_local, waves_slope_r, speeds); ~%"), 
  printf(fh, "~%"),

  printf(fh, "  double mm[15] = {0.0}; ~%"),
  printf(fh, "  double slope[3] = {0.0}; ~%"), 

  printf(fh, "  mm[0] = minmod(waves_slope_c[1], waves_slope_l[1], waves_slope_r[1]); ~%"), 
  printf(fh, "  mm[1] = minmod(waves_slope_c[2], waves_slope_l[2], waves_slope_r[2]); ~%"), 
  printf(fh, "  mm[2] = minmod(waves_slope_c[3], waves_slope_l[3], waves_slope_r[3]); ~%"), 
  printf(fh, "  slope[0] += mm[0]; ~%"), 
  printf(fh, "  slope[1] += mm[1]; ~%"), 
  printf(fh, "  slope[2] += mm[2]; ~%"), 
  printf(fh, "~%"),

  printf(fh, "  mm[3] = minmod(waves_slope_c[11], waves_slope_l[11], waves_slope_r[11]); ~%"), 
  printf(fh, "  mm[4] = minmod(waves_slope_c[12], waves_slope_l[12], waves_slope_r[12]); ~%"), 
  printf(fh, "  mm[5] = minmod(waves_slope_c[13], waves_slope_l[13], waves_slope_r[13]); ~%"), 
  printf(fh, "  slope[0] += mm[3]; ~%"), 
  printf(fh, "  slope[1] += mm[4]; ~%"), 
  printf(fh, "  slope[2] += mm[5]; ~%"), 
  printf(fh, "~%"),

  printf(fh, "  mm[6] = minmod(waves_slope_c[21], waves_slope_l[21], waves_slope_r[21]); ~%"), 
  printf(fh, "  mm[7] = minmod(waves_slope_c[22], waves_slope_l[22], waves_slope_r[22]); ~%"), 
  printf(fh, "  mm[8] = minmod(waves_slope_c[23], waves_slope_l[23], waves_slope_r[23]); ~%"), 
  printf(fh, "  slope[0] += mm[6]; ~%"), 
  printf(fh, "  slope[1] += mm[7]; ~%"), 
  printf(fh, "  slope[2] += mm[8]; ~%"), 
  printf(fh, "~%"),

  printf(fh, "  mm[9] = minmod(waves_slope_c[31], waves_slope_l[31], waves_slope_r[31]); ~%"), 
  printf(fh, "  mm[10] = minmod(waves_slope_c[32], waves_slope_l[32], waves_slope_r[32]); ~%"), 
  printf(fh, "  mm[11] = minmod(waves_slope_c[33], waves_slope_l[33], waves_slope_r[33]); ~%"), 
  printf(fh, "  slope[0] += mm[9]; ~%"), 
  printf(fh, "  slope[1] += mm[10]; ~%"), 
  printf(fh, "  slope[2] += mm[11]; ~%"), 
  printf(fh, "~%"),

  printf(fh, "  mm[12] = minmod(waves_slope_c[41], waves_slope_l[41], waves_slope_r[41]); ~%"), 
  printf(fh, "  mm[13] = minmod(waves_slope_c[42], waves_slope_l[42], waves_slope_r[42]); ~%"), 
  printf(fh, "  mm[14] = minmod(waves_slope_c[43], waves_slope_l[43], waves_slope_r[43]); ~%"), 
  printf(fh, "  slope[0] += mm[12]; ~%"), 
  printf(fh, "  slope[1] += mm[13]; ~%"), 
  printf(fh, "  slope[2] += mm[14]; ~%"), 
  printf(fh, "~%"),

  printf(fh, "  // Rotate limited slope back to global coordinates ~%"), 
  printf(fh, "  rhoux_c[~a] = slope[0]*norm[0] + slope[1]*tau1[0] + slope[2]*tau2[0]; ~%", dir), 
  printf(fh, "  rhouy_c[~a] = slope[0]*norm[1] + slope[1]*tau1[1] + slope[2]*tau2[1]; ~%", dir), 
  printf(fh, "  rhouz_c[~a] = slope[0]*norm[2] + slope[1]*tau1[2] + slope[2]*tau2[2]; ~%", dir), 

  if (polyOrder > 1 or cdim > 1) then (
    printf(fh, "  for (int i = 0; i < 5; ++i) { ~%"),
    printf(fh, "    if (mm[3*i] != waves_slope_c[10*i+1]) { ~%"), 
    for j : 1 thru (NC-1-cdim) do (
      printf(fh, "      rhoux_c[~a] = 0.0; ~%", j+cdim)
    ),
    printf(fh, "    } ~%"), 
    printf(fh, "    if (mm[3*i+1] != waves_slope_c[10*i+2]) { ~%"), 
    for j : 1 thru (NC-1-cdim) do (
      printf(fh, "      rhouy_c[~a] = 0.0; ~%", j+cdim)
    ),
    printf(fh, "    } ~%"), 
    printf(fh, "    if (mm[3*i+2] != waves_slope_c[10*i+3]) { ~%"), 
    for j : 1 thru (NC-1-cdim) do (
      printf(fh, "      rhoux_c[~a] = 0.0; ~%", j+cdim)
    ),
    printf(fh, "    } ~%"), 
    printf(fh, "  } ~%")
  ),
  printf(fh, "} ~%")
)$
