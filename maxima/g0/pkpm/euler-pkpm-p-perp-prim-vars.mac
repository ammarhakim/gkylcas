/* This script generates the kernels for calculating the primitive variables in the
   fluid equations of the parallel-kinetic-perpendicular-moment (pkpm) model.
   Variables also used by kinetic equations.
   Includes u_i (flow velocity) and p_ij (pressure tensor), 
   T_ij (Temperature tensor/mass) for penalization, and T_perp_over_m (T_perp/m) */

load("modal-basis")$
load("out-scripts")$
fpprec : 24$

calcEulerPKPMPrimVars(fh, funcNm, cdim, basisFun, polyOrder) := block(
  [varsC, bC, NC, rhoux_e, rhouy_e, rhouz_e, 
   rho_e, p_par_e, p_perp_e, 
   bxbx_e, bxby_e, bxbz_e, byby_e, bybz_e, bzbz_e, rho_inv_e, 
   ux_c, uy_c, uz_c, 
   Pxx_c, Pxy_c, Pxz_c, Pyy_c, Pyz_c, Pzz_c, 
   Pxx_e, Pxy_e, Pxz_e, Pyy_e, Pyz_e, Pzz_e, 
   Txx_c, Tyy_c, Tzz_c, T_perp_over_m_c],

  kill(varsC, bC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),

  /* Number of basis monomials. */
  NC : length(bC),

  printf(fh, "#include <gkyl_euler_kernels.h> ~%"),
  printf(fh, "#include <gkyl_basis_~a_~ax_p~a_inv.h> ~%", basisFun, cdim, polyOrder),
  printf(fh, "GKYL_CU_DH void ~a_p~a(const double *bvar, const double *vlasov_pkpm_moms, const double *statevec, 
  double* u_i, double* p_ij, double* T_ij, double* T_perp_over_m) ~%{ ~%", funcNm, polyOrder),
  printf(fh, "  // bvar:             Magnetic field unit vector and tensor.~%"),
  printf(fh, "  // vlasov_pkpm_moms: [rho, p_parallel, p_perp], Moments computed from kinetic equation in pkpm model.~%"),
  printf(fh, "  // statevec:         [rho ux, rho uy, rho uz], Fluid input state vector.~%"),
  printf(fh, "  // u_i:              Output flow velocity [ux, uy, uz].~%"),
  printf(fh, "  // p_ij:             Output pressure tensor, p_ij = (p_parallel - p_perp)bb + p_perp I.~%"),
  printf(fh, "  // T_ij:             Output Temperature tensor for penalization T_ij = 3.0*p_ij/rho.~%"),
  printf(fh, "  // T_perp_over_m:    Output T_perp/m = p_perp/rho.~%"),
  printf(fh, "~%"),

  printf(fh, "  const double *rhoux = &statevec[~a]; ~%", 0*NC),
  printf(fh, "  const double *rhouy = &statevec[~a]; ~%", 1*NC),
  printf(fh, "  const double *rhouz = &statevec[~a]; ~%", 2*NC),

  printf(fh, "  // Parallel pressure is first component of pkpm moment array and unit tensor are last six components of bvar array.~%"),
  printf(fh, "  const double *rho = &vlasov_pkpm_moms[~a]; ~%", 0*NC),
  printf(fh, "  const double *p_parallel = &vlasov_pkpm_moms[~a]; ~%", 1*NC),
  printf(fh, "  const double *p_perp = &vlasov_pkpm_moms[~a]; ~%", 2*NC),
  printf(fh, "  const double *bxbx = &bvar[~a]; ~%", 3*NC),
  printf(fh, "  const double *bxby = &bvar[~a]; ~%", 4*NC),
  printf(fh, "  const double *bxbz = &bvar[~a]; ~%", 5*NC),
  printf(fh, "  const double *byby = &bvar[~a]; ~%", 6*NC),
  printf(fh, "  const double *bybz = &bvar[~a]; ~%", 7*NC),
  printf(fh, "  const double *bzbz = &bvar[~a]; ~%", 8*NC),
  printf(fh, "~%"),

  printf(fh, "  double *ux = &u_i[~a]; ~%", 0*NC),
  printf(fh, "  double *uy = &u_i[~a]; ~%", 1*NC),
  printf(fh, "  double *uz = &u_i[~a]; ~%", 2*NC),
  printf(fh, "~%"),

  printf(fh, "  double *Pxx = &p_ij[~a]; ~%", 0*NC),
  printf(fh, "  double *Pxy = &p_ij[~a]; ~%", 1*NC),
  printf(fh, "  double *Pxz = &p_ij[~a]; ~%", 2*NC),
  printf(fh, "  double *Pyy = &p_ij[~a]; ~%", 3*NC),
  printf(fh, "  double *Pyz = &p_ij[~a]; ~%", 4*NC),
  printf(fh, "  double *Pzz = &p_ij[~a]; ~%", 5*NC),
  printf(fh, "~%"),

  /* Only need the diagonal components for penalization */
  printf(fh, "  double *Txx = &T_ij[~a]; ~%", 0*NC),
  printf(fh, "  double *Tyy = &T_ij[~a]; ~%", 3*NC),
  printf(fh, "  double *Tzz = &T_ij[~a]; ~%", 5*NC),
  printf(fh, "~%"),

  /* Expansion of momentum density, perpendicular pressure, mass density, parallel pressure and magnetic field unit tensor */
  rhoux_e : doExpand1(rhoux, bC),
  rhouy_e : doExpand1(rhouy, bC),
  rhouz_e : doExpand1(rhouz, bC),
  p_perp_e : doExpand1(p_perp, bC),
  rho_e : doExpand1(rho, bC),
  p_par_e : doExpand1(p_parallel, bC),
  bxbx_e : doExpand1(bxbx, bC),
  bxby_e : doExpand1(bxby, bC),
  bxbz_e : doExpand1(bxbz, bC),
  byby_e : doExpand1(byby, bC),
  bybz_e : doExpand1(bybz, bC),
  bzbz_e : doExpand1(bzbz, bC),

  rho_inv_e : doExpand1(rho_inv, bC),

  printf(fh, "  double rho_inv[~a] = {0.0}; ~%", NC),
  printf(fh, "  ~a_~ax_p~a_inv(rho, rho_inv); ~%", basisFun, cdim, polyOrder),

  ux_c : calcInnerProdList(varsC, 1, bC, rho_inv_e*rhoux_e), 
  uy_c : calcInnerProdList(varsC, 1, bC, rho_inv_e*rhouy_e), 
  uz_c : calcInnerProdList(varsC, 1, bC, rho_inv_e*rhouz_e), 

  writeCExprs1(ux, ux_c),
  printf(fh, "~%"),
  writeCExprs1(uy, uy_c),
  printf(fh, "~%"),
  writeCExprs1(uz, uz_c),
  printf(fh, "~%"),

  Pxx_c : calcInnerProdList(varsC, 1, bC, (p_par_e - p_perp_e)*bxbx_e + p_perp_e), 
  Pxy_c : calcInnerProdList(varsC, 1, bC, (p_par_e - p_perp_e)*bxby_e), 
  Pxz_c : calcInnerProdList(varsC, 1, bC, (p_par_e - p_perp_e)*bxbz_e), 
  Pyy_c : calcInnerProdList(varsC, 1, bC, (p_par_e - p_perp_e)*byby_e + p_perp_e), 
  Pyz_c : calcInnerProdList(varsC, 1, bC, (p_par_e - p_perp_e)*bybz_e), 
  Pzz_c : calcInnerProdList(varsC, 1, bC, (p_par_e - p_perp_e)*bzbz_e + p_perp_e), 

  writeCExprs1(Pxx, Pxx_c),
  printf(fh, "~%"),
  writeCExprs1(Pxy, Pxy_c),
  printf(fh, "~%"),
  writeCExprs1(Pxz, Pxz_c),
  printf(fh, "~%"),
  writeCExprs1(Pyy, Pyy_c),
  printf(fh, "~%"),
  writeCExprs1(Pyz, Pyz_c),
  printf(fh, "~%"),
  writeCExprs1(Pzz, Pzz_c),

  Pxx_e : doExpand1(Pxx, bC),
  Pxy_e : doExpand1(Pxy, bC),
  Pxz_e : doExpand1(Pxz, bC),
  Pyy_e : doExpand1(Pyy, bC),
  Pyz_e : doExpand1(Pyz, bC),
  Pzz_e : doExpand1(Pzz, bC),

  Txx_c : calcInnerProdList(varsC, 1, bC, 3.0*rho_inv_e*Pxx_e),  
  Tyy_c : calcInnerProdList(varsC, 1, bC, 3.0*rho_inv_e*Pyy_e), 
  Tzz_c : calcInnerProdList(varsC, 1, bC, 3.0*rho_inv_e*Pzz_e), 

  writeCExprs1(Txx, Txx_c),
  printf(fh, "~%"),
  writeCExprs1(Tyy, Tyy_c),
  printf(fh, "~%"),
  writeCExprs1(Tzz, Tzz_c),
  printf(fh, "~%"),

  T_perp_over_m_c : calcInnerProdList(varsC, 1, bC, rho_inv_e*p_perp_e),  
  writeCExprs1(T_perp_over_m, T_perp_over_m_c),

  printf(fh, "} ~%")
)$
