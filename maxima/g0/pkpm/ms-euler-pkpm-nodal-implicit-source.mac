load("pkpm/euler-pkpm-dJdt-nodal-implicit-source")$
load(stringproc)$
/* This script calls the functions which generate the kernels for an implicit update of
   the source terms in the fluid equations of the PKPM system. 
   We construct a linear system of (3*num_species + 3) for each of the
   species current densities and the three components of the electric field. 
   This solve is performed nodally by converting the input modal coefficients 
   to a nodal basis. Note that performing the solve nodally incurs an aliasing 
   error for p>1 because the linear solve involves triple products of basis functions
   integral(w_i w_j w_k) which requires enough quadrature points to integrate a 3*p 
   polynomial. For p+1 nodes (for the exact conversion between the Gauss-Legendre nodal basis
   and our modal basis), 2*(p+1) - 1 polynomials can be integrated, so 3 for p=1, but only 
   5 for p=2 (when we need degree 6) or 7 for p=3 (when we need degree 9). */


/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 1$
minCdim_Ser : 1$
maxCdim_Ser : 3$

/* Tensor product basis. */
/* Note that Serendipity, p = 1, is equivalent to Tensor */
/* Thus no need to calculate p = 1 Tensor basis */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 2$
maxCdim_Tensor : 0$

/* ...... END OF USER INPUTS........ */

bName        : ["ser", "tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$

for bInd : 1 thru length(bName) do (
  for d : minCdim[bInd] thru maxCdim[bInd] do (
    minPolyOrderB : minPolyOrder[bInd],
    maxPolyOrderB : maxPolyOrder[bInd],
    if (d>1 and bName[bInd] = "ser") then maxPolyOrderB : 1,

    for polyOrder : minPolyOrderB thru maxPolyOrderB do (
      disp(printf(false,sconcat("Creating euler pkpm nodal implicit source funcs ",bName[bInd]," ~axp~a"),d,polyOrder)),
      fname : sconcat("~/max-out/euler_pkpm_em_coupling_nodal_set_", d, "x_", bName[bInd], "_p", polyOrder, ".c"),
      fh : openw(fname),
      funcName : sconcat("euler_pkpm_em_coupling_nodal_set_",  d, "x_", bName[bInd], "_p", polyOrder),
      setPKPMEMSourceNodalSolve(fh, funcName, d, bName[bInd], polyOrder),
      close(fh),

      fname : sconcat("~/max-out/euler_pkpm_em_coupling_nodal_copy_", d, "x_", bName[bInd], "_p", polyOrder, ".c"),
      fh : openw(fname),
      funcName : sconcat("euler_pkpm_em_coupling_nodal_copy_",  d, "x_", bName[bInd], "_p", polyOrder),
      copyPKPMEMSourceNodalSolve(fh, funcName, d, bName[bInd], polyOrder),
      close(fh)
    )
  )
);
