load("pkpm/vlasovPKPMPressureFuncs")$
load(stringproc)$
/* This script calls the functions which calculate the
   pressure force in the kinetic equation for parallel-kinetic-perpendicular-moment (pkpm) model. */

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
maxCdim_Ser : 3$

/* Tensor product basis. */
/* Note that Serendipity, p = 1, is equivalent to Tensor */
/* Thus no need to calculate p = 1 Tensor basis */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
maxCdim_Tensor : 1$

/* ...... END OF USER INPUTS........ */

bName        : ["ser", "tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$


for bInd : 1 thru length(bName) do (
  for d : minCdim[bInd] thru maxCdim[bInd] do (
    minPolyOrderB : minPolyOrder[bInd],
    maxPolyOrderB : maxPolyOrder[bInd],
    if (d=3 and maxPolyOrderB > 1) then maxPolyOrderB : 1,

    for polyOrder : minPolyOrderB thru maxPolyOrderB do (
      disp(printf(false,sconcat("Creating Vlasov PKPM pressure",bName[bInd]," ~axp~a"),d,polyOrder)),
      for dir : 1 thru d do ( 
        if (dir = 1) then fname : sconcat("~/max-out/vlasov_pkpm_pressure_x_", d, "x1v_", bName[bInd], "_p", polyOrder, ".c"),
        if (dir = 2) then fname : sconcat("~/max-out/vlasov_pkpm_pressure_y_", d, "x1v_", bName[bInd], "_p", polyOrder, ".c"),
        if (dir = 3) then fname : sconcat("~/max-out/vlasov_pkpm_pressure_z_", d, "x1v_", bName[bInd], "_p", polyOrder, ".c"),
        fh : openw(fname),
        funcName : sconcat("vlasov_pkpm_pressure"),
        printf(fh, "#include <gkyl_vlasov_pkpm_kernels.h> ~%"),
        if polyOrder = 1 then (  /* Force hybrid basis (p=2 in velocity space). */
          printf(fh, "#include <gkyl_basis_hyb_~ax~av_p1_surfx~a_eval_quad.h> ~%", d, 1, dir),
          printf(fh, "#include <gkyl_basis_hyb_~ax~av_p1_upwind_quad_to_modal.h> ~%", d, 1)
        ) elseif polyOrder > 1 then (
          printf(fh, "#include <gkyl_basis_~a_~ax_p~a_surfx~a_eval_quad.h> ~%", bName[bInd], d+1, polyOrder, dir),
          printf(fh, "#include <gkyl_basis_~a_~ax_p~a_upwind_quad_to_modal.h> ~%", bName[bInd], d+1, polyOrder)
        ),
        calcVlasovPKPMPressureUpdateInDir(dir, fh, funcName, d, 1, bName[bInd], polyOrder), 
        close(fh)
      )
    )
  )
);
