/* This script generates the kernels for the volume drag term
   contribution from Lenard Bernstein operator. */

load("modal-basis")$
load("out-scripts");
load(stringproc)$
fpprec : 24$

cidx(cdim)      := makelist(i,i,0,cdim-1)$
vidx1(cdim,vdim) := makelist(i,i,cdim,cdim+vdim-1)$
varsCAll : [x, y, z]$
vvarsAll : [vx, vy, vz]$

doMakeExprLstOff(vals, S, off) := makelist(if vals[i] # 0 then S[off+i-1] else 0, i, 1, length(vals))$

calcVlasovPKPMLBODragVolUpdater(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,NP,NC,zr,cid,vid1,dir,f_e,nu_e,
   incrDrag,alphaDrag_mid,alphaDrag_e,expr,i,alphaDrag_NoZero,
   alphaDrag_NoZero_e],

  /* Load basis of dimensionality requested. */
  [varsC,bC,varsP,bP] : loadPhaseBasis(basisFun, cdim, vdim, polyOrder),

  /* Identify polyOrder in velocity space as p=2 for p=1 since we force p=1 to
     mean hybrid basis. */
  pOrderV : polyOrder,
  if polyOrder=1 then ( pOrderV : 2 ),

  /* Number of basis monomials. */
  NP : length(bP),  NC : length(bC),

  /* Specify a point to evaluate alpha at for use in computing CFL */
  /* Here we choose to evaluate things in the middle of the cell, where
     coordinates = 0. */
  zr : makelist(varsP[d]=0, d, 1, cdim+1),

  printf(fh, "#include <gkyl_lbo_vlasov_kernels.h> ~%"),
  printf(fh, "GKYL_CU_DH double ~a(const double *w, const double *dxv, const double *nu, const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm),
  printf(fh, "  // w[~a]:   Cell-center coordinates. ~%", cdim+vdim),
  printf(fh, "  // dxv[~a]: Cell spacing. ~%", cdim+vdim),
  printf(fh, "  // nu:      collisionality. ~%"),
  printf(fh, "  // f:       Input distribution function.~%"),
  printf(fh, "  // out:     Incremented output ~%"),

  cid  : cidx(cdim),
  vid1 : vidx1(cdim,vdim),
  /* grid spacing in v_parallel and v_parallel coordinate */
  printf(fh, "  const double rdvpar = 2.0/dxv[~a]; ~%", cdim),
  printf(fh, "  const double dvpar = dxv[~a], wvpar = w[~a]; ~%", cdim, cdim),

  /* Access F_0 and T_perp G, first two Laguerre moments */
  printf(fh, "  const double *F_0 = &f[~a]; ~%", 0),
  printf(fh, "  const double *G_1 = &f[~a]; ~%", NP),  

  /* Access the components of out for the first two Laguerre moments */
  printf(fh, "  double *out_F_0 = &out[~a]; ~%", 0),
  printf(fh, "  double *out_G_1 = &out[~a]; ~%", NP),   

  /* Expand distribution functions F_0 and T_perp G in phase basis. */
  F_0_e : doExpand1(F_0, bP),
  G_1_e : doExpand1(G_1, bP),

  /* Expand collisionality in configuration basis. */
  nu_e     : doExpand1(nu, bC),

  /* alphaDrag = nu*v. */
  printf(fh, "  double alphaDrag[~a]; ~%", NP),
  incrDrag : 0,

  /* alphaDrag = rdvpar*< psi, -(nu*v) >. */
  alphaDrag_e : calcInnerProdList(varsP, 1, bP, -nu_e*(wvpar+0.5*dvpar*vx)),
  expr : gcfac(float(expand(radcan(rdvpar*alphaDrag_e)))),
  /* Write out the component of alphaDrag's phase space expansion. */
  printf(fh, "  // Expand rdvpar*(nu*vx) in phase basis.~%"),
  for i : 1 thru NP do (
      if expr[i] # 0.0 then printf(fh, "  ~a = ~a; ~%", alphaDrag[i-1], expr[i])
  ),
  printf(fh, "~%"),
  /* Zero out components of alpha which are empty. */
  alphaDrag_NoZero   : doMakeExprLstOff(alphaDrag_e, alphaDrag, a0),
  alphaDrag_NoZero_e : doExpand(alphaDrag_NoZero, bP),
  /* Evaluate alpha_vdim at zr to approximate
  max(abs(alpha_vdim))/(dv_i/(2p+1)). */
  cflFreq_mid : gcfac(float(expand(subst(zr,(2*pOrderV+1)*0.5*subst(a0=0,alphaDrag_NoZero_e))))),

  /* Volume increment from configuration space. */
  incrDrag_F_0 : incrDrag+subst(a0=0,calcInnerProdList(varsP, 1, diff(bP,vx), alphaDrag_NoZero_e*F_0_e)),
  incrDrag_G_1 : incrDrag+subst(a0=0,calcInnerProdList(varsP, 1, diff(bP,vx), alphaDrag_NoZero_e*G_1_e)),

  writeCIncrExprs1(out_F_0, incrDrag_F_0),
  writeCIncrExprs1(out_G_1, incrDrag_G_1),
  printf(fh, "~%"),

  printf(fh, "  return fabs(~a); ~%", cflFreq_mid),

  printf(fh, "~%"),
  printf(fh, "} ~%")
);


