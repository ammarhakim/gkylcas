/* This script generates the kernels for the surface term of the 
   advection in velocity space for the Vlasov equation
   in the parallel-kinetic-perpendicular-moment (pkpm) model */

load("modal-basis");
load("out-scripts");
load(stringproc)$
load("scifac")$
load("nodal_operations/nodal_functions")$
load("recovery")$
fpprec : 24$

cvars : [x, y, z]$
dx11 : [dx0, dx1, dx2]$

cidx(cdim)      := makelist(i,i,0,cdim-1)$
vidx(cdim,vdim) := makelist(i,i,cdim,cdim+vdim-1)$

/* Helper functions for expanding in basis functions a quantity we know should be sparse  */
/* For example, alpha, the phase space flow only depends on a few phase space coordinates */
doMakeExprLst(vals, S)  := makelist(if vals[i] # 0 then S[i-1] else 0, i, 1, length(vals))$

calcVlasovPKPMStreamUpdateInDir(dir, fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC, bC, varsP, bP, NP, pDim, cid, vid, cv, surfVars, bSurf, NSurf, surfNodes, numNodes, basisStr, 
   ul_e, vth_sql_e, bl_e, fl_e, uc_e, vth_sqc_e, bc_e, fc_e, ur_e, vth_sqr_e, br_e, fr_e, vTrans, 
   alpha_l_c, alpha_c_c, alpha_r_c, lst_alpha_l, lst_alpha_c, lst_alpha_r, alpha_rec_l, alpha_rec_r, 
   alphaSurf_l_c, alphaSurf_r_c, alst_l, alst_r, alphaSurf_l_e, alphaSurf_r_e, alphaOrd_l_n, alphaOrd_r_n, 
   fHatSurf_l_e, fHatSurf_r_e, Ghat_l_c, GhatNoZero_l, Ghat_l_e, GhatNoZero_r, Ghat_r_e, 
   incr_l, incr_r, lax_modal_l_e, lax_modal_r_e, incr_u_l, incr_u_r],

  [varsC,bC,varsP,bP] : loadPhaseBasis(basisFun, cdim, vdim, polyOrder),

  /* Number of basis monomials. */
  NP : length(bP),
  NC : length(bC),
  pDim : length(varsP),

  printf(fh, "GKYL_CU_DH void ~a~a_~ax~av_~a_p~a(const double *w, const double *dxv, 
     const double *bvarl, const double *bvarc, const double *bvarr, 
     const double *u_il, const double *u_ic, const double *u_ir, 
     const double *T_ijl, const double *T_ijc, const double *T_ijr,
     const double *fl, const double *fc, const double *fr, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, cvars[dir], cdim, vdim, basisFun, polyOrder),
  printf(fh, "  // w[NDIM]:                 Cell-center coordinates.~%"),
  printf(fh, "  // dxv[NDIM]:               Cell spacing.~%"),
  printf(fh, "  // bvarl/bvarc/bvarr:       Input magnetic field unit vector in left/center/right cells.~%"),
  printf(fh, "  // u_il/u_ic/u_ir:          Input bulk velocity (ux,uy,uz) in left/center/right cells.~%"),
  printf(fh, "  // T_ijl/T_ijc/T_ijr:       Input Temperature tensor/mass (for penalization) in left/center/right cells.~%"),
  printf(fh, "  // fl/fc/fr:                Input Distribution function [F_0, T_perp G = T_perp (F_1 - F_0)] in left/center/right cells.~%"),
  printf(fh, "  // out:                     Incremented distribution function in center cell.~%"),

  cid : cidx(cdim),
  vid : vidx(cdim,vdim),

  /* Surface contribution is defined as integral(phi^- Ghat) over the surface. */

  /* cv = variable in direction of surface update. */
  cv : varsP[dir],

  /* Surface variables to integrate over. */
  surfVars : delete(cv,varsP),

  printf(fh, "  const double dx1 = 2.0/dxv[~a]; ~%", dir-1),
  printf(fh, "  const double dvpar = dxv[~a], wvpar = w[~a]; ~%", cdim, cdim),
  printf(fh, "  const double *ul = &u_il[~a]; ~%", NC*(dir-1)),
  printf(fh, "  const double *uc = &u_ic[~a]; ~%", NC*(dir-1)),
  printf(fh, "  const double *ur = &u_ir[~a]; ~%", NC*(dir-1)),
  printf(fh, "  const double *bl = &bvarl[~a]; ~%", NC*(dir-1)),
  printf(fh, "  const double *bc = &bvarc[~a]; ~%", NC*(dir-1)),
  printf(fh, "  const double *br = &bvarr[~a]; ~%", NC*(dir-1)),
  printf(fh, "  // Get thermal velocity in direction of update for penalization vth^2 = 3.0*T_ii/m. ~%"),
  if (dir = 1) then (
    printf(fh, "  const double *vth_sql = &T_ijl[~a]; ~%", 0),
    printf(fh, "  const double *vth_sqc = &T_ijc[~a]; ~%", 0),
    printf(fh, "  const double *vth_sqr = &T_ijr[~a]; ~%", 0)
  )
  else if (dir = 2) then (
    printf(fh, "  const double *vth_sql = &T_ijl[~a]; ~%", NC*3),
    printf(fh, "  const double *vth_sqc = &T_ijc[~a]; ~%", NC*3),
    printf(fh, "  const double *vth_sqr = &T_ijr[~a]; ~%", NC*3)
  )
  else (
    printf(fh, "  const double *vth_sql = &T_ijl[~a]; ~%", NC*5),
    printf(fh, "  const double *vth_sqc = &T_ijc[~a]; ~%", NC*5),
    printf(fh, "  const double *vth_sqr = &T_ijr[~a]; ~%", NC*5)
  ),
  printf(fh, "~%"),

  /* Access F_0 and T_perp G, first two Laguerre moments */
  printf(fh, "  const double *F_0l = &fl[~a]; ~%", 0),
  printf(fh, "  const double *G_1l = &fl[~a]; ~%", NP),  
  printf(fh, "  const double *F_0c = &fc[~a]; ~%", 0),
  printf(fh, "  const double *G_1c = &fc[~a]; ~%", NP), 
  printf(fh, "  const double *F_0r = &fr[~a]; ~%", 0),
  printf(fh, "  const double *G_1r = &fr[~a]; ~%", NP), 

  /* Access the components of out for the first two Laguerre moments */
  printf(fh, "  double *out_F_0 = &out[~a]; ~%", 0),
  printf(fh, "  double *out_G_1 = &out[~a]; ~%", NP),    

  /* Expand bulk velocity, magnetic field unit vector, and distribution function 
      in left, center, and right cells */
  ul_e : doExpand1(ul,bC),
  vth_sql_e : doExpand1(vth_sql,bC),
  bl_e : doExpand1(bl,bC),

  uc_e : doExpand1(uc,bC),
  vth_sqc_e : doExpand1(vth_sqc,bC),
  bc_e : doExpand1(bc,bC),

  ur_e : doExpand1(ur,bC),
  vth_sqr_e : doExpand1(vth_sqr,bC),
  br_e : doExpand1(br,bC),

  /* Coordinate transformation for velocity space */
  vTrans : vx*dvpar/2+wvpar,

  /* Compute phase space flux due to parallel streaming in left, center, and right cells.
     The, write out phase space flux in left, center, and right cells
     for use in recovery procedure */
  printf(fh, "  double alpha_l[~a] = {0.0}; ~%", NP),
  printf(fh, "  double alpha_c[~a] = {0.0}; ~%", NP),
  printf(fh, "  double alpha_r[~a] = {0.0}; ~%", NP),

  alpha_l_c : calcInnerProdList(varsP, 1, bP, vTrans*bl_e),
  alpha_c_c : calcInnerProdList(varsP, 1, bP, vTrans*bc_e),
  alpha_r_c : calcInnerProdList(varsP, 1, bP, vTrans*br_e),

  writeCExprs1(alpha_l, alpha_l_c),
  printf(fh, "~%"),
  flush_output(fh),

  writeCExprs1(alpha_c, alpha_c_c),
  printf(fh, "~%"),
  flush_output(fh),

  writeCExprs1(alpha_r, alpha_r_c),
  printf(fh, "~%"),
  flush_output(fh),

  /* We use recovery to compute the interface phase space flux */
  /* Create safety lists for recovery */
  lst_alpha_l : doMakeExprLst(alpha_l_c, alpha_l), 
  lst_alpha_c : doMakeExprLst(alpha_c_c, alpha_c), 
  lst_alpha_r : doMakeExprLst(alpha_r_c, alpha_r),

  /* Generate surface basis. this produces the ndim-1 orthogonal basis with no cv dependence. */
  /* Also generate recovery, necessary basis strings, and surface nodes given by tensor product of Gauss-Legendre quadrature points */
  if polyOrder=1 then (  /* Force p=1 to use hybrid basis. */
    bSurf : basisFromVars("hyb",surfVars,polyOrder),

    alpha_rec_l : calcRecov2CellGen("hyb", cv, varsP, polyOrder,
      dg(lst_alpha_l), dg(lst_alpha_c)),
    alpha_rec_r : calcRecov2CellGen("hyb", cv, varsP, polyOrder,
      dg(lst_alpha_c), dg(lst_alpha_r)),

    surf_cdim : cdim-1,  surf_vdim : 1,
    surfNodes : gaussOrdHyb(1+1, surf_cdim, surf_vdim),

    basisStr : sconcat("hyb_", cdim, "x", vdim, "v", "_p", polyOrder)
  ) else (
    bSurf : basisFromVars(basisFun,surfVars,polyOrder), 

    alpha_rec_l : calcRecov2CellGen(basisFun, cv, varsP, polyOrder,
      dg(lst_alpha_l), dg(lst_alpha_c)),
    alpha_rec_r : calcRecov2CellGen(basisFun, cv, varsP, polyOrder,
      dg(lst_alpha_c), dg(lst_alpha_r)), 

    surfNodes : gaussOrd(polyOrder+1, pDim-1),

    basisStr : sconcat(basisFun, "_", cdim+vdim, "x", "_p", polyOrder)
  ),
  NSurf : length(bSurf),
  numNodes : length(surfNodes),

  /* Project alpha evaluated at interior surface onto surf basis. */
  alphaSurf_l_c : fullratsimp(innerProd(surfVars, 1, bSurf, subst(cv=0, alpha_rec_l))),
  alphaSurf_r_c : fullratsimp(innerProd(surfVars, 1, bSurf, subst(cv=0, alpha_rec_r))),
  alst_l        : doMakeExprLst(alphaSurf_l_c, alphaSurf_l),
  alst_r        : doMakeExprLst(alphaSurf_r_c, alphaSurf_r),
  alphaSurf_l_e : doExpand(alst_l, bSurf),
  alphaSurf_r_e : doExpand(alst_r, bSurf),
  printf(fh, "  double alphaSurf_l[~a] = {0.0}; ~%", NSurf),
  writeCExprs1(alphaSurf_l, alphaSurf_l_c),
  printf(fh, "~%"),
  printf(fh, "  double alphaSurf_r[~a] = {0.0}; ~%", NSurf),
  writeCExprs1(alphaSurf_r, alphaSurf_r_c),
  printf(fh, "~%"),

  /* Evaluate alpha at ordinates.
     Note: alphaSurf_e is already a surface expansion. 
     In addition, it is continuous. */
  alphaOrd_l_n : gcfac(float(evAtNodes(alphaSurf_l_e,surfNodes,surfVars))),
  alphaOrd_r_n : gcfac(float(evAtNodes(alphaSurf_r_e,surfNodes,surfVars))),

  printf(fh, "  double F_0_UpwindQuad_l[~a] = {0.0};~%", numNodes),
  printf(fh, "  double F_0_UpwindQuad_r[~a] = {0.0};~%", numNodes),
  printf(fh, "  double F_0_Upwind_l[~a] = {0.0};~%", NSurf),
  printf(fh, "  double F_0_Upwind_r[~a] = {0.0};~%", NSurf),
  printf(fh, "  double Ghat_F_0_l[~a] = {0.0}; ~%", NSurf),
  printf(fh, "  double Ghat_F_0_r[~a] = {0.0}; ~%", NSurf),

  printf(fh, "  double G_1_UpwindQuad_l[~a] = {0.0};~%", numNodes),
  printf(fh, "  double G_1_UpwindQuad_r[~a] = {0.0};~%", numNodes),
  printf(fh, "  double G_1_Upwind_l[~a] = {0.0};~%", NSurf),
  printf(fh, "  double G_1_Upwind_r[~a] = {0.0};~%", NSurf),
  printf(fh, "  double Ghat_G_1_l[~a] = {0.0}; ~%", NSurf),
  printf(fh, "  double Ghat_G_1_r[~a] = {0.0}; ~%", NSurf),
  printf(fh, "~%"),

  /* Check sign of each quadrature point and choose appropriate distribution function at 
     quadrature points. 
     If alphaSurf_l > 0, need f_l (at +1), else f_c (at -1). 
     If alphaSurf_r > 0, need f_c (at +1), else f_r (at -1). */

  for i : 1 thru length(alphaOrd_l_n) do (
    printf(fh, "  if (~a > 0) { ~%", alphaOrd_l_n[i]),
    printf(fh, "    F_0_UpwindQuad_l[~a] = ~a_surfx~a_eval_quad_node_~a_r(F_0l); ~%", i-1, basisStr, dir, i-1),
    printf(fh, "    G_1_UpwindQuad_l[~a] = ~a_surfx~a_eval_quad_node_~a_r(G_1l); ~%", i-1, basisStr, dir, i-1),
    printf(fh, "  } else { ~%"),
    printf(fh, "    F_0_UpwindQuad_l[~a] = ~a_surfx~a_eval_quad_node_~a_l(F_0c); ~%", i-1, basisStr, dir, i-1),
    printf(fh, "    G_1_UpwindQuad_l[~a] = ~a_surfx~a_eval_quad_node_~a_l(G_1c); ~%", i-1, basisStr, dir, i-1),
    printf(fh, "  } ~%"),
    printf(fh, "  if (~a > 0) { ~%", alphaOrd_r_n[i]),
    printf(fh, "    F_0_UpwindQuad_r[~a] = ~a_surfx~a_eval_quad_node_~a_r(F_0c); ~%", i-1, basisStr, dir, i-1),
    printf(fh, "    G_1_UpwindQuad_r[~a] = ~a_surfx~a_eval_quad_node_~a_r(G_1c); ~%", i-1, basisStr, dir, i-1),
    printf(fh, "  } else { ~%"),
    printf(fh, "    F_0_UpwindQuad_r[~a] = ~a_surfx~a_eval_quad_node_~a_l(F_0r); ~%", i-1, basisStr, dir, i-1),
    printf(fh, "    G_1_UpwindQuad_r[~a] = ~a_surfx~a_eval_quad_node_~a_l(G_1r); ~%", i-1, basisStr, dir, i-1),
    printf(fh, "  } ~%")
  ),
  printf(fh, "~%"),
  printf(fh, "  // Project tensor nodal quadrature basis back onto modal basis. ~%"),
  if polyOrder=1 then (  /* Force p=1 to use hybrid basis. */
    printf(fh, "  ~a_xdir_upwind_quad_to_modal(F_0_UpwindQuad_l, F_0_Upwind_l); ~%", basisStr),
    printf(fh, "  ~a_xdir_upwind_quad_to_modal(F_0_UpwindQuad_r, F_0_Upwind_r); ~%", basisStr),
    printf(fh, "  ~a_xdir_upwind_quad_to_modal(G_1_UpwindQuad_l, G_1_Upwind_l); ~%", basisStr),
    printf(fh, "  ~a_xdir_upwind_quad_to_modal(G_1_UpwindQuad_r, G_1_Upwind_r); ~%", basisStr)
  ) else (
    printf(fh, "  ~a_upwind_quad_to_modal(F_0_UpwindQuad_l, F_0_Upwind_l); ~%", basisStr),
    printf(fh, "  ~a_upwind_quad_to_modal(F_0_UpwindQuad_r, F_0_Upwind_r); ~%", basisStr),
    printf(fh, "  ~a_upwind_quad_to_modal(G_1_UpwindQuad_l, G_1_Upwind_l); ~%", basisStr),
    printf(fh, "  ~a_upwind_quad_to_modal(G_1_UpwindQuad_r, G_1_Upwind_r); ~%", basisStr)
  ),
  printf(fh, "~%"),

  /* Create expansions of F_0_hat, G_1_hat (upwinded first two Laguerre moments) on the left and right in the surface basis. */
  F_0_HatSurf_l_e : doExpand1(F_0_Upwind_l, bSurf),
  F_0_HatSurf_r_e : doExpand1(F_0_Upwind_r, bSurf),
  G_1_HatSurf_l_e : doExpand1(G_1_Upwind_l, bSurf),
  G_1_HatSurf_r_e : doExpand1(G_1_Upwind_r, bSurf),

  /* Print C exprs for Ghat across surface boundary, (LEFT BOUNDARY) */
  Ghat_F_0_l_c : fullratsimp(innerProd(surfVars, alphaSurf_l_e, bSurf, F_0_HatSurf_l_e)),
  Ghat_G_1_l_c : fullratsimp(innerProd(surfVars, alphaSurf_l_e, bSurf, G_1_HatSurf_l_e)),
  writeCExprs1(Ghat_F_0_l, Ghat_F_0_l_c),
  writeCExprs1(Ghat_G_1_l, Ghat_G_1_l_c),
  printf(fh, "~%"),
  flush_output(fh),

  /* Print C exprs for Ghat across surface boundary, (RIGHT BOUNDARY) */
  Ghat_F_0_r_c : fullratsimp(innerProd(surfVars, alphaSurf_r_e, bSurf, F_0_HatSurf_r_e)),
  Ghat_G_1_r_c : fullratsimp(innerProd(surfVars, alphaSurf_r_e, bSurf, G_1_HatSurf_r_e)),
  writeCExprs1(Ghat_F_0_r, Ghat_F_0_r_c),
  writeCExprs1(Ghat_G_1_r, Ghat_G_1_r_c),
  printf(fh, "~%"),
  flush_output(fh),

  /* Expand G_hat in surface basis. */
  Ghat_F_0_l_e     : doExpand1(Ghat_F_0_l, bSurf),
  Ghat_G_1_l_e     : doExpand1(Ghat_G_1_l, bSurf),
  Ghat_F_0_r_e     : doExpand1(Ghat_F_0_r, bSurf),
  Ghat_G_1_r_e     : doExpand1(Ghat_G_1_r, bSurf),

  /* Compute surface contribution integral(phi^- Ghat) on the left and right. */
  incr_F_0_l : calcInnerProdList(surfVars, 1, subst(cv=-1.0, bP), Ghat_F_0_l_e),
  incr_F_0_r : calcInnerProdList(surfVars, -1, subst(cv=1.0, bP), Ghat_F_0_r_e),
  incr_G_1_l : calcInnerProdList(surfVars, 1, subst(cv=-1.0, bP), Ghat_G_1_l_e),
  incr_G_1_r : calcInnerProdList(surfVars, -1, subst(cv=1.0, bP), Ghat_G_1_r_e),
  writeCIncrExprsCollect1lhsc(out_F_0, dx1*incr_F_0_l + dx1*incr_F_0_r),  
  writeCIncrExprsCollect1lhsc(out_G_1, dx1*incr_G_1_l + dx1*incr_G_1_r),  
  printf(fh, "~%"),
  flush_output(fh),

  printf(fh, "  double alpha_u_l[~a] = {0.0}; ~%", NP),
  printf(fh, "  double alpha_u_c[~a] = {0.0}; ~%", NP),
  printf(fh, "  double alpha_u_r[~a] = {0.0}; ~%", NP),

  printf(fh, "  double vth_sq_l[~a] = {0.0}; ~%", NP),
  printf(fh, "  double vth_sq_c[~a] = {0.0}; ~%", NP),
  printf(fh, "  double vth_sq_r[~a] = {0.0}; ~%", NP),

  alpha_u_l_c : calcInnerProdList(varsP, 1, bP, ul_e),
  alpha_u_c_c : calcInnerProdList(varsP, 1, bP, uc_e),
  alpha_u_r_c : calcInnerProdList(varsP, 1, bP, ur_e),

  vth_sq_l_c : calcInnerProdList(varsP, 1, bP, vth_sql_e),
  vth_sq_c_c : calcInnerProdList(varsP, 1, bP, vth_sqc_e),
  vth_sq_r_c : calcInnerProdList(varsP, 1, bP, vth_sqr_e),

  writeCExprs1(alpha_u_l, alpha_u_l_c),
  printf(fh, "~%"),
  flush_output(fh),

  writeCExprs1(alpha_u_c, alpha_u_c_c),
  printf(fh, "~%"),
  flush_output(fh),

  writeCExprs1(alpha_u_r, alpha_u_r_c),
  printf(fh, "~%"),
  flush_output(fh),

  writeCExprs1(vth_sq_l, vth_sq_l_c),
  printf(fh, "~%"),
  flush_output(fh),

  writeCExprs1(vth_sq_c, vth_sq_c_c),
  printf(fh, "~%"),
  flush_output(fh),

  writeCExprs1(vth_sq_r, vth_sq_r_c),
  printf(fh, "~%"),
  flush_output(fh),

  printf(fh, "  double lax_F_0_quad_l[~a] = {0.0};~%", numNodes),
  printf(fh, "  double lax_F_0_quad_r[~a] = {0.0};~%", numNodes),
  printf(fh, "  double lax_F_0_modal_l[~a] = {0.0};~%", NSurf),
  printf(fh, "  double lax_F_0_modal_r[~a] = {0.0};~%", NSurf),
  printf(fh, "  double lax_G_1_quad_l[~a] = {0.0};~%", numNodes),
  printf(fh, "  double lax_G_1_quad_r[~a] = {0.0};~%", numNodes),
  printf(fh, "  double lax_G_1_modal_l[~a] = {0.0};~%", NSurf),
  printf(fh, "  double lax_G_1_modal_r[~a] = {0.0};~%", NSurf),
  printf(fh, "~%"),

  printf(fh, "  double alpha_l_r = 0.0; ~%"),
  printf(fh, "  double alpha_c_l = 0.0; ~%"),
  printf(fh, "  double alpha_c_r = 0.0; ~%"),
  printf(fh, "  double alpha_r_l = 0.0; ~%"),

  printf(fh, "  double alphaQuad_l = 0.0; ~%"),
  printf(fh, "  double alphaQuad_r = 0.0; ~%"),
  printf(fh, "~%"),

  printf(fh, "  double vth_sq_l_r = 0.0; ~%"),
  printf(fh, "  double vth_sq_c_l = 0.0; ~%"),
  printf(fh, "  double vth_sq_c_r = 0.0; ~%"),
  printf(fh, "  double vth_sq_r_l = 0.0; ~%"),

  printf(fh, "  double vthQuad_l = 0.0; ~%"),
  printf(fh, "  double vthQuad_r = 0.0; ~%"),
  printf(fh, "~%"),

  printf(fh, "  double max_speed_l = 0.0; ~%"),
  printf(fh, "  double max_speed_r = 0.0; ~%"),
  printf(fh, "~%"),

  printf(fh, "  double F_0_l_r = 0.0; ~%"),
  printf(fh, "  double F_0_c_l = 0.0; ~%"),
  printf(fh, "  double F_0_c_r = 0.0; ~%"),
  printf(fh, "  double F_0_r_l = 0.0; ~%"),
  printf(fh, "  double G_1_l_r = 0.0; ~%"),
  printf(fh, "  double G_1_c_l = 0.0; ~%"),
  printf(fh, "  double G_1_c_r = 0.0; ~%"),
  printf(fh, "  double G_1_r_l = 0.0; ~%"),
  printf(fh, "~%"),

  for i : 1 thru numNodes do (
    printf(fh, "  alpha_l_r = ~a_surfx~a_eval_quad_node_~a_r(alpha_u_l); ~%", basisStr, dir, i-1),
    printf(fh, "  alpha_c_l = ~a_surfx~a_eval_quad_node_~a_l(alpha_u_c); ~%", basisStr, dir, i-1),
    printf(fh, "  alpha_c_r = ~a_surfx~a_eval_quad_node_~a_r(alpha_u_c); ~%", basisStr, dir, i-1),
    printf(fh, "  alpha_r_l = ~a_surfx~a_eval_quad_node_~a_l(alpha_u_r); ~%", basisStr, dir, i-1),

    printf(fh, "  alphaQuad_l = fmax(fabs(alpha_l_r), fabs(alpha_c_l)); ~%"),
    printf(fh, "  alphaQuad_r = fmax(fabs(alpha_c_r), fabs(alpha_r_l)); ~%"),

    printf(fh, "  vth_sq_l_r = ~a_surfx~a_eval_quad_node_~a_r(vth_sq_l); ~%", basisStr, dir, i-1),
    printf(fh, "  vth_sq_c_l = ~a_surfx~a_eval_quad_node_~a_l(vth_sq_c); ~%", basisStr, dir, i-1),
    printf(fh, "  vth_sq_c_r = ~a_surfx~a_eval_quad_node_~a_r(vth_sq_c); ~%", basisStr, dir, i-1),
    printf(fh, "  vth_sq_r_l = ~a_surfx~a_eval_quad_node_~a_l(vth_sq_r); ~%", basisStr, dir, i-1),

    printf(fh, "  vthQuad_l = fmax(sqrt(fabs(vth_sq_l_r)), sqrt(fabs(vth_sq_c_l))); ~%"),
    printf(fh, "  vthQuad_r = fmax(sqrt(fabs(vth_sq_c_r)), sqrt(fabs(vth_sq_r_l))); ~%"),

    printf(fh, "  max_speed_l = alphaQuad_l + vthQuad_l; ~%"),
    printf(fh, "  max_speed_r = alphaQuad_r + vthQuad_r; ~%"),

    printf(fh, "  F_0_l_r = ~a_surfx~a_eval_quad_node_~a_r(F_0l); ~%", basisStr, dir, i-1),
    printf(fh, "  F_0_c_l = ~a_surfx~a_eval_quad_node_~a_l(F_0c); ~%", basisStr, dir, i-1),
    printf(fh, "  F_0_c_r = ~a_surfx~a_eval_quad_node_~a_r(F_0c); ~%", basisStr, dir, i-1),
    printf(fh, "  F_0_r_l = ~a_surfx~a_eval_quad_node_~a_l(F_0r); ~%", basisStr, dir, i-1),

    printf(fh, "  lax_F_0_quad_l[~a] = 0.5*(alpha_l_r*F_0_l_r + alpha_c_l*F_0_c_l) - 0.5*max_speed_l*(F_0_c_l - F_0_l_r); ~%", i-1),
    printf(fh, "  lax_F_0_quad_r[~a] = 0.5*(alpha_c_r*F_0_c_r + alpha_r_l*F_0_r_l) - 0.5*max_speed_r*(F_0_r_l - F_0_c_r); ~%", i-1),

    printf(fh, "  G_1_l_r = ~a_surfx~a_eval_quad_node_~a_r(G_1l); ~%", basisStr, dir, i-1),
    printf(fh, "  G_1_c_l = ~a_surfx~a_eval_quad_node_~a_l(G_1c); ~%", basisStr, dir, i-1),
    printf(fh, "  G_1_c_r = ~a_surfx~a_eval_quad_node_~a_r(G_1c); ~%", basisStr, dir, i-1),
    printf(fh, "  G_1_r_l = ~a_surfx~a_eval_quad_node_~a_l(G_1r); ~%", basisStr, dir, i-1),

    printf(fh, "  lax_G_1_quad_l[~a] = 0.5*(alpha_l_r*G_1_l_r + alpha_c_l*G_1_c_l) - 0.5*max_speed_l*(G_1_c_l - G_1_l_r); ~%", i-1),
    printf(fh, "  lax_G_1_quad_r[~a] = 0.5*(alpha_c_r*G_1_c_r + alpha_r_l*G_1_r_l) - 0.5*max_speed_r*(G_1_r_l - G_1_c_r); ~%", i-1),

    printf(fh, "~%")
  ),

  printf(fh, "  // Project tensor nodal quadrature basis back onto modal basis. ~%"),
  if polyOrder=1 then (  /* Force p=1 to use hybrid basis. */
    printf(fh, "  ~a_xdir_upwind_quad_to_modal(lax_F_0_quad_l, lax_F_0_modal_l); ~%", basisStr),
    printf(fh, "  ~a_xdir_upwind_quad_to_modal(lax_F_0_quad_r, lax_F_0_modal_r); ~%", basisStr),
    printf(fh, "  ~a_xdir_upwind_quad_to_modal(lax_G_1_quad_l, lax_G_1_modal_l); ~%", basisStr),
    printf(fh, "  ~a_xdir_upwind_quad_to_modal(lax_G_1_quad_r, lax_G_1_modal_r); ~%", basisStr)
  ) else (
    printf(fh, "  ~a_upwind_quad_to_modal(lax_F_0_quad_l, lax_F_0_modal_l); ~%", basisStr),
    printf(fh, "  ~a_upwind_quad_to_modal(lax_F_0_quad_r, lax_F_0_modal_r); ~%", basisStr),
    printf(fh, "  ~a_upwind_quad_to_modal(lax_G_1_quad_l, lax_G_1_modal_l); ~%", basisStr),
    printf(fh, "  ~a_upwind_quad_to_modal(lax_G_1_quad_r, lax_G_1_modal_r); ~%", basisStr)
  ),
  printf(fh, "~%"),

  /* Create expansions of Lax fluxes on the left and right in the surface basis. */
  lax_F_0_modal_l_e : doExpand1(lax_F_0_modal_l, bSurf),
  lax_F_0_modal_r_e : doExpand1(lax_F_0_modal_r, bSurf),
  lax_G_1_modal_l_e : doExpand1(lax_G_1_modal_l, bSurf),
  lax_G_1_modal_r_e : doExpand1(lax_G_1_modal_r, bSurf),

  /* Compute surface contribution integral(phi^- Ghat) on the left and right. */
  incr_F_0_u_l : calcInnerProdList(surfVars, 1, subst(cv=-1.0, bP), lax_F_0_modal_l_e),
  incr_F_0_u_r : calcInnerProdList(surfVars, -1, subst(cv=1.0, bP), lax_F_0_modal_r_e),
  incr_G_1_u_l : calcInnerProdList(surfVars, 1, subst(cv=-1.0, bP), lax_G_1_modal_l_e),
  incr_G_1_u_r : calcInnerProdList(surfVars, -1, subst(cv=1.0, bP), lax_G_1_modal_r_e),
  writeCIncrExprsCollect1lhsc(out_F_0, dx1*incr_F_0_u_l + dx1*incr_F_0_u_r),  
  writeCIncrExprsCollect1lhsc(out_G_1, dx1*incr_G_1_u_l + dx1*incr_G_1_u_r),  
  printf(fh, "~%"),

  printf(fh, "~%"),

  printf(fh, "} ~%")
);

calcVlasovPKPMAccelUpdate(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC, bC, varsP, bP, NP, NC, pDim, cid, vid, 
   p_force_e, bb_grad_u_e, div_b_e, p_perp_div_b_e, acc_e, 
   surfVars, bSurf, surf_cdim, surf_vdim, surfNodes, basisStr, numNodes, NSurf, 
   alphaSurf_l_c, alphaSurf_r_c, alst_l, alst_r, alphaSurf_l_e, alphaSurf_r_e,
   div_b_Surf_c, div_b_lst, div_b_Surf_e, 
   p_perp_div_b_Surf_c, p_perp_div_b_lst, p_perp_div_b_Surf_e, 
   alphaOrd_l_n, alphaOrd_r_n, div_b_Ord_n, 
   F_0_HatSurf_l_e, G_1_HatSurf_l_e, F_0_HatSurf_r_e, G_1_HatSurf_r_e, 
   F_0_div_b_HatSurf_l_e, G_1_div_b_HatSurf_l_e, F_0_div_b_HatSurf_r_e, G_1_div_b_HatSurf_r_e, 
   Ghat_F_0_l_c, Ghat_G_1_l_c, Ghat_F_0_r_c, Ghat_G_1_r_c, 
   Ghat_F_0_div_b_l_c, Ghat_G_1_div_b_l_c, Ghat_F_0_div_b_r_c, Ghat_G_1_div_b_r_c, 
   Ghat_F_0_l_e, Ghat_G_1_l_e, Ghat_F_0_r_e, Ghat_G_1_r_e, 
   Ghat_F_0_div_b_l_e, Ghat_G_1_div_b_l_e, Ghat_F_0_div_b_r_e, Ghat_G_1_div_b_r_e, 
   incr_F_0_l, incr_G_1_l, incr_F_0_r, incr_G_1_r, 
   incr_F_0_div_b_l, incr_G_1_div_b_l, incr_F_0_div_b_r, incr_G_1_div_b_r],

  [varsC,bC,varsP,bP] : loadPhaseBasis(basisFun, cdim, vdim, polyOrder),

  /* Number of basis monomials. */
  NP : length(bP),
  NC : length(bC),
  pDim  : length(varsP),

  printf(fh, "GKYL_CU_DH void ~a_~ax~av_~a_p~a(const double *w, const double *dxv, 
     const double *bb_grad_u, const double *p_force, const double *div_b, const double *p_perp_div_b, 
     const double *g_dist_sourcel, const double *g_dist_sourcec, const double *g_dist_sourcer, 
     const double *fl, const double *fc, const double *fr, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, cdim, vdim, basisFun, polyOrder),
  printf(fh, "  // w[NDIM]:            Cell-center coordinates.~%"),
  printf(fh, "  // dxv[NDIM]:          Cell spacing.~%"),
  printf(fh, "  // p_force:            total pressure force = 1/rho (div(p_parallel b_hat) - p_perp div(b)).~%"),
  printf(fh, "  // bb_grad_u:          bb : grad(u).~%"),
  printf(fh, "  // div_b:              divergence of the magnetic field unit vector.~%"),
  printf(fh, "  // p_perp_div_b:       2*p_perp/rho*div(b).~%"),  
  printf(fh, "  // g_dist_sourcel/c/r: 2*T_perp/m*G - T_perp/m*F_0 in left/center/right cells.~%"), 
  printf(fh, "  // fl/fc/fr:           Input Distribution function [F_0, T_perp/m G = T_perp/m (F_0 - F_1)] in left/center/right cells.~%"),
  printf(fh, "  // out:                Incremented distribution function in center cell.~%"),

  cid : cidx(cdim),
  vid : vidx(cdim,vdim),

  /* grid spacing in v_parallel and v_parallel coordinate */
  printf(fh, "  const double dv1par = 2.0/dxv[~a]; ~%", cdim),
  printf(fh, "  const double dvpar = dxv[~a], wvpar = w[~a]; ~%", cdim, cdim),

  /* Access F_0 and T_perp/m G, first two Laguerre moments */
  printf(fh, "  const double *F_0l = &fl[~a]; ~%", 0),
  printf(fh, "  const double *G_1l = &fl[~a]; ~%", NP),  
  printf(fh, "  const double *F_0c = &fc[~a]; ~%", 0),
  printf(fh, "  const double *G_1c = &fc[~a]; ~%", NP), 
  printf(fh, "  const double *F_0r = &fr[~a]; ~%", 0),
  printf(fh, "  const double *G_1r = &fr[~a]; ~%", NP),
  printf(fh, "~%"),

  /* Access source distribution functions for mirror force */
  printf(fh, "  const double *F_0_sourcel = &g_dist_sourcel[~a]; ~%", 0),
  printf(fh, "  const double *G_1_sourcel = &g_dist_sourcel[~a]; ~%", NP),  
  printf(fh, "  const double *F_0_sourcec = &g_dist_sourcec[~a]; ~%", 0),
  printf(fh, "  const double *G_1_sourcec = &g_dist_sourcec[~a]; ~%", NP), 
  printf(fh, "  const double *F_0_sourcer = &g_dist_sourcer[~a]; ~%", 0),
  printf(fh, "  const double *G_1_sourcer = &g_dist_sourcer[~a]; ~%", NP),
  printf(fh, "~%"),

  /* Access pressure force for F_0 ( 1/rho div(p_parallel b_hat) ) and G_1 ( 1/rho div(p_parallel b_hat) + 3*T_perp/m*div(b) ) */
  printf(fh, "  const double *p_force_F_0 = &p_force[~a]; ~%", 0),
  printf(fh, "  const double *p_force_G_1 = &p_force[~a]; ~%", NC),
  printf(fh, "~%"),

  /* Access the components of out for the first two Laguerre moments */
  printf(fh, "  double *out_F_0 = &out[~a]; ~%", 0),
  printf(fh, "  double *out_G_1 = &out[~a]; ~%", NP),  
  printf(fh, "~%"),

  /* Expand pressure force for F_0 ( 1/rho div(p_parallel b) ), pressure force for G_1 ( 1/rho div(p_parallel b) + T_perp/m*div(b) ), 
     bb : grad(u), div(b), and div_b in configuration space basis */
  p_force_F_0_e : doExpand1(p_force_F_0, bC),
  p_force_G_1_e : doExpand1(p_force_G_1, bC),
  bb_grad_u_e : doExpand1(bb_grad_u, bC),
  div_b_e : doExpand1(div_b, bC),

  /* alpha_vdim_F_0 = 1/rho div(p_parallel b_hat) - v_parallel bb : grad(u)] 
     alpha_vdim_G_1 = 1/rho div(p_parallel b_hat) + 3 T_perp/m div(b) - v_parallel bb : grad(u)] 
     alpha_vdim consolidated as alpha_vdim = p_force - v_parallel bb_grad_u (pressure forces and bb_grad_u pre-computed) */
  acc_F_0_e : p_force_F_0_e - (vx*dvpar/2.0+wvpar)*bb_grad_u_e, 
  acc_G_1_e : p_force_G_1_e - (vx*dvpar/2.0+wvpar)*bb_grad_u_e, 

  /* Surface contribution is defined as integral(phi^- Ghat) over the surface. */

  /* Surface variables to integrate over. */
  surfVars : delete(vx,varsP),

  /* Generate surface basis. this produces the ndim-1 orthogonal basis with no vx dependence. */
  /* Also generate necessary basis strings, and surface nodes given by tensor product of Gauss-Legendre quadrature points */
  if polyOrder=1 then (  /* Force p=1 to use hybrid basis. */
    bSurf : basisFromVars("hyb",surfVars,polyOrder),
    surf_cdim : cdim,  surf_vdim : 0,
    surfNodes : gaussOrdHyb(1+1, surf_cdim, surf_vdim),

    basisStr : sconcat("hyb_", cdim, "x", vdim, "v", "_p", polyOrder)
  ) else (
    bSurf : basisFromVars(basisFun,surfVars,polyOrder),
    surfNodes : gaussOrd(polyOrder+1, pDim-1),

    basisStr : sconcat(basisFun, "_", cdim+vdim, "x", "_p", polyOrder)
  ),
  numNodes : length(surfNodes),
  NSurf : length(bSurf),

  /* Project alpha_vdim for F_0 and G_1 evaluated at interior surface onto surf basis. */
  clst : [dvpar, wvpar],
  alphaSurf_F_0_l_c : fullratsimp(innerProd(surfVars, 1, bSurf, subst(vx=-1,acc_F_0_e))),
  alphaSurf_F_0_r_c : fullratsimp(innerProd(surfVars, 1, bSurf, subst(vx=1,acc_F_0_e))),
  alst_F_0_l        : doMakeExprLst(alphaSurf_F_0_l_c, alphaSurf_F_0_l),
  alst_F_0_r        : doMakeExprLst(alphaSurf_F_0_r_c, alphaSurf_F_0_r),
  alphaSurf_F_0_l_e : doExpand(alst_F_0_l, bSurf),
  alphaSurf_F_0_r_e : doExpand(alst_F_0_r, bSurf),
  printf(fh, "  double alphaSurf_F_0_l[~a] = {0.0}; ~%", NSurf),
  writeCExprsCollect1(alphaSurf_F_0_l, alphaSurf_F_0_l_c, clst),
  printf(fh, "~%"),
  printf(fh, "  double alphaSurf_F_0_r[~a] = {0.0}; ~%", NSurf),
  writeCExprsCollect1(alphaSurf_F_0_r, alphaSurf_F_0_r_c, clst),
  printf(fh, "~%"),

  alphaSurf_G_1_l_c : fullratsimp(innerProd(surfVars, 1, bSurf, subst(vx=-1,acc_G_1_e))),
  alphaSurf_G_1_r_c : fullratsimp(innerProd(surfVars, 1, bSurf, subst(vx=1,acc_G_1_e))),
  alst_G_1_l        : doMakeExprLst(alphaSurf_G_1_l_c, alphaSurf_G_1_l),
  alst_G_1_r        : doMakeExprLst(alphaSurf_G_1_r_c, alphaSurf_G_1_r),
  alphaSurf_G_1_l_e : doExpand(alst_G_1_l, bSurf),
  alphaSurf_G_1_r_e : doExpand(alst_G_1_r, bSurf),
  printf(fh, "  double alphaSurf_G_1_l[~a] = {0.0}; ~%", NSurf),
  writeCExprsCollect1(alphaSurf_G_1_l, alphaSurf_G_1_l_c, clst),
  printf(fh, "~%"),
  printf(fh, "  double alphaSurf_G_1_r[~a] = {0.0}; ~%", NSurf),
  writeCExprsCollect1(alphaSurf_G_1_r, alphaSurf_G_1_r_c, clst),
  printf(fh, "~%"),

  /* project div_b evaluated at interior surface onto surface basis.
     No velocity space dependence so we can just project div_b onto surface basis. */
  div_b_Surf_c : fullratsimp(innerProd(surfVars, 1, bSurf, div_b_e)),
  div_b_lst    : doMakeExprLst(div_b_Surf_c, div_b_Surf),
  div_b_Surf_e : doExpand(div_b_lst, bSurf),
  printf(fh, "  double div_b_Surf[~a] = {0.0}; ~%", NSurf),
  writeCExprsCollect1(div_b_Surf, div_b_Surf_c, clst),
  printf(fh, "~%"),

  /* Evaluate alpha at ordinates.
     Note: alphaSurf_e is already a surface expansion. 
     In addition, it is continuous. */
  alphaOrd_F_0_l_n : gcfac(float(evAtNodes(alphaSurf_F_0_l_e,surfNodes,surfVars))),
  alphaOrd_F_0_r_n : gcfac(float(evAtNodes(alphaSurf_F_0_r_e,surfNodes,surfVars))),
  alphaOrd_G_1_l_n : gcfac(float(evAtNodes(alphaSurf_G_1_l_e,surfNodes,surfVars))),
  alphaOrd_G_1_r_n : gcfac(float(evAtNodes(alphaSurf_G_1_r_e,surfNodes,surfVars))),

  /* Evaluate div(b) at ordinates.
     Note: div_b_Surf_e is already a surface expansion. 
     In addition, it is continuous and does *not* depend on velocity space. */
  div_b_Ord_n : gcfac(float(evAtNodes(div_b_Surf_e,surfNodes,surfVars))),

  printf(fh, "  double F_0_UpwindQuad_l[~a] = {0.0};~%", numNodes),
  printf(fh, "  double F_0_UpwindQuad_r[~a] = {0.0};~%", numNodes),
  printf(fh, "  double F_0_Upwind_l[~a] = {0.0};~%", NSurf),
  printf(fh, "  double F_0_Upwind_r[~a] = {0.0};~%", NSurf),
  printf(fh, "  double Ghat_F_0_l[~a] = {0.0}; ~%", NSurf),
  printf(fh, "  double Ghat_F_0_r[~a] = {0.0}; ~%", NSurf),

  printf(fh, "  double G_1_UpwindQuad_l[~a] = {0.0};~%", numNodes),
  printf(fh, "  double G_1_UpwindQuad_r[~a] = {0.0};~%", numNodes),
  printf(fh, "  double G_1_Upwind_l[~a] = {0.0};~%", NSurf),
  printf(fh, "  double G_1_Upwind_r[~a] = {0.0};~%", NSurf),
  printf(fh, "  double Ghat_G_1_l[~a] = {0.0}; ~%", NSurf),
  printf(fh, "  double Ghat_G_1_r[~a] = {0.0}; ~%", NSurf),
  printf(fh, "~%"),

  /* Check sign of each quadrature point and choose appropriate distribution function at 
     quadrature points. 
     If alphaSurf_l > 0, need f_l (at +1), else f_c (at -1). 
     If alphaSurf_r > 0, need f_c (at +1), else f_r (at -1). */

  for i : 1 thru length(alphaOrd_F_0_l_n) do (
    printf(fh, "  if (~a > 0) { ~%", alphaOrd_F_0_l_n[i]),
    printf(fh, "    F_0_UpwindQuad_l[~a] = ~a_surfx~a_eval_quad_node_~a_r(F_0l); ~%", i-1, basisStr, cdim+1, i-1),
    printf(fh, "  } else { ~%"),
    printf(fh, "    F_0_UpwindQuad_l[~a] = ~a_surfx~a_eval_quad_node_~a_l(F_0c); ~%", i-1, basisStr, cdim+1, i-1),
    printf(fh, "  } ~%"),
    printf(fh, "  if (~a > 0) { ~%", alphaOrd_F_0_r_n[i]),
    printf(fh, "    F_0_UpwindQuad_r[~a] = ~a_surfx~a_eval_quad_node_~a_r(F_0c); ~%", i-1, basisStr, cdim+1, i-1),
    printf(fh, "  } else { ~%"),
    printf(fh, "    F_0_UpwindQuad_r[~a] = ~a_surfx~a_eval_quad_node_~a_l(F_0r); ~%", i-1, basisStr, cdim+1, i-1),
    printf(fh, "  } ~%")
  ),
  for i : 1 thru length(alphaOrd_G_1_l_n) do (
    printf(fh, "  if (~a > 0) { ~%", alphaOrd_G_1_l_n[i]),
    printf(fh, "    G_1_UpwindQuad_l[~a] = ~a_surfx~a_eval_quad_node_~a_r(G_1l); ~%", i-1, basisStr, cdim+1, i-1),
    printf(fh, "  } else { ~%"),
    printf(fh, "    G_1_UpwindQuad_l[~a] = ~a_surfx~a_eval_quad_node_~a_l(G_1c); ~%", i-1, basisStr, cdim+1, i-1),
    printf(fh, "  } ~%"),
    printf(fh, "  if (~a > 0) { ~%", alphaOrd_G_1_r_n[i]),
    printf(fh, "    G_1_UpwindQuad_r[~a] = ~a_surfx~a_eval_quad_node_~a_r(G_1c); ~%", i-1, basisStr, cdim+1, i-1),
    printf(fh, "  } else { ~%"),
    printf(fh, "    G_1_UpwindQuad_r[~a] = ~a_surfx~a_eval_quad_node_~a_l(G_1r); ~%", i-1, basisStr, cdim+1, i-1),
    printf(fh, "  } ~%")
  ),
  printf(fh, "~%"),
  printf(fh, "  // Project tensor nodal quadrature basis back onto modal basis. ~%"),
  if polyOrder=1 then (  /* Force p=1 to use hybrid basis. */
    printf(fh, "  ~a_vdir_upwind_quad_to_modal(F_0_UpwindQuad_l, F_0_Upwind_l); ~%", basisStr),
    printf(fh, "  ~a_vdir_upwind_quad_to_modal(F_0_UpwindQuad_r, F_0_Upwind_r); ~%", basisStr),
    printf(fh, "  ~a_vdir_upwind_quad_to_modal(G_1_UpwindQuad_l, G_1_Upwind_l); ~%", basisStr),
    printf(fh, "  ~a_vdir_upwind_quad_to_modal(G_1_UpwindQuad_r, G_1_Upwind_r); ~%", basisStr)
  ) else (
    printf(fh, "  ~a_upwind_quad_to_modal(F_0_UpwindQuad_l, F_0_Upwind_l); ~%", basisStr),
    printf(fh, "  ~a_upwind_quad_to_modal(F_0_UpwindQuad_r, F_0_Upwind_r); ~%", basisStr),
    printf(fh, "  ~a_upwind_quad_to_modal(G_1_UpwindQuad_l, G_1_Upwind_l); ~%", basisStr),
    printf(fh, "  ~a_upwind_quad_to_modal(G_1_UpwindQuad_r, G_1_Upwind_r); ~%", basisStr)
  ),
  printf(fh, "~%"),

  printf(fh, "  double F_0_div_b_UpwindQuad_l[~a] = {0.0};~%", numNodes),
  printf(fh, "  double F_0_div_b_UpwindQuad_r[~a] = {0.0};~%", numNodes),
  printf(fh, "  double F_0_div_b_Upwind_l[~a] = {0.0};~%", NSurf),
  printf(fh, "  double F_0_div_b_Upwind_r[~a] = {0.0};~%", NSurf),
  printf(fh, "  double Ghat_F_0_div_b_l[~a] = {0.0}; ~%", NSurf),
  printf(fh, "  double Ghat_F_0_div_b_r[~a] = {0.0}; ~%", NSurf),
  printf(fh, "~%"),

  printf(fh, "  double G_1_div_b_UpwindQuad_l[~a] = {0.0};~%", numNodes),
  printf(fh, "  double G_1_div_b_UpwindQuad_r[~a] = {0.0};~%", numNodes),
  printf(fh, "  double G_1_div_b_Upwind_l[~a] = {0.0};~%", NSurf),
  printf(fh, "  double G_1_div_b_Upwind_r[~a] = {0.0};~%", NSurf),
  printf(fh, "  double Ghat_G_1_div_b_l[~a] = {0.0}; ~%", NSurf),
  printf(fh, "  double Ghat_G_1_div_b_r[~a] = {0.0}; ~%", NSurf),
  printf(fh, "~%"),

  /* Check sign of each quadrature point and choose appropriate distribution function at 
     quadrature points. 
     If div_b_Surf < 0, need f_l and f_c (at +1) else f_c and f_r (at -1).
     Can fetch both left and right values because div_b_Surf does not depend on velocity space. */
  for i : 1 thru length(div_b_Ord_n) do (
    printf(fh, "  if (~a < 0) { ~%", div_b_Ord_n[i]),
    printf(fh, "    F_0_div_b_UpwindQuad_l[~a] = ~a_surfx~a_eval_quad_node_~a_r(F_0_sourcel); ~%", i-1, basisStr, cdim+1, i-1),
    printf(fh, "    F_0_div_b_UpwindQuad_r[~a] = ~a_surfx~a_eval_quad_node_~a_r(F_0_sourcec); ~%", i-1, basisStr, cdim+1, i-1),
    printf(fh, "    G_1_div_b_UpwindQuad_l[~a] = ~a_surfx~a_eval_quad_node_~a_r(G_1_sourcel); ~%", i-1, basisStr, cdim+1, i-1),
    printf(fh, "    G_1_div_b_UpwindQuad_r[~a] = ~a_surfx~a_eval_quad_node_~a_r(G_1_sourcec); ~%", i-1, basisStr, cdim+1, i-1),
    printf(fh, "  } else { ~%"),
    printf(fh, "    F_0_div_b_UpwindQuad_l[~a] = ~a_surfx~a_eval_quad_node_~a_l(F_0_sourcec); ~%", i-1, basisStr, cdim+1, i-1),
    printf(fh, "    F_0_div_b_UpwindQuad_r[~a] = ~a_surfx~a_eval_quad_node_~a_l(F_0_sourcer); ~%", i-1, basisStr, cdim+1, i-1),
    printf(fh, "    G_1_div_b_UpwindQuad_l[~a] = ~a_surfx~a_eval_quad_node_~a_l(G_1_sourcec); ~%", i-1, basisStr, cdim+1, i-1),
    printf(fh, "    G_1_div_b_UpwindQuad_r[~a] = ~a_surfx~a_eval_quad_node_~a_l(G_1_sourcer); ~%", i-1, basisStr, cdim+1, i-1),
    printf(fh, "  } ~%")
  ),
  printf(fh, "~%"),
  printf(fh, "  // Project tensor nodal quadrature basis back onto modal basis. ~%"),
  if polyOrder=1 then (  /* Force p=1 to use hybrid basis. */
    printf(fh, "  ~a_vdir_upwind_quad_to_modal(F_0_div_b_UpwindQuad_l, F_0_div_b_Upwind_l); ~%", basisStr),
    printf(fh, "  ~a_vdir_upwind_quad_to_modal(F_0_div_b_UpwindQuad_r, F_0_div_b_Upwind_r); ~%", basisStr),
    printf(fh, "  ~a_vdir_upwind_quad_to_modal(G_1_div_b_UpwindQuad_l, G_1_div_b_Upwind_l); ~%", basisStr),
    printf(fh, "  ~a_vdir_upwind_quad_to_modal(G_1_div_b_UpwindQuad_r, G_1_div_b_Upwind_r); ~%", basisStr)
  ) else (
    printf(fh, "  ~a_upwind_quad_to_modal(F_0_div_b_UpwindQuad_l, F_0_div_b_Upwind_l); ~%", basisStr),
    printf(fh, "  ~a_upwind_quad_to_modal(F_0_div_b_UpwindQuad_r, F_0_div_b_Upwind_r); ~%", basisStr),
    printf(fh, "  ~a_upwind_quad_to_modal(G_1_div_b_UpwindQuad_l, G_1_div_b_Upwind_l); ~%", basisStr),
    printf(fh, "  ~a_upwind_quad_to_modal(G_1_div_b_UpwindQuad_r, G_1_div_b_Upwind_r); ~%", basisStr)
  ),
  printf(fh, "~%"),

  /* Create expansions of F_0_hat, G_1_hat (upwinded first two Laguerre moments) on the left and right in the surface basis. */
  /* Upwinded values calculated from alpha_vdim = 1/rho (div(p_parallel b_hat) - p_perp div(b)) - v_parallel bb : grad(u)] */
  F_0_HatSurf_l_e : doExpand1(F_0_Upwind_l, bSurf),
  F_0_HatSurf_r_e : doExpand1(F_0_Upwind_r, bSurf),
  G_1_HatSurf_l_e : doExpand1(G_1_Upwind_l, bSurf),
  G_1_HatSurf_r_e : doExpand1(G_1_Upwind_r, bSurf),

  /* Upwinded values calculated from div(b) for additional force 
     Note: force on F_0 is just div(b) because T_perp/m absorbed into G, while force on G_1 is
     2*p_perp/rho*div(b); since only the sign matters, use div(b) for both (perp/rho should *not* be negative) */
  F_0_div_b_HatSurf_l_e : doExpand1(F_0_div_b_Upwind_l, bSurf),
  F_0_div_b_HatSurf_r_e : doExpand1(F_0_div_b_Upwind_r, bSurf),
  G_1_div_b_HatSurf_l_e : doExpand1(G_1_div_b_Upwind_l, bSurf),
  G_1_div_b_HatSurf_r_e : doExpand1(G_1_div_b_Upwind_r, bSurf),

  /* Print C exprs for Ghat across surface boundary, (LEFT BOUNDARY) */
  Ghat_F_0_l_c : fullratsimp(innerProd(surfVars, alphaSurf_F_0_l_e, bSurf, F_0_HatSurf_l_e)),
  Ghat_G_1_l_c : fullratsimp(innerProd(surfVars, alphaSurf_G_1_l_e, bSurf, G_1_HatSurf_l_e)),
  writeCExprs1(Ghat_F_0_l, Ghat_F_0_l_c),
  writeCExprs1(Ghat_G_1_l, Ghat_G_1_l_c),

  Ghat_F_0_div_b_l_c : fullratsimp(innerProd(surfVars, div_b_Surf_e, bSurf, F_0_div_b_HatSurf_l_e)),
  Ghat_G_1_div_b_l_c : fullratsimp(innerProd(surfVars, div_b_Surf_e, bSurf, G_1_div_b_HatSurf_l_e)),
  writeCExprs1(Ghat_F_0_div_b_l, Ghat_F_0_div_b_l_c),
  writeCExprs1(Ghat_G_1_div_b_l, Ghat_G_1_div_b_l_c),
  printf(fh, "~%"),
  flush_output(fh),

  /* Print C exprs for Ghat across surface boundary, (RIGHT BOUNDARY) */
  Ghat_F_0_r_c : fullratsimp(innerProd(surfVars, alphaSurf_F_0_r_e, bSurf, F_0_HatSurf_r_e)),
  Ghat_G_1_r_c : fullratsimp(innerProd(surfVars, alphaSurf_G_1_r_e, bSurf, G_1_HatSurf_r_e)),
  writeCExprs1(Ghat_F_0_r, Ghat_F_0_r_c),
  writeCExprs1(Ghat_G_1_r, Ghat_G_1_r_c),

  Ghat_F_0_div_b_r_c : fullratsimp(innerProd(surfVars, div_b_Surf_e, bSurf, F_0_div_b_HatSurf_r_e)),
  Ghat_G_1_div_b_r_c : fullratsimp(innerProd(surfVars, div_b_Surf_e, bSurf, G_1_div_b_HatSurf_r_e)),
  writeCExprs1(Ghat_F_0_div_b_r, Ghat_F_0_div_b_r_c),
  writeCExprs1(Ghat_G_1_div_b_r, Ghat_G_1_div_b_r_c),
  printf(fh, "~%"),
  flush_output(fh),

  /* Expand G_hat in surface basis. */
  Ghat_F_0_l_e       : doExpand1(Ghat_F_0_l, bSurf),
  Ghat_G_1_l_e       : doExpand1(Ghat_G_1_l, bSurf),
  Ghat_F_0_div_b_l_e : doExpand1(Ghat_F_0_div_b_l, bSurf),
  Ghat_G_1_div_b_l_e : doExpand1(Ghat_G_1_div_b_l, bSurf),

  Ghat_F_0_r_e       : doExpand1(Ghat_F_0_r, bSurf),
  Ghat_G_1_r_e       : doExpand1(Ghat_G_1_r, bSurf),
  Ghat_F_0_div_b_r_e : doExpand1(Ghat_F_0_div_b_r, bSurf),
  Ghat_G_1_div_b_r_e : doExpand1(Ghat_G_1_div_b_r, bSurf),

  /* Compute surface contribution integral(phi^- Ghat) on the left and right. */
  incr_F_0_l : calcInnerProdList(surfVars, 1, subst(vx=-1.0, bP), Ghat_F_0_l_e),
  incr_F_0_r : calcInnerProdList(surfVars, -1, subst(vx=1.0, bP), Ghat_F_0_r_e),
  incr_G_1_l : calcInnerProdList(surfVars, 1, subst(vx=-1.0, bP), Ghat_G_1_l_e),
  incr_G_1_r : calcInnerProdList(surfVars, -1, subst(vx=1.0, bP), Ghat_G_1_r_e),

  /* Note opposite sign of p_perp/rho div(b) force */
  incr_F_0_div_b_l : calcInnerProdList(surfVars, -1, subst(vx=-1.0, bP), Ghat_F_0_div_b_l_e),
  incr_F_0_div_b_r : calcInnerProdList(surfVars, 1, subst(vx=1.0, bP), Ghat_F_0_div_b_r_e),
  incr_G_1_div_b_l : calcInnerProdList(surfVars, -1, subst(vx=-1.0, bP), Ghat_G_1_div_b_l_e),
  incr_G_1_div_b_r : calcInnerProdList(surfVars, 1, subst(vx=1.0, bP), Ghat_G_1_div_b_r_e),

  writeCIncrExprsCollect1lhsc(out_F_0, dv1par*incr_F_0_l + dv1par*incr_F_0_r + dv1par*incr_F_0_div_b_l + dv1par*incr_F_0_div_b_r),  
  writeCIncrExprsCollect1lhsc(out_G_1, dv1par*incr_G_1_l + dv1par*incr_G_1_r + dv1par*incr_G_1_div_b_l + dv1par*incr_G_1_div_b_r),  
  printf(fh, "~%"),

  printf(fh, "} ~%")
);