load("pkpm/pkpm-u")$
load(stringproc)$
/* This script calls the functions which generate the kernels for calculating the 
   flow velocity using weak division required to update the PKPM system. 
   These kernels are distinct from the primitive variable kernels, 
   which solve for *all* the needed primitive variables. 
   We solve for only the flow velocity in the volume when: 
   1. We are using the implicit source solve, which updates du/dt implicitly
   2. We are using limiters, which need u to construct the correct slopes
      of the stress tensor S_ij = P_ij + rho u_i u_j */


/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
maxCdim_Ser : 3$

/* Tensor product basis. */
/* Note that Serendipity, p = 1, is equivalent to Tensor */
/* Thus no need to calculate p = 1 Tensor basis */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 2$
maxCdim_Tensor : 2$

/* ...... END OF USER INPUTS........ */

bName        : ["ser", "tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$

for bInd : 1 thru length(bName) do (
  for d : minCdim[bInd] thru maxCdim[bInd] do (
    minPolyOrderB : minPolyOrder[bInd],
    maxPolyOrderB : maxPolyOrder[bInd],
    if (d>1 and bName[bInd] = "ser") then maxPolyOrderB : 1,

    for polyOrder : minPolyOrderB thru maxPolyOrderB do (
      disp(printf(false,sconcat("Creating pkpm flow funcs ",bName[bInd]," ~axp~a"),d,polyOrder)),

      fname : sconcat("~/max-out/pkpm_vars_u_set_", d, "x_", bName[bInd], "_p", polyOrder, ".c"),
      fh : openw(fname),
      funcName : sconcat("pkpm_vars_u_set_",  d, "x_", bName[bInd], "_p", polyOrder),
      if (polyOrder = 1) then (
        set_pkpm_u_i_p1(fh, funcName, d, bName[bInd], polyOrder)
      )
      else (
        set_pkpm_u_i(fh, funcName, d, bName[bInd], polyOrder)
      ),
      close(fh),

      fname : sconcat("~/max-out/pkpm_vars_u_copy_", d, "x_", bName[bInd], "_p", polyOrder, ".c"),
      fh : openw(fname),
      funcName : sconcat("pkpm_vars_u_copy_",  d, "x_", bName[bInd], "_p", polyOrder),
      copy_pkpm_u_i(fh, funcName, d, bName[bInd], polyOrder),
      close(fh)
    )
  )
);
