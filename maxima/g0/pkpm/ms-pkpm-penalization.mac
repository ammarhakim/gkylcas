load("pkpm/pkpm-penalization")$
load(stringproc)$
/* This script generates the kernels for calculating the penalization term in the 
   momentum solve of the PKPM system. 

   The surface kernels in the momentum solve utilize a flux of the form:
   F_rho * u_avg - Tau

   Where:
   u_avg = 1/2 (u^+ + u^-)
   F_rho = 1/2 (rho^+ + rho^-) * u_avg - lambda*(rho^+ - rho^-)

   and Tau is the penalization term. Typically this is given by the jump in the fluctuations
   computed from a 10 moment Riemann solve. However in cases where either rho^+ or rho^- ~ 0
   or u_avg ~ 0 (vacuum or a stagnation point) we switch to a local Lax flux with same 
   fastest wave speed lambda utilized in F_rho. 

   Since we store surface fluxes, we return the surface expansion on the *lower* edge 
   of the cell unless we are at the upper edge of configuration space. */


/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
maxCdim_Ser : 3$

/* Tensor product basis. */
/* Note that Serendipity, p = 1, is equivalent to Tensor */
/* Thus no need to calculate p = 1 Tensor basis */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 2$
maxCdim_Tensor : 2$

/* ...... END OF USER INPUTS........ */

bName        : ["ser", "tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$

clabels : ["x","y","z"]$
for bInd : 1 thru length(bName) do (
  for d : minCdim[bInd] thru maxCdim[bInd] do (
    minPolyOrderB : minPolyOrder[bInd],
    maxPolyOrderB : maxPolyOrder[bInd],
    if (d>1 and bName[bInd] = "ser") then maxPolyOrderB : 1,

    for polyOrder : minPolyOrderB thru maxPolyOrderB do (
      for dir : 1 thru d do ( 
        fname : sconcat("~/max-out/pkpm_vars_penalization_", clabels[dir], "_", d, "x_", bName[bInd], "_p", polyOrder, ".c"),
        fh : openw(fname),
        funcName : sconcat("pkpm_vars_penalization_", clabels[dir], "_", d, "x_", bName[bInd], "_p", polyOrder),
        printf(fh, "#include <gkyl_euler_pkpm_kernels.h> ~%"),
        if (d = 1) then (
          printf(fh, "#include <gkyl_basis_~a_~ax_p~a_surfx~a_eval_quad.h> ~%", bName[bInd], d, polyOrder, dir)
        )
        else (
          printf(fh, "#include <gkyl_basis_~a_~ax_p~a_surfx~a_eval_quad.h> ~%", bName[bInd], d, polyOrder, dir),
          printf(fh, "#include <gkyl_basis_~a_~ax_p~a_upwind_quad_to_modal.h> ~%", bName[bInd], d, polyOrder)
        ),
        pkpm_vars_penalization(dir, fh, funcName, d, bName[bInd], polyOrder),
        close(fh)
      )
    )
  )
);
