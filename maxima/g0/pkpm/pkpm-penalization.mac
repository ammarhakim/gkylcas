/* This script generates the kernels for calculating the penalization term in the 
   momentum solve of the PKPM system. 

   The surface kernels in the momentum solve utilize a flux of the form:
   F_rho * u_avg - Tau

   Where:
   u_avg = 1/2 (u^+ + u^-)
   F_rho = 1/2 (rho^+ + rho^-) * u_avg - lambda*(rho^+ - rho^-)

   and Tau is the penalization term. Typically this is given by the jump in the fluctuations
   computed from a 10 moment Riemann solve. However in cases where either rho^+ or rho^- ~ 0
   or u_avg ~ 0 (vacuum or a stagnation point) we switch to a local Lax flux with same 
   fastest wave speed lambda utilized in F_rho. 

   Since we store surface fluxes, we return the surface expansion on the *lower* edge 
   of the cell unless we are at the upper edge of configuration space. */

load("modal-basis")$
load("out-scripts")$
load(stringproc)$
load("scifac")$
load("recovery")$
load("nodal_operations/nodal_functions")$
fpprec : 24$
cvars : [x, y, z]$

pkpm_vars_penalization(dir, fh, funcNm, cdim, basisFun, polyOrder) := block(
  [varsC, bC, NC, cv, surfVars, bSurf, NSurf, surfNodes, numNodes, 
   ux_surf_lr_e, ux_surf_cl_e, ux_surf_cr_e, ux_surf_rl_e, 
   uy_surf_lr_e, uy_surf_cl_e, uy_surf_cr_e, uy_surf_rl_e, 
   uz_surf_lr_e, uz_surf_cl_e, uz_surf_cr_e, uz_surf_rl_e, 
   Tii_surf_lr_e, Tii_surf_cl_e, Tii_surf_cr_e, Tii_surf_rl_e, 
   Tii_quad_surf_lr, Tii_quad_surf_cl, Tii_quad_surf_cr, Tii_quad_surf_rl, 
   u_quad_surf_lr, u_quad_surf_cl, u_quad_surf_cr, u_quad_surf_rl, 
   surf_ux_l, surf_uy_l, surf_uz_l, 
   surf_ux_r, surf_uy_r, surf_uz_r, 
   uxc_e, uyc_e, uzc_e, vol_ux_c, vol_uy_c, vol_uz_c, 
   bxbx_e, bxby_e, bxbz_e, byby_e, bybz_e, bzbz_e,  
   grad_u_x_e, grad_u_y_e, grad_u_z_e,
   bb_grad_u_comp_c, bb_grad_u_e, bb_grad_u_c, 
   nu_e, p_perp_source_c],

  kill(varsC, bC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),

  /* Number of basis monomials. */
  NC : length(bC),

  cv : varsC[dir],
  /* Surface variables to integrate over. */
  surfVars : delete(cv,varsC),
  if (cdim = 1) then (
    NSurf : 1, 
    numNodes : 1
  )
  else (
    bSurf : basisFromVars(basisFun,surfVars,polyOrder),
    NSurf : length(bSurf), 
    surfNodes : gaussOrd(polyOrder+1, cdim-1),
    numNodes : length(surfNodes)
  ), 
  basisStr : sconcat(basisFun, "_", cdim, "x", "_p", polyOrder),

  printf(fh, "GKYL_CU_DH void ~a(double tol, bool force_lax, 
  const struct gkyl_wv_eqn *wv_eqn, const struct gkyl_wave_cell_geom *geom, 
  const double *vlasov_pkpm_moms_l, const double *vlasov_pkpm_moms_r,
  const double *p_ij_l, const double *p_ij_r,
  const double *prim_l, const double *prim_r, 
  const double *euler_pkpm_l, const double *euler_pkpm_r,
  double* GKYL_RESTRICT pkpm_lax, double* GKYL_RESTRICT pkpm_penalization) ~%{ ~%", funcNm),
  printf(fh, "  // tol:                  Tolerance in rho^+, rho^-, and u_avg for switching to Lax fluxes.~%"),
  printf(fh, "  // force_lax:            Flag for forcing Lax fluxes to be turned on.~%"),
  printf(fh, "  // wv_eqn:               Wave equation for computing fluctuations at the interface for upwinding.~%"),
  printf(fh, "  // geom:                 Geometry for the surface update.~%"),
  printf(fh, "  // vlasov_pkpm_moms_l/r: Input pkpm moments to the left/right of the interface.~%"),
  printf(fh, "  // prim_l/r:             Input primitive variables [u_i, 3*T_ii/m] to the left/right of the interface.~%"),
  printf(fh, "  // p_ij_l/r:             Input p_ij = (p_par - p_perp) b_i b_j + p_perp g_ij to the left/right of the interface.~%"),
  printf(fh, "  // euler_pkpm_l/r:       Input [rho ux, rho uy, rho uz], Fluid input state vector to the left/right of the interface.~%"),
  printf(fh, "  // pkpm_lax:             Surface expansion of pkpm Lax penalization: lambda_i = |u_i| + sqrt(3.0*T_ii/m).~%"),
  printf(fh, "  // pkpm_penalization:    Surface expansion of the penalization term in the PKPM momentum update in each direction (cdim components).~%"),
  printf(fh, "  //                       Note: Each cell owns their *lower* edge surface evaluation.~%"),
  printf(fh, "~%"),

  printf(fh, "  const double *rho_l = &vlasov_pkpm_moms_l[~a]; ~%", 0*NC),
  printf(fh, "  const double *rho_r = &vlasov_pkpm_moms_r[~a]; ~%", 0*NC),
  printf(fh, "~%"),

  printf(fh, "  const double *rhoux_l = &euler_pkpm_l[~a]; ~%", 0*NC),
  printf(fh, "  const double *rhouy_l = &euler_pkpm_l[~a]; ~%", 1*NC),
  printf(fh, "  const double *rhouz_l = &euler_pkpm_l[~a]; ~%", 2*NC),
  printf(fh, "~%"),

  printf(fh, "  const double *rhoux_r = &euler_pkpm_r[~a]; ~%", 0*NC),
  printf(fh, "  const double *rhouy_r = &euler_pkpm_r[~a]; ~%", 1*NC),
  printf(fh, "  const double *rhouz_r = &euler_pkpm_r[~a]; ~%", 2*NC),
  printf(fh, "~%"),

  printf(fh, "  const double *u_i_l = &prim_l[~a]; ~%", (dir-1)*NC),
  printf(fh, "  const double *Tii_l = &prim_l[~a]; ~%", (dir+5)*NC),
  printf(fh, "~%"),

  printf(fh, "  const double *u_i_r = &prim_r[~a]; ~%", (dir-1)*NC),
  printf(fh, "  const double *Tii_r = &prim_r[~a]; ~%", (dir+5)*NC),
  printf(fh, "~%"),

  printf(fh, "  const double *Pxx_l = &p_ij_l[~a]; ~%", 0*NC),
  printf(fh, "  const double *Pxy_l = &p_ij_l[~a]; ~%", 1*NC),
  printf(fh, "  const double *Pxz_l = &p_ij_l[~a]; ~%", 2*NC),
  printf(fh, "  const double *Pyy_l = &p_ij_l[~a]; ~%", 3*NC),
  printf(fh, "  const double *Pyz_l = &p_ij_l[~a]; ~%", 4*NC),
  printf(fh, "  const double *Pzz_l = &p_ij_l[~a]; ~%", 5*NC),
  printf(fh, "~%"),

  printf(fh, "  const double *Pxx_r = &p_ij_r[~a]; ~%", 0*NC),
  printf(fh, "  const double *Pxy_r = &p_ij_r[~a]; ~%", 1*NC),
  printf(fh, "  const double *Pxz_r = &p_ij_r[~a]; ~%", 2*NC),
  printf(fh, "  const double *Pyy_r = &p_ij_r[~a]; ~%", 3*NC),
  printf(fh, "  const double *Pyz_r = &p_ij_r[~a]; ~%", 4*NC),
  printf(fh, "  const double *Pzz_r = &p_ij_r[~a]; ~%", 5*NC),
  printf(fh, "~%"),

  /* Surface Lax penalization organized as (note T_ii = 3*P_ii/rho, includes necessary factors) : 
     [ |ux_xl| + sqrt(Txx_xl), |uy_yl| + sqrt(Tyy_yl), |uz_zl| + sqrt(Tzz_zl) ] 
     We are only operating on the *lower* surface. */
  printf(fh, "  double *pkpm_lax_l = &pkpm_lax[~a]; ~%", (dir-1)*NSurf),
  printf(fh, "~%"),

  printf(fh, "  double *pkpm_penalization_rhoux_l = &pkpm_penalization[~a]; ~%", (0 + (dir-1)*3)*NSurf),
  printf(fh, "  double *pkpm_penalization_rhouy_l = &pkpm_penalization[~a]; ~%", (1 + (dir-1)*3)*NSurf),
  printf(fh, "  double *pkpm_penalization_rhouz_l = &pkpm_penalization[~a]; ~%", (2 + (dir-1)*3)*NSurf),
  printf(fh, "~%"),

  /* Evaluate fluctuations and max speed of Lax penalization at quadrature points */
  printf(fh, "  double amdq_rhoux_quad[~a] = {0.0}; ~%", numNodes),
  printf(fh, "  double apdq_rhoux_quad[~a] = {0.0}; ~%", numNodes),
  printf(fh, "  double amdq_rhouy_quad[~a] = {0.0}; ~%", numNodes),
  printf(fh, "  double apdq_rhouy_quad[~a] = {0.0}; ~%", numNodes),
  printf(fh, "  double amdq_rhouz_quad[~a] = {0.0}; ~%", numNodes),
  printf(fh, "  double apdq_rhouz_quad[~a] = {0.0}; ~%", numNodes),
  printf(fh, "  double pkpm_lax_quad[~a] = {0.0}; ~%", numNodes),
  printf(fh, "~%"),

  /* Temporary variables for quadrature point evaluation */
  printf(fh, "  double q_l[10] = {0.0}; ~%"),
  printf(fh, "  double q_r[10] = {0.0}; ~%"),

  printf(fh, "  double u_l = 0.0; ~%"),
  printf(fh, "  double u_r = 0.0; ~%"),
  printf(fh, "  double T_l = 0.0; ~%"),
  printf(fh, "  double T_r = 0.0; ~%"),
  printf(fh, "  double u_max = 0.0; ~%"),
  printf(fh, "  double vth_max = 0.0; ~%"),

  printf(fh, "  double q_l_local[10] = {0.0}; ~%"),
  printf(fh, "  double q_r_local[10] = {0.0}; ~%"),

  printf(fh, "  double delta[10] = {0.0}; ~%"),

  printf(fh, "  double my_max_speed = 0.0; ~%"),
  printf(fh, "  double lenr = 0.0; ~%"),

  printf(fh, "  double waves[50] = {0.0}; ~%"), 
  printf(fh, "  double speeds[5] = {0.0}; ~%"),

  printf(fh, "  double amdq_local[10] = {0.0}; ~%"),
  printf(fh, "  double apdq_local[10] = {0.0}; ~%"),

  printf(fh, "  double amdq[10] = {0.0}; ~%"),
  printf(fh, "  double apdq[10] = {0.0}; ~%"),
  printf(fh, "~%"),

  printf(fh, "  int use_lax = 0;~%"),
  for i : 1 thru numNodes do (
    /* Evaluate state variable at quadrature point */
    printf(fh, "  q_l[0] = ~a_surfx~a_eval_quad_node_~a_r(rho_l); ~%", basisStr, dir, i-1),
    printf(fh, "  q_l[1] = ~a_surfx~a_eval_quad_node_~a_r(rhoux_l); ~%", basisStr, dir, i-1),
    printf(fh, "  q_l[2] = ~a_surfx~a_eval_quad_node_~a_r(rhouy_l); ~%", basisStr, dir, i-1),
    printf(fh, "  q_l[3] = ~a_surfx~a_eval_quad_node_~a_r(rhouz_l); ~%", basisStr, dir, i-1),
    printf(fh, "  q_l[4] = ~a_surfx~a_eval_quad_node_~a_r(Pxx_l) + q_l[1]*q_l[1]/q_l[0]; ~%", basisStr, dir, i-1),
    printf(fh, "  q_l[5] = ~a_surfx~a_eval_quad_node_~a_r(Pxy_l) + q_l[1]*q_l[2]/q_l[0]; ~%", basisStr, dir, i-1),
    printf(fh, "  q_l[6] = ~a_surfx~a_eval_quad_node_~a_r(Pxz_l) + q_l[1]*q_l[3]/q_l[0]; ~%", basisStr, dir, i-1),
    printf(fh, "  q_l[7] = ~a_surfx~a_eval_quad_node_~a_r(Pyy_l) + q_l[2]*q_l[2]/q_l[0]; ~%", basisStr, dir, i-1),
    printf(fh, "  q_l[8] = ~a_surfx~a_eval_quad_node_~a_r(Pyz_l) + q_l[2]*q_l[3]/q_l[0]; ~%", basisStr, dir, i-1),
    printf(fh, "  q_l[9] = ~a_surfx~a_eval_quad_node_~a_r(Pzz_l) + q_l[3]*q_l[3]/q_l[0]; ~%", basisStr, dir, i-1),

    printf(fh, "  q_r[0] = ~a_surfx~a_eval_quad_node_~a_l(rho_r); ~%", basisStr, dir, i-1),
    printf(fh, "  q_r[1] = ~a_surfx~a_eval_quad_node_~a_l(rhoux_r); ~%", basisStr, dir, i-1),
    printf(fh, "  q_r[2] = ~a_surfx~a_eval_quad_node_~a_l(rhouy_r); ~%", basisStr, dir, i-1),
    printf(fh, "  q_r[3] = ~a_surfx~a_eval_quad_node_~a_l(rhouz_r); ~%", basisStr, dir, i-1),
    printf(fh, "  q_r[4] = ~a_surfx~a_eval_quad_node_~a_l(Pxx_r) + q_r[1]*q_r[1]/q_r[0]; ~%", basisStr, dir, i-1),
    printf(fh, "  q_r[5] = ~a_surfx~a_eval_quad_node_~a_l(Pxy_r) + q_r[1]*q_r[2]/q_r[0]; ~%", basisStr, dir, i-1),
    printf(fh, "  q_r[6] = ~a_surfx~a_eval_quad_node_~a_l(Pxz_r) + q_r[1]*q_r[3]/q_r[0]; ~%", basisStr, dir, i-1),
    printf(fh, "  q_r[7] = ~a_surfx~a_eval_quad_node_~a_l(Pyy_r) + q_r[2]*q_r[2]/q_r[0]; ~%", basisStr, dir, i-1),
    printf(fh, "  q_r[8] = ~a_surfx~a_eval_quad_node_~a_l(Pyz_r) + q_r[2]*q_r[3]/q_r[0]; ~%", basisStr, dir, i-1),
    printf(fh, "  q_r[9] = ~a_surfx~a_eval_quad_node_~a_l(Pzz_r) + q_r[3]*q_r[3]/q_r[0]; ~%", basisStr, dir, i-1),
    printf(fh, "~%"),

    /* Evaluate maximum speed for Lax penalization 
       Check positivity of T_l/T_r and if either is negative, we force Lax fluxes. */
    printf(fh, "  T_l = ~a_surfx~a_eval_quad_node_~a_r(Tii_l); ~%", basisStr, dir, i-1),
    printf(fh, "  T_r = ~a_surfx~a_eval_quad_node_~a_l(Tii_r); ~%", basisStr, dir, i-1),
    printf(fh, "  if (T_l > 0.0 && T_r > 0.0) { ~%"), 
    printf(fh, "    vth_max = fmax(sqrt(T_l), sqrt(T_r)); ~%"),
    printf(fh, "  } else if (T_l > 0.0 && T_r < 0.0) { ~%"),
    printf(fh, "    vth_max = sqrt(T_l); ~%"),
    printf(fh, "    use_lax = 1; ~%"), 
    printf(fh, "  } else if (T_l < 0.0 && T_r > 0.0) { ~%"),
    printf(fh, "    vth_max = sqrt(T_r); ~%"),
    printf(fh, "    use_lax = 1; ~%"), 
    printf(fh, "  } else { ~%"),
    printf(fh, "    vth_max = 0.0; ~%"),
    printf(fh, "    use_lax = 1; ~%"), 
    printf(fh, "  } ~%"), 
    printf(fh, "  u_l = ~a_surfx~a_eval_quad_node_~a_r(u_i_l); ~%", basisStr, dir, i-1),
    printf(fh, "  u_r = ~a_surfx~a_eval_quad_node_~a_l(u_i_r); ~%", basisStr, dir, i-1),
    printf(fh, "  u_max = fmax(fabs(u_l), fabs(u_r)); ~%", dir-1, dir-1),    
    printf(fh, "  pkpm_lax_quad[~a] = u_max + vth_max; ~%", i-1),
    printf(fh, "~%"),

    /* Check if rho^+, rho^-  < tolerance and we need to switch to Lax fluxes 
       Also check if there is a supersonic stagnation point such as a supersonic 
       flow into a wall which in my experience is more robustly treated with Lax
       fluxes. */
    printf(fh, "  if (q_l[0] < tol) use_lax = 1; ~%"),
    printf(fh, "  if (q_r[0] < tol) use_lax = 1; ~%"), 
    printf(fh, "  if (u_l + u_r < tol && u_max > vth_max) use_lax = 1; ~%"), 
    printf(fh, "~%"),

    /* Rotate to local coordinates at left and right interface */
    printf(fh, "  rot_to_local(wv_eqn, geom->tau1[~a], geom->tau2[~a], geom->norm[~a], q_l, q_l_local); ~%", dir-1, dir-1, dir-1),
    printf(fh, "  rot_to_local(wv_eqn, geom->tau1[~a], geom->tau2[~a], geom->norm[~a], q_r, q_r_local); ~%", dir-1, dir-1, dir-1),
    printf(fh, "~%"),

    /* Compute jumps for calculating fluctuations */
    printf(fh, "  delta[0] = q_r_local[0] - q_l_local[0]; ~%"),
    printf(fh, "  delta[1] = q_r_local[1] - q_l_local[1]; ~%"),
    printf(fh, "  delta[2] = q_r_local[2] - q_l_local[2]; ~%"),
    printf(fh, "  delta[3] = q_r_local[3] - q_l_local[3]; ~%"),
    printf(fh, "  delta[4] = q_r_local[4] - q_l_local[4]; ~%"),
    printf(fh, "  delta[5] = q_r_local[5] - q_l_local[5]; ~%"),
    printf(fh, "  delta[6] = q_r_local[6] - q_l_local[6]; ~%"),
    printf(fh, "  delta[7] = q_r_local[7] - q_l_local[7]; ~%"),
    printf(fh, "  delta[8] = q_r_local[8] - q_l_local[8]; ~%"),
    printf(fh, "  delta[9] = q_r_local[9] - q_l_local[9]; ~%"),

    /* Compute local waves and speeds at interface */
    printf(fh, "  my_max_speed = wave_roe(wv_eqn, delta, q_l_local, q_r_local, waves, speeds); ~%"),

    /* rescale speeds */
    printf(fh, "  lenr = geom->lenr[~a]; ~%", dir-1),
    printf(fh, "  speeds[0] *= lenr; ~%"),
    printf(fh, "  speeds[1] *= lenr; ~%"),
    printf(fh, "  speeds[2] *= lenr; ~%"),
    printf(fh, "  speeds[3] *= lenr; ~%"),
    printf(fh, "  speeds[4] *= lenr; ~%"),

    /* Compute local fluctuations at interface */
    printf(fh, "  qfluct_roe(wv_eqn, q_l_local, q_r_local, waves, speeds, amdq_local, apdq_local); ~%"),

    /* Rotate local fluctuations back to global coordinates */
    printf(fh, "  rot_to_global(wv_eqn, geom->tau1[~a], geom->tau2[~a], geom->norm[~a], amdq_local, amdq); ~%", dir-1, dir-1, dir-1),
    printf(fh, "  rot_to_global(wv_eqn, geom->tau1[~a], geom->tau2[~a], geom->norm[~a], apdq_local, apdq); ~%", dir-1, dir-1, dir-1),
    printf(fh, "~%"),

    printf(fh, "  amdq_rhoux_quad[~a] = amdq[1]; ~%", i-1),
    printf(fh, "  apdq_rhoux_quad[~a] = apdq[1]; ~%", i-1),
    printf(fh, "  amdq_rhouy_quad[~a] = amdq[2]; ~%", i-1),
    printf(fh, "  apdq_rhouy_quad[~a] = apdq[2]; ~%", i-1),
    printf(fh, "  amdq_rhouz_quad[~a] = amdq[3]; ~%", i-1),
    printf(fh, "  apdq_rhouz_quad[~a] = apdq[3]; ~%", i-1),
    printf(fh, "~%")
  ), 
  if (cdim = 1) then (
    printf(fh, "  pkpm_lax_l[0] = pkpm_lax_quad[0]; ~%"),
    printf(fh, "  if (use_lax || force_lax) { ~%"),
    printf(fh, "    double rhouxl_r = ~a_surfx~a_eval_quad_node_0_r(rhoux_l); ~%", basisStr, dir),
    printf(fh, "    double rhouyl_r = ~a_surfx~a_eval_quad_node_0_r(rhouy_l); ~%", basisStr, dir),
    printf(fh, "    double rhouzl_r = ~a_surfx~a_eval_quad_node_0_r(rhouz_l); ~%", basisStr, dir),
    printf(fh, "    double rhouxr_l = ~a_surfx~a_eval_quad_node_0_l(rhoux_r); ~%", basisStr, dir),
    printf(fh, "    double rhouyr_l = ~a_surfx~a_eval_quad_node_0_l(rhouy_r); ~%", basisStr, dir),
    printf(fh, "    double rhouzr_l = ~a_surfx~a_eval_quad_node_0_l(rhouz_r); ~%", basisStr, dir),
    printf(fh, "    pkpm_penalization_rhoux_l[0] = 0.5*pkpm_lax_l[0]*(rhouxr_l - rhouxl_r); ~%"),
    printf(fh, "    pkpm_penalization_rhouy_l[0] = 0.5*pkpm_lax_l[0]*(rhouyr_l - rhouyl_r); ~%"),
    printf(fh, "    pkpm_penalization_rhouz_l[0] = 0.5*pkpm_lax_l[0]*(rhouzr_l - rhouzl_r); ~%"),
    printf(fh, "  } else { ~%"),
    printf(fh, "    pkpm_penalization_rhoux_l[0] = 0.5*(apdq_rhoux_quad[0] - amdq_rhoux_quad[0]); ~%"),
    printf(fh, "    pkpm_penalization_rhouy_l[0] = 0.5*(apdq_rhouy_quad[0] - amdq_rhouy_quad[0]); ~%"),
    printf(fh, "    pkpm_penalization_rhouz_l[0] = 0.5*(apdq_rhouz_quad[0] - amdq_rhouz_quad[0]); ~%"),    
    printf(fh, "  } ~%")
  )
  else (
    /* First convert the quadrature-based maximum speed back to the modal basis */
    printf(fh, "  ~a_upwind_quad_to_modal(pkpm_lax_quad, pkpm_lax_l); ~%", basisStr),

    printf(fh, "  if (use_lax || force_lax) { ~%"),
    pkpm_lax_e : doExpand1(pkpm_lax_l, bSurf),

    rhouxl_e : doExpand1(rhoux_l, bC), 
    rhouxr_e : doExpand1(rhoux_r, bC), 
    rhouxl_r : subst(cv=1, rhouxl_e),
    rhouxr_l : subst(cv=-1, rhouxr_e), 
    jump_rhoux : 0.5*(rhouxr_l - rhouxl_r),
    penalization_rhoux_c : calcInnerProdList(surfVars, 1, bSurf, pkpm_lax_e*jump_rhoux),
    writeCExprs1(pkpm_penalization_rhoux_l, penalization_rhoux_c), 
    printf(fh, "~%"),
    flush_output(fh),

    rhouyl_e : doExpand1(rhouy_l, bC), 
    rhouyr_e : doExpand1(rhouy_r, bC), 
    rhouyl_r : subst(cv=1, rhouyl_e),
    rhouyr_l : subst(cv=-1, rhouyr_e), 
    jump_rhouy : 0.5*(rhouyr_l - rhouyl_r),
    penalization_rhouy_c : calcInnerProdList(surfVars, 1, bSurf, pkpm_lax_e*jump_rhouy),
    writeCExprs1(pkpm_penalization_rhouy_l, penalization_rhouy_c), 
    printf(fh, "~%"),
    flush_output(fh),

    rhouzl_e : doExpand1(rhouz_l, bC), 
    rhouzr_e : doExpand1(rhouz_r, bC), 
    rhouzl_r : subst(cv=1, rhouzl_e),
    rhouzr_l : subst(cv=-1, rhouzr_e), 
    jump_rhouz : 0.5*(rhouzr_l - rhouzl_r),
    penalization_rhouz_c : calcInnerProdList(surfVars, 1, bSurf, pkpm_lax_e*jump_rhouz),
    writeCExprs1(pkpm_penalization_rhouz_l, penalization_rhouz_c), 
    printf(fh, "~%"),
    flush_output(fh),

    printf(fh, "  } else { ~%"),

    printf(fh, "    double amdq_rhoux[~a] = {0.0}; ~%", NSurf),
    printf(fh, "    double apdq_rhoux[~a] = {0.0}; ~%", NSurf),
    printf(fh, "    double amdq_rhouy[~a] = {0.0}; ~%", NSurf),
    printf(fh, "    double apdq_rhouy[~a] = {0.0}; ~%", NSurf),
    printf(fh, "    double amdq_rhouz[~a] = {0.0}; ~%", NSurf),
    printf(fh, "    double apdq_rhouz[~a] = {0.0}; ~%", NSurf),
    printf(fh, "~%"),

    /* Create modal expansions of upwinded characteristics at quadrature points */
    printf(fh, "    ~a_upwind_quad_to_modal(amdq_rhoux_quad, amdq_rhoux); ~%", basisStr),
    printf(fh, "    ~a_upwind_quad_to_modal(amdq_rhouy_quad, amdq_rhouy); ~%", basisStr),
    printf(fh, "    ~a_upwind_quad_to_modal(amdq_rhouz_quad, amdq_rhouz); ~%", basisStr),
    printf(fh, "~%"),

    printf(fh, "    ~a_upwind_quad_to_modal(apdq_rhoux_quad, apdq_rhoux); ~%", basisStr),
    printf(fh, "    ~a_upwind_quad_to_modal(apdq_rhouy_quad, apdq_rhouy); ~%", basisStr),
    printf(fh, "    ~a_upwind_quad_to_modal(apdq_rhouz_quad, apdq_rhouz); ~%", basisStr),
    printf(fh, "~%"),

    for i : 1 thru NSurf do (
      printf(fh, "    pkpm_penalization_rhoux_l[~a] = 0.5*(apdq_rhoux[~a] - amdq_rhoux[~a]); ~%", i-1, i-1, i-1),
      printf(fh, "    pkpm_penalization_rhouy_l[~a] = 0.5*(apdq_rhouy[~a] - amdq_rhouy[~a]); ~%", i-1, i-1, i-1),
      printf(fh, "    pkpm_penalization_rhouz_l[~a] = 0.5*(apdq_rhouz[~a] - amdq_rhouz[~a]); ~%", i-1, i-1, i-1), 
      printf(fh, "~%")
    ), 

    printf(fh, "  } ~%")   
  ),

  printf(fh, "} ~%")
)$