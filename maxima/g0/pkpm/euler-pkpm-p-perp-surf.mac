/* This script generates the kernels for the surface term of Euler's equations
   for the parallel-kinetic-perpendicular-moment (pkpm) model */

load("modal-basis");
load("out-scripts");
load(stringproc)$
load("scifac")$
load("nodal_operations/nodal_functions")$
load("recovery")$
fpprec : 24$

cvars : [x, y, z]$
dx11 : [dx10, dx11, dx12]$

statevec : [rhou0, rhou1, rhou2, p_perp]$
lhs : [outrhou0, outrhou1, outrhou2, outp_perp]$

/* Helper functions for expanding in basis functions a quantity we know should be sparse  */
/* For example, alpha, the phase space flow only depends on a few phase space coordinates */
doMakeExprLst(vals, S)  := makelist(if vals[i] # 0 then S[i-1] else 0, i, 1, length(vals))$
doExpandLst(lst, basis) := sum(lst[i]*basis[i], i, 1, length(basis))$

/* 1D Euler special since only involves evaluations */
calcEulerPKPM1xUpdateInDir(dir, fh, funcNm, cdim, basisFun, polyOrder) := block(
  [bC,NC,cid,cv,surfVars,
  rhouxl_e,rhouyl_e,rhouzl_e,p_perpl_e,
  rhouxc_e,rhouyc_e,rhouzc_e,p_perpc_e,
  rhouxr_e,rhouyr_e,rhouzr_e,p_perpr_e,
  uxl_e,uxc_e,uxr_e,
  uyl_e,uyc_e,uyr_e,
  uzl_e,uzc_e,uzr_e,
  rhouxl_r,rhouyl_r,rhouzl_r,p_perpl_r,
  rhouxc_l,rhouyc_l,rhouzc_l,p_perpc_l,
  rhouxc_r,rhouyc_r,rhouzc_r,p_perpc_r,
  rhouxr_l,rhouyr_l,rhouzr_l,p_perpr_l,
  Ghat_rhoux_l_exp,Ghat_rhoux_r_exp,Ghat_rhouy_l_exp,Ghat_rhouy_r_exp,Ghat_rhouz_l_exp,Ghat_rhouz_r_exp,Ghat_p_perp_l_exp,Ghat_p_perp_r_exp,
  incr_rhoux_l,incr_rhoux_r,incr_rhouy_l,incr_rhouy_r,incr_rhouz_l,incr_rhouz_r,incr_p_perp_l,incr_p_perp_r],

  kill(varsC, bC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),

  /* Number of basis monomials. */
  NC : length(bC),

  printf(fh, "GKYL_CU_DH void ~a~a_~ax_~a_p~a(const double *w, const double *dxv, 
  const double *u_il, const double *u_ic, const double *u_ir,
  const double *vth_sql, const double *vth_sqc, const double *vth_sqr,
  const double *statevecl, const double *statevecc, const double *statevecr, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, cvars[dir], cdim, basisFun, polyOrder),
  printf(fh, "  // w[NDIM]:                       Cell-center coordinates.~%"),
  printf(fh, "  // dxv[NDIM]:                     Cell spacing.~%"),
  printf(fh, "  // u_il/u_ic/u_ir:                Input bulk velocity (ux,uy,uz) in left/center/right cells.~%"),
  printf(fh, "  // statevecl/statevecc/statevecr: [rho ux, rho uy, rho uz, p_perp], Fluid input state vector in left/center/right cells.~%"),
  printf(fh, "  // out: Incremented output.~%"),
  printf(fh, "~%"),

  /* cv = variable in direction of surface update. */
  cv : varsC[dir],

  /* Surface variables to integrate over. */
  surfVars : delete(cv,varsC),

  printf(fh, "  const double dx1 = 2.0/dxv[~a]; ~%", dir-1),
  printf(fh, "~%"),

  printf(fh, "  const double *rhoux_l = &statevecl[~a]; ~%", 0*NC),
  printf(fh, "  const double *rhouy_l = &statevecl[~a]; ~%", 1*NC),
  printf(fh, "  const double *rhouz_l = &statevecl[~a]; ~%", 2*NC),
  printf(fh, "  const double *p_perp_l = &statevecl[~a]; ~%", 3*NC),

  printf(fh, "~%"),

  printf(fh, "  const double *rhoux_c = &statevecc[~a]; ~%", 0*NC),
  printf(fh, "  const double *rhouy_c = &statevecc[~a]; ~%", 1*NC),
  printf(fh, "  const double *rhouz_c = &statevecc[~a]; ~%", 2*NC),
  printf(fh, "  const double *p_perp_c = &statevecc[~a]; ~%", 3*NC),

  printf(fh, "~%"),

  printf(fh, "  const double *rhoux_r = &statevecr[~a]; ~%", 0*NC),
  printf(fh, "  const double *rhouy_r = &statevecr[~a]; ~%", 1*NC),
  printf(fh, "  const double *rhouz_r = &statevecr[~a]; ~%", 2*NC),
  printf(fh, "  const double *p_perp_r = &statevecr[~a]; ~%", 3*NC),

  printf(fh, "~%"),

  printf(fh, "  const double *ux_l = &u_il[~a]; ~%", 0*NC),
  printf(fh, "  const double *ux_c = &u_ic[~a]; ~%", 0*NC),
  printf(fh, "  const double *ux_r = &u_ir[~a]; ~%", 0*NC),

  printf(fh, "~%"),

  printf(fh, "  double *outrhou0 = &out[~a]; ~%", 0*NC),
  printf(fh, "  double *outrhou1 = &out[~a]; ~%", 1*NC),
  printf(fh, "  double *outrhou2 = &out[~a]; ~%", 2*NC),
  printf(fh, "  double *outp_perp = &out[~a]; ~%", 3*NC),

  printf(fh, "~%"),

  rhouxl_e : doExpand1(rhoux_l, bC),
  rhouyl_e : doExpand1(rhouy_l, bC),
  rhouzl_e : doExpand1(rhouz_l, bC),
  p_perpl_e : doExpand1(p_perp_l, bC),

  rhouxc_e : doExpand1(rhoux_c, bC),
  rhouyc_e : doExpand1(rhouy_c, bC),
  rhouzc_e : doExpand1(rhouz_c, bC),
  p_perpc_e : doExpand1(p_perp_c, bC),

  rhouxr_e : doExpand1(rhoux_r, bC),
  rhouyr_e : doExpand1(rhouy_r, bC),
  rhouzr_e : doExpand1(rhouz_r, bC),
  p_perpr_e : doExpand1(p_perp_r, bC),

  rhouxl_r : subst(cv=1, rhouxl_e),
  rhouyl_r : subst(cv=1, rhouyl_e),
  rhouzl_r : subst(cv=1, rhouzl_e),
  p_perpl_r : subst(cv=1, p_perpl_e),

  rhouxc_l : subst(cv=-1, rhouxc_e),
  rhouyc_l : subst(cv=-1, rhouyc_e),
  rhouzc_l : subst(cv=-1, rhouzc_e),
  p_perpc_l : subst(cv=-1, p_perpc_e),

  rhouxc_r : subst(cv=1, rhouxc_e),
  rhouyc_r : subst(cv=1, rhouyc_e),
  rhouzc_r : subst(cv=1, rhouzc_e),
  p_perpc_r : subst(cv=1, p_perpc_e),

  rhouxr_l : subst(cv=-1, rhouxr_e),
  rhouyr_l : subst(cv=-1, rhouyr_e),
  rhouzr_l : subst(cv=-1, rhouzr_e),
  p_perpr_l : subst(cv=-1, p_perpr_e),

  /* evaluate u at surface interfaces to find max */
  printf(fh, "  double ux_l_r = ~a_~ax_p~a_surfx1_eval_quad_node_0_r(ux_l); ~%", basisFun, cdim, polyOrder),
  printf(fh, "  double ux_c_l = ~a_~ax_p~a_surfx1_eval_quad_node_0_l(ux_c); ~%", basisFun, cdim, polyOrder),
  printf(fh, "  double ux_c_r = ~a_~ax_p~a_surfx1_eval_quad_node_0_r(ux_c); ~%", basisFun, cdim, polyOrder),
  printf(fh, "  double ux_r_l = ~a_~ax_p~a_surfx1_eval_quad_node_0_l(ux_r); ~%", basisFun, cdim, polyOrder),

  printf(fh, "  double vth_sq_l_r = ~a_~ax_p~a_surfx1_eval_quad_node_0_r(vth_sql); ~%", basisFun, cdim, polyOrder),
  printf(fh, "  double vth_sq_c_l = ~a_~ax_p~a_surfx1_eval_quad_node_0_l(vth_sqc); ~%", basisFun, cdim, polyOrder),
  printf(fh, "  double vth_sq_c_r = ~a_~ax_p~a_surfx1_eval_quad_node_0_r(vth_sqc); ~%", basisFun, cdim, polyOrder),
  printf(fh, "  double vth_sq_r_l = ~a_~ax_p~a_surfx1_eval_quad_node_0_l(vth_sqr); ~%", basisFun, cdim, polyOrder),
  printf(fh, "~%"),
  printf(fh, "  double ux_max_l = fmax(fabs(ux_l_r), fabs(ux_c_l)); ~%"),
  printf(fh, "  double ux_max_r = fmax(fabs(ux_c_r), fabs(ux_r_l)); ~%"),
  printf(fh, "  double vth_max_l = fmax(sqrt(fabs(vth_sq_l_r)), sqrt(fabs(vth_sq_c_l))); ~%"),
  printf(fh, "  double vth_max_r = fmax(sqrt(fabs(vth_sq_c_r)), sqrt(fabs(vth_sq_r_l))); ~%"),
  printf(fh, "  double max_speed_l = ux_max_l + sqrt(5.0/3.0)*vth_max_l; ~%"),
  printf(fh, "  double max_speed_r = ux_max_r + sqrt(5.0/3.0)*vth_max_r; ~%"),
  printf(fh, "~%"),

  avg_rhoux_l : 0.5*(rhouxl_r*ux_l_r + rhouxc_l*ux_c_l),
  avg_rhoux_r : 0.5*(rhouxc_r*ux_c_r + rhouxr_l*ux_r_l),

  avg_rhouy_l : 0.5*(rhouyl_r*ux_l_r + rhouyc_l*ux_c_l),
  avg_rhouy_r : 0.5*(rhouyc_r*ux_c_r + rhouyr_l*ux_r_l),

  avg_rhouz_l : 0.5*(rhouzl_r*ux_l_r + rhouzc_l*ux_c_l),
  avg_rhouz_r : 0.5*(rhouzc_r*ux_c_r + rhouzr_l*ux_r_l),

  avg_p_perp_l : 0.5*(p_perpl_r*ux_l_r + p_perpc_l*ux_c_l),
  avg_p_perp_r : 0.5*(p_perpc_r*ux_c_r + p_perpr_l*ux_r_l),  

  jump_rhoux_l : 0.5*(rhouxc_l - rhouxl_r),
  jump_rhoux_r : 0.5*(rhouxr_l - rhouxc_r),

  jump_rhouy_l : 0.5*(rhouyc_l - rhouyl_r),
  jump_rhouy_r : 0.5*(rhouyr_l - rhouyc_r),

  jump_rhouz_l : 0.5*(rhouzc_l - rhouzl_r),
  jump_rhouz_r : 0.5*(rhouzr_l - rhouzc_r),

  jump_p_perp_l : 0.5*(p_perpc_l - p_perpl_r),
  jump_p_perp_r : 0.5*(p_perpr_l - p_perpc_r),

  Ghat_rhoux_l_exp : avg_rhoux_l - max_speed_l*jump_rhoux_l,
  Ghat_rhoux_r_exp : avg_rhoux_r - max_speed_r*jump_rhoux_r,

  Ghat_rhouy_l_exp : avg_rhouy_l - max_speed_l*jump_rhouy_l,
  Ghat_rhouy_r_exp : avg_rhouy_r - max_speed_r*jump_rhouy_r,

  Ghat_rhouz_l_exp : avg_rhouz_l - max_speed_l*jump_rhouz_l,
  Ghat_rhouz_r_exp : avg_rhouz_r - max_speed_r*jump_rhouz_r,

  Ghat_p_perp_l_exp : avg_p_perp_l - max_speed_l*jump_p_perp_l,
  Ghat_p_perp_r_exp : avg_p_perp_r - max_speed_r*jump_p_perp_r,

  printf(fh, "  double Ghat_rhoux_l = ~a; ~%", float(expand(Ghat_rhoux_l_exp))),
  printf(fh, "  double Ghat_rhoux_r = ~a; ~%", float(expand(Ghat_rhoux_r_exp))),

  printf(fh, "  double Ghat_rhouy_l = ~a; ~%", float(expand(Ghat_rhouy_l_exp))),
  printf(fh, "  double Ghat_rhouy_r = ~a; ~%", float(expand(Ghat_rhouy_r_exp))),

  printf(fh, "  double Ghat_rhouz_l = ~a; ~%", float(expand(Ghat_rhouz_l_exp))),
  printf(fh, "  double Ghat_rhouz_r = ~a; ~%", float(expand(Ghat_rhouz_r_exp))),   

  printf(fh, "  double Ghat_p_perp_l = ~a; ~%", float(expand(Ghat_p_perp_l_exp))),
  printf(fh, "  double Ghat_p_perp_r = ~a; ~%", float(expand(Ghat_p_perp_r_exp))),

  incr_rhoux_l : calcInnerProdList(surfVars, 1, subst(cv=-1, bC), Ghat_rhoux_l),
  incr_rhoux_r : calcInnerProdList(surfVars, -1, subst(cv=1, bC), Ghat_rhoux_r),

  incr_rhouy_l : calcInnerProdList(surfVars, 1, subst(cv=-1, bC), Ghat_rhouy_l),
  incr_rhouy_r : calcInnerProdList(surfVars, -1, subst(cv=1, bC), Ghat_rhouy_r),

  incr_rhouz_l : calcInnerProdList(surfVars, 1, subst(cv=-1, bC), Ghat_rhouz_l),
  incr_rhouz_r : calcInnerProdList(surfVars, -1, subst(cv=1, bC), Ghat_rhouz_r),

  incr_p_perp_l : calcInnerProdList(surfVars, 1, subst(cv=-1, bC), Ghat_p_perp_l),
  incr_p_perp_r : calcInnerProdList(surfVars, -1, subst(cv=1, bC), Ghat_p_perp_r),

  surfTerms : [incr_rhoux_l + incr_rhoux_r,incr_rhouy_l + incr_rhouy_r,incr_rhouz_l + incr_rhouz_r,incr_p_perp_l + incr_p_perp_r],
  for m : 1 thru 4 do (
    surf : surfTerms[m],
    writeCIncrExprs1(lhs[m], dx1*surf),
    printf(fh, "~%")
  ),

  printf(fh, "} ~%")
);

calcEulerPKPMUpdateInDir(dir, fh, funcNm, cdim, basisFun, polyOrder) := block(
  [bC,NC,cid,cv,surfVars,
  rhouxl_e,rhouyl_e,rhouzl_e,E_perpl_e,p_perpl_e,
  rhouxc_e,rhouyc_e,rhouzc_e,E_perpc_e,p_perpc_e,
  rhouxr_e,rhouyr_e,rhouzr_e,E_perpr_e,p_perpr_e,
  rhouxl_r,rhouyl_r,rhouzl_r,E_perpl_r,p_perpl_r,
  rhouxc_l,rhouyc_l,rhouzc_l,E_perpc_l,p_perpc_l,
  rhouxc_r,rhouyc_r,rhouzc_r,E_perpc_r,p_perpc_r,
  rhouxr_l,rhouyr_l,rhouzr_l,E_perpr_l,p_perpr_l,
  Ghat_rhoux_l_exp,Ghat_rhoux_r_exp,Ghat_rhouy_l_exp,Ghat_rhouy_r_exp,Ghat_rhouz_l_exp,Ghat_rhouz_r_exp,Ghat_E_perp_l_exp,Ghat_E_perp_r_exp,
  incr_rhoux_l,incr_rhoux_r,incr_rhouy_l,incr_rhouy_r,incr_rhouz_l,incr_rhouz_r,incr_E_perp_l,incr_E_perp_r],

  kill(varsC, bC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),

  /* Number of basis monomials. */
  NC : length(bC),

  printf(fh, "GKYL_CU_DH void ~a~a_~ax_~a_p~a(const double *w, const double *dxv,
  const double *u_il, const double *u_ic, const double *u_ir,
  const double *vth_sql, const double *vth_sqc, const double *vth_sqr,
  const double *statevecl, const double *statevecc, const double *statevecr, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, cvars[dir], cdim, basisFun, polyOrder),
  printf(fh, "  // w[NDIM]:                       Cell-center coordinates.~%"),
  printf(fh, "  // dxv[NDIM]:                     Cell spacing.~%"),
  printf(fh, "  // u_il/u_ic/u_ir:                Input bulk velocity (ux,uy,uz) in left/center/right cells.~%"),
  printf(fh, "  // statevecl/statevecc/statevecr: [rho ux, rho uy, rho uz, E_perp], Fluid input state vector in left/center/right cells.~%"),
  printf(fh, "  // out: Incremented output.~%"),
  printf(fh, "~%"),

  /* cv = variable in direction of surface update. */
  cv : varsC[dir],

  /* Surface variables to integrate over. */
  surfVars : delete(cv,varsC),

  bSurf : basisFromVars(basisFun,surfVars,polyOrder),
  NSurf : length(bSurf),

  /* Surface nodes given by tensor product of Gauss-Legendre quadrature points */
  surfNodes : gaussOrd(polyOrder+1, cdim-1),
  numNodes : length(surfNodes),

  printf(fh, "  const double dx1 = 2.0/dxv[~a]; ~%", dir-1),
  printf(fh, "~%"),

  printf(fh, "  const double *rhoux_l = &statevecl[~a]; ~%", 0*NC),
  printf(fh, "  const double *rhouy_l = &statevecl[~a]; ~%", 1*NC),
  printf(fh, "  const double *rhouz_l = &statevecl[~a]; ~%", 2*NC),
  printf(fh, "  const double *p_perp_l = &statevecl[~a]; ~%", 3*NC),

  printf(fh, "~%"),

  printf(fh, "  const double *rhoux_c = &statevecc[~a]; ~%", 0*NC),
  printf(fh, "  const double *rhouy_c = &statevecc[~a]; ~%", 1*NC),
  printf(fh, "  const double *rhouz_c = &statevecc[~a]; ~%", 2*NC),
  printf(fh, "  const double *p_perp_c = &statevecc[~a]; ~%", 3*NC),

  printf(fh, "~%"),

  printf(fh, "  const double *rhoux_r = &statevecr[~a]; ~%", 0*NC),
  printf(fh, "  const double *rhouy_r = &statevecr[~a]; ~%", 1*NC),
  printf(fh, "  const double *rhouz_r = &statevecr[~a]; ~%", 2*NC),
  printf(fh, "  const double *p_perp_r = &statevecr[~a]; ~%", 3*NC),

  printf(fh, "~%"),

  printf(fh, "  const double *u_l = &u_il[~a]; ~%", (dir-1)*NC),
  printf(fh, "  const double *u_c = &u_ic[~a]; ~%", (dir-1)*NC),
  printf(fh, "  const double *u_r = &u_ir[~a]; ~%", (dir-1)*NC),

  printf(fh, "~%"),

  printf(fh, "  double *outrhou0 = &out[~a]; ~%", 0*NC),
  printf(fh, "  double *outrhou1 = &out[~a]; ~%", 1*NC),
  printf(fh, "  double *outrhou2 = &out[~a]; ~%", 2*NC),
  printf(fh, "  double *outp_perp = &out[~a]; ~%", 3*NC),

  printf(fh, "~%"),

  /* Generate surface basis. this produces the ndim-1 orthogonal basis with no cv dependence. */
  bSurf : basisFromVars(basisFun,surfVars,polyOrder),
  NSurf : length(bSurf),

  /* Surface nodes given by tensor product of Gauss-Legendre quadrature points */
  surfNodes : gaussOrd(polyOrder+1, cdim-1),
  numNodes : length(surfNodes),

  printf(fh, "  double lax_rhoux_quad_l[~a] = {0.0};~%", numNodes),
  printf(fh, "  double lax_rhoux_quad_r[~a] = {0.0};~%", numNodes),
  printf(fh, "  double lax_rhoux_modal_l[~a] = {0.0};~%", NSurf),
  printf(fh, "  double lax_rhoux_modal_r[~a] = {0.0};~%", NSurf),

  printf(fh, "  double lax_rhouy_quad_l[~a] = {0.0};~%", numNodes),
  printf(fh, "  double lax_rhouy_quad_r[~a] = {0.0};~%", numNodes),
  printf(fh, "  double lax_rhouy_modal_l[~a] = {0.0};~%", NSurf),
  printf(fh, "  double lax_rhouy_modal_r[~a] = {0.0};~%", NSurf),

  printf(fh, "  double lax_rhouz_quad_l[~a] = {0.0};~%", numNodes),
  printf(fh, "  double lax_rhouz_quad_r[~a] = {0.0};~%", numNodes),
  printf(fh, "  double lax_rhouz_modal_l[~a] = {0.0};~%", NSurf),
  printf(fh, "  double lax_rhouz_modal_r[~a] = {0.0};~%", NSurf),

  printf(fh, "  double lax_p_perp_quad_l[~a] = {0.0};~%", numNodes),
  printf(fh, "  double lax_p_perp_quad_r[~a] = {0.0};~%", numNodes),
  printf(fh, "  double lax_p_perp_modal_l[~a] = {0.0};;~%", NSurf),
  printf(fh, "  double lax_p_perp_modal_r[~a] = {0.0};~%", NSurf),
  printf(fh, "~%"),

  printf(fh, "  double u_l_r = 0.0; ~%"),
  printf(fh, "  double u_c_l = 0.0; ~%"),
  printf(fh, "  double u_c_r = 0.0; ~%"),
  printf(fh, "  double u_r_l = 0.0; ~%"),

  printf(fh, "  double uQuad_l = 0.0; ~%"),
  printf(fh, "  double uQuad_r = 0.0; ~%"),

  printf(fh, "  double vth_sq_l_r = 0.0; ~%"),
  printf(fh, "  double vth_sq_c_l = 0.0; ~%"),
  printf(fh, "  double vth_sq_c_r = 0.0; ~%"),
  printf(fh, "  double vth_sq_r_l = 0.0; ~%"),

  printf(fh, "  double vthQuad_l = 0.0; ~%"),
  printf(fh, "  double vthQuad_r = 0.0; ~%"),

  printf(fh, "  double max_speed_l = 0.0; ~%"),
  printf(fh, "  double max_speed_r = 0.0; ~%"),

  printf(fh, "  double rhoux_l_r = 0.0; ~%"),
  printf(fh, "  double rhoux_c_l = 0.0; ~%"),
  printf(fh, "  double rhoux_c_r = 0.0; ~%"),
  printf(fh, "  double rhoux_r_l = 0.0; ~%"),

  printf(fh, "  double rhouy_l_r = 0.0; ~%"),
  printf(fh, "  double rhouy_c_l = 0.0; ~%"),
  printf(fh, "  double rhouy_c_r = 0.0; ~%"),
  printf(fh, "  double rhouy_r_l = 0.0; ~%"),

  printf(fh, "  double rhouz_l_r = 0.0; ~%"),
  printf(fh, "  double rhouz_c_l = 0.0; ~%"),
  printf(fh, "  double rhouz_c_r = 0.0; ~%"),
  printf(fh, "  double rhouz_r_l = 0.0; ~%"),

  printf(fh, "  double p_perp_l_r = 0.0; ~%"),
  printf(fh, "  double p_perp_c_l = 0.0; ~%"),
  printf(fh, "  double p_perp_c_r = 0.0; ~%"),
  printf(fh, "  double p_perp_r_l = 0.0; ~%"),
  printf(fh, "~%"),
  for i : 1 thru numNodes do (
    printf(fh, "  u_l_r = ~a_~ax_p~a_surfx~a_eval_quad_node_~a_r(u_l); ~%", basisFun, cdim, polyOrder, dir, i-1),
    printf(fh, "  u_c_l = ~a_~ax_p~a_surfx~a_eval_quad_node_~a_l(u_c); ~%", basisFun, cdim, polyOrder, dir, i-1),
    printf(fh, "  u_c_r = ~a_~ax_p~a_surfx~a_eval_quad_node_~a_r(u_c); ~%", basisFun, cdim, polyOrder, dir, i-1),
    printf(fh, "  u_r_l = ~a_~ax_p~a_surfx~a_eval_quad_node_~a_l(u_r); ~%", basisFun, cdim, polyOrder, dir, i-1),

    printf(fh, "  uQuad_l = fmax(fabs(u_l_r), fabs(u_c_l)); ~%"),
    printf(fh, "  uQuad_r = fmax(fabs(u_c_r), fabs(u_r_l)); ~%"),

    printf(fh, "  vth_sq_l_r = ~a_~ax_p~a_surfx~a_eval_quad_node_~a_r(vth_sql); ~%", basisFun, cdim, polyOrder, dir, i-1),
    printf(fh, "  vth_sq_c_l = ~a_~ax_p~a_surfx~a_eval_quad_node_~a_l(vth_sqc); ~%", basisFun, cdim, polyOrder, dir, i-1),
    printf(fh, "  vth_sq_c_r = ~a_~ax_p~a_surfx~a_eval_quad_node_~a_r(vth_sqc); ~%", basisFun, cdim, polyOrder, dir, i-1),
    printf(fh, "  vth_sq_r_l = ~a_~ax_p~a_surfx~a_eval_quad_node_~a_l(vth_sqr); ~%", basisFun, cdim, polyOrder, dir, i-1),

    printf(fh, "  vthQuad_l = fmax(sqrt(fabs(vth_sq_l_r)), sqrt(fabs(vth_sq_c_l))); ~%"),
    printf(fh, "  vthQuad_r = fmax(sqrt(fabs(vth_sq_c_r)), sqrt(fabs(vth_sq_r_l))); ~%"),

    printf(fh, "  max_speed_l = uQuad_l + sqrt(5.0/3.0)*vthQuad_l; ~%"),
    printf(fh, "  max_speed_r = uQuad_r + sqrt(5.0/3.0)*vthQuad_r; ~%"),

    printf(fh, "  rhoux_l_r = ~a_~ax_p~a_surfx~a_eval_quad_node_~a_r(rhoux_l); ~%", basisFun, cdim, polyOrder, dir, i-1),
    printf(fh, "  rhoux_c_l = ~a_~ax_p~a_surfx~a_eval_quad_node_~a_l(rhoux_c); ~%", basisFun, cdim, polyOrder, dir, i-1),
    printf(fh, "  rhoux_c_r = ~a_~ax_p~a_surfx~a_eval_quad_node_~a_r(rhoux_c); ~%", basisFun, cdim, polyOrder, dir, i-1),
    printf(fh, "  rhoux_r_l = ~a_~ax_p~a_surfx~a_eval_quad_node_~a_l(rhoux_r); ~%", basisFun, cdim, polyOrder, dir, i-1),

    printf(fh, "  rhouy_l_r = ~a_~ax_p~a_surfx~a_eval_quad_node_~a_r(rhouy_l); ~%", basisFun, cdim, polyOrder, dir, i-1),
    printf(fh, "  rhouy_c_l = ~a_~ax_p~a_surfx~a_eval_quad_node_~a_l(rhouy_c); ~%", basisFun, cdim, polyOrder, dir, i-1),
    printf(fh, "  rhouy_c_r = ~a_~ax_p~a_surfx~a_eval_quad_node_~a_r(rhouy_c); ~%", basisFun, cdim, polyOrder, dir, i-1),
    printf(fh, "  rhouy_r_l = ~a_~ax_p~a_surfx~a_eval_quad_node_~a_l(rhouy_r); ~%", basisFun, cdim, polyOrder, dir, i-1),

    printf(fh, "  rhouz_l_r = ~a_~ax_p~a_surfx~a_eval_quad_node_~a_r(rhouz_l); ~%", basisFun, cdim, polyOrder, dir, i-1),
    printf(fh, "  rhouz_c_l = ~a_~ax_p~a_surfx~a_eval_quad_node_~a_l(rhouz_c); ~%", basisFun, cdim, polyOrder, dir, i-1),
    printf(fh, "  rhouz_c_r = ~a_~ax_p~a_surfx~a_eval_quad_node_~a_r(rhouz_c); ~%", basisFun, cdim, polyOrder, dir, i-1),
    printf(fh, "  rhouz_r_l = ~a_~ax_p~a_surfx~a_eval_quad_node_~a_l(rhouz_r); ~%", basisFun, cdim, polyOrder, dir, i-1),

    printf(fh, "  p_perp_l_r = ~a_~ax_p~a_surfx~a_eval_quad_node_~a_r(p_perp_l); ~%", basisFun, cdim, polyOrder, dir, i-1),
    printf(fh, "  p_perp_c_l = ~a_~ax_p~a_surfx~a_eval_quad_node_~a_l(p_perp_c); ~%", basisFun, cdim, polyOrder, dir, i-1),
    printf(fh, "  p_perp_c_r = ~a_~ax_p~a_surfx~a_eval_quad_node_~a_r(p_perp_c); ~%", basisFun, cdim, polyOrder, dir, i-1),
    printf(fh, "  p_perp_r_l = ~a_~ax_p~a_surfx~a_eval_quad_node_~a_l(p_perp_r); ~%", basisFun, cdim, polyOrder, dir, i-1),

    printf(fh, "  lax_rhoux_quad_l[~a] = 0.5*(rhoux_l_r*u_l_r + rhoux_c_l*u_c_l) - 0.5*max_speed_l*(rhoux_c_l - rhoux_l_r); ~%", i-1),
    printf(fh, "  lax_rhoux_quad_r[~a] = 0.5*(rhoux_c_r*u_c_r + rhoux_r_l*u_r_l) - 0.5*max_speed_r*(rhoux_r_l - rhoux_c_r); ~%", i-1),

    printf(fh, "  lax_rhouy_quad_l[~a] = 0.5*(rhouy_l_r*u_l_r + rhouy_c_l*u_c_l) - 0.5*max_speed_l*(rhouy_c_l - rhouy_l_r); ~%", i-1),
    printf(fh, "  lax_rhouy_quad_r[~a] = 0.5*(rhouy_c_r*u_c_r + rhouy_r_l*u_r_l) - 0.5*max_speed_r*(rhouy_r_l - rhouy_c_r); ~%", i-1),

    printf(fh, "  lax_rhouz_quad_l[~a] = 0.5*(rhouz_l_r*u_l_r + rhouz_c_l*u_c_l) - 0.5*max_speed_l*(rhouz_c_l - rhouz_l_r); ~%", i-1),
    printf(fh, "  lax_rhouz_quad_r[~a] = 0.5*(rhouz_c_r*u_c_r + rhouz_r_l*u_r_l) - 0.5*max_speed_r*(rhouz_r_l - rhouz_c_r); ~%", i-1),

    printf(fh, "  lax_p_perp_quad_l[~a] = 0.5*(p_perp_l_r*u_l_r + p_perp_c_l*u_c_l) - 0.5*max_speed_l*(p_perp_c_l - p_perp_l_r); ~%", i-1),
    printf(fh, "  lax_p_perp_quad_r[~a] = 0.5*(p_perp_c_r*u_c_r + p_perp_r_l*u_r_l) - 0.5*max_speed_r*(p_perp_r_l - p_perp_c_r); ~%", i-1),
    printf(fh, "~%")
  ),

  printf(fh, "  // Project tensor nodal quadrature basis back onto modal basis. ~%"),
  printf(fh, "  ~a_~ax_p~a_upwind_quad_to_modal(lax_rhoux_quad_l, lax_rhoux_modal_l); ~%", basisFun, cdim, polyOrder),
  printf(fh, "  ~a_~ax_p~a_upwind_quad_to_modal(lax_rhoux_quad_r, lax_rhoux_modal_r); ~%", basisFun, cdim, polyOrder),

  printf(fh, "  ~a_~ax_p~a_upwind_quad_to_modal(lax_rhouy_quad_l, lax_rhouy_modal_l); ~%", basisFun, cdim, polyOrder),
  printf(fh, "  ~a_~ax_p~a_upwind_quad_to_modal(lax_rhouy_quad_r, lax_rhouy_modal_r); ~%", basisFun, cdim, polyOrder),

  printf(fh, "  ~a_~ax_p~a_upwind_quad_to_modal(lax_rhouz_quad_l, lax_rhouz_modal_l); ~%", basisFun, cdim, polyOrder),
  printf(fh, "  ~a_~ax_p~a_upwind_quad_to_modal(lax_rhouz_quad_r, lax_rhouz_modal_r); ~%", basisFun, cdim, polyOrder),

  printf(fh, "  ~a_~ax_p~a_upwind_quad_to_modal(lax_p_perp_quad_l, lax_p_perp_modal_l); ~%", basisFun, cdim, polyOrder),
  printf(fh, "  ~a_~ax_p~a_upwind_quad_to_modal(lax_p_perp_quad_r, lax_p_perp_modal_r); ~%", basisFun, cdim, polyOrder),
  printf(fh, "~%"),

  /* Create expansions of u_i_max (|u_i_max| evaluated at the surface) on the left and right in the surface basis. */
  lax_rhoux_modal_l_e : doExpand1(lax_rhoux_modal_l, bSurf),
  lax_rhoux_modal_r_e : doExpand1(lax_rhoux_modal_r, bSurf),

  lax_rhouy_modal_l_e : doExpand1(lax_rhouy_modal_l, bSurf),
  lax_rhouy_modal_r_e : doExpand1(lax_rhouy_modal_r, bSurf),

  lax_rhouz_modal_l_e : doExpand1(lax_rhouz_modal_l, bSurf),
  lax_rhouz_modal_r_e : doExpand1(lax_rhouz_modal_r, bSurf),

  lax_p_perp_modal_l_e : doExpand1(lax_p_perp_modal_l, bSurf),
  lax_p_perp_modal_r_e : doExpand1(lax_p_perp_modal_r, bSurf),

  /* Compute the increments on the left and right from Ghat expansions */
  incr_rhoux_l : calcInnerProdList(surfVars, 1, subst(cv=-1, bC), lax_rhoux_modal_l_e),
  incr_rhoux_r : calcInnerProdList(surfVars, -1, subst(cv=1, bC), lax_rhoux_modal_r_e),

  incr_rhouy_l : calcInnerProdList(surfVars, 1, subst(cv=-1, bC), lax_rhouy_modal_l_e),
  incr_rhouy_r : calcInnerProdList(surfVars, -1, subst(cv=1, bC), lax_rhouy_modal_r_e),

  incr_rhouz_l : calcInnerProdList(surfVars, 1, subst(cv=-1, bC), lax_rhouz_modal_l_e),
  incr_rhouz_r : calcInnerProdList(surfVars, -1, subst(cv=1, bC), lax_rhouz_modal_r_e),

  incr_p_perp_l : calcInnerProdList(surfVars, 1, subst(cv=-1, bC), lax_p_perp_modal_l_e),
  incr_p_perp_r : calcInnerProdList(surfVars, -1, subst(cv=1, bC), lax_p_perp_modal_r_e),

  surfTerms : [incr_rhoux_l + incr_rhoux_r,incr_rhouy_l + incr_rhouy_r,incr_rhouz_l + incr_rhouz_r,incr_p_perp_l + incr_p_perp_r],
  for m : 1 thru 4 do (
    surf : surfTerms[m],
    writeCIncrExprs1(lhs[m], dx1*surf),
    printf(fh, "~%")
  ),

  printf(fh, "} ~%")
);