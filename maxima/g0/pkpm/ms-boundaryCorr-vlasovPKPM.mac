/* Generate kernels that compute the boundary correction moments of the distribution
    function in Vlasov for the parallel-kinetic-perpendicular-moment model.
    Note that this model only requires a vtSq correction because the Vlasov equation
    is in the local rest frame. */
load("pkpm/boundaryCorr-vlasovPKPMFuncs")$

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
maxCdim_Ser : 3$

/* Tensor order basis. */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$    /* BoundaryEval fails for polyOrder>2 for some reason. */
minCdim_Tensor : 1$
maxCdim_Tensor : 2$

/* ...... END OF USER INPUTS........ */

bName        : ["ser","tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$

for bInd : 1 thru length(bName) do (
  for d : minCdim[bInd] thru maxCdim[bInd] do (
    maxPolyOrderB : maxPolyOrder[bInd],
    minPolyOrderB : minPolyOrder[bInd],
    if (d>1 and bName[bInd] = "ser") then maxPolyOrderB : 1,
    
    for polyOrder : minPolyOrderB thru maxPolyOrderB do (  
      /* Create a separate file w/ boundary corrections. */
      disp(printf(false,sconcat("Creating Vlasov PKPM LBO boundary corrections ~ax~av ", bName[bInd], " p~a"),d,1,polyOrder)),
      fname : sconcat("~/max-out/mom_bcorr_lbo_vlasov_pkpm_", d, "x1v_", bName[bInd], "_p", polyOrder, ".c"),
      fh : openw(fname),
      printf(fh, "#include <gkyl_mom_bcorr_lbo_vlasov_pkpm_kernels.h> ~%"),
      funcName : sconcat("mom_bcorr_lbo_vlasov_pkpm_", d, "x1v_", bName[bInd], "_p", polyOrder),
      calcBoundaryIntegral(fh, funcName, d, 1, bName[bInd], polyOrder),
      close(fh)
    )
  )
);


