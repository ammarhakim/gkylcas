/* This script generates the kernels for the boundary surface term
   drag contribution from Lenard Bernstein operator when 
   coupled to the Vlasov parallel-kinetic-perpendicular-moment (pkpm) model. */


load("modal-basis");
load("out-scripts");
load(stringproc)$
load("scifac")$
load("nodal_operations/nodal_functions")$
fpprec : 24$

calcVlasovPKPMLBODragBoundarySurfUpdater(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC, bC, varsP, bP, NP, NC, pDim, 
   surfVars, bSurf, surf_cdim, surf_vdim, surfNodes, basisStr, numNodes, NSurf, 
   alphaDrSurf_l_c, alphaDrSurf_r_c, alst_l, alst_r, alphaDrSurf_l_e, alphaDrSurf_r_e,
   alphaOrd_l_n, alphaOrd_r_n, 
   F_0_HatSurf_e, G_1_HatSurf_e, 
   Ghat_F_0_c, Ghat_G_1_c, 
   Ghat_F_0_e, Ghat_G_1_e, 
   incr_F_0, incr_G_1],

  /* Load basis of dimensionality requested. */
  [varsC,bC,varsP,bP] : loadPhaseBasis(basisFun, cdim, vdim, polyOrder),

  /* Number of basis monomials. */
  NP : length(bP),
  NC : length(bC),
  pDim  : length(varsP),

  /* Surface variables to integrate over. */
  surfVars : delete(vx,varsP),

  /* Generate surface basis. this produces the ndim-1 orthogonal basis with no vx dependence. */
  /* Also generate necessary basis strings, and surface nodes given by tensor product of Gauss-Legendre quadrature points */
  if polyOrder=1 then (  /* Force p=1 to use hybrid basis. */
    bSurf : basisFromVars("hyb",surfVars,polyOrder),
    surf_cdim : cdim,  surf_vdim : 0,
    surfNodes : gaussOrdHyb(1+1, surf_cdim, surf_vdim),

    basisStr : sconcat("hyb_", cdim, "x", vdim, "v", "_p", polyOrder)
  ) else (
    bSurf : basisFromVars(basisFun,surfVars,polyOrder),
    surfNodes : gaussOrd(polyOrder+1, pDim-1),

    basisStr : sconcat(basisFun, "_", cdim+vdim, "x", "_p", polyOrder)
  ),
  numNodes : length(surfNodes),
  NSurf : length(bSurf),

  printf(fh, "GKYL_CU_DH double ~a(const double *w, const double *dxv, const double *nuSum, const double *nuPrimMomsSum, const int edge, const double *fSkin, const double *fEdge, double* GKYL_RESTRICT out) ~%{ ~%", funcNm),
  printf(fh, "  // w[NDIM]:       Cell-center coordinates. ~%"),
  printf(fh, "  // dxv[NDIM]:     Cell spacing. ~%"),
  printf(fh, "  // nuSum:         Collisionalities added (self and cross species collisionalities). ~%"),
  printf(fh, "  // nuPrimMomsSum: Sum of bulk velocities and thermal speeds (squared) times their respective collisionalities. ~%"),
  printf(fh, "  // fSkin/fEdge:   Input Distribution function [F_0, T_perp G = T_perp (F_1 - F_0)] in skin cell/last edge cell ~%"),
  printf(fh, "  // out:           Incremented distribution function in cell ~%"),

  /* grid spacing in v_parallel and v_parallel coordinate */
  printf(fh, "  const double dv1par = 2.0/dxv[~a]; ~%", cdim),
  printf(fh, "  const double dvpar = dxv[~a], wvpar = w[~a]; ~%", cdim, cdim),

  /* Access F_0 and T_perp G, first two Laguerre moments */
  printf(fh, "  const double *F_0Skin = &fSkin[~a]; ~%", 0),
  printf(fh, "  const double *G_1Skin = &fSkin[~a]; ~%", NP),  
  printf(fh, "  const double *F_0Edge = &fEdge[~a]; ~%", 0),
  printf(fh, "  const double *G_1Edge = &fEdge[~a]; ~%", NP), 

  /* Access the components of out for the first two Laguerre moments */
  printf(fh, "  double *out_F_0 = &out[~a]; ~%", 0),
  printf(fh, "  double *out_G_1 = &out[~a]; ~%", NP),  

  nuSum_e : doExpand1(nuSum,bC),
  /* Expand the mean flow speed in the configuration basis. */
  nuUSum_e : doExpand1(sumNuUPar,bC),
  /* Create pointer to M1_correction to upar. */
  printf(fh, "  const double *sumNuUPar = &nuPrimMomsSum[~a]; ~%", 0),
  printf(fh, "~%"),
  /* Calculate the alpha-velocity due to drag. */
  alphaDr : nuSum_e*((1.0/2.0)*dvpar*vx+wvpar)-nuUSum_e,

  /* Create expansions of f_left, f_center, and f_right on volume basis. */
  F_0_Skin_e : doExpand1(F_0Skin, bP),
  F_0_Edge_e : doExpand1(F_0Edge, bP),
  G_1_Skin_e : doExpand1(G_1Skin, bP),
  G_1_Edge_e : doExpand1(G_1Edge, bP),

  /* Project alphaDrag evaluated at interior surface onto surf basis. */
  alphaDrSurf_l_c : fullratsimp(innerProd(surfVars, 1, bSurf, subst(vx=-1,alphaDr))),
  alphaDrSurf_r_c : fullratsimp(innerProd(surfVars, 1, bSurf, subst(vx=1,alphaDr))),
  alst_l          : doMakeExprLst(alphaDrSurf_l_c, alphaDrSurf),
  alst_r          : doMakeExprLst(alphaDrSurf_r_c, alphaDrSurf),
  alphaDrSurf_l_e : doExpand(alst_l, bSurf),
  alphaDrSurf_r_e : doExpand(alst_r, bSurf),

  /* Evaluate alpha at ordinates.
     Note: alphaSurf_e is already a surface expansion. 
     In addition, it is continuous and does not vary with respect to the surface variable.
     We still require a alpha_l (w - dv/2) and alpha_r (w + dv/2) for the two sides of the cell */
  alphaOrd_l_n : gcfac(float(evAtNodes(alphaDrSurf_l_e,surfNodes,surfVars))),
  alphaOrd_r_n : gcfac(float(evAtNodes(alphaDrSurf_r_e,surfNodes,surfVars))),

  printf(fh, "  double alphaDrSurf[~a] = {0.0}; ~%", NSurf),
  printf(fh, "  double F_0_UpwindQuad[~a] = {0.0};~%", numNodes),
  printf(fh, "  double F_0_Upwind[~a] = {0.0};;~%", NSurf),
  printf(fh, "  double Ghat_F_0[~a] = {0.0}; ~%", NSurf),
  printf(fh, "  double G_1_UpwindQuad[~a] = {0.0};~%", numNodes),
  printf(fh, "  double G_1_Upwind[~a] = {0.0};;~%", NSurf),
  printf(fh, "  double Ghat_G_1[~a] = {0.0}; ~%", NSurf),
  printf(fh, "~%"),
  /* if edge == -1, we are doing the left edge boundary and the skin cell needs to be evaluated at +1 */
  /* In addition we need the drag term evaluated at +1 (so alphaDr evaluated on the right) */
  printf(fh, "  if (edge == -1) { ~%~%"),
  /* Write out drag term for far left edge boundary.
     Need alpha evaluated at +1 for skin-edge interface.
     NOTE: zero-flux boundary conditions means for far left boundary, no drag term on -1 surface */
  writeCExprs1(alphaDrSurf, alphaDrSurf_r_c),
  printf(fh, "~%"),
  /* Write out upwinded distribution function at quadrature points for the far left edge */
  /* Within the skin cell, we need alpha_r (alpha evaluated at +1) for the alpha_F_0 and alpha_G_1
     just like how the skin cell is evaluated at +1 */
  for i : 1 thru length(alphaOrd_r_n) do (
    printf(fh, "  if (~a < 0) { ~%", alphaOrd_r_n[i]),
    printf(fh, "    F_0_UpwindQuad[~a] = ~a_surfx~a_eval_quad_node_~a_r(F_0Skin); ~%", i-1, basisStr, cdim+1, i-1),
    printf(fh, "    G_1_UpwindQuad[~a] = ~a_surfx~a_eval_quad_node_~a_r(G_1Skin); ~%", i-1, basisStr, cdim+1, i-1),
    printf(fh, "  } else { ~%"),
    printf(fh, "    F_0_UpwindQuad[~a] = ~a_surfx~a_eval_quad_node_~a_l(F_0Edge); ~%", i-1, basisStr, cdim+1, i-1),
    printf(fh, "    G_1_UpwindQuad[~a] = ~a_surfx~a_eval_quad_node_~a_l(G_1Edge); ~%", i-1, basisStr, cdim+1, i-1),
    printf(fh, "  } ~%")
  ),
  printf(fh, "~%"),
  printf(fh, "  // Project tensor nodal quadrature basis back onto modal basis. ~%"),
  if polyOrder=1 then (  /* Force p=1 to use hybrid basis. */
    printf(fh, "  ~a_vdir_upwind_quad_to_modal(F_0_UpwindQuad, F_0_Upwind); ~%", basisStr),
    printf(fh, "  ~a_vdir_upwind_quad_to_modal(G_1_UpwindQuad, G_1_Upwind); ~%", basisStr)
  ) else (
    printf(fh, "  ~a_upwind_quad_to_modal(F_0_UpwindQuad, F_0_Upwind); ~%", basisStr),
    printf(fh, "  ~a_upwind_quad_to_modal(G_1_UpwindQuad, G_1_Upwind); ~%", basisStr)
  ),
  printf(fh, "~%"),

  /* Create expansions of F_0_hat, G_1_hat (upwinded first two Laguerre moments) on the surface basis. */
  F_0_HatSurf_e : doExpand1(F_0_Upwind, bSurf),
  G_1_HatSurf_e : doExpand1(G_1_Upwind, bSurf),

  Ghat_F_0_c : calcInnerProdList(surfVars, alphaDrSurf_r_e, bSurf, F_0_HatSurf_e),
  Ghat_G_1_c : calcInnerProdList(surfVars, alphaDrSurf_r_e, bSurf, G_1_HatSurf_e),
  /* Ghat_c (coefficients of Ghat) is what gets written. From here
  ** on we can simply refer to Ghat. */
  writeCExprs1(Ghat_F_0, Ghat_F_0_c),
  writeCExprs1(Ghat_G_1, Ghat_G_1_c),
  printf(fh, "~%"),
  flush_output(fh),

  Ghat_F_0_e       : doExpand1(Ghat_F_0, bSurf),
  Ghat_G_1_e       : doExpand1(Ghat_G_1, bSurf),

  /* Increments to the far left skin cell (some dimensional factors missing). */
  incr_F_0 : calcInnerProdList(surfVars, 1.0, subst(vx=1.0, bP), Ghat_F_0_e),
  incr_G_1 : calcInnerProdList(surfVars, 1.0, subst(vx=1.0, bP), Ghat_G_1_e),
  
  /* Write out contribution */
  writeCIncrExprs1(out_F_0, dv1par*incr_F_0),
  writeCIncrExprs1(out_G_1, dv1par*incr_G_1),

  /* otherwise edge == +1, we are doing the right edge boundary and the skin cell needs to be evauluated at -1 */
  printf(fh, "~%  } else { ~%~%"),
  /* Write out drag term for far right edge boundary.
     Need alpha evaluated at -1 for skin-edge interface.
     NOTE: zero-flux boundary conditions means for far right boundary, no drag term on +1 surface */
  writeCExprs1(alphaDrSurf, alphaDrSurf_l_c),
  printf(fh, "~%"),
  /* Write out upwinded distribution function at quadrature points for the far right edge */
  /* Within the skin cell, we need alpha_l (alpha evaluated at -1)
     just like how the skin cell is evaluated at -1 */
  for i : 1 thru length(alphaOrd_l_n) do (
    printf(fh, "  if (~a < 0) { ~%", alphaOrd_l_n[i]),
    printf(fh, "    F_0_UpwindQuad[~a] = ~a_surfx~a_eval_quad_node_~a_r(F_0Edge); ~%", i-1, basisStr, cdim+1, i-1),
    printf(fh, "    G_1_UpwindQuad[~a] = ~a_surfx~a_eval_quad_node_~a_r(G_1Edge); ~%", i-1, basisStr, cdim+1, i-1),
    printf(fh, "  } else { ~%"),
    printf(fh, "    F_0_UpwindQuad[~a] = ~a_surfx~a_eval_quad_node_~a_l(F_0Skin); ~%", i-1, basisStr, cdim+1, i-1),
    printf(fh, "    G_1_UpwindQuad[~a] = ~a_surfx~a_eval_quad_node_~a_l(G_1Skin); ~%", i-1, basisStr, cdim+1, i-1),
    printf(fh, "  } ~%")
  ),
  printf(fh, "~%"),
  printf(fh, "  // Project tensor nodal quadrature basis back onto modal basis. ~%"),
  if polyOrder=1 then (  /* Force p=1 to use hybrid basis. */
    printf(fh, "  ~a_vdir_upwind_quad_to_modal(F_0_UpwindQuad, F_0_Upwind); ~%", basisStr),
    printf(fh, "  ~a_vdir_upwind_quad_to_modal(G_1_UpwindQuad, G_1_Upwind); ~%", basisStr)
  ) else (
    printf(fh, "  ~a_upwind_quad_to_modal(F_0_UpwindQuad, F_0_Upwind); ~%", basisStr),
    printf(fh, "  ~a_upwind_quad_to_modal(G_1_UpwindQuad, G_1_Upwind); ~%", basisStr)
  ),
  printf(fh, "~%"),

  /* Create expansions of F_0_hat, G_1_hat (upwinded first two Laguerre moments) on the surface basis. */
  F_0_HatSurf_e : doExpand1(F_0_Upwind, bSurf),
  G_1_HatSurf_e : doExpand1(G_1_Upwind, bSurf),

  Ghat_F_0_c : calcInnerProdList(surfVars, alphaDrSurf_l_e, bSurf, F_0_HatSurf_e),
  Ghat_G_1_c : calcInnerProdList(surfVars, alphaDrSurf_l_e, bSurf, G_1_HatSurf_e),
  /* Ghat_c (coefficients of Ghat) is what gets written. From here
  ** on we can simply refer to Ghat. */
  writeCExprs1(Ghat_F_0, Ghat_F_0_c),
  writeCExprs1(Ghat_G_1, Ghat_G_1_c),
  printf(fh, "~%"),
  flush_output(fh),

  Ghat_F_0_e       : doExpand1(Ghat_F_0, bSurf),
  Ghat_G_1_e       : doExpand1(Ghat_G_1, bSurf),

  /* Increments to the far right skin cell (some dimensional factors missing). */
  incr_F_0 : calcInnerProdList(surfVars, -1.0, subst(vx=-1.0, bP), Ghat_F_0_e),
  incr_G_1 : calcInnerProdList(surfVars, -1.0, subst(vx=-1.0, bP), Ghat_G_1_e),
  
  /* Write out contribution */
  writeCIncrExprs1(out_F_0, dv1par*incr_F_0),
  writeCIncrExprs1(out_G_1, dv1par*incr_G_1),
  printf(fh, "~%"),
  printf(fh, "  }~%"),
  printf(fh, "~%"),

  printf(fh, "  return 0.;~%"),  /* Return CFL frequency from volume kernel. */
  printf(fh, "~%"),

  printf(fh, "} ~%")
);


