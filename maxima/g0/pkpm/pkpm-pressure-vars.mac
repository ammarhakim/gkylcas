/* This script generates the kernels for calculating the pressure tensor 
   p_ij = (p_par - p_perp) b_i b_j + p_perp g_ij via weak multiplication.
   Computes both the volume expansion and the necessary surface expansions of p_ij at
   the corresponding surfaces 
   (Pxx, Pxy, Pxz and x surfaces, Pxy, Pyy, Pyz at y surfaces, Pxz, Pyz, Pzz at z surfaces) */

load("modal-basis")$
load("out-scripts")$
load(stringproc)$
load("scifac")$
fpprec : 24$

calcPKPMPressure(fh, funcNm, cdim, basisFun, polyOrder) := block(
  [varsC, bC, NC, p_par_e, p_perp_e, 
   p_par_xl_c, p_par_xr_c, p_par_yl_c, p_par_yr_c, p_par_zl_c, p_par_zr_c, 
   p_perp_xl_c, p_perp_xr_c, p_perp_yl_c, p_perp_yr_c, p_perp_zl_c, p_perp_zr_c],

  kill(varsC, bC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),
  surfVarsx : delete(x,varsC),
  bSurfx : basisFromVars(basisFun,surfVarsx,polyOrder),
  if (cdim > 1) then (
    surfVarsy : delete(y,varsC),
    bSurfy : basisFromVars(basisFun,surfVarsy,polyOrder)
  ),
  if (cdim = 3) then (
    surfVarsz : delete(z,varsC),
    bSurfz : basisFromVars(basisFun,surfVarsz,polyOrder)
  ),

  /* Number of basis monomials. */
  NC : length(bC),
  if (cdim = 1) then (
    NSurf : 1
  )
  else (
    NSurf : length(bSurfx)
  ),

  printf(fh, "#include <gkyl_euler_pkpm_kernels.h> ~%"),
  printf(fh, "#include <gkyl_binop_mul_ser.h> ~%"),
  printf(fh, "GKYL_CU_DH void ~a(const double *bvar, const double *bvar_surf, const double *vlasov_pkpm_moms, 
    double* GKYL_RESTRICT p_ij, double* GKYL_RESTRICT p_ij_surf) ~%{ ~%", funcNm, polyOrder),
  printf(fh, "  // bvar:             Input volume expansion of magnetic field unit vector and tensor.~%"),
  printf(fh, "  //                   [bx, by, bz, bxbx, bxby, bxbz, byby, bybz, bzbz] ~%"),
  printf(fh, "  // bvar_surf:        Input surface expansion of magnetic field unit tensor and unit vector. ~%"),
  printf(fh, "  //                   [bx_xl, bx_xr, bxbx_xl, bxbx_xr, bxby_xl, bxby_xr, bxbz_xl, bxbz_xr, ~%"),
  printf(fh, "  //                    by_yl, by_yr, byby_yl, byby_yr, bxby_yl, bxby_yr, bybz_yl, bybz_yr, ~%"),
  printf(fh, "  //                    bz_zl, bz_zr, bzbz_zl, bzbz_zr, bxbz_zl, bxbz_zr, bybz_zl, bybz_zr] ~%"),
  printf(fh, "  // vlasov_pkpm_moms: [rho, p_parallel, p_perp], Moments computed from kinetic equation in pkpm model.~%"),
  printf(fh, "  // p_ij:             Output volume expansion of p_ij = (p_par - p_perp) b_i b_j + p_perp g_ij.~%"),
  printf(fh, "  // p_ij_surf:        Output surface expansion of p_ij = (p_par - p_perp) b_i b_j + p_perp g_ij.~%"),
  printf(fh, "  //                   [Pxx_xl, Pxx_xr, Pxy_xl, Pxy_xr, Pxz_xl, Pxz_xr, ~%"),
  printf(fh, "  //                    Pxy_yl, Pxy_yr, Pyy_yl, Pyy_yr, Pyz_yl, Pyz_yr, ~%"),
  printf(fh, "  //                    Pxz_zl, Pxz_zr, Pyz_zl, Pyz_zr, Pzz_zl, Pzz_zr] ~%"),
  printf(fh, "~%"),

  printf(fh, "  // Parallel/Perp pressure are first/second component of pkpm moment array and unit tensor are last six components of bvar array.~%"),
  printf(fh, "  const double *p_parallel = &vlasov_pkpm_moms[~a]; ~%", 1*NC),
  printf(fh, "  const double *p_perp = &vlasov_pkpm_moms[~a]; ~%", 2*NC),
  printf(fh, "  const double *bxbx = &bvar[~a]; ~%", 3*NC),
  printf(fh, "  const double *bxby = &bvar[~a]; ~%", 4*NC),
  printf(fh, "  const double *bxbz = &bvar[~a]; ~%", 5*NC),
  printf(fh, "  const double *byby = &bvar[~a]; ~%", 6*NC),
  printf(fh, "  const double *bybz = &bvar[~a]; ~%", 7*NC),
  printf(fh, "  const double *bzbz = &bvar[~a]; ~%", 8*NC),
  printf(fh, "~%"),

  printf(fh, "  double *Pxx = &p_ij[~a]; ~%", 0*NC),
  printf(fh, "  double *Pxy = &p_ij[~a]; ~%", 1*NC),
  printf(fh, "  double *Pxz = &p_ij[~a]; ~%", 2*NC),
  printf(fh, "  double *Pyy = &p_ij[~a]; ~%", 3*NC),
  printf(fh, "  double *Pyz = &p_ij[~a]; ~%", 4*NC),
  printf(fh, "  double *Pzz = &p_ij[~a]; ~%", 5*NC),
  printf(fh, "~%"),

  printf(fh, "  double *Pxx_xl = &p_ij_surf[~a]; ~%", 0*NSurf),
  printf(fh, "  double *Pxx_xr = &p_ij_surf[~a]; ~%", 1*NSurf),
  printf(fh, "  double *Pxy_xl = &p_ij_surf[~a]; ~%", 2*NSurf),
  printf(fh, "  double *Pxy_xr = &p_ij_surf[~a]; ~%", 3*NSurf),
  printf(fh, "  double *Pxz_xl = &p_ij_surf[~a]; ~%", 4*NSurf),
  printf(fh, "  double *Pxz_xr = &p_ij_surf[~a]; ~%", 5*NSurf),
  printf(fh, "~%"),
  if (cdim > 1) then (
    printf(fh, "  double *Pxy_yl = &p_ij_surf[~a]; ~%", 6*NSurf),
    printf(fh, "  double *Pxy_yr = &p_ij_surf[~a]; ~%", 7*NSurf),
    printf(fh, "  double *Pyy_yl = &p_ij_surf[~a]; ~%", 8*NSurf),
    printf(fh, "  double *Pyy_yr = &p_ij_surf[~a]; ~%", 9*NSurf),
    printf(fh, "  double *Pyz_yl = &p_ij_surf[~a]; ~%", 10*NSurf),
    printf(fh, "  double *Pyz_yr = &p_ij_surf[~a]; ~%", 11*NSurf),
    printf(fh, " ~%")
  ),
  if (cdim = 3) then (
    printf(fh, "  double *Pxz_zl = &p_ij_surf[~a]; ~%", 12*NSurf),
    printf(fh, "  double *Pxz_zr = &p_ij_surf[~a]; ~%", 13*NSurf),
    printf(fh, "  double *Pyz_zl = &p_ij_surf[~a]; ~%", 14*NSurf),
    printf(fh, "  double *Pyz_zr = &p_ij_surf[~a]; ~%", 15*NSurf),
    printf(fh, "  double *Pzz_zl = &p_ij_surf[~a]; ~%", 16*NSurf),
    printf(fh, "  double *Pzz_zr = &p_ij_surf[~a]; ~%", 17*NSurf),
    printf(fh, " ~%")
  ),

  /* Expand p_par and p_perp for surface evaluations */
  p_par_e : doExpand1(p_parallel, bC), 
  p_perp_e : doExpand1(p_perp, bC), 

  /* First construct the volume expansion of the pressure tensor */
  /* Temporary array of temperature anisotropy */
  printf(fh, "  double DP[~a] = {0.0}; ~%", NC),
  for i : 1 thru NC do (
    printf(fh, "  DP[~a] = p_parallel[~a] - p_perp[~a]; ~%", i-1, i-1, i-1)
  ),
  printf(fh, "  // DP b_i b_j. ~%"),
  printf(fh, "  double DP_bxbx[~a] = {0.0}; ~%", NC),
  printf(fh, "  binop_mul_~ad_~a_p~a(DP, bxbx, DP_bxbx); ~%", cdim, basisFun, polyOrder),
  printf(fh, " ~%"),

  printf(fh, "  double DP_bxby[~a] = {0.0}; ~%", NC),
  printf(fh, "  binop_mul_~ad_~a_p~a(DP, bxby, DP_bxby); ~%", cdim, basisFun, polyOrder),
  printf(fh, " ~%"),

  printf(fh, "  double DP_bxbz[~a] = {0.0}; ~%", NC),
  printf(fh, "  binop_mul_~ad_~a_p~a(DP, bxbz, DP_bxbz); ~%", cdim, basisFun, polyOrder),
  printf(fh, " ~%"),

  printf(fh, "  double DP_byby[~a] = {0.0}; ~%", NC),
  printf(fh, "  binop_mul_~ad_~a_p~a(DP, byby, DP_byby); ~%", cdim, basisFun, polyOrder),
  printf(fh, " ~%"),

  printf(fh, "  double DP_bybz[~a] = {0.0}; ~%", NC),
  printf(fh, "  binop_mul_~ad_~a_p~a(DP, bybz, DP_bybz); ~%", cdim, basisFun, polyOrder),
  printf(fh, " ~%"),

  printf(fh, "  double DP_bzbz[~a] = {0.0}; ~%", NC),
  printf(fh, "  binop_mul_~ad_~a_p~a(DP, bzbz, DP_bzbz); ~%", cdim, basisFun, polyOrder),
  printf(fh, " ~%"),

  for i : 1 thru NC do (
    printf(fh, "  Pxx[~a] = DP_bxbx[~a] + p_perp[~a]; ~%", i-1, i-1, i-1),
    printf(fh, "  Pxy[~a] = DP_bxby[~a]; ~%", i-1, i-1),
    printf(fh, "  Pxz[~a] = DP_bxbz[~a]; ~%", i-1, i-1),
    printf(fh, "  Pyy[~a] = DP_byby[~a] + p_perp[~a]; ~%", i-1, i-1, i-1),
    printf(fh, "  Pyz[~a] = DP_bybz[~a]; ~%", i-1, i-1),
    printf(fh, "  Pzz[~a] = DP_bzbz[~a] + p_perp[~a]; ~%", i-1, i-1, i-1)
  ),
  printf(fh, " ~%"),

  /* Now compute needed surface expansions */
  /* Expand P_ij */
  Pxx_e : doExpand1(Pxx, bC),
  Pxy_e : doExpand1(Pxy, bC),
  Pxz_e : doExpand1(Pxz, bC),
  Pyy_e : doExpand1(Pyy, bC),
  Pyz_e : doExpand1(Pyz, bC),
  Pzz_e : doExpand1(Pzz, bC),

  if (cdim = 1) then (
    printf(fh, "  Pxx_xl[0] = ~a; ~%", float(expand(subst(x=-1, Pxx_e)))),
    printf(fh, "  Pxx_xr[0] = ~a; ~%", float(expand(subst(x=1, Pxx_e)))),
    printf(fh, "  Pxy_xl[0] = ~a; ~%", float(expand(subst(x=-1, Pxy_e)))),
    printf(fh, "  Pxy_xr[0] = ~a; ~%", float(expand(subst(x=1, Pxy_e)))),
    printf(fh, "  Pxz_xl[0] = ~a; ~%", float(expand(subst(x=-1, Pxz_e)))),
    printf(fh, "  Pxz_xr[0] = ~a; ~%", float(expand(subst(x=1, Pxz_e)))),
    printf(fh, " ~%")
  )
  else (
    Pxx_xl_c : calcInnerProdList(surfVarsx, 1, bSurfx, subst(x=-1, Pxx_e)),
    Pxy_xl_c : calcInnerProdList(surfVarsx, 1, bSurfx, subst(x=-1, Pxy_e)),
    Pxz_xl_c : calcInnerProdList(surfVarsx, 1, bSurfx, subst(x=-1, Pxz_e)),

    writeCExprs1(Pxx_xl, Pxx_xl_c), 
    writeCExprs1(Pxy_xl, Pxy_xl_c), 
    writeCExprs1(Pxz_xl, Pxz_xl_c), 
    printf(fh, " ~%"), 

    Pxx_xr_c : calcInnerProdList(surfVarsx, 1, bSurfx, subst(x=1, Pxx_e)),
    Pxy_xr_c : calcInnerProdList(surfVarsx, 1, bSurfx, subst(x=1, Pxy_e)),
    Pxz_xr_c : calcInnerProdList(surfVarsx, 1, bSurfx, subst(x=1, Pxz_e)),

    writeCExprs1(Pxx_xr, Pxx_xr_c), 
    writeCExprs1(Pxy_xr, Pxy_xr_c), 
    writeCExprs1(Pxz_xr, Pxz_xr_c), 
    printf(fh, " ~%")
  ),
  if (cdim > 1) then (
    Pxy_yl_c : calcInnerProdList(surfVarsy, 1, bSurfy, subst(y=-1, Pxy_e)),
    Pyy_yl_c : calcInnerProdList(surfVarsy, 1, bSurfy, subst(y=-1, Pyy_e)),
    Pyz_yl_c : calcInnerProdList(surfVarsy, 1, bSurfy, subst(y=-1, Pyz_e)),

    writeCExprs1(Pxy_yl, Pxy_yl_c), 
    writeCExprs1(Pyy_yl, Pyy_yl_c), 
    writeCExprs1(Pyz_yl, Pyz_yl_c), 
    printf(fh, " ~%"), 

    Pxy_yr_c : calcInnerProdList(surfVarsy, 1, bSurfy, subst(y=1, Pxy_e)),
    Pyy_yr_c : calcInnerProdList(surfVarsy, 1, bSurfy, subst(y=1, Pyy_e)),
    Pyz_yr_c : calcInnerProdList(surfVarsy, 1, bSurfy, subst(y=1, Pyz_e)),

    writeCExprs1(Pxy_yr, Pxy_yr_c), 
    writeCExprs1(Pyy_yr, Pyy_yr_c), 
    writeCExprs1(Pyz_yr, Pyz_yr_c), 
    printf(fh, " ~%")
  ),
  if (cdim = 3) then (
    Pxz_zl_c : calcInnerProdList(surfVarsz, 1, bSurfz, subst(z=-1, Pxz_e)),
    Pyz_zl_c : calcInnerProdList(surfVarsz, 1, bSurfz, subst(z=-1, Pyz_e)),
    Pzz_zl_c : calcInnerProdList(surfVarsz, 1, bSurfz, subst(z=-1, Pzz_e)),

    writeCExprs1(Pxz_zl, Pxz_zl_c), 
    writeCExprs1(Pyz_zl, Pyz_zl_c), 
    writeCExprs1(Pzz_zl, Pzz_zl_c), 
    printf(fh, " ~%"), 

    Pxz_zr_c : calcInnerProdList(surfVarsz, 1, bSurfz, subst(z=1, Pxz_e)),
    Pyz_zr_c : calcInnerProdList(surfVarsz, 1, bSurfz, subst(z=1, Pyz_e)),
    Pzz_zr_c : calcInnerProdList(surfVarsz, 1, bSurfz, subst(z=1, Pzz_e)),

    writeCExprs1(Pxz_zr, Pxz_zr_c), 
    writeCExprs1(Pyz_zr, Pyz_zr_c), 
    writeCExprs1(Pzz_zr, Pzz_zr_c), 
    printf(fh, " ~%")
  ),
  printf(fh, "} ~%")
)$
