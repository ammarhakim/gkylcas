/* This script generates the kernels for calculating the pressure tensor 
   p_ij = (p_par - p_perp) b_i b_j + p_perp g_ij via weak multiplication.
   Computes both the volume expansion and the necessary surface expansions of p_ij at
   the corresponding surfaces 
   (Pxx, Pxy, Pxz and x surfaces, Pxy, Pyy, Pyz at y surfaces, Pxz, Pyz, Pzz at z surfaces) */

load("modal-basis")$
load("out-scripts")$
load(stringproc)$
load("scifac")$
fpprec : 24$

calcPKPMPressure(fh, funcNm, cdim, basisFun, polyOrder) := block(
  [varsC, bC, NC],

  kill(varsC, bC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),

  /* Number of basis monomials. */
  NC : length(bC),

  printf(fh, "#include <gkyl_euler_pkpm_kernels.h> ~%"),
  printf(fh, "#include <gkyl_binop_mul_ser.h> ~%"),
  printf(fh, "GKYL_CU_DH void ~a(const double *bvar, const double *vlasov_pkpm_moms, 
    double* GKYL_RESTRICT p_ij) ~%{ ~%", funcNm, polyOrder),
  printf(fh, "  // bvar:             Input volume expansion of magnetic field unit vector and tensor.~%"),
  printf(fh, "  //                   [bx, by, bz, bxbx, bxby, bxbz, byby, bybz, bzbz] ~%"),
  printf(fh, "  // vlasov_pkpm_moms: [rho, p_parallel, p_perp], Moments computed from kinetic equation in pkpm model.~%"),
  printf(fh, "  // p_ij:             Output volume expansion of p_ij = (p_par - p_perp) b_i b_j + p_perp g_ij.~%"),
  printf(fh, "~%"),

  printf(fh, "  // Parallel/Perp pressure are first/second component of pkpm moment array and unit tensor are last six components of bvar array.~%"),
  printf(fh, "  const double *p_parallel = &vlasov_pkpm_moms[~a]; ~%", 1*NC),
  printf(fh, "  const double *p_perp = &vlasov_pkpm_moms[~a]; ~%", 2*NC),
  printf(fh, "  const double *bxbx = &bvar[~a]; ~%", 3*NC),
  printf(fh, "  const double *bxby = &bvar[~a]; ~%", 4*NC),
  printf(fh, "  const double *bxbz = &bvar[~a]; ~%", 5*NC),
  printf(fh, "  const double *byby = &bvar[~a]; ~%", 6*NC),
  printf(fh, "  const double *bybz = &bvar[~a]; ~%", 7*NC),
  printf(fh, "  const double *bzbz = &bvar[~a]; ~%", 8*NC),
  printf(fh, "~%"),

  printf(fh, "  double *Pxx = &p_ij[~a]; ~%", 0*NC),
  printf(fh, "  double *Pxy = &p_ij[~a]; ~%", 1*NC),
  printf(fh, "  double *Pxz = &p_ij[~a]; ~%", 2*NC),
  printf(fh, "  double *Pyy = &p_ij[~a]; ~%", 3*NC),
  printf(fh, "  double *Pyz = &p_ij[~a]; ~%", 4*NC),
  printf(fh, "  double *Pzz = &p_ij[~a]; ~%", 5*NC),
  printf(fh, "~%"),

  /* First construct the volume expansion of the pressure tensor */
  /* Temporary array of temperature anisotropy */
  printf(fh, "  double DP[~a] = {0.0}; ~%", NC),
  for i : 1 thru NC do (
    printf(fh, "  DP[~a] = p_parallel[~a] - p_perp[~a]; ~%", i-1, i-1, i-1)
  ),
  printf(fh, "  // DP b_i b_j. ~%"),
  printf(fh, "  double DP_bxbx[~a] = {0.0}; ~%", NC),
  printf(fh, "  binop_mul_~ad_~a_p~a(DP, bxbx, DP_bxbx); ~%", cdim, basisFun, polyOrder),
  printf(fh, " ~%"),

  printf(fh, "  double DP_bxby[~a] = {0.0}; ~%", NC),
  printf(fh, "  binop_mul_~ad_~a_p~a(DP, bxby, DP_bxby); ~%", cdim, basisFun, polyOrder),
  printf(fh, " ~%"),

  printf(fh, "  double DP_bxbz[~a] = {0.0}; ~%", NC),
  printf(fh, "  binop_mul_~ad_~a_p~a(DP, bxbz, DP_bxbz); ~%", cdim, basisFun, polyOrder),
  printf(fh, " ~%"),

  printf(fh, "  double DP_byby[~a] = {0.0}; ~%", NC),
  printf(fh, "  binop_mul_~ad_~a_p~a(DP, byby, DP_byby); ~%", cdim, basisFun, polyOrder),
  printf(fh, " ~%"),

  printf(fh, "  double DP_bybz[~a] = {0.0}; ~%", NC),
  printf(fh, "  binop_mul_~ad_~a_p~a(DP, bybz, DP_bybz); ~%", cdim, basisFun, polyOrder),
  printf(fh, " ~%"),

  printf(fh, "  double DP_bzbz[~a] = {0.0}; ~%", NC),
  printf(fh, "  binop_mul_~ad_~a_p~a(DP, bzbz, DP_bzbz); ~%", cdim, basisFun, polyOrder),
  printf(fh, " ~%"),

  for i : 1 thru NC do (
    printf(fh, "  Pxx[~a] = DP_bxbx[~a] + p_perp[~a]; ~%", i-1, i-1, i-1),
    printf(fh, "  Pxy[~a] = DP_bxby[~a]; ~%", i-1, i-1),
    printf(fh, "  Pxz[~a] = DP_bxbz[~a]; ~%", i-1, i-1),
    printf(fh, "  Pyy[~a] = DP_byby[~a] + p_perp[~a]; ~%", i-1, i-1, i-1),
    printf(fh, "  Pyz[~a] = DP_bybz[~a]; ~%", i-1, i-1),
    printf(fh, "  Pzz[~a] = DP_bzbz[~a] + p_perp[~a]; ~%", i-1, i-1, i-1)
  ),
  printf(fh, " ~%"),
  printf(fh, "} ~%")
)$
