/* This script generates the kernels for the boundary surface term
   diffusion contribution from Lenard Bernstein operator. */

load("modal-basis")$
load("out-scripts");
load("recovery")$
load("utilities")$
load(stringproc)$
fpprec : 24$

calcVlasovPKPMLBODiffBoundarySurfUpdater(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsP,bP,NP,NC,pDim,vid1,vv,surfVars,basis_v,fEdge_e,fSkin_e,bType,
   hl_e,hr_e,hOrder,hsol_l,hsol_r,nuVtSqSum_e,bSurf,facDiff_c,expr,i,facDiff_NoZero,
   facDiff_NoZero_e,vol_incr_e,Gdiff_l_c,Gdiff_r_c,Gdiff_l_e,Gdiff_r_e,Gdiff2_l_c,Gdiff2_r_c,
   Gdiff2_l_e,Gdiff2_r_e,temp_diff_le,temp_diff_re,temp_edge_le,temp_edge_re,diff_incr_le,
   diff_incr_re,edge_incr_le,edge_incr_re,vol_out,diff_out,edge_out],

  /* Load basis of dimensionality requested. */
  [varsC,bC,varsP,bP] : loadPhaseBasis(basisFun, cdim, vdim, polyOrder),

  /* Number of basis monomials. */
  NP : length(bP),  NC : length(bC),

  pDim : cdim+vdim,
  /* Variables. */
  surfVars : delete(vx,varsP),

  basis_v : diff(bP,vx),

  F_0_Skin_e : doExpand1(F_0Skin, bP),
  F_0_Edge_e : doExpand1(F_0Edge, bP),
  G_1_Skin_e : doExpand1(G_1Skin, bP),
  G_1_Edge_e : doExpand1(G_1Edge, bP),
  /* Construct the recovery polynomial */
  if polyOrder=1 then /* Force p=1 to mean hybrid. */
    bType : "hyb"
  else
    bType : basisFun,
  h_F_0_l_e : calcRecov2CellGen(bType,vx,varsP,polyOrder,dg(makelist(F_0Edge[i-1],i,1,NP)), dg(makelist(F_0Skin[i-1],i,1,NP))),
  h_F_0_r_e : calcRecov2CellGen(bType,vx,varsP,polyOrder,dg(makelist(F_0Skin[i-1],i,1,NP)), dg(makelist(F_0Edge[i-1],i,1,NP))),
  h_G_1_l_e : calcRecov2CellGen(bType,vx,varsP,polyOrder,dg(makelist(G_1Edge[i-1],i,1,NP)), dg(makelist(G_1Skin[i-1],i,1,NP))),
  h_G_1_r_e : calcRecov2CellGen(bType,vx,varsP,polyOrder,dg(makelist(G_1Skin[i-1],i,1,NP)), dg(makelist(G_1Edge[i-1],i,1,NP))),
  hOrder : 2*polyOrder+1,
  hsol_F_0_l : cons(subst(vx=0,h_F_0_l_e),makelist(subst(vx=0,diff(h_F_0_l_e,vx,ord)/(ord!)),ord,1,hOrder)),
  hsol_F_0_r : cons(subst(vx=0,h_F_0_r_e),makelist(subst(vx=0,diff(h_F_0_r_e,vx,ord)/(ord!)),ord,1,hOrder)),
  hsol_G_1_l : cons(subst(vx=0,h_G_1_l_e),makelist(subst(vx=0,diff(h_G_1_l_e,vx,ord)/(ord!)),ord,1,hOrder)),
  hsol_G_1_r : cons(subst(vx=0,h_G_1_r_e),makelist(subst(vx=0,diff(h_G_1_r_e,vx,ord)/(ord!)),ord,1,hOrder)),
  /*............. RECOVERY DONE ..............................*/

  printf(fh, "#include <gkyl_lbo_vlasov_pkpm_kernels.h> ~%"),        
  printf(fh, "GKYL_CU_DH double ~a(const double *w, const double *dxv, const double *nuSum, const double *nuPrimMomsSum, const int edge, const double *fSkin, const double *fEdge, double* GKYL_RESTRICT out) ~%{ ~%", funcNm),
  printf(fh, "  // w[NDIM]:       Cell-center coordinates. ~%"),
  printf(fh, "  // dxv[NDIM]:     Cell spacing. ~%"),
  printf(fh, "  // nuSum:         Collisionalities added (self and cross species collisionalities). ~%"),
  printf(fh, "  // nuPrimMomsSum: Sum of bulk velocities and thermal speeds (squared) times their respective collisionalities. ~%"),
  printf(fh, "  // fSkin/fEdge:   Input distribution functions [F_0, T_perp G = T_perp (F_1 - F_0)] in skin cell/last edge cell. ~%"),
  printf(fh, "  // out:           Incremented distribution functions in skin cell. ~%"),
  printf(fh, "  double rdvSq4 = 4.0/(dxv[~a]*dxv[~a]); ~%", cdim, cdim),
  /* Create a pointer to nuVtSqSum. */
  printf(fh, "  const double *nuVtSqSum = &nuPrimMomsSum[~a];~%", vdim*NC),
  printf(fh, "~%"),
  
  /* Access F_0 and T_perp G, first two Laguerre moments */
  printf(fh, "  const double *F_0Skin = &fSkin[~a]; ~%", 0),
  printf(fh, "  const double *G_1Skin = &fSkin[~a]; ~%", NP),  
  printf(fh, "  const double *F_0Edge = &fEdge[~a]; ~%", 0),
  printf(fh, "  const double *G_1Edge = &fEdge[~a]; ~%", NP), 

  /* Access the components of out for the first two Laguerre moments */
  printf(fh, "  double *out_F_0 = &out[~a]; ~%", 0),
  printf(fh, "  double *out_G_1 = &out[~a]; ~%", NP),  
  printf(fh, "~%"),
  /* First compute the contribution coming from the second
     differentiation by parts to left and right cells. */
  nuVtSqSum_e : doExpand1(nuVtSqSum,bC),
  if polyOrder=1 then (  /* Force p=1 to use hybrid basis. */
    bSurf : basisFromVars("hyb",surfVars,polyOrder)
  ) else (
    bSurf : basisFromVars(basisFun,surfVars,polyOrder)
  ),

  /* Volume increment from configuration space. */
  vol_incr_F_0_e : rdvSq4*calcInnerProdList(varsP, 1, diff(bP,vx,2), nuVtSqSum_e*F_0_Skin_e),
  vol_incr_G_1_e : rdvSq4*calcInnerProdList(varsP, 1, diff(bP,vx,2), nuVtSqSum_e*G_1_Skin_e),
  printf(fh, "  double vol_incr_F_0[~a] = {0.0}; ~%", NP),
  printf(fh, "  double vol_incr_G_1[~a] = {0.0}; ~%", NP),
  writeCExprs1(vol_incr_F_0, vol_incr_F_0_e),
  writeCExprs1(vol_incr_G_1, vol_incr_G_1_e),
  printf(fh, "~%"),
    
  Gdiff_F_0_l_c : calcInnerProdList(surfVars,1,bSurf,hsol_F_0_l[2]),
  Gdiff_F_0_r_c : calcInnerProdList(surfVars,1,bSurf,hsol_F_0_r[2]),
  Gdiff_F_0_l_e : doExpand(Gdiff_F_0_l_c, bSurf),
  Gdiff_F_0_r_e : doExpand(Gdiff_F_0_r_c, bSurf),

  Gdiff2_F_0_l_c : calcInnerProdList(surfVars,1,bSurf,hsol_F_0_l[1]),
  Gdiff2_F_0_r_c : calcInnerProdList(surfVars,1,bSurf,hsol_F_0_r[1]),
  Gdiff2_F_0_l_e : doExpand(Gdiff2_F_0_l_c, bSurf),
  Gdiff2_F_0_r_e : doExpand(Gdiff2_F_0_r_c, bSurf),

  Gdiff_G_1_l_c : calcInnerProdList(surfVars,1,bSurf,hsol_G_1_l[2]),
  Gdiff_G_1_r_c : calcInnerProdList(surfVars,1,bSurf,hsol_G_1_r[2]),
  Gdiff_G_1_l_e : doExpand(Gdiff_G_1_l_c, bSurf),
  Gdiff_G_1_r_e : doExpand(Gdiff_G_1_r_c, bSurf),

  Gdiff2_G_1_l_c : calcInnerProdList(surfVars,1,bSurf,hsol_G_1_l[1]),
  Gdiff2_G_1_r_c : calcInnerProdList(surfVars,1,bSurf,hsol_G_1_r[1]),
  Gdiff2_G_1_l_e : doExpand(Gdiff2_G_1_l_c, bSurf),
  Gdiff2_G_1_r_e : doExpand(Gdiff2_G_1_r_c, bSurf),

  if (polyOrder=1 or sdowncase(basisFun)="tensor") then (
    /* This simplification of separating vth^2 from the recovered distribution function
       only works for p=1 because it is a tensor product of
       conf and velocity space (remains to be checked for tensor basis). */
    temp_diff_F_0_le : fullratsimp(calcInnerProdList(surfVars, -1, subst(vx=-1, bP), Gdiff_F_0_l_e)
                              -calcInnerProdList(surfVars, -1, subst(vx=-1, basis_v), Gdiff2_F_0_l_e)),
    temp_diff_F_0_re : fullratsimp(calcInnerProdList(surfVars, 1, subst(vx=1, bP), Gdiff_F_0_r_e)
                              -calcInnerProdList(surfVars, 1, subst(vx=1, basis_v), Gdiff2_F_0_r_e)),
    temp_edge_F_0_le : -calcInnerProdList(surfVars, -1, subst(vx=-1, basis_v), subst(vx=-1, F_0_Skin_e)),
    temp_edge_F_0_re : -calcInnerProdList(surfVars, 1, subst(vx=1, basis_v), subst(vx=1, F_0_Skin_e)),
    incr_diff_F_0_le : calcInnerProdList(varsP, nuVtSqSum_e, bP, doExpand1(temp_F_0_diff, bP)),
    incr_diff_F_0_re : calcInnerProdList(varsP, nuVtSqSum_e, bP, doExpand1(temp_F_0_diff, bP)),
    incr_edge_F_0_le : calcInnerProdList(varsP, nuVtSqSum_e, bP, doExpand1(temp_F_0_edge, bP)),
    incr_edge_F_0_re : calcInnerProdList(varsP, nuVtSqSum_e, bP, doExpand1(temp_F_0_edge, bP)),

    printf(fh, "  double temp_F_0_diff[~a] = {0.0}; ~%", NP),
    printf(fh, "  double temp_F_0_edge[~a] = {0.0}; ~%", NP),
    printf(fh, "  double diff_F_0_incr[~a] = {0.0}; ~%", NP),
    printf(fh, "  double edge_F_0_incr[~a] = {0.0}; ~%", NP),
    printf(fh, "~%"),

    temp_diff_G_1_le : fullratsimp(calcInnerProdList(surfVars, -1, subst(vx=-1, bP), Gdiff_G_1_l_e)
                              -calcInnerProdList(surfVars, -1, subst(vx=-1, basis_v), Gdiff2_G_1_l_e)),
    temp_diff_G_1_re : fullratsimp(calcInnerProdList(surfVars, 1, subst(vx=1, bP), Gdiff_G_1_r_e)
                              -calcInnerProdList(surfVars, 1, subst(vx=1, basis_v), Gdiff2_G_1_r_e)),
    temp_edge_G_1_le : -calcInnerProdList(surfVars, -1, subst(vx=-1, basis_v), subst(vx=-1, G_1_Skin_e)),
    temp_edge_G_1_re : -calcInnerProdList(surfVars, 1, subst(vx=1, basis_v), subst(vx=1, G_1_Skin_e)),
    incr_diff_G_1_le : calcInnerProdList(varsP, nuVtSqSum_e, bP, doExpand1(temp_G_1_diff, bP)),
    incr_diff_G_1_re : calcInnerProdList(varsP, nuVtSqSum_e, bP, doExpand1(temp_G_1_diff, bP)),
    incr_edge_G_1_le : calcInnerProdList(varsP, nuVtSqSum_e, bP, doExpand1(temp_G_1_edge, bP)),
    incr_edge_G_1_re : calcInnerProdList(varsP, nuVtSqSum_e, bP, doExpand1(temp_G_1_edge, bP)),

    printf(fh, "  double temp_G_1_diff[~a] = {0.0}; ~%", NP),
    printf(fh, "  double temp_G_1_edge[~a] = {0.0}; ~%", NP),
    printf(fh, "  double diff_G_1_incr[~a] = {0.0}; ~%", NP),
    printf(fh, "  double edge_G_1_incr[~a] = {0.0}; ~%", NP),
    printf(fh, "~%"),

    printf(fh, "  if (edge == -1) { ~%~%"),
      
    writeCExprs1(temp_F_0_diff, temp_diff_F_0_re),
    writeCExprs1(temp_G_1_diff, temp_diff_G_1_re),
    printf(fh, "~%"),
      
    writeCExprs1(temp_F_0_edge, temp_edge_F_0_le),
    writeCExprs1(temp_G_1_edge, temp_edge_G_1_le),
    printf(fh, "~%"),
      
    writeCExprs1(diff_F_0_incr, incr_diff_F_0_re),
    writeCExprs1(diff_G_1_incr, incr_diff_G_1_re),
    printf(fh, "~%"),
    writeCExprs1(edge_F_0_incr, incr_edge_F_0_le),
    writeCExprs1(edge_G_1_incr, incr_edge_G_1_le),
    printf(fh, "~%"),
    
    /* otherwise edge == +1, we are doing the right edge boundary and the skin cell needs to be evauluated at -1 */
    printf(fh, "~%  } else { ~%~%"),
    
    writeCExprs1(temp_F_0_diff, temp_diff_F_0_le),
    writeCExprs1(temp_G_1_diff, temp_diff_G_1_le),
    printf(fh, "~%"),
      
    writeCExprs1(temp_F_0_edge, temp_edge_F_0_re),
    writeCExprs1(temp_G_1_edge, temp_edge_G_1_re),
    printf(fh, "~%"),
      
    writeCExprs1(diff_F_0_incr, incr_diff_F_0_le),
    writeCExprs1(diff_G_1_incr, incr_diff_G_1_le),
    printf(fh, "~%"),
    writeCExprs1(edge_F_0_incr, incr_edge_F_0_re),
    writeCExprs1(edge_G_1_incr, incr_edge_G_1_re),
    printf(fh, "~%"),
    printf(fh, "  } ~%"),
    printf(fh, "~%")

  ) else (
    incr_diff_F_0_le : fullratsimp(calcInnerProdList(surfVars, -nuVtSqSum_e, subst(vx=-1, bP), Gdiff_F_0_l_e)
                              -calcInnerProdList(surfVars, -nuVtSqSum_e, subst(vx=-1, basis_v), Gdiff2_F_0_l_e)),
    incr_diff_F_0_re : fullratsimp(calcInnerProdList(surfVars, nuVtSqSum_e, subst(vx=1, bP), Gdiff_F_0_r_e)
                              -calcInnerProdList(surfVars, nuVtSqSum_e, subst(vx=1, basis_v), Gdiff2_F_0_r_e)),
    incr_edge_F_0_le : -calcInnerProdList(surfVars, -nuVtSqSum_e, subst(vx=-1, basis_v), subst(vx=-1, F_0_Skin_e)),
    incr_edge_F_0_re : -calcInnerProdList(surfVars, nuVtSqSum_e, subst(vx=1, basis_v), subst(vx=1, F_0_Skin_e)),

    printf(fh, "  double diff_F_0_incr[~a] = {0.0}; ~%", NP),
    printf(fh, "  double edge_F_0_incr[~a] = {0.0}; ~%", NP),
    printf(fh, "~%"),

    incr_diff_G_1_le : fullratsimp(calcInnerProdList(surfVars, -nuVtSqSum_e, subst(vx=-1, bP), Gdiff_G_1_l_e)
                              -calcInnerProdList(surfVars, -nuVtSqSum_e, subst(vx=-1, basis_v), Gdiff2_G_1_l_e)),
    incr_diff_G_1_re : fullratsimp(calcInnerProdList(surfVars, nuVtSqSum_e, subst(vx=1, bP), Gdiff_G_1_r_e)
                              -calcInnerProdList(surfVars, nuVtSqSum_e, subst(vx=1, basis_v), Gdiff2_G_1_r_e)),
    incr_edge_G_1_le : -calcInnerProdList(surfVars, -nuVtSqSum_e, subst(vx=-1, basis_v), subst(vx=-1, G_1_Skin_e)),
    incr_edge_G_1_re : -calcInnerProdList(surfVars, nuVtSqSum_e, subst(vx=1, basis_v), subst(vx=1, G_1_Skin_e)),

    printf(fh, "  double diff_G_1_incr[~a] = {0.0}; ~%", NP),
    printf(fh, "  double edge_G_1_incr[~a] = {0.0}; ~%", NP),
    printf(fh, "~%"),
    printf(fh, "  if (edge == -1) { ~%~%"),
      
    writeCExprs1(diff_F_0_incr, incr_diff_F_0_re),
    writeCExprs1(diff_G_1_incr, incr_diff_G_1_re),
    printf(fh, "~%"),
    writeCExprs1(edge_F_0_incr, incr_edge_F_0_le),
    writeCExprs1(edge_G_1_incr, incr_edge_G_1_le),
    printf(fh, "~%"),
    
    /* otherwise edge == +1, we are doing the right edge boundary and the skin cell needs to be evauluated at -1 */
    printf(fh, "~%  } else { ~%~%"),
      
    writeCExprs1(diff_F_0_incr, incr_diff_F_0_le),
    writeCExprs1(diff_G_1_incr, incr_diff_G_1_le),
    printf(fh, "~%"),
    writeCExprs1(edge_F_0_incr, incr_edge_F_0_re),
    writeCExprs1(edge_G_1_incr, incr_edge_G_1_re),
    printf(fh, "~%"),
    printf(fh, "  } ~%"),
    printf(fh, "~%")
  ),

  vol_F_0_out : makelist(vol_incr_F_0[i-1],i,1,NP),
  diff_F_0_out : makelist(diff_F_0_incr[i-1],i,1,NP),
  edge_F_0_out : makelist(edge_F_0_incr[i-1],i,1,NP),
  vol_G_1_out : makelist(vol_incr_G_1[i-1],i,1,NP),
  diff_G_1_out : makelist(diff_G_1_incr[i-1],i,1,NP),
  edge_G_1_out : makelist(edge_G_1_incr[i-1],i,1,NP),
  writeCIncrExprs1(out_F_0, rdvSq4*(diff_F_0_out + edge_F_0_out) + vol_F_0_out),
  writeCIncrExprs1(out_G_1, rdvSq4*(diff_G_1_out + edge_G_1_out) + vol_G_1_out),
  printf(fh, "~%"),

  printf(fh, "  return 0.;~%"),  /* Return CFL frequency from volume kernel. */
  printf(fh, "~%"),

  printf(fh, "} ~%")
);
