/* Generate the header file for the PKPM (Vlasov) equation kernels. */

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
maxCdim_Ser : 3$

/* Tensor product basis. */
/* Note that Serendipity, p = 1, is equivalent to Tensor */
/* Thus no need to calculate p = 1 Tensor basis */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
maxCdim_Tensor : 2$

/* ...... END OF USER INPUTS........ */

cvars : [x, y, z]$

bName        : ["ser","tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$

printPKPMPrototype(deco, ci, bStr, pi) := block([si],
  printf(fh, "~adouble vlasov_pkpm_vol_~ax1v_~a_p~a(const double *w, const double *dxv, 
  const double *bvar, const double *pkpm_prim, 
  const double *pkpm_accel_vars, const double *g_dist_source, 
  const double *f, double* GKYL_RESTRICT out); ~%", deco, ci, bStr, pi),
  printf(fh, "~avoid pkpm_dist_mirror_force_~ax1v_~a_p~a(const double *w, const double *dxv, 
  const double* pkpm_prim, const double *nu_vthsq, const double* pkpm_accel, 
  const double* f, const double* F_k_p_1, 
  double* g_dist_source, double* F_k_m_1); ~%", deco, ci, bStr, pi),
  for si : 1 thru ci do (
    printf(fh, "~avoid vlasov_pkpm_surf~a_~ax1v_~a_p~a(const double *w, const double *dxv, 
    const double *bvar_l, const double *bvar_c, const double *bvar_r, 
    const double *pkpm_prim_surf_l, const double *pkpm_prim_surf_c, const double *pkpm_prim_surf_r, 
    const double *fl, const double *fc, const double *fr, 
    const double *pkpm_lax, double* GKYL_RESTRICT out); ~%", deco, cvars[si], ci, bStr, pi),
    printf(fh, "~avoid pkpm_dist_div_ppar_~a_~ax1v_~a_p~a(const double *w, const double *dxv, 
       const double *bvarl, const double *bvarc, const double *bvarr, 
       const double *fl, const double *fc, const double *fr, double* GKYL_RESTRICT out); ~%", deco, cvars[si], ci, bStr, pi)
  ),
  printf(fh, "~avoid vlasov_pkpm_surfvpar_~ax1v_~a_p~a(const double *w, const double *dxv, const double *pkpm_accel_vars, 
     const double *g_dist_sourcel, const double *g_dist_sourcec, const double *g_dist_sourcer, 
     const double *fl, const double *fc, const double *fr, double* GKYL_RESTRICT out); ~%", deco, ci, bStr, pi),
  printf(fh, "~avoid vlasov_pkpm_boundary_surfvpar_~ax1v_~a_p~a(const double *w, const double *dxv, const double *pkpm_accel_vars, 
     const double *g_dist_sourceEdge, const double *g_dist_sourceSkin, 
     const int edge, const double *fEdge, const double *fSkin, double* GKYL_RESTRICT out); ~%", deco, ci, bStr, pi),
  printf(fh, "~%")
)$

/* ............ Write out the C header file ............ */
fh : openw("~/max-out/gkyl_vlasov_pkpm_kernels.h")$

printf(fh, "#pragma once ~%")$
printf(fh, "#include <math.h> ~%")$
printf(fh, "#include <gkyl_util.h> ~%")$
printf(fh, "EXTERN_C_BEG ~%")$
printf(fh, "~%")$

decorator : "GKYL_CU_DH "$
for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    minPolyOrderB : minPolyOrder[bInd],
    maxPolyOrderB : maxPolyOrder[bInd],
    if (d>1 and bName[bInd] = "ser") then maxPolyOrderB : 1,
    for polyOrder : minPolyOrderB thru maxPolyOrderB do (
      printPKPMPrototype(decorator, c, bName[bInd], polyOrder)
    )
  )
);
printf(fh, "EXTERN_C_END ~%")$
close(fh)$
/* ............ Finished writing out the C header file ............ */
