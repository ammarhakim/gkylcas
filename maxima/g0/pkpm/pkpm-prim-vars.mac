/* This script generates the kernels for calculating the primitive variables
   using weak division required to update the PKPM system. Primitive variables include:
   1. u_i (flow velocity) 
   2. T_perp_over_m (T_perp/m)
   3. T_perp_over_m_inv (m/T_perp) 
   Along with div(p_par b)/rho for use in the pressure force. */

load("modal-basis")$
load("out-scripts")$
load(stringproc)$
load("scifac")$
load("nodal_operations/nodal_functions")$
fpprec : 24$

/* Special set of kernels which analytically invert the matrix for 1/rho and (T_perp/m)^-1 
   for p=1 using the basis_inv operator. Significantly faster than the bin_op operator,
   but only works for p=1 */
setPKPMPrimVars_p1(fh, funcNm, cdim, basisFun, polyOrder) := block(
  [varsC, bC, NC, rho_e, p_perp_e, 
   nodesCorners, rhoCorners, p_perpCorners, 
   expr_ux, expr_uy, expr_uz, 
   expr_pkpm_div_ppar, expr_T_perp_over_m, expr_T_perp_over_m_inv],

  kill(varsC, bC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),

  /* Number of basis monomials. */
  NC : length(bC),

  printf(fh, "#include <gkyl_mat.h> ~%"),
  printf(fh, "#include <gkyl_euler_pkpm_kernels.h> ~%"),
  printf(fh, "#include <gkyl_binop_mul_ser.h> ~%"),
  printf(fh, "#include <gkyl_basis_~a_~ax_p~a_inv.h> ~%", basisFun, cdim, polyOrder),
  printf(fh, "GKYL_CU_DH int ~a(int count, struct gkyl_nmat *A, struct gkyl_nmat *rhs, 
  const double *vlasov_pkpm_moms, const double *euler_pkpm, 
  const double *p_ij, const double *pkpm_div_ppar) ~%{ ~%", funcNm, polyOrder),
  printf(fh, "  // count:            integer to indicate which matrix being fetched. ~%"),
  printf(fh, "  // A:                preallocated LHS matrix. ~%"),
  printf(fh, "  // rhs:              preallocated RHS vector. ~%"),
  printf(fh, "  // vlasov_pkpm_moms: [rho, p_parallel, p_perp], Moments computed from kinetic equation in pkpm model.~%"),
  printf(fh, "  // euler_pkpm:       [rho ux, rho uy, rho uz], Fluid input state vector.~%"),
  printf(fh, "  // p_ij:             p_ij = (p_par - p_perp) b_i b_j + p_perp g_ij.~%"),
  printf(fh, "  // pkpm_div_ppar:    div(p_par b) computed from kinetic equation for consistency.~%"),
  printf(fh, "~%"),

  printf(fh, "  // For poly_order = 1, we can analytically invert the matrix and just store the solution ~%"),
  printf(fh, "  struct gkyl_mat rhs_ux = gkyl_nmat_get(rhs, count); ~%"),
  printf(fh, "  struct gkyl_mat rhs_uy = gkyl_nmat_get(rhs, count+1); ~%"),
  printf(fh, "  struct gkyl_mat rhs_uz = gkyl_nmat_get(rhs, count+2); ~%"),
  printf(fh, "  struct gkyl_mat rhs_pkpm_div_ppar = gkyl_nmat_get(rhs, count+3); ~%"),
  printf(fh, "  struct gkyl_mat rhs_T_perp_over_m = gkyl_nmat_get(rhs, count+4); ~%"),
  printf(fh, "  struct gkyl_mat rhs_T_perp_over_m_inv = gkyl_nmat_get(rhs, count+5); ~%"),
  printf(fh, "  struct gkyl_mat rhs_Txx = gkyl_nmat_get(rhs, count+6); ~%"),
  printf(fh, "  struct gkyl_mat rhs_Tyy = gkyl_nmat_get(rhs, count+7); ~%"),
  printf(fh, "  struct gkyl_mat rhs_Tzz = gkyl_nmat_get(rhs, count+8); ~%"),

  printf(fh, "  // Clear rhs for each component of primitive variables being solved for ~%"),
  printf(fh, "  gkyl_mat_clear(&rhs_ux, 0.0); ~%"),
  printf(fh, "  gkyl_mat_clear(&rhs_uy, 0.0); ~%"),
  printf(fh, "  gkyl_mat_clear(&rhs_uz, 0.0); ~%"),
  printf(fh, "  gkyl_mat_clear(&rhs_pkpm_div_ppar, 0.0); ~%"),
  printf(fh, "  gkyl_mat_clear(&rhs_T_perp_over_m, 0.0); ~%"),
  printf(fh, "  gkyl_mat_clear(&rhs_T_perp_over_m_inv, 0.0); ~%"),
  printf(fh, "  gkyl_mat_clear(&rhs_Txx, 0.0); ~%"),
  printf(fh, "  gkyl_mat_clear(&rhs_Tyy, 0.0); ~%"),
  printf(fh, "  gkyl_mat_clear(&rhs_Tzz, 0.0); ~%"),

  printf(fh, "  const double *rhoux = &euler_pkpm[~a]; ~%", 0*NC),
  printf(fh, "  const double *rhouy = &euler_pkpm[~a]; ~%", 1*NC),
  printf(fh, "  const double *rhouz = &euler_pkpm[~a]; ~%", 2*NC),

  printf(fh, "  const double *rho = &vlasov_pkpm_moms[~a]; ~%", 0*NC),
  printf(fh, "  const double *p_par = &vlasov_pkpm_moms[~a]; ~%", 1*NC),
  printf(fh, "  const double *p_perp = &vlasov_pkpm_moms[~a]; ~%", 2*NC),

  printf(fh, "  const double *Pxx = &p_ij[~a]; ~%", 0*NC),
  printf(fh, "  const double *Pyy = &p_ij[~a]; ~%", 3*NC),
  printf(fh, "  const double *Pzz = &p_ij[~a]; ~%", 5*NC),
  printf(fh, "~%"),

  /* Expand rho, p_par, and p_perp and check for positivity */
  rho_e : doExpand1(rho, bC),
  p_par_e : doExpand1(p_par, bC),
  p_perp_e : doExpand1(p_perp, bC),

  printf(fh, "  int cell_avg = 0;~%"),
  /* For p = 1 rho, p_par, p_perp guaranteed to be positive if they're positive 
     at the corners. For p = 2, we use the positivity control points (-1, 0, 1) */
  nodesCorners : getNodes(basisFun, cdim, polyOrder),
  printf(fh, "  // Check if rho, p_par, or p_perp < 0 at control points. ~%"),
  printf(fh, "  // *THIS IS ONLY A CHECK RIGHT NOW AND UNUSED* ~%"),
  rhoCorners : expand(float(evAtNodes(rho_e,nodesCorners,varsC))),
  p_parCorners : expand(float(evAtNodes(p_par_e,nodesCorners,varsC))),
  p_perpCorners : expand(float(evAtNodes(p_perp_e,nodesCorners,varsC))),
  for i : 1 thru length(nodesCorners) do (
    printf(fh, "  if (~a < 0.0) cell_avg = 1; ~%", rhoCorners[i]),
    printf(fh, "  if (~a < 0.0) cell_avg = 1; ~%", p_parCorners[i]),
    printf(fh, "  if (~a < 0.0) cell_avg = 1; ~%", p_perpCorners[i])
  ),

  /* Arrays for storing inverse of rho and p_perp */
  printf(fh, "  double rho_inv[~a] = {0.0}; ~%", NC),
  printf(fh, "  double p_perp_inv[~a] = {0.0}; ~%", NC),
  printf(fh, "  ~a_~ax_p~a_inv(rho, rho_inv); ~%", basisFun, cdim, polyOrder),
  printf(fh, "  ~a_~ax_p~a_inv(p_perp, p_perp_inv); ~%", basisFun, cdim, polyOrder),

  printf(fh, "  // Calculate expansions of primitive variables, which can be calculated free of aliasing errors. ~%"),
  printf(fh, "  double ux[~a] = {0.0}; ~%", NC),
  printf(fh, "  double uy[~a] = {0.0}; ~%", NC),
  printf(fh, "  double uz[~a] = {0.0}; ~%", NC),
  printf(fh, "  double p_force[~a] = {0.0}; ~%", NC),
  printf(fh, "  double T_perp_over_m[~a] = {0.0}; ~%", NC),
  printf(fh, "  double T_perp_over_m_inv[~a] = {0.0}; ~%", NC),
  printf(fh, "  double Txx[~a] = {0.0}; ~%", NC),
  printf(fh, "  double Tyy[~a] = {0.0}; ~%", NC),
  printf(fh, "  double Tzz[~a] = {0.0}; ~%", NC),
  printf(fh, " ~%"),

  printf(fh, "  binop_mul_~ad_~a_p~a(rho_inv, rhoux, ux); ~%", cdim, basisFun, polyOrder),
  printf(fh, "  binop_mul_~ad_~a_p~a(rho_inv, rhouy, uy); ~%", cdim, basisFun, polyOrder),
  printf(fh, "  binop_mul_~ad_~a_p~a(rho_inv, rhouz, uz); ~%", cdim, basisFun, polyOrder),
  printf(fh, "  binop_mul_~ad_~a_p~a(rho_inv, pkpm_div_ppar, p_force); ~%", cdim, basisFun, polyOrder),
  printf(fh, "  binop_mul_~ad_~a_p~a(rho_inv, p_perp, T_perp_over_m); ~%", cdim, basisFun, polyOrder),
  printf(fh, "  binop_mul_~ad_~a_p~a(p_perp_inv, rho, T_perp_over_m_inv); ~%", cdim, basisFun, polyOrder),
  printf(fh, "  binop_mul_~ad_~a_p~a(rho_inv, Pxx, Txx); ~%", cdim, basisFun, polyOrder),
  printf(fh, "  binop_mul_~ad_~a_p~a(rho_inv, Pyy, Tyy); ~%", cdim, basisFun, polyOrder),
  printf(fh, "  binop_mul_~ad_~a_p~a(rho_inv, Pzz, Tzz); ~%", cdim, basisFun, polyOrder),
  printf(fh, " ~%"),


  expr_ux : float(expand(makelist(ux[i],i,0,NC-1))),
  expr_uy : float(expand(makelist(uy[i],i,0,NC-1))),
  expr_uz : float(expand(makelist(uz[i],i,0,NC-1))),
  expr_pkpm_div_ppar : float(expand(makelist(p_force[i],i,0,NC-1))),
  expr_T_perp_over_m : float(expand(makelist(T_perp_over_m[i],i,0,NC-1))),
  expr_T_perp_over_m_inv : float(expand(makelist(T_perp_over_m_inv[i],i,0,NC-1))),
  expr_Txx : float(expand(makelist(Txx[i],i,0,NC-1))),
  expr_Tyy : float(expand(makelist(Tyy[i],i,0,NC-1))),
  expr_Tzz : float(expand(makelist(Tzz[i],i,0,NC-1))),

  for i : 1 thru length(expr_ux) do (
    printf(fh,"    gkyl_mat_set(&rhs_ux,~a,0,~a); ~%", i-1, expr_ux[i]),
    printf(fh,"    gkyl_mat_set(&rhs_uy,~a,0,~a); ~%", i-1, expr_uy[i]),
    printf(fh,"    gkyl_mat_set(&rhs_uz,~a,0,~a); ~%", i-1, expr_uz[i]),
    printf(fh,"    gkyl_mat_set(&rhs_pkpm_div_ppar,~a,0,~a); ~%", i-1, expr_pkpm_div_ppar[i]),
    printf(fh,"    gkyl_mat_set(&rhs_T_perp_over_m,~a,0,~a); ~%", i-1, expr_T_perp_over_m[i]),
    printf(fh,"    gkyl_mat_set(&rhs_T_perp_over_m_inv,~a,0,~a); ~%", i-1, expr_T_perp_over_m_inv[i]),
    printf(fh,"    gkyl_mat_set(&rhs_Txx,~a,0,~a); ~%", i-1, expr_Txx[i]),
    printf(fh,"    gkyl_mat_set(&rhs_Tyy,~a,0,~a); ~%", i-1, expr_Tyy[i]),
    printf(fh,"    gkyl_mat_set(&rhs_Tzz,~a,0,~a); ~%", i-1, expr_Tzz[i])
  ),
  printf(fh, " ~%"),
  printf(fh, "  return cell_avg;~%"),
  printf(fh, "} ~%")
)$

setPKPMPrimVars(fh, funcNm, cdim, basisFun, polyOrder) := block(
  [varsC, bC, NC, rho_e, p_par_e, p_perp_e, 
   nodesCorners, rhoCorners, p_parCorners, p_perpCorners, 
   rho_temp_e, p_perp_temp_e, 
   expr_ux, expr_uy, expr_uz, expr_Txx, expr_Tyy, expr_Tzz, 
   expr_pkpm_div_ppar, expr_T_perp_over_m, expr_T_perp_over_m_inv, 
   ue, un, eq_rho, E_rho, eq_p_perp, E_p_perp],

  kill(varsC, bC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),

  /* Number of basis monomials. */
  NC : length(bC),

  printf(fh, "#include <gkyl_mat.h> ~%"),
  printf(fh, "#include <gkyl_euler_pkpm_kernels.h> ~%"),
  printf(fh, "GKYL_CU_DH int ~a(int count, struct gkyl_nmat *A, struct gkyl_nmat *rhs, 
  const double *vlasov_pkpm_moms, const double *euler_pkpm, 
  const double *p_ij, const double *pkpm_div_ppar) ~%{ ~%", funcNm, polyOrder),
  printf(fh, "  // count:            integer to indicate which matrix being fetched. ~%"),
  printf(fh, "  // A:                preallocated LHS matrix. ~%"),
  printf(fh, "  // rhs:              preallocated RHS vector. ~%"),
  printf(fh, "  // vlasov_pkpm_moms: [rho, p_parallel, p_perp], Moments computed from kinetic equation in pkpm model.~%"),
  printf(fh, "  // euler_pkpm:       [rho ux, rho uy, rho uz], Fluid input state vector.~%"),
  printf(fh, "  // p_ij:             p_ij = (p_par - p_perp) b_i b_j + p_perp g_ij.~%"),
  printf(fh, "  // pkpm_div_ppar:    div(p_par b) computed from kinetic equation for consistency.~%"),
  printf(fh, "~%"),

  printf(fh, "  struct gkyl_mat A_ux = gkyl_nmat_get(A, count); ~%"),
  printf(fh, "  struct gkyl_mat A_uy = gkyl_nmat_get(A, count+1); ~%"),
  printf(fh, "  struct gkyl_mat A_uz = gkyl_nmat_get(A, count+2); ~%"),
  printf(fh, "  struct gkyl_mat A_pkpm_div_ppar = gkyl_nmat_get(A, count+3); ~%"),
  printf(fh, "  struct gkyl_mat A_T_perp_over_m = gkyl_nmat_get(A, count+4); ~%"),
  printf(fh, "  struct gkyl_mat A_T_perp_over_m_inv = gkyl_nmat_get(A, count+5); ~%"),
  printf(fh, "  struct gkyl_mat A_Txx = gkyl_nmat_get(A, count+6); ~%"),
  printf(fh, "  struct gkyl_mat A_Tyy = gkyl_nmat_get(A, count+7); ~%"),
  printf(fh, "  struct gkyl_mat A_Tzz = gkyl_nmat_get(A, count+8); ~%"),

  printf(fh, "  struct gkyl_mat rhs_ux = gkyl_nmat_get(rhs, count); ~%"),
  printf(fh, "  struct gkyl_mat rhs_uy = gkyl_nmat_get(rhs, count+1); ~%"),
  printf(fh, "  struct gkyl_mat rhs_uz = gkyl_nmat_get(rhs, count+2); ~%"),
  printf(fh, "  struct gkyl_mat rhs_pkpm_div_ppar = gkyl_nmat_get(rhs, count+3); ~%"),
  printf(fh, "  struct gkyl_mat rhs_T_perp_over_m = gkyl_nmat_get(rhs, count+4); ~%"),
  printf(fh, "  struct gkyl_mat rhs_T_perp_over_m_inv = gkyl_nmat_get(rhs, count+5); ~%"),
  printf(fh, "  struct gkyl_mat rhs_Txx = gkyl_nmat_get(rhs, count+6); ~%"),
  printf(fh, "  struct gkyl_mat rhs_Tyy = gkyl_nmat_get(rhs, count+7); ~%"),
  printf(fh, "  struct gkyl_mat rhs_Tzz = gkyl_nmat_get(rhs, count+8); ~%"),

  printf(fh, "  // Clear matrix and rhs for each component of primitive variables being solved for ~%"),
  printf(fh, "  gkyl_mat_clear(&A_ux, 0.0); gkyl_mat_clear(&rhs_ux, 0.0); ~%"),
  printf(fh, "  gkyl_mat_clear(&A_uy, 0.0); gkyl_mat_clear(&rhs_uy, 0.0); ~%"),
  printf(fh, "  gkyl_mat_clear(&A_uz, 0.0); gkyl_mat_clear(&rhs_uz, 0.0); ~%"),
  printf(fh, "  gkyl_mat_clear(&A_pkpm_div_ppar, 0.0); gkyl_mat_clear(&rhs_pkpm_div_ppar, 0.0); ~%"),
  printf(fh, "  gkyl_mat_clear(&A_T_perp_over_m, 0.0); gkyl_mat_clear(&rhs_T_perp_over_m, 0.0); ~%"),
  printf(fh, "  gkyl_mat_clear(&A_T_perp_over_m_inv, 0.0); gkyl_mat_clear(&rhs_T_perp_over_m_inv, 0.0); ~%"),
  printf(fh, "  gkyl_mat_clear(&A_Txx, 0.0); gkyl_mat_clear(&rhs_Txx, 0.0); ~%"),
  printf(fh, "  gkyl_mat_clear(&A_Tyy, 0.0); gkyl_mat_clear(&rhs_Tyy, 0.0); ~%"),
  printf(fh, "  gkyl_mat_clear(&A_Tzz, 0.0); gkyl_mat_clear(&rhs_Tzz, 0.0); ~%"),

  printf(fh, "  const double *rhoux = &euler_pkpm[~a]; ~%", 0*NC),
  printf(fh, "  const double *rhouy = &euler_pkpm[~a]; ~%", 1*NC),
  printf(fh, "  const double *rhouz = &euler_pkpm[~a]; ~%", 2*NC),

  printf(fh, "  const double *rho = &vlasov_pkpm_moms[~a]; ~%", 0*NC),
  printf(fh, "  const double *p_par = &vlasov_pkpm_moms[~a]; ~%", 1*NC),
  printf(fh, "  const double *p_perp = &vlasov_pkpm_moms[~a]; ~%", 2*NC),

  printf(fh, "  const double *Pxx = &p_ij[~a]; ~%", 0*NC),
  printf(fh, "  const double *Pyy = &p_ij[~a]; ~%", 3*NC),
  printf(fh, "  const double *Pzz = &p_ij[~a]; ~%", 5*NC),
  printf(fh, "~%"),

  /* Expand rho, p_par, and p_perp and check for positivity */
  rho_e : doExpand1(rho, bC),
  p_par_e : doExpand1(p_par, bC),
  p_perp_e : doExpand1(p_perp, bC),

  printf(fh, "  int cell_avg = 0;~%"),
  /* For p = 1 rho, p_par, p_perp guaranteed to be positive if they're positive 
     at the corners. For p = 2, we use the positivity control points (-1, 0, 1) */
  nodesCorners : getNodes(basisFun, cdim, polyOrder),
  printf(fh, "  // Check if rho, p_par, or p_perp < 0 at control points. ~%"),
  printf(fh, "  // *THIS IS ONLY A CHECK RIGHT NOW AND UNUSED* ~%"),
  rhoCorners : expand(float(evAtNodes(rho_e,nodesCorners,varsC))),
  p_parCorners : expand(float(evAtNodes(p_par_e,nodesCorners,varsC))),
  p_perpCorners : expand(float(evAtNodes(p_perp_e,nodesCorners,varsC))),
  for i : 1 thru length(nodesCorners) do (
    printf(fh, "  if (~a < 0.0) cell_avg = 1; ~%", rhoCorners[i]),
    printf(fh, "  if (~a < 0.0) cell_avg = 1; ~%", p_parCorners[i]),
    printf(fh, "  if (~a < 0.0) cell_avg = 1; ~%", p_perpCorners[i])
  ),
  printf(fh, " ~%"),
  expr_ux : float(expand(makelist(rhoux[i],i,0,NC-1))),
  expr_uy : float(expand(makelist(rhouy[i],i,0,NC-1))),
  expr_uz : float(expand(makelist(rhouz[i],i,0,NC-1))),
  expr_pkpm_div_ppar : float(expand(makelist(pkpm_div_ppar[i],i,0,NC-1))),
  expr_T_perp_over_m : float(expand(makelist(p_perp[i],i,0,NC-1))),
  expr_T_perp_over_m_inv : float(expand(makelist(rho[i],i,0,NC-1))),
  expr_Txx : float(expand(makelist(Pxx[i],i,0,NC-1))),
  expr_Tyy : float(expand(makelist(Pyy[i],i,0,NC-1))),
  expr_Tzz : float(expand(makelist(Pzz[i],i,0,NC-1))),

  for i : 1 thru length(expr_ux) do (
    printf(fh,"  gkyl_mat_set(&rhs_ux,~a,0,~a); ~%", i-1, expr_ux[i]),
    printf(fh,"  gkyl_mat_set(&rhs_uy,~a,0,~a); ~%", i-1, expr_uy[i]),
    printf(fh,"  gkyl_mat_set(&rhs_uz,~a,0,~a); ~%", i-1, expr_uz[i]),
    printf(fh,"  gkyl_mat_set(&rhs_pkpm_div_ppar,~a,0,~a); ~%", i-1, expr_pkpm_div_ppar[i]),
    printf(fh,"  gkyl_mat_set(&rhs_T_perp_over_m,~a,0,~a); ~%", i-1, expr_T_perp_over_m[i]),
    printf(fh,"  gkyl_mat_set(&rhs_T_perp_over_m_inv,~a,0,~a); ~%", i-1, expr_T_perp_over_m_inv[i]),
    printf(fh,"  gkyl_mat_set(&rhs_Txx,~a,0,~a); ~%", i-1, expr_Txx[i]),
    printf(fh,"  gkyl_mat_set(&rhs_Tyy,~a,0,~a); ~%", i-1, expr_Tyy[i]),
    printf(fh,"  gkyl_mat_set(&rhs_Tzz,~a,0,~a); ~%", i-1, expr_Tzz[i])
  ),
  printf(fh, " ~%"),

  /* Generate matrix of unknown coefficients */
  ue : doExpand1(u,bC),
  un : makelist(u[i],i,0,NC-1),
  eq_rho : calcInnerProdList(varsC,ue,bC,rho_e),
  E_rho : fullratsimp(coefmatrix(eq_rho,un)),
  eq_p_perp : calcInnerProdList(varsC,ue,bC,p_perp_e),
  E_p_perp : fullratsimp(coefmatrix(eq_p_perp,un)),

  /* declare temp_rho and temp_p_perp since matrix entries in A are the same for all operations */
  printf(fh, "  double temp_rho = 0.0; ~%"),
  printf(fh, "  double temp_p_perp = 0.0; ~%"),
  /* Matrix is dense so just do a simple write routine */
  for i : 1 thru NC do (
    for j : 1 thru NC do (
      printf(fh,"  temp_rho = ~a; ~%", float(expand(E_rho[i,j]))),
      printf(fh,"  gkyl_mat_set(&A_ux,~a,~a,~a); ~%", i-1, j-1, temp_rho),
      printf(fh,"  gkyl_mat_set(&A_uy,~a,~a,~a); ~%", i-1, j-1, temp_rho),
      printf(fh,"  gkyl_mat_set(&A_uz,~a,~a,~a); ~%", i-1, j-1, temp_rho),
      printf(fh,"  gkyl_mat_set(&A_pkpm_div_ppar,~a,~a,~a); ~%", i-1, j-1, temp_rho),
      printf(fh,"  gkyl_mat_set(&A_T_perp_over_m,~a,~a,~a); ~%", i-1, j-1, temp_rho),
      printf(fh,"  gkyl_mat_set(&A_Txx,~a,~a,~a); ~%", i-1, j-1, temp_rho),
      printf(fh,"  gkyl_mat_set(&A_Tyy,~a,~a,~a); ~%", i-1, j-1, temp_rho),
      printf(fh,"  gkyl_mat_set(&A_Tzz,~a,~a,~a); ~%", i-1, j-1, temp_rho),
      printf(fh, " ~%"),
      printf(fh,"  temp_p_perp = ~a; ~%", float(expand(E_p_perp[i,j]))),
      printf(fh,"  gkyl_mat_set(&A_T_perp_over_m_inv,~a,~a,~a); ~%", i-1, j-1, temp_p_perp),
      printf(fh, " ~%")
    )
  ),
  printf(fh, "  return cell_avg;~%"),
  printf(fh, "} ~%")
)$

copyPKPMPrimVars(fh, funcNm, cdim, basisFun, polyOrder) := block(
  [varsC, bC, NC, surfVarsx, bSurfx, surfVarsy, bSurfy, surfVarsz, bSurfz, NSurf, 
   ux_e, uy_e, uz_e, Txx_e, Tyy_e, Tzz_e, 
   ux_xl_c, ux_xr_c, uy_xl_c, uy_xr_c, uz_xl_c, uz_xr_c, Txx_xl_c, Txx_xr_c, 
   ux_yl_c, ux_yr_c, uy_yl_c, uy_yr_c, uz_yl_c, uz_yr_c, Tyy_yl_c, Tyy_yr_c, 
   ux_zl_c, ux_zr_c, uy_zl_c, uy_zr_c, uz_zl_c, uz_zr_c, Tzz_zl_c, Tzz_zr_c],

  kill(varsC, basisC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),
  surfVarsx : delete(x,varsC),
  bSurfx : basisFromVars(basisFun,surfVarsx,polyOrder),
  if (cdim > 1) then (
    surfVarsy : delete(y,varsC),
    bSurfy : basisFromVars(basisFun,surfVarsy,polyOrder)
  ),
  if (cdim = 3) then (
    surfVarsz : delete(z,varsC),
    bSurfz : basisFromVars(basisFun,surfVarsz,polyOrder)
  ),

  /* Number of basis monomials. */
  NC : length(bC),
  if (cdim = 1) then (
    NSurf : 1
  )
  else (
    NSurf : length(bSurfx)
  ),

  printf(fh, "#include <gkyl_mat.h> ~%"),
  printf(fh, "#include <gkyl_euler_pkpm_kernels.h> ~%"),
  /* Function declaration with input/output variables. */
  printf(fh, "GKYL_CU_DH void ~a(int count, struct gkyl_nmat *x, 
    double* GKYL_RESTRICT prim, double* GKYL_RESTRICT prim_surf) ~%{ ~%", funcNm),
  printf(fh, "  // count:     integer to indicate which matrix being fetched. ~%"),
  printf(fh, "  // x:         Input solution vector. ~%"),
  printf(fh, "  // prim:      Output volume expansion of primitive variables: ~%"),
  printf(fh, "  //            [ux, uy, uz, 1/rho div(p_par b), T_perp/m, m/T_perp, 3*Txx/m, 3*Tyy/m, 3*Tzz/m]. ~%"),
  printf(fh, "  // prim_surf: Output surface expansion of primitive variables ~%"),
  printf(fh, "  //            [ux_xl, ux_xr, uy_xl, uy_xr, uz_xl, uz_xr, Txx_xl, Txx_xr,  ~%"),
  printf(fh, "  //             ux_yl, ux_yr, uy_yl, uy_yr, uz_yl, uz_yr, Tyy_yl, Tyy_yr,  ~%"),
  printf(fh, "  //             ux_zl, ux_zr, uy_zl, uy_zr, uz_zl, uz_zr, Tzz_zl, Tzz_zr]  ~%"),
  printf(fh, " ~%"),

  printf(fh, "  struct gkyl_mat x_ux = gkyl_nmat_get(x, count); ~%"),
  printf(fh, "  struct gkyl_mat x_uy = gkyl_nmat_get(x, count+1); ~%"),
  printf(fh, "  struct gkyl_mat x_uz = gkyl_nmat_get(x, count+2); ~%"),
  printf(fh, "  struct gkyl_mat x_pkpm_div_ppar = gkyl_nmat_get(x, count+3); ~%"),
  printf(fh, "  struct gkyl_mat x_T_perp_over_m = gkyl_nmat_get(x, count+4); ~%"),
  printf(fh, "  struct gkyl_mat x_T_perp_over_m_inv = gkyl_nmat_get(x, count+5); ~%"),
  printf(fh, "  struct gkyl_mat x_Txx = gkyl_nmat_get(x, count+6); ~%"),
  printf(fh, "  struct gkyl_mat x_Tyy = gkyl_nmat_get(x, count+7); ~%"),
  printf(fh, "  struct gkyl_mat x_Tzz = gkyl_nmat_get(x, count+8); ~%"),

  printf(fh, "  double *ux = &prim[~a]; ~%", 0*NC),
  printf(fh, "  double *uy = &prim[~a]; ~%", 1*NC),
  printf(fh, "  double *uz = &prim[~a]; ~%", 2*NC),
  /* p_force = 1/rho div(p_par b) - T_perp/m*div(b)
     We have only computed 1/rho div(p_par b) at this point */
  printf(fh, "  double *p_force = &prim[~a]; ~%", 3*NC),
  printf(fh, "  double *T_perp_over_m = &prim[~a]; ~%", 4*NC),
  printf(fh, "  double *T_perp_over_m_inv = &prim[~a]; ~%", 5*NC),
  /* Components of Lax flux lambda_i = |u_i| + sqrt(3.0*T_ii/m) */
  printf(fh, "  double *Txx = &prim[~a]; ~%", 6*NC),
  printf(fh, "  double *Tyy = &prim[~a]; ~%", 7*NC),
  printf(fh, "  double *Tzz = &prim[~a]; ~%", 8*NC),
  printf(fh, "~%"),

  /* Fetch volume expansion solution from linear solve */
  for i : 1 thru NC do (
    printf(fh,"  ux[~a] = gkyl_mat_get(&x_ux,~a,0); ~%", i-1, i-1),
    printf(fh,"  uy[~a] = gkyl_mat_get(&x_uy,~a,0); ~%", i-1, i-1),
    printf(fh,"  uz[~a] = gkyl_mat_get(&x_uz,~a,0); ~%", i-1, i-1),
    printf(fh,"  p_force[~a] = gkyl_mat_get(&x_pkpm_div_ppar,~a,0); ~%", i-1, i-1),
    printf(fh,"  T_perp_over_m[~a] = gkyl_mat_get(&x_T_perp_over_m,~a,0); ~%", i-1, i-1),
    printf(fh,"  T_perp_over_m_inv[~a] = gkyl_mat_get(&x_T_perp_over_m_inv,~a,0); ~%", i-1, i-1),
    printf(fh,"  Txx[~a] = 3.0*gkyl_mat_get(&x_Txx,~a,0); ~%", i-1, i-1),
    printf(fh,"  Tyy[~a] = 3.0*gkyl_mat_get(&x_Tyy,~a,0); ~%", i-1, i-1),
    printf(fh,"  Tzz[~a] = 3.0*gkyl_mat_get(&x_Tzz,~a,0); ~%", i-1, i-1)
  ),
  printf(fh, "~%"),

  /* Now compute needed surface expansions */
  /* Expand u and 3*T_ii/m */
  ux_e : doExpand1(ux, bC),
  uy_e : doExpand1(uy, bC),
  uz_e : doExpand1(uz, bC),
  Txx_e : doExpand1(Txx, bC),
  Tyy_e : doExpand1(Tyy, bC),
  Tzz_e : doExpand1(Tzz, bC),

  printf(fh, "  double *ux_xl = &prim_surf[~a]; ~%", 0*NSurf),
  printf(fh, "  double *ux_xr = &prim_surf[~a]; ~%", 1*NSurf),
  printf(fh, "  double *uy_xl = &prim_surf[~a]; ~%", 2*NSurf),
  printf(fh, "  double *uy_xr = &prim_surf[~a]; ~%", 3*NSurf),
  printf(fh, "  double *uz_xl = &prim_surf[~a]; ~%", 4*NSurf),
  printf(fh, "  double *uz_xr = &prim_surf[~a]; ~%", 5*NSurf),
  printf(fh, "  double *Txx_xl = &prim_surf[~a]; ~%", 6*NSurf),
  printf(fh, "  double *Txx_xr = &prim_surf[~a]; ~%", 7*NSurf),
  printf(fh, " ~%"), 
  if (cdim = 1) then (
    printf(fh, "  ux_xl[0] = ~a; ~%", float(expand(subst(x=-1, ux_e)))),
    printf(fh, "  ux_xr[0] = ~a; ~%", float(expand(subst(x=1, ux_e)))),
    printf(fh, "  uy_xl[0] = ~a; ~%", float(expand(subst(x=-1, uy_e)))),
    printf(fh, "  uy_xr[0] = ~a; ~%", float(expand(subst(x=1, uy_e)))),
    printf(fh, "  uz_xl[0] = ~a; ~%", float(expand(subst(x=-1, uz_e)))),
    printf(fh, "  uz_xr[0] = ~a; ~%", float(expand(subst(x=1, uz_e)))),
    printf(fh, "  Txx_xl[0] = ~a; ~%", float(expand(subst(x=-1, Txx_e)))),
    printf(fh, "  Txx_xr[0] = ~a; ~%", float(expand(subst(x=1, Txx_e)))),
    printf(fh, " ~%")
  )
  else (
    ux_xl_c : calcInnerProdList(surfVarsx, 1, bSurfx, subst(x=-1, ux_e)),
    uy_xl_c : calcInnerProdList(surfVarsx, 1, bSurfx, subst(x=-1, uy_e)),
    uz_xl_c : calcInnerProdList(surfVarsx, 1, bSurfx, subst(x=-1, uz_e)),
    Txx_xl_c : calcInnerProdList(surfVarsx, 1, bSurfx, subst(x=-1, Txx_e)),

    writeCExprs1(ux_xl, ux_xl_c), 
    writeCExprs1(uy_xl, uy_xl_c), 
    writeCExprs1(uz_xl, uz_xl_c), 
    writeCExprs1(Txx_xl, Txx_xl_c), 
    printf(fh, " ~%"), 

    ux_xr_c : calcInnerProdList(surfVarsx, 1, bSurfx, subst(x=1, ux_e)),
    uy_xr_c : calcInnerProdList(surfVarsx, 1, bSurfx, subst(x=1, uy_e)),
    uz_xr_c : calcInnerProdList(surfVarsx, 1, bSurfx, subst(x=1, uz_e)),
    Txx_xr_c : calcInnerProdList(surfVarsx, 1, bSurfx, subst(x=1, Txx_e)),

    writeCExprs1(ux_xr, ux_xr_c), 
    writeCExprs1(uy_xr, uy_xr_c), 
    writeCExprs1(uz_xr, uz_xr_c), 
    writeCExprs1(Txx_xr, Txx_xr_c), 
    printf(fh, " ~%")
  ),
  if (cdim > 1) then (
    printf(fh, "  double *ux_yl = &prim_surf[~a]; ~%", 8*NSurf),
    printf(fh, "  double *ux_yr = &prim_surf[~a]; ~%", 9*NSurf),
    printf(fh, "  double *uy_yl = &prim_surf[~a]; ~%", 10*NSurf),
    printf(fh, "  double *uy_yr = &prim_surf[~a]; ~%", 11*NSurf),
    printf(fh, "  double *uz_yl = &prim_surf[~a]; ~%", 12*NSurf),
    printf(fh, "  double *uz_yr = &prim_surf[~a]; ~%", 13*NSurf),
    printf(fh, "  double *Tyy_yl = &prim_surf[~a]; ~%", 14*NSurf),
    printf(fh, "  double *Tyy_yr = &prim_surf[~a]; ~%", 15*NSurf),
    printf(fh, " ~%"), 

    ux_yl_c : calcInnerProdList(surfVarsy, 1, bSurfy, subst(y=-1, ux_e)),
    uy_yl_c : calcInnerProdList(surfVarsy, 1, bSurfy, subst(y=-1, uy_e)),
    uz_yl_c : calcInnerProdList(surfVarsy, 1, bSurfy, subst(y=-1, uz_e)),
    Tyy_yl_c : calcInnerProdList(surfVarsy, 1, bSurfy, subst(y=-1, Tyy_e)),

    writeCExprs1(ux_yl, ux_yl_c), 
    writeCExprs1(uy_yl, uy_yl_c), 
    writeCExprs1(uz_yl, uz_yl_c), 
    writeCExprs1(Tyy_yl, Tyy_yl_c), 
    printf(fh, " ~%"), 

    ux_yr_c : calcInnerProdList(surfVarsy, 1, bSurfy, subst(y=1, ux_e)),
    uy_yr_c : calcInnerProdList(surfVarsy, 1, bSurfy, subst(y=1, uy_e)),
    uz_yr_c : calcInnerProdList(surfVarsy, 1, bSurfy, subst(y=1, uz_e)),
    Tyy_yr_c : calcInnerProdList(surfVarsy, 1, bSurfy, subst(y=1, Tyy_e)),

    writeCExprs1(ux_yr, ux_yr_c), 
    writeCExprs1(uy_yr, uy_yr_c), 
    writeCExprs1(uz_yr, uz_yr_c), 
    writeCExprs1(Tyy_yr, Tyy_yr_c), 
    printf(fh, " ~%")
  ),
  if (cdim = 3) then (
    printf(fh, "  double *ux_zl = &prim_surf[~a]; ~%", 16*NSurf),
    printf(fh, "  double *ux_zr = &prim_surf[~a]; ~%", 17*NSurf),
    printf(fh, "  double *uy_zl = &prim_surf[~a]; ~%", 18*NSurf),
    printf(fh, "  double *uy_zr = &prim_surf[~a]; ~%", 19*NSurf),
    printf(fh, "  double *uz_zl = &prim_surf[~a]; ~%", 20*NSurf),
    printf(fh, "  double *uz_zr = &prim_surf[~a]; ~%", 21*NSurf),
    printf(fh, "  double *Tzz_zl = &prim_surf[~a]; ~%", 22*NSurf),
    printf(fh, "  double *Tzz_zr = &prim_surf[~a]; ~%", 23*NSurf),
    printf(fh, " ~%"), 

    ux_zl_c : calcInnerProdList(surfVarsz, 1, bSurfz, subst(z=-1, ux_e)),
    uy_zl_c : calcInnerProdList(surfVarsz, 1, bSurfz, subst(z=-1, uy_e)),
    uz_zl_c : calcInnerProdList(surfVarsz, 1, bSurfz, subst(z=-1, uz_e)),
    Tzz_zl_c : calcInnerProdList(surfVarsz, 1, bSurfz, subst(z=-1, Tzz_e)),

    writeCExprs1(ux_zl, ux_zl_c), 
    writeCExprs1(uy_zl, uy_zl_c), 
    writeCExprs1(uz_zl, uz_zl_c), 
    writeCExprs1(Tzz_zl, Tzz_zl_c), 
    printf(fh, " ~%"), 

    ux_zr_c : calcInnerProdList(surfVarsz, 1, bSurfz, subst(z=1, ux_e)),
    uy_zr_c : calcInnerProdList(surfVarsz, 1, bSurfz, subst(z=1, uy_e)),
    uz_zr_c : calcInnerProdList(surfVarsz, 1, bSurfz, subst(z=1, uz_e)),
    Tzz_zr_c : calcInnerProdList(surfVarsz, 1, bSurfz, subst(z=1, Tzz_e)),

    writeCExprs1(ux_zr, ux_zr_c), 
    writeCExprs1(uy_zr, uy_zr_c), 
    writeCExprs1(uz_zr, uz_zr_c), 
    writeCExprs1(Tzz_zr, Tzz_zr_c), 
    printf(fh, " ~%")
  ),  

  printf(fh, "} ~%"),
  printf(fh, " ~%")
)$
