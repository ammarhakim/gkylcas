/* This script generates the kernels for the volume term contribution from 
   the Vlasov equation for the parallel-kinetic-perpendicular-moment (pkpm) model */

load("modal-basis");
load("out-scripts");
load("utilities")$
load ("scifac")$
load(stringproc)$
fpprec : 24$

dx11 : [dx0, dx1, dx2]$

cidx(cdim)      := makelist(i,i,0,cdim-1)$
vidx(cdim,vdim) := makelist(i,i,cdim,cdim+vdim-1)$

/* Helper functions for expanding in basis functions a quantity we know should be sparse 
   For example, alpha, the phase space flow only depends on a few phase space coordinates */
/* List output is a vector with some offset off */
doMakeExprLstOff(vals, S, off)  := makelist(if vals[i] # 0 then S[off+i-1] else 0, i, 1, length(vals))$
/* List output is a scalar */
doMakeExprLst(vals, S)  := makelist(if vals[i] # 0 then S[i-1] else 0, i, 1, length(vals))$

calcVlasovPKPMVolUpdater(fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC, bC, varsP, bP, pOrderV, NP, NC, cflPt, cid, vid, vTrans, 
   F_0_e, G_1_e, g_dist_e, ux_e, uy_e, uz_e, u_e, bx_e, by_e, bz_e, b_e, 
   p_force_e, bb_grad_u_e, div_b_e, p_perp_source_e, p_perp_div_b_e, 
   incr_cdim_F_0, incr_cdim_G_1, alpha_cdim_c, expr, alpha_cdim_NoZero, alpha_cdim_NoZero_e, 
   amid, amid_vdim, alpha_vdim_c, clst, alpha_vdim_NoZero, alpha_vdim_NoZero_e, incr_vdim_F_0, incr_vdim_G_1, 
   alpha_div_b_c, alpha_div_b_NoZero, alpha_div_b_NoZero_e, amid_div_b, 
   incr_F_0_div_b, incr_G_1_div_b, alpha_G_1_source_c, alpha_G_1_source_NoZero, alpha_G_1_source_NoZero_e, incr_source_G_1],

  printf(fh, "#include <gkyl_vlasov_pkpm_kernels.h> ~%"),

  /* Load basis of dimensionality requested. */
  [varsC,bC,varsP,bP] : loadPhaseBasis(basisFun, cdim, vdim, polyOrder),

  /* Identify polyOrder in velocity space as p=2 for p=1 since we force p=1 to
     mean hybrid basis. */
  pOrderV : polyOrder,
  if polyOrder=1 then ( pOrderV : 2 ),

  /* Number of basis monomials. */
  NP : length(bP),
  NC : length(bC),

  /* specify a point to evaluate alpha at for use in computing CFL */
  cflPt : makelist(varsP[d]=0, d, 1, length(varsP)),

  printf(fh, "GKYL_CU_DH double ~a_p~a(const double *w, const double *dxv, 
  const double *bvar, const double *u_i, 
  const double *pkpm_accel_vars, const double *g_dist_source, 
  const double *f, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, polyOrder),
  printf(fh, "  // w[NDIM]:         Cell-center coordinates.~%"),
  printf(fh, "  // dxv[NDIM]:       Cell spacing.~%"),
  printf(fh, "  // bvar:            magnetic field unit vector (nine components; first three components, b_i, other six components, b_i b_j.) ~%"),
  printf(fh, "  // u_i:             flow velocity"),
  printf(fh, "  // pkpm_accel_vars: pkpm acceleration variables~%"),
  printf(fh, "  // g_dist_source:   2.0*T_perp/m*(2.0*T_perp/m*G_1 + T_perp/m*(F_2 - F_0)).~%"), 
  printf(fh, "  // f:               Input distribution function [F_0, T_perp/m G = T_perp/m (F_0 - F_1)].~%"),
  printf(fh, "  // out:             Incremented output.~%"),

  cid : cidx(cdim),
  vid : vidx(cdim,vdim),

  /* common expressions in streaming [v_parallel b_hat + u] dot grad(f) term */
  for dir : 1 thru cdim do (
    printf(fh, "  const double dx~a = 2.0/dxv[~a]; ~%", dir-1, cid[dir])
  ),
  /* grid spacing in v_parallel and v_parallel coordinate */
  printf(fh, "  const double dv1par = 2.0/dxv[~a]; ~%", cdim),
  printf(fh, "  const double dvpar = dxv[~a], wvpar = w[~a]; ~%", cdim, cdim),

  /* access flow velocity and magnetic field unit vector data */
  printf(fh, "  const double *ux = &u_i[~a]; ~%", 0),
  printf(fh, "  const double *uy = &u_i[~a]; ~%", NC),
  printf(fh, "  const double *uz = &u_i[~a]; ~%", NC*2),

  printf(fh, "  const double *bx = &bvar[~a]; ~%", 0),
  printf(fh, "  const double *by = &bvar[~a]; ~%", NC),
  printf(fh, "  const double *bz = &bvar[~a]; ~%", NC*2),
  printf(fh, "~%"),

  /* Access F_0 and T_perp/m G, first two Laguerre moments */
  printf(fh, "  const double *F_0 = &f[~a]; ~%", 0),
  printf(fh, "  const double *G_1 = &f[~a]; ~%", NP),  

  /* Access source distribution functions for mirror force
     F_0 source = T_perp/m G_1; G_1 source = 2.0*T_perp/m*(2.0*T_perp/m*G_1 + T_perp/m*(F_2 - F_0)) */
  printf(fh, "  const double *F_0_source = &f[~a]; ~%", NP),
  printf(fh, "  const double *G_1_source = &g_dist_source[~a]; ~%", 0),  

  /* Access pkpm acceleration variables for forces and sources */
  printf(fh, "  const double *div_b = &pkpm_accel_vars[~a]; ~%", 0*NC),
  printf(fh, "  const double *bb_grad_u = &pkpm_accel_vars[~a]; ~%", 1*NC),
  printf(fh, "  const double *p_force = &pkpm_accel_vars[~a]; ~%", 2*NC),
  printf(fh, "  const double *p_perp_source = &pkpm_accel_vars[~a]; ~%", 3*NC),
  printf(fh, "  const double *p_perp_div_b = &pkpm_accel_vars[~a]; ~%", 4*NC),
  printf(fh, "~%"),

  /* Access the components of out for the first two Laguerre moments */
  printf(fh, "  double *out_F_0 = &out[~a]; ~%", 0),
  printf(fh, "  double *out_G_1 = &out[~a]; ~%", NP),    
  printf(fh, "~%"),

  /* cflFreq_mid is our approximation of sum_i max(abs(alpha_i))/(dx_i/(2p+1)) */
  printf(fh, "  double cflFreq_mid = 0.0; ~%"),
  printf(fh, "~%"),

  printf(fh, "  double alpha_cdim[~a] = {0.0}; ~%", cdim*NP),
  printf(fh, "  double alpha_vdim[~a] = {0.0}; ~%", NP),
  printf(fh, "  double alpha_div_b[~a] = {0.0}; ~%", NP),
  printf(fh, "  double alpha_G_1_source[~a] = {0.0}; ~%", NP),
  printf(fh, "~%"),

  /* Coordinate transformation for velocity space */
  vTrans : vx*dvpar/2+wvpar,

  /* Expand distribution functions F_0 and T_perp/m G in phase basis. */
  F_0_e : doExpand1(F_0, bP),
  G_1_e : doExpand1(G_1, bP),
  /* Expand F_0_source = T_perp/m G_1 and G_1_source = 2.0*T_perp/m*(2.0*T_perp/m*G_1 + T_perp/m*(F_2 - F_0)) */
  F_0_source_e : doExpand1(F_0_source, bP),
  G_1_source_e : doExpand1(G_1_source, bP),

  /* Expand u, b, p_force = 1/rho (div(p_parallel b_hat) - p_perp div(b)), bb : grad(u), div(b), 
     p_perp_div_b = 2*p_perp/rho*div(b), and p_perp_source =  bb : grad(u) - div(u) - nu + nu rho vth^2/p_perp
     in configuration space basis */
  ux_e : doExpand1(ux, bC),
  uy_e : doExpand1(uy, bC),
  uz_e : doExpand1(uz, bC),
  u_e : [ux_e, uy_e, uz_e],

  bx_e : doExpand1(bx, bC),
  by_e : doExpand1(by, bC),
  bz_e : doExpand1(bz, bC),
  b_e : [bx_e, by_e, bz_e],

  p_force_e : doExpand1(p_force, bC),
  bb_grad_u_e : doExpand1(bb_grad_u, bC),
  div_b_e : doExpand1(div_b, bC),
  p_perp_source_e : doExpand1(p_perp_source, bC),
  p_perp_div_b_e : doExpand1(p_perp_div_b, bC),

  incr_cdim_F_0 : 0,
  incr_cdim_G_1 : 0,
  /* alpha_cdim = [v_parallel b_hat + u] */
  for cdir : 1 thru cdim do (
    alpha_cdim_c : calcInnerProdList(varsP, 1, bP, vTrans*b_e[cdir] + u_e[cdir]),
    expr : gcfac(float(expand(radcan(alpha_cdim_c)))),

    /* Write out the component of alpha_cdim's phase space expansion */
    for i : 1 thru NP do (
      if expr[i] # 0.0 then printf(fh, "  ~a = ~a; ~%", alpha_cdim[NP*(cdir-1)+i-1], expr[i]*dx11[cdir])
    ),
    printf(fh, "~%"),
    
    /* zero out components of alpha which are empty */
    alpha_cdim_NoZero   : doMakeExprLstOff(alpha_cdim_c, alpha_cdim, a0),
    alpha_cdim_NoZero_e : doExpand(alpha_cdim_NoZero, bP),

    /* evaluate alpha_cdim at cflPt to approximate
    ** max(abs(alpha_cdim))/(dx_i/(2p+1)) */
    amid : gcfac(float(expand(subst(cflPt,0.5*subst(a0=NP*(cdir-1),alpha_cdim_NoZero_e))))),
    printf(fh, "  cflFreq_mid += ~a*fabs(~a); ~%", float(2*polyOrder+1), amid),
    printf(fh, "~%"),

    /* Volume increment from configuration space. */
    incr_cdim_F_0 : incr_cdim_F_0+subst(a0=NP*(cdir-1),calcInnerProdList(varsP, 1, diff(bP,varsP[cdir]), alpha_cdim_NoZero_e*F_0_e)),
    incr_cdim_G_1 : incr_cdim_G_1+subst(a0=NP*(cdir-1),calcInnerProdList(varsP, 1, diff(bP,varsP[cdir]), alpha_cdim_NoZero_e*G_1_e))
  ),

  /* alpha_vdim = ( 1/rho div(p_parallel b_hat) - T_perp/m*div(b)) - v_parallel bb : grad(u)] 
     alpha_vdim consolidated as alpha_vdim = p_force - v_parallel bb_grad_u (pressure forces and bb_grad_u pre-computed) */
  alpha_vdim_c : calcInnerProdList(varsP, 1, bP, p_force_e - vTrans*bb_grad_u_e),

  clst : [dv1par, dvpar, wvpar],
  writeCExprsCollect1(alpha_vdim, alpha_vdim_c*dv1par, clst),
  printf(fh, "~%"),

  /* Zero out components of alpha_vdim for F_0 and G_1 which are empty. */
  alpha_vdim_NoZero : doMakeExprLst(alpha_vdim_c, alpha_vdim),
  alpha_vdim_NoZero_e : doExpand(alpha_vdim_NoZero, bP),

  /* evaluate alpha_vdim at cflPt to approximate
  ** max(abs(alpha_vdim))/(dx_i/(2p+1)). The flux for G_1 is more restrictive so use alpha_vdim_G_1 to estimate time step */
  amid_vdim : gcfac(float(expand(subst(cflPt,0.5*alpha_vdim_NoZero_e)))),
  printf(fh, "  cflFreq_mid += ~a*fabs(~a); ~%", float(2*pOrderV+1), amid_vdim),
  printf(fh, "~%"),
  /* Volume increment from configuration space. */
  incr_vdim_F_0 : calcInnerProdList(varsP, 1, diff(bP,varsP[cdim+1]), alpha_vdim_NoZero_e*F_0_e),
  incr_vdim_G_1 : calcInnerProdList(varsP, 1, diff(bP,varsP[cdim+1]), alpha_vdim_NoZero_e*G_1_e),

  /* additional forces and sources on F_0 and T_perp/m G_1
     additional force on F_0 -> div(b) T_perp/m G_1, 
     additional force on G_1 -> div(b) 2.0*T_perp/m*(2.0*T_perp/m*G_1 + T_perp/m*(F_2 - F_0))] = div(b) g_dist_source */
  /* First project div(b) onto phase basis */
  alpha_div_b_c : calcInnerProdList(varsP, 1, bP, div_b_e),

  writeCExprsCollect1(alpha_div_b, alpha_div_b_c*dv1par, clst),
  printf(fh, "~%"),

  /* Zero out components of alpha_div_b which are empty. */
  alpha_div_b_NoZero : doMakeExprLst(alpha_div_b_c, alpha_div_b),
  alpha_div_b_NoZero_e : doExpand(alpha_div_b_NoZero, bP),

  /* addition force on F_0 = d/dvpar (div(b) T_perp/m G) */
  incr_F_0_div_b : calcInnerProdList(varsP, 1, diff(bP,varsP[cdim+1]), alpha_div_b_NoZero_e*F_0_source_e),

  /* additional force on G_1 = d/dvpar (div(b) * 2.0*T_perp/m*(2.0*T_perp/m*G_1 + T_perp/m*(F_2 - F_0))) 
     additional force on G_1 consolidated as = d/dvpar (div(b)*g_dist_source) */
  incr_G_1_div_b : calcInnerProdList(varsP, 1, diff(bP,varsP[cdim+1]), alpha_div_b_NoZero_e*G_1_source_e),

  /* evaluate additional force p_perp_div_b = (p_perp/rho*div(b)) at cflPt for further 
     time step restriction */
  amid_div_b : gcfac(float(expand(subst(cflPt,0.5*p_perp_div_b_e)))),
  printf(fh, "  cflFreq_mid += ~a*fabs(~a)*dv1par; ~%", float(2*pOrderV+1), amid_div_b),
  printf(fh, "~%"),

  /* Note that G source does not involve an integration by parts and is just a pure source term 
     alpha_G_1_source = (bb : grad(u) - div(u) - v_parallel div(b)) T_perp/m G 
     alpha_G_1_source consolidated as alpha_G_1_source = p_perp_source - v_parallel div(b) (p_perp_source pre-computed) */
  alpha_G_1_source_c : calcInnerProdList(varsP, 1, bP, p_perp_source_e - div_b_e*vTrans),
  writeCExprsCollect1(alpha_G_1_source, alpha_G_1_source_c, clst),
  printf(fh, "~%"),

  /* Zero out components of G_1 source which are empty. */
  alpha_G_1_source_NoZero : doMakeExprLst(alpha_G_1_source_c, alpha_G_1_source),
  alpha_G_1_source_NoZero_e : doExpand(alpha_G_1_source_NoZero, bP),
  incr_source_G_1 : calcInnerProdList(varsP, 1, bP, alpha_G_1_source_NoZero_e*G_1_e),

  writeCIncrExprs1(out_F_0, incr_cdim_F_0 + incr_vdim_F_0 + incr_F_0_div_b),
  writeCIncrExprs1(out_G_1, incr_cdim_G_1 + incr_vdim_G_1 + incr_G_1_div_b + incr_source_G_1),

  printf(fh, "~%"),
  printf(fh, "  return cflFreq_mid; ~%"),
  printf(fh, "} ~%")
)$
