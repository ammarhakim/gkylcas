/* This script generated the kernels which construct the output fluid arrays for PKPM, including the conserved fluid variables: 
   [rho, rho ux, rho uy, rho uz, Pxx + rho ux^2, Pxy + rho ux uy, Pxz + rho ux uz, Pyy + rho uy^2, Pyz + rho uy uz, Pzz + rho uz^2]  
   and the output primitive and acceleration variables 
   [ux, uy, uz, T_perp/m, m/T_perp, div(b), 1/rho div(p_par b), T_perp/m div(b), bb : grad(u),
   vperp configuration space characteristics = bb : grad(u) - div(u) - 2 nu] */

load("modal-basis")$
load("out-scripts")$
fpprec : 24$

calcPKPMIoVars(fh, funcNm, cdim, basisFun, polyOrder) := block(
  [varsC, bC, NC],

  kill(varsC, bC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),

  /* Number of basis monomials. */
  NC : length(bC),

  printf(fh, "#include <gkyl_euler_pkpm_kernels.h> ~%"),
  printf(fh, "#include <gkyl_binop_mul_ser.h> ~%"),
  printf(fh, "GKYL_CU_DH void ~a_p~a(const double *vlasov_pkpm_moms, const double *euler_pkpm, 
  const double* p_ij, const double* prim, const double* pkpm_accel, 
  double* GKYL_RESTRICT fluid_io, double* GKYL_RESTRICT pkpm_vars_io) ~%{ ~%", funcNm, polyOrder),
  printf(fh, "  // vlasov_pkpm_moms: [rho, p_parallel, p_perp], Moments computed from kinetic equation in pkpm model.~%"),
  printf(fh, "  // euler_pkpm:       [rho ux, rho uy, rho uz], Fluid input state vector.~%"),
  printf(fh, "  // p_ij:             p_ij = (p_par - p_perp) b_i b_j + p_perp g_ij.~%"),
  printf(fh, "  // prim:             [ux, uy, uz, 3*Txx/m, 3*Tyy/m, 3*Tzz/m, 1/rho div(p_par b), T_perp/m, m/T_perp].~%"),
  printf(fh, "  // pkpm_accel:       Volume expansion of pkpm acceleration variables.~%"),
  printf(fh, "  // fluid_io:         Output fluid conserved variables.~%"),
  printf(fh, "  // pkpm_vars_io:     Output pkpm variables (primitive and acceleration).~%"),
  printf(fh, "~%"),

  printf(fh, "  const double *rho = &vlasov_pkpm_moms[~a]; ~%", 0*NC),
  printf(fh, "~%"),

  printf(fh, "  const double *rhoux = &euler_pkpm[~a]; ~%", 0*NC),
  printf(fh, "  const double *rhouy = &euler_pkpm[~a]; ~%", 1*NC),
  printf(fh, "  const double *rhouz = &euler_pkpm[~a]; ~%", 2*NC),
  printf(fh, "~%"),

  printf(fh, "  const double *Pxx = &p_ij[~a]; ~%", 0*NC),
  printf(fh, "  const double *Pxy = &p_ij[~a]; ~%", 1*NC),
  printf(fh, "  const double *Pxz = &p_ij[~a]; ~%", 2*NC),
  printf(fh, "  const double *Pyy = &p_ij[~a]; ~%", 3*NC),
  printf(fh, "  const double *Pyz = &p_ij[~a]; ~%", 4*NC),
  printf(fh, "  const double *Pzz = &p_ij[~a]; ~%", 5*NC),
  printf(fh, "~%"),

  printf(fh, "  const double *ux = &prim[~a]; ~%", 0*NC),
  printf(fh, "  const double *uy = &prim[~a]; ~%", 1*NC),
  printf(fh, "  const double *uz = &prim[~a]; ~%", 2*NC),
  printf(fh, "  const double *pkpm_div_ppar = &prim[~a]; ~%", 3*NC),
  printf(fh, "  const double *T_perp_over_m = &prim[~a]; ~%", 4*NC),
  printf(fh, "  const double *T_perp_over_m_inv = &prim[~a]; ~%", 5*NC),
  printf(fh, "~%"),

  printf(fh, "  const double *div_b = &pkpm_accel[~a]; ~%", 0*NC),
  printf(fh, "  const double *bb_grad_u = &pkpm_accel[~a]; ~%", 1*NC),
  printf(fh, "  const double *p_perp_source = &pkpm_accel[~a]; ~%", 3*NC),
  printf(fh, "  const double *p_perp_div_b = &pkpm_accel[~a]; ~%", 4*NC),
  printf(fh, "~%"),

  printf(fh, "  double *fluid_io_rho = &fluid_io[~a]; ~%", 0*NC),
  printf(fh, "  double *fluid_io_rhoux = &fluid_io[~a]; ~%", 1*NC),
  printf(fh, "  double *fluid_io_rhouy = &fluid_io[~a]; ~%", 2*NC),
  printf(fh, "  double *fluid_io_rhouz = &fluid_io[~a]; ~%", 3*NC),
  printf(fh, "  double *fluid_io_Sxx = &fluid_io[~a]; ~%", 4*NC),
  printf(fh, "  double *fluid_io_Sxy = &fluid_io[~a]; ~%", 5*NC),
  printf(fh, "  double *fluid_io_Sxz = &fluid_io[~a]; ~%", 6*NC),
  printf(fh, "  double *fluid_io_Syy = &fluid_io[~a]; ~%", 7*NC),
  printf(fh, "  double *fluid_io_Syz = &fluid_io[~a]; ~%", 8*NC),
  printf(fh, "  double *fluid_io_Szz = &fluid_io[~a]; ~%", 9*NC),
  printf(fh, "~%"),

  printf(fh, "  double *pkpm_vars_io_ux = &pkpm_vars_io[~a]; ~%", 0*NC),
  printf(fh, "  double *pkpm_vars_io_uy = &pkpm_vars_io[~a]; ~%", 1*NC),
  printf(fh, "  double *pkpm_vars_io_uz = &pkpm_vars_io[~a]; ~%", 2*NC),
  printf(fh, "  double *pkpm_vars_io_T_perp_over_m = &pkpm_vars_io[~a]; ~%", 3*NC),
  printf(fh, "  double *pkpm_vars_io_T_perp_over_m_inv = &pkpm_vars_io[~a]; ~%", 4*NC),
  printf(fh, "  double *pkpm_vars_io_div_b = &pkpm_vars_io[~a]; ~%", 5*NC),
  printf(fh, "  double *pkpm_vars_io_pkpm_div_ppar = &pkpm_vars_io[~a]; ~%", 6*NC),
  printf(fh, "  double *pkpm_vars_io_p_perp_div_b = &pkpm_vars_io[~a]; ~%", 7*NC),
  printf(fh, "  double *pkpm_vars_io_bb_grad_u = &pkpm_vars_io[~a]; ~%", 8*NC),
  printf(fh, "  double *pkpm_vars_io_p_perp_source = &pkpm_vars_io[~a]; ~%", 9*NC),
  printf(fh, "~%"),

  printf(fh, "  double rhouxux[~a] = {0.0}; ~%", NC),
  printf(fh, "  binop_mul_~ad_~a_p~a(rhoux, ux, rhouxux); ~%", cdim, basisFun, polyOrder),
  printf(fh, " ~%"),

  printf(fh, "  double rhouxuy[~a] = {0.0}; ~%", NC),
  printf(fh, "  binop_mul_~ad_~a_p~a(rhoux, uy, rhouxuy); ~%", cdim, basisFun, polyOrder),
  printf(fh, " ~%"),

  printf(fh, "  double rhouxuz[~a] = {0.0}; ~%", NC),
  printf(fh, "  binop_mul_~ad_~a_p~a(rhoux, uz, rhouxuz); ~%", cdim, basisFun, polyOrder),
  printf(fh, " ~%"),

  printf(fh, "  double rhouyuy[~a] = {0.0}; ~%", NC),
  printf(fh, "  binop_mul_~ad_~a_p~a(rhouy, uy, rhouyuy); ~%", cdim, basisFun, polyOrder),
  printf(fh, " ~%"),

  printf(fh, "  double rhouyuz[~a] = {0.0}; ~%", NC),
  printf(fh, "  binop_mul_~ad_~a_p~a(rhouy, uz, rhouyuz); ~%", cdim, basisFun, polyOrder),
  printf(fh, " ~%"),

  printf(fh, "  double rhouzuz[~a] = {0.0}; ~%", NC),
  printf(fh, "  binop_mul_~ad_~a_p~a(rhouz, uz, rhouzuz); ~%", cdim, basisFun, polyOrder),
  printf(fh, " ~%"),

  for i : 1 thru NC do (
    printf(fh, "  fluid_io_rho[~a] = rho[~a]; ~%", i-1, i-1),
    printf(fh, "  fluid_io_rhoux[~a] = rhoux[~a]; ~%", i-1, i-1),
    printf(fh, "  fluid_io_rhouy[~a] = rhouy[~a]; ~%", i-1, i-1),
    printf(fh, "  fluid_io_rhouz[~a] = rhouz[~a]; ~%", i-1, i-1),
    printf(fh, "  fluid_io_Sxx[~a] = Pxx[~a] + rhouxux[~a]; ~%", i-1, i-1, i-1),
    printf(fh, "  fluid_io_Sxy[~a] = Pxy[~a] + rhouxuy[~a]; ~%", i-1, i-1, i-1),
    printf(fh, "  fluid_io_Sxz[~a] = Pxz[~a] + rhouxuz[~a]; ~%", i-1, i-1, i-1),
    printf(fh, "  fluid_io_Syy[~a] = Pyy[~a] + rhouyuy[~a]; ~%", i-1, i-1, i-1),
    printf(fh, "  fluid_io_Syz[~a] = Pyz[~a] + rhouyuz[~a]; ~%", i-1, i-1, i-1),
    printf(fh, "  fluid_io_Szz[~a] = Pzz[~a] + rhouzuz[~a]; ~%", i-1, i-1, i-1),
    printf(fh, " ~%"),
    printf(fh, "  pkpm_vars_io_ux[~a] = ux[~a]; ~%", i-1, i-1),
    printf(fh, "  pkpm_vars_io_uy[~a] = uy[~a]; ~%", i-1, i-1),
    printf(fh, "  pkpm_vars_io_uz[~a] = uz[~a]; ~%", i-1, i-1),
    printf(fh, "  pkpm_vars_io_T_perp_over_m[~a] = T_perp_over_m[~a]; ~%", i-1, i-1),
    printf(fh, "  pkpm_vars_io_T_perp_over_m_inv[~a] = T_perp_over_m_inv[~a]; ~%", i-1, i-1),
    printf(fh, "  pkpm_vars_io_div_b[~a] = div_b[~a]; ~%", i-1, i-1),
    printf(fh, "  pkpm_vars_io_pkpm_div_ppar[~a] = pkpm_div_ppar[~a]; ~%", i-1, i-1),
    printf(fh, "  pkpm_vars_io_p_perp_div_b[~a] = p_perp_div_b[~a]; ~%", i-1, i-1),
    printf(fh, "  pkpm_vars_io_bb_grad_u[~a] = bb_grad_u[~a]; ~%", i-1, i-1),
    printf(fh, "  pkpm_vars_io_p_perp_source[~a] = p_perp_source[~a]; ~%", i-1, i-1),
    printf(fh, " ~%")
  ), 

  printf(fh, "} ~%")
)$
