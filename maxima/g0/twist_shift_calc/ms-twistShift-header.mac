/* Create header file for twistshift BC updater. */

fh : openw("~/max-out/gkyl_bc_twistshift_gyrokinetic_kernels.h")$

polyOrderMax : 1$
bName        : ["ser"]$

shift_poly_order_max : 2$

VarsC : [X, Y, Z]$
pVars : [X, Y, Z, VX, VY, VZ]$

gkVdims : [[0], [0,2]]$

printf(fh, "// -- Gkyl ---------------------------------------------------------------------~%")$
printf(fh, "//~%")$
printf(fh, "// C header for TwistShift kernels.~%")$
printf(fh, "//~%")$
printf(fh, "//    _______     ___~%")$
printf(fh, "// + 6 @ |||| # P ||| +~%")$
printf(fh, "// -----------------------------------------------------------------------------~%")$

printf(fh, "#pragma once ~%")$
printf(fh, "#include <math.h> ~%")$
printf(fh, "#include <gkyl_mat.h> ~%")$

printf(fh, "EXTERN_C_BEG ~%")$

for bInd : 1 thru length(bName) do (

  for ci : 2 thru 3 do (

    for gkV : 1 thru length(gkVdims[ci-1]) do (
      vi : gkVdims[ci-1][gkV],

      maxPolyOrderB : polyOrderMax,
      if (ci+vi>4 and maxPolyOrderB > 2) then maxPolyOrderB : 2,

      for polyOrder : 1 thru maxPolyOrderB do (

        vStr : "",
        if (vi>0) then (vStr: sconcat(vi,"v")),
  
  
        for polyOrder1D : 1 thru shift_poly_order_max do (
  
          /* Twist-shift BC interpolation kernels. */
          printf(fh, "  GKYL_CU_DH void twistshift_xlimdg_~ax~a_~a_p~a_yshift_p~a(double sFac, const double *xLimLo, const double *xLimUp, double yLimLo, double yLimUp, double dyDo, double yOff, const double *ySh, struct gkyl_mat *tsmat);~%", ci, vStr, bName[bInd], polyOrder, polyOrder1D),
          printf(fh, "  GKYL_CU_DH void twistshift_ylimdg_~ax~a_~a_p~a_yshift_p~a(double sFac, double xLimLo, double xLimUp, const double *yLimLo, const double *yLimUp, double dyDo, double yOff, const double *ySh, struct gkyl_mat *tsmat);~%", ci, vStr, bName[bInd], polyOrder, polyOrder1D),
          printf(fh, "  GKYL_CU_DH void twistshift_fullcell_~ax~a_~a_p~a_yshift_p~a(double dyDo, double yOff, const double *ySh, struct gkyl_mat *tsmat);~%", ci, vStr, bName[bInd], polyOrder, polyOrder1D),
          printf(fh, "~%")
        )
  
      ),
      printf(fh, "~%")

    )
  )

);

printf(fh, "EXTERN_C_END~%")$

close(fh)$
