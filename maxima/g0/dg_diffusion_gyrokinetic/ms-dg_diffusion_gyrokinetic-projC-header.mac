kill(all)$

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 1$
minCdim_Ser : 1$
maxCdim_Ser : 2$

/* Tensor order basis. No need to generate p=1. */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
maxCdim_Tensor : 0$

/* ...... END OF USER INPUTS........ */

vDims : [[1,2], [2], [2]]$

/* To generate other bases, just add corresponding column to arrays below. */
bName        : ["ser", "tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser     , minCdim_Tensor     ]$
maxCdim      : [maxCdim_Ser     , maxCdim_Tensor     ]$

varsPerDim : [[x],[x,z],[x,y,z]]$

getDirCombos(varsIn) := block([pss,ps,combos],
  pss    : listify(powerset(setify(varsIn))),
  ps     : makelist(listify(pss[i]),i,1,length(pss)),
  combos : sublist(ps, lambda([x], length(x)>0)),
  return(combos)
)$

fh : openw("~/max-out/gkyl_dg_diffusion_gyrokinetic_proj_coeff_kernels.h")$
printf(fh, "#pragma once~%")$
printf(fh, "#include <math.h>~%")$
printf(fh, "#include <gkyl_util.h>~%")$
printf(fh, "~%")$
printf(fh, "EXTERN_C_BEG~%")$
printf(fh, "~%")$

for bInd : 1 thru length(bName) do (
  for polyOrder : minPolyOrder[bInd] thru maxPolyOrder[bInd] do (
    for cdim : minCdim[bInd] thru maxCdim[bInd] do (

     vars : varsPerDim[cdim],
     /* Combinations of directions in which to apply diffusion. */
     diffDirCombos : getDirCombos(vars),

      for vdim in vDims[cdim] do (
        /* Declare kernels that compute the giiJ*nu*(1+xi*v^2/v_t^2) diffusion
           coefficient. */
        for diffDirs in diffDirCombos do (
          diffDirsStr :"",
          for diffVar in diffDirs do (diffDirsStr : sconcat(diffDirsStr,string(diffVar))),

          funcName : sconcat("dg_diffusion_gyrokinetic_proj_coeff_", cdim, "x", vdim, "v_", bName[bInd], "_p", polyOrder, "_diffdirs", diffDirsStr),
          funcSign : sconcat("GKYL_CU_DH void ",funcName,"(const double *xc, const double *dx, const double *nu, const double *xi, double mass, double vtsq_min, const double *gijJ, const double *bmag, const double *vtsq, const double *vmap, const double *vmapSq, double *out);~%"),
          printf(fh, funcSign)
        ),
        printf(fh, "~%")
        
      )
    )
  )
)$

printf(fh, "~%")$
printf(fh, "EXTERN_C_END~%")$
close(fh)$
