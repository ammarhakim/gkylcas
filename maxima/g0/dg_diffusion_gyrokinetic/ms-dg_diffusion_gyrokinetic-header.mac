kill(all)$

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 1$
minCdim_Ser : 1$
maxCdim_Ser : 2$

/* Tensor order basis. No need to generate p=1. */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
maxCdim_Tensor : 0$

/* ...... END OF USER INPUTS........ */

vDims : [[1,2], [2], [2]]$

/* To generate other bases, just add corresponding column to arrays below. */
bName        : ["ser", "tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser     , minCdim_Tensor     ]$
maxCdim      : [maxCdim_Ser     , maxCdim_Tensor     ]$
dirVars      : [[[x,vpar],[x,vpar,mu]],[[null],[x,y,vpar,mu]],[[null],[x,y,z,vpar,mu]]]$

coeffTypeStr : ["constcoeff","varcoeff"]$
varsPerDim : [[x],[x,z],[x,y,z]]$

getDirCombos(varsIn) := block([pss,ps,combos],
  pss    : listify(powerset(setify(varsIn))),
  ps     : makelist(listify(pss[i]),i,1,length(pss)),
  combos : sublist(ps, lambda([x], length(x)>0)),
  return(combos)
)$

fh : openw("~/max-out/gkyl_dg_diffusion_gyrokinetic_kernels.h")$
printf(fh, "#pragma once~%")$
printf(fh, "#include <math.h>~%")$
printf(fh, "#include <gkyl_util.h>~%")$
printf(fh, "~%")$
printf(fh, "EXTERN_C_BEG~%")$
printf(fh, "~%")$

for bInd : 1 thru length(bName) do (
  for polyOrder : minPolyOrder[bInd] thru maxPolyOrder[bInd] do (
    if (polyOrder>1) then (diffOrders : [2, 4, 6]) else (diffOrders : [2, 4]),
    for cdim : minCdim[bInd] thru maxCdim[bInd] do (

      for vdim in vDims[cdim] do (
        /* Write volume kernel declaration. */
        for dO in diffOrders do (
          for cT in coeffTypeStr do (

            vars : varsPerDim[cdim],
            /* Combinations of directions in which to apply diffusion. */
            diffDirCombos : getDirCombos(vars),

            for diffDirs in diffDirCombos do (

              diffDirInP : makelist(sublist_indices(vars,lambda([x], x=diffDirs[i]))[1],i,1,length(diffDirs)),
              diffDirsStr :"",
              for dI in diffDirInP do (diffDirsStr : sconcat(diffDirsStr,string(vars[dI]))),

              funcName : sconcat("dg_diffusion_gyrokinetic_order",dO,"_vol_", cdim, "x", vdim, "v_", bName[bInd], "_p", polyOrder, "_", cT, "_diffdirs", diffDirsStr),
              funcSign : sconcat("GKYL_CU_DH double ",funcName,"(const double *w, const double *dx, const double *coeff, const double *jacobgeo_inv, const double *q, double* GKYL_RESTRICT out);~%"),
              printf(fh, funcSign)
            )
          )
        ),
        printf(fh, "~%"),

        /* Write surface and boundary surface kernel declaration. */
        /* To apply applying diffusion in velocity space replace cdim with
           cdim+vdim in the loop upper limit below. If you wish the diffusion
           coefficient to depend on velocity space, make that change in the
           function that generates the kernel too. */
        for dir : 1 thru cdim do (
          dirVar : dirVars[cdim][vdim][dir], 

          for dO in diffOrders do (
            for cT in coeffTypeStr do (
              funcName : sconcat("dg_diffusion_gyrokinetic_order",dO,"_surf", dirVar,"_", cdim, "x", vdim, "v_", bName[bInd], "_p", polyOrder, "_", cT),
              funcSign : sconcat("GKYL_CU_DH double ",funcName,"(const double *w, const double *dx, const double *coeff, const double *jacobgeo_inv, const double *ql, const double *qc, const double *qr, double* GKYL_RESTRICT out);~%"),
              printf(fh, funcSign),

              funcName : sconcat("dg_diffusion_gyrokinetic_order",dO,"_boundary_surf", dirVar,"_", cdim, "x", vdim, "v_", bName[bInd], "_p", polyOrder, "_", cT),
              funcSign : sconcat("GKYL_CU_DH double ",funcName,"(const double *w, const double *dx, const double *coeff, const double *jacobgeo_inv, int edge, const double *qSkin, const double *qEdge, double* GKYL_RESTRICT out);~%"),
              printf(fh, funcSign)
            )
          ),
          printf(fh, "~%")
        )
        
      )
    )
  )
)$

printf(fh, "~%")$
printf(fh, "EXTERN_C_END~%")$
close(fh)$
