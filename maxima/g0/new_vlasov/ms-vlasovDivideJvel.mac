load("new_vlasov/vlasovDivideJvelFuncs")$
load(stringproc)$
/* This script calls the functions divide out the velocity-space
   Jacobian at nodes from Jf and converts the resulting nodal 
   expansion back to a modal expansion. 
*/

/* ...... USER INPUTS........ */

/* Tensor product basis. */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
minVdim_Tensor : 1$    /* see begining of v loop below though. */
maxCdim_Tensor : 3$
maxVdim_Tensor : 3$

/* ...... END OF USER INPUTS........ */

bName        : ["tensor"]$
minPolyOrder : [minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Tensor]$
minCdim      : [minCdim_Tensor]$
minVdim      : [minVdim_Tensor]$
maxCdim      : [maxCdim_Tensor]$
maxVdim      : [maxVdim_Tensor]$

for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    minVdimB : max(c,minVdim[bInd]), 
    maxVdimB : maxVdim[bInd], 
    if (c = 2) then minVdimB : 1, /* We support 2x1v. */
    for v : minVdimB thru maxVdimB do (

      minPolyOrderB : minPolyOrder[bInd],
      maxPolyOrderB : maxPolyOrder[bInd],
      if (c+v>4 and maxPolyOrderB > 1) then maxPolyOrderB : 1,

      for polyOrder : minPolyOrderB thru maxPolyOrderB do (
        disp(printf(false,sconcat("Creating Jf/J  ",bName[bInd]," ~ax~avP~a"),c,v,polyOrder)),
        /* Phase-space Hamiltonian volume component. */
        fname : sconcat("~/max-out/vlasov_divide_Jv_", c, "x", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
        fh : openw(fname),
        funcName : sconcat("vlasov_divide_Jv_", c, "x", v, "v_", bName[bInd], "_p", polyOrder),
        divideJvel(fh, funcName, c, v, bName[bInd], polyOrder),
        close(fh)           
      )
    )
  )
);
