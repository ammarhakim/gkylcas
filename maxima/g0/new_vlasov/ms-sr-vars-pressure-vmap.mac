load("new_vlasov/sr-vars-pressure-vmap")$
load(stringproc)$
/* This script calls the functions which calculate the rest frame pressure = n*T
   in the special relativistic Vlasov-Maxwell system of equation using a nonuniform
   velocity space mesh. 
   
   NOTE: To generate the 2x3v kernels, I had to set 
   export MAXIMA_LISP_OPTIONS="--dynamic-space-size 30000" 
   on my Macbook. JJ 08/12/25. */

/* ...... USER INPUTS........ */

/* Tensor product basis. */
/* */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
minVdim_Tensor : 1$    /* see begining of v loop below though. */
maxCdim_Tensor : 2$
maxVdim_Tensor : 1$

/* ...... END OF USER INPUTS........ */

bName        : ["tensor"]$
minPolyOrder : [minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Tensor]$
minCdim      : [minCdim_Tensor]$
minVdim      : [minVdim_Tensor]$
maxCdim      : [maxCdim_Tensor]$
maxVdim      : [maxVdim_Tensor]$
for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    minVdim : c, 
    if (c < 3) then minVdim : 1, /* We support 2x1v. */
    for v : minVdim thru maxVdim[bInd] do (

      minPolyOrderB : minPolyOrder[bInd],
      maxPolyOrderB : maxPolyOrder[bInd],
      if (v=1) then maxPolyOrderB : 3, /* Generate p=3 kernels if vdim = 1 */
      if (c+v>5 and maxPolyOrderB > 1) then maxPolyOrderB : 1,

      for polyOrder : minPolyOrderB thru maxPolyOrderB do (
        fname : sconcat("~/max-out/sr_vars_pressure_", c, "x", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
        fh : openw(fname),
        funcName : sconcat("sr_vars_pressure_",  c, "x", v, "v_", bName[bInd], "_p", polyOrder),
        calc_sr_pressure(fh, funcName, c, v, bName[bInd], polyOrder),
        close(fh)
      )
    )
  )
);
