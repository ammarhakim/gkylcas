load("new_vlasov/vlasovRadFuncs")$
load(stringproc)$
/* This script calls the functions which calculate the velocity-space 
   radiation drag force for either Compton (-1/t_cool*(p - p0)) or 
   curvature (-1/t_cool*sign(p)*p^4 = -1/t_cool*|p|*p^3).  
   These quantities are derived from the grid and must be continuous, 
   so they are projected onto basis functions using Gauss-Lobatto nodes.  */

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minVdim_Ser : 1$  
maxVdim_Ser : 3$

/* Tensor product basis. */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minVdim_Tensor : 1$ 
maxVdim_Tensor : 3$

/* ...... END OF USER INPUTS........ */

bName        : ["ser","tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minVdim      : [minVdim_Ser, minVdim_Tensor]$
maxVdim      : [maxVdim_Ser, maxVdim_Tensor]$
for bInd : 1 thru length(bName) do (
  for v : 1 thru maxVdim[bInd] do (

    minPolyOrderB : minPolyOrder[bInd],
    maxPolyOrderB : maxPolyOrder[bInd],
    if (v=1) then maxPolyOrderB : 3, /* Generate p=3 kernels if vdim = 1 */
    for polyOrder : minPolyOrderB thru maxPolyOrderB do (
      /* Make nonuniform velocity map radiation kernels using C^1 cubic velocity map. */
      if (bName[bInd] = "tensor" and polyOrder > 1) then (
        fname : sconcat("~/max-out/rad_compton_", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
        fh : openw(fname),
        funcName : sconcat("rad_compton_",  v, "v_", bName[bInd], "_p", polyOrder),
        calcRad(fh, funcName, v, bName[bInd], polyOrder, true, true),
        close(fh), 

        fname : sconcat("~/max-out/rad_curvature_", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
        fh : openw(fname),
        funcName : sconcat("rad_curvature_",  v, "v_", bName[bInd], "_p", polyOrder),
        calcRad(fh, funcName, v, bName[bInd], polyOrder, false, true),
        close(fh) 
      )
      else (
        fname : sconcat("~/max-out/rad_compton_", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
        fh : openw(fname),
        funcName : sconcat("rad_compton_",  v, "v_", bName[bInd], "_p", polyOrder),
        calcRad(fh, funcName, v, bName[bInd], polyOrder, true, false),
        close(fh), 

        fname : sconcat("~/max-out/rad_curvature_", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
        fh : openw(fname),
        funcName : sconcat("rad_curvature_",  v, "v_", bName[bInd], "_p", polyOrder),
        calcRad(fh, funcName, v, bName[bInd], polyOrder, false, false),
        close(fh) 
      )      
    )
  )
);
