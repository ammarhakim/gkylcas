load("new_vlasov/vlasovSurfFuncs")$
load(stringproc)$
/* This script calls the functions which calculate the
   updates from the surface terms for the Vlasov equation. */

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
minVdim_Ser : 1$    /* see begining of v loop below though. */
maxCdim_Ser : 3$
maxVdim_Ser : 3$

/* Tensor product basis. */
minPolyOrder_Tensor : 1$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
minVdim_Tensor : 1$    /* see begining of v loop below though. */
maxCdim_Tensor : 3$
maxVdim_Tensor : 3$

/* ...... END OF USER INPUTS........ */

bName        : ["ser","tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
minVdim      : [minVdim_Ser, minVdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$
maxVdim      : [maxVdim_Ser, maxVdim_Tensor]$

clabels : ["x","y","z"]$
vlabels : ["vx","vy","vz"]$

for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    minVdimB : max(c,minVdim[bInd]), 
    maxVdimB : maxVdim[bInd], 
    if (c = 2) then minVdimB : 1, /* We support 2x1v. */
    for v : minVdimB thru maxVdimB do (

      minPolyOrderB : minPolyOrder[bInd],
      maxPolyOrderB : maxPolyOrder[bInd],
      if (c+v>4 and maxPolyOrderB > 1) then maxPolyOrderB : 1,

      for polyOrder : minPolyOrderB thru maxPolyOrderB do (
        disp(printf(false,sconcat("Creating surface Vlasov ",bName[bInd]," ~ax~av_p~a"),c,v,polyOrder)),
        maxC : c, /* Which directions are we generating surface kernels for? */
        if (v < c) then maxC : v, /* In 2x1v, only generate the vx surface kernel. */
        for dir : 1 thru maxC do ( 
          fname : sconcat("~/max-out/vlasov_hamil_vel_surf", clabels[dir], "_", c, "x", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
          fh : openw(fname),
          funcName : sconcat("vlasov_hamil_vel_surf",clabels[dir],"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder),
          calcHamilVelSurfStream(dir, fh, funcName, c, v, bName[bInd], polyOrder), 
          close(fh), 

          fname : sconcat("~/max-out/vlasov_hamil_gen_surf", clabels[dir], "_", c, "x", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
          fh : openw(fname),
          funcName : sconcat("vlasov_hamil_gen_surf",clabels[dir],"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder),
          calcHamilGenSurfStream(dir, fh, funcName, c, v, bName[bInd], polyOrder), 
          close(fh)          
        ), 
        for dir : 1 thru v do (
          fname : sconcat("~/max-out/vlasov_surf", vlabels[dir], "_", c, "x", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
          fh : openw(fname),
          funcName : sconcat("vlasov_surf",vlabels[dir],"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder),
          calcVelSurf(dir, fh, funcName, c, v, bName[bInd], polyOrder), 
          close(fh)            
        )
      )
    )
  )
);
