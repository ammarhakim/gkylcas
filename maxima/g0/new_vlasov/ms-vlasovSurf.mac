load("new_vlasov/vlasovSurfFuncs")$
load(stringproc)$
/* This script calls the functions which calculate the
   updates from the surface terms for the Vlasov equation. */

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 2$
maxPolyOrder_Ser : 2$
minCdim_Ser : 2$
minVdim_Ser : 2$    /* see begining of v loop below though. */
maxCdim_Ser : 2$
maxVdim_Ser : 2$

/* Tensor product basis. */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
minVdim_Tensor : 1$    /* see begining of v loop below though. */
maxCdim_Tensor : 0$
maxVdim_Tensor : 3$

/* ...... END OF USER INPUTS........ */

bName        : ["ser","tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
minVdim      : [minVdim_Ser, minVdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$
maxVdim      : [maxVdim_Ser, maxVdim_Tensor]$
useHigherOrderList : [false, true]$

clabels : ["x","y","z"]$
vlabels : ["vx","vy","vz"]$

for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    minVdimB : max(c,minVdim[bInd]), 
    maxVdimB : maxVdim[bInd], 
    if (c = 2) then minVdimB : 2, /* We support 2x1v. */
    for v : minVdimB thru maxVdimB do (

      minPolyOrderB : minPolyOrder[bInd],
      maxPolyOrderB : maxPolyOrder[bInd],
      if (v=1) then maxPolyOrderB : 3, /* Generate p=3 kernels if vdim = 1 */
      if (c+v>5 and maxPolyOrderB > 1) then maxPolyOrderB : 1,

      for polyOrder : minPolyOrderB thru maxPolyOrderB do (
        disp(printf(false,sconcat("Creating surface Vlasov ",bName[bInd]," ~ax~av_p~a"),c,v,polyOrder)),
        maxC : c, /* Which directions are we generating surface kernels for? */
        if (v < c) then maxC : v, /* In 2x1v, only generate the vx surface kernel. */
        for dir : 1 thru maxC do ( 
          fname : sconcat("~/max-out/vlasov_hamil_vel_surf", clabels[dir], "_", c, "x", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
          fh : openw(fname),
          funcName : sconcat("vlasov_hamil_vel_surf",clabels[dir],"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder),
          if (bName[bInd] = "tensor" and polyOrder > 1) then (
            /* Generate mapped velocity grid kernels when utilizing the tensor basis. */
            calcHamilVelSurfStream(dir, fh, funcName, c, v, bName[bInd], polyOrder, true) 
          )
          else (
            calcHamilVelSurfStream(dir, fh, funcName, c, v, bName[bInd], polyOrder, false) 
          ),
          close(fh)      
        ),
        for dir : 1 thru v do (

          /* Higher order intergation logic */
          for hoInd : 1 thru length(useHigherOrderList) do (
            useHigherOrder : useHigherOrderList[hoInd],
            if useHigherOrder then si : "ho_" else si : "",
            if (not((bName[bInd] = "ser")and (polyOrder = 1) and (useHigherOrder = true)) and not((useHigherOrder = false) and (bName[bInd] = "tensor")) and not((bName[bInd] = "ser") and (polyOrder = 2) and (c = 2) and (v = 3) and (useHigherOrder = true))) then (
              if ((bName[bInd] = "ser")and (polyOrder = 1) and (useHigherOrder = false)) or ((useHigherOrder = true) and (bName[bInd] = "tensor")) then si : "",

              fname : sconcat("~/max-out/vlasov_",si,"surf", vlabels[dir], "_", c, "x", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
              fh : openw(fname),
              funcName : sconcat("vlasov_",si,"surf",vlabels[dir],"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder),
              calcVelSurf(dir, fh, funcName, c, v, bName[bInd], polyOrder, useHigherOrder), 
              close(fh)        
            )
          )
        )
      ),
      if (v=1) then maxPolyOrderB : 3, /* Generate p=3 kernels if vdim = 1 */
      /* We do not generate 5D and 6D p>1 phase-space Hamiltonian kernels. */
      if (c+v>5 and maxPolyOrderB > 1) then maxPolyOrderB : 1,
      for polyOrder : minPolyOrderB thru maxPolyOrderB do (

        /* Higher order intergation logic */
        for hoInd : 1 thru length(useHigherOrderList) do (
          useHigherOrder : useHigherOrderList[hoInd],
          if useHigherOrder then si : "ho_" else si : "",
          if (not((bName[bInd] = "ser")and (polyOrder = 1) and (useHigherOrder = true)) and not((useHigherOrder = false) and (bName[bInd] = "tensor")) and not((bName[bInd] = "ser") and (polyOrder = 2) and (c = 2) and (v = 3) and (useHigherOrder = true))) then (
            if ((bName[bInd] = "ser")and (polyOrder = 1) and (useHigherOrder = false)) or ((useHigherOrder = true) and (bName[bInd] = "tensor")) then si : "",

            disp(printf(false,sconcat("Creating surface Vlasov ",bName[bInd]," ~ax~av_p~a"),c,v,polyOrder)),
            maxC : c, /* Which directions are we generating surface kernels for? */
            if (v < c) then maxC : v, /* In 2x1v, only generate the vx surface kernel. */
            for dir : 1 thru maxC do ( 
              /* Phase-space Hamiltonian surface fluxes. Only generate with Serendipity basis for now. */
              if (bName[bInd] = "ser") then (
                fname : sconcat("~/max-out/vlasov_hamil_gen_",si,"surf", clabels[dir], "_", c, "x", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
                fh : openw(fname),
                funcName : sconcat("vlasov_hamil_gen_",si,"surf",clabels[dir],"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder),
                calcHamilGenSurfStream(dir, fh, funcName, c, v, bName[bInd], polyOrder, useHigherOrder), 
                close(fh) 
              )
            )
          )
        )
      )
    )
  )
);
