/* Generate the header file for the Vlasov equation kernels. */

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
minVdim_Ser : 1$    /* see begining of v loop below though. */
maxCdim_Ser : 3$
maxVdim_Ser : 3$

/* Tensor product basis. */
minPolyOrder_Tensor : 1$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
minVdim_Tensor : 1$    /* see begining of v loop below though. */
maxCdim_Tensor : 3$
maxVdim_Tensor : 3$

/* ...... END OF USER INPUTS........ */

cvars : [x, y, z]$

bName        : ["ser","tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
minVdim      : [minVdim_Ser, minVdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$
maxVdim      : [maxVdim_Ser, maxVdim_Tensor]$

printPrototype(deco, ci, vi, bStr, pi) := block([si],

  printf(fh, "~avoid vlasov_divide_Jv_~ax~av_~a_p~a(const double *jacob_vel_gauss, const double *Jf, double* GKYL_RESTRICT f_no_J); ~%", deco, ci, vi, bStr, pi),
  printf(fh, "~avoid vlasov_rescale_Jv_~ax~av_~a_p~a(const double *jacob_vel_gauss, const double *Jf, double* GKYL_RESTRICT f_no_J); ~%", deco, ci, vi, bStr, pi),

  printf(fh, "~avoid vlasov_hamil_vel_vol_~ax~av_~a_p~a(const double *w, const double *dxv, 
    const double *jacob_vel, const double *poisson_tensor_conf, const double *hamil, const double *f, double* GKYL_RESTRICT out); ~%", deco, ci, vi, bStr, pi),
  if ((ci <= vi  and pi < 3) and not(pi = 2 and bStr = "tensor")) then (
    printf(fh, "~avoid vlasov_nc_hamil_gen_vol_~ax~av_~a_p~a(const double *w, const double *dxv, 
      const double *jacob_vel, const double *poisson_tensor_conf, const double *hamil, const double *f, double* GKYL_RESTRICT out); ~%", deco, ci, vi, bStr, pi)
  ),
  if (bStr = "ser") then (
    printf(fh, "~avoid vlasov_hamil_gen_vol_~ax~av_~a_p~a(const double *w, const double *dxv, 
      const double *jacob_vel, const double *poisson_tensor_conf, const double *hamil, const double *f, double* GKYL_RESTRICT out); ~%", deco, ci, vi, bStr, pi)
  ),
  printf(fh, "~avoid vlasov_phi_vol_~ax~av_~a_p~a(const double *w, const double *dxv, 
    const double *jacob_vel, const double *phi, const double *f, double* GKYL_RESTRICT out); ~%", deco, ci, vi, bStr, pi),
  printf(fh, "~avoid vlasov_E_vol_~ax~av_~a_p~a(const double *w, const double *dxv, 
    const double *jacob_vel, const double *qmem, const double *f, double* GKYL_RESTRICT out); ~%", deco, ci, vi, bStr, pi),
  printf(fh, "~avoid vlasov_Bx_hamil_vel_vol_~ax~av_~a_p~a(const double *w, const double *dxv, 
    const double *jacob_vel, const double *hamil, const double *qmem, const double *f, double* GKYL_RESTRICT out); ~%", deco, ci, vi, bStr, pi),
  printf(fh, "~avoid vlasov_By_hamil_vel_vol_~ax~av_~a_p~a(const double *w, const double *dxv, 
    const double *jacob_vel, const double *hamil, const double *qmem, const double *f, double* GKYL_RESTRICT out); ~%", deco, ci, vi, bStr, pi),
  printf(fh, "~avoid vlasov_Bz_hamil_vel_vol_~ax~av_~a_p~a(const double *w, const double *dxv, 
    const double *jacob_vel, const double *hamil, const double *qmem, const double *f, double* GKYL_RESTRICT out); ~%", deco, ci, vi, bStr, pi),
  printf(fh, "~avoid vlasov_rad_vol_~ax~av_~a_p~a(const double *w, const double *dxv, 
    const double *jacob_vel, const double *rad, const double *f, double* GKYL_RESTRICT out); ~%", deco, ci, vi, bStr, pi),

  for si : 1 thru ci do (
    printf(fh, "~adouble vlasov_hamil_vel_surf~a_~ax~av_~a_p~a(const double *w, const double *dxv, 
    const double *jacob_vel, const double *poisson_tensor_conf, const double *hamil, 
    const double *fl, const double *fc, const double *fr, double* GKYL_RESTRICT out); ~%", deco, cvars[si], ci, vi, bStr, pi),
    printf(fh, "~adouble vlasov_hamil_vel_boundary_surf~a_~ax~av_~a_p~a(const double *w, const double *dxv, 
    const double *jacob_vel, const double *poisson_tensor_conf, const double *hamil, 
    const int edge, const double *fedge, const double *fskin, double* GKYL_RESTRICT out); ~%", deco, cvars[si], ci, vi, bStr, pi),
    if ((ci <= vi  and pi < 3) and not(pi = 2 and bStr = "tensor")) then (
      printf(fh, "~adouble vlasov_nc_hamil_gen_surf~a_~ax~av_~a_p~a(const double *w, const double *dxv, 
      const double *jacob_vel, const double *poisson_tensor_conf, const double *hamil, 
      const double *fl, const double *fc, const double *fr, double* GKYL_RESTRICT out); ~%", deco, cvars[si], ci, vi, bStr, pi),
      printf(fh, "~adouble vlasov_nc_hamil_gen_boundary_surf~a_~ax~av_~a_p~a(const double *w, const double *dxv, 
      const double *jacob_vel, const double *poisson_tensor_conf,  const double *hamil, 
      const int edge, const double *fedge, const double *fskin, double* GKYL_RESTRICT out); ~%", deco, cvars[si], ci, vi, bStr, pi)
    ),
    if (bStr = "ser") then (
      printf(fh, "~adouble vlasov_hamil_gen_surf~a_~ax~av_~a_p~a(const double *w, const double *dxv, 
      const double *jacob_vel, const double *poisson_tensor_conf, const double *hamil, 
      const double *fl, const double *fc, const double *fr, double* GKYL_RESTRICT out); ~%", deco, cvars[si], ci, vi, bStr, pi),
      printf(fh, "~adouble vlasov_hamil_gen_boundary_surf~a_~ax~av_~a_p~a(const double *w, const double *dxv, 
      const double *jacob_vel, const double *poisson_tensor_conf, const double *hamil, 
      const int edge, const double *fedge, const double *fskin, double* GKYL_RESTRICT out); ~%", deco, cvars[si], ci, vi, bStr, pi)
    )
  ),
  for si : 1 thru vi do (
    if ((ci <= vi  and pi < 3) and not(pi = 2 and bStr = "tensor")) then (
      printf(fh, "~avoid nc_hamil_alpha_quad_v~a_~ax~av_~a_p~a(const double *w, const double *dxv, const double *poisson_tensor_conf, 
      const double *hamil, double* GKYL_RESTRICT alpha_quad); ~%", deco, cvars[si], ci, vi, bStr, pi)
    ),
    if (bStr = "ser") then (
      printf(fh, "~avoid hamil_alpha_quad_v~a_~ax~av_~a_p~a(const double *w, const double *dxv, const double *poisson_tensor_conf,
      const double *hamil, double* GKYL_RESTRICT alpha_quad); ~%", deco, cvars[si], ci, vi, bStr, pi)
    ),
    printf(fh, "~avoid phi_alpha_quad_v~a_~ax~av_~a_p~a(const double *dxv, 
    const double *phi, double* GKYL_RESTRICT alpha_quad); ~%", deco, cvars[si], ci, vi, bStr, pi), 
    printf(fh, "~avoid E_alpha_quad_v~a_~ax~av_~a_p~a(const double *dxv, 
    const double *qmem, double* GKYL_RESTRICT alpha_quad); ~%", deco, cvars[si], ci, vi, bStr, pi),   
    printf(fh, "~avoid B_alpha_quad_v~a_~ax~av_~a_p~a(const double *dxv, const double *jacob_vel, 
    const double *hamil, const double *qmem, double* GKYL_RESTRICT alpha_quad); ~%", deco, cvars[si], ci, vi, bStr, pi),   
    printf(fh, "~avoid rad_alpha_quad_v~a_~ax~av_~a_p~a(const double *dxv, 
    const double *rad, double* GKYL_RESTRICT alpha_quad); ~%", deco, cvars[si], ci, vi, bStr, pi), 
    printf(fh, "~adouble lax_flux_nodal_to_modal_v~a_~ax~av_~a_p~a(const double *dxv, 
    const double *jacob_vel, const double *alpha_quad, 
    const double *f_l, const double *f_r, double *lax_nodal_quad, 
    double* GKYL_RESTRICT vel_flux_surf) ; ~%", deco, cvars[si], ci, vi, bStr, pi),
    printf(fh, "~adouble vlasov_surfv~a_~ax~av_~a_p~a(const double *w, const double *dxv,
    const double *flux_l, const double *flux_r, double* GKYL_RESTRICT out); ~%", deco, cvars[si], ci, vi, bStr, pi),
    printf(fh, "~adouble vlasov_boundary_surfv~a_~ax~av_~a_p~a(const double *w, const double *dxv,
    const int edge, const double *flux, double* GKYL_RESTRICT out); ~%", deco, cvars[si], ci, vi, bStr, pi)
  ),

  printf(fh, "~%")
)$

printPrototypeHamiltonian(deco, vi, bStr, pi) := block([si],
  /* Variations of the Hamiltonian. */
  printf(fh, "~avoid hamil_default_~av_~a_p~a(const double *w, const double *dxv, const double *vmap, double* GKYL_RESTRICT hamil, double* GKYL_RESTRICT hamil_inv); ~%", deco, vi, bStr, pi),
  printf(fh, "~avoid hamil_sr_~av_~a_p~a(const double *w, const double *dxv, const double *vmap, double* GKYL_RESTRICT hamil, double* GKYL_RESTRICT hamil_inv); ~%", deco, vi, bStr, pi),
  printf(fh, "~%")  
)$

printPrototypeRadiation(deco, vi, bStr, pi) := block([si],
  /* Variations of the Radiation. */
  printf(fh, "~avoid rad_compton_~av_~a_p~a(const double *w, const double *dxv, const double *vmap, double t_cool, double p0, double* GKYL_RESTRICT rad); ~%", deco, vi, bStr, pi),
  printf(fh, "~avoid rad_curvature_~av_~a_p~a(const double *w, const double *dxv, const double *vmap, double t_cool, double p0, double* GKYL_RESTRICT rad); ~%", deco, vi, bStr, pi),
  printf(fh, "~%")  
)$

/* ............ Write out the C header file ............ */
fh : openw("~/max-out/gkyl_vlasov_kernels.h")$

printf(fh, "#pragma once ~%")$
printf(fh, "#include <math.h> ~%")$
printf(fh, "#include <gkyl_util.h> ~%")$
printf(fh, "EXTERN_C_BEG ~%")$
printf(fh, "~%")$

decorator : "GKYL_CU_DH "$
for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    minVdimB : max(c,minVdim[bInd]), 
    maxVdimB : maxVdim[bInd], 
    if (c = 2) then minVdimB : 1, /* We support 2x1v. */
    for v : minVdimB thru maxVdimB do (

      minPolyOrderB : minPolyOrder[bInd],
      maxPolyOrderB : maxPolyOrder[bInd],
      if (v=1) then maxPolyOrderB : 3, /* Generate p=3 kernels if vdim = 1 */
      if (c+v>5 and maxPolyOrderB > 1) then maxPolyOrderB : 1,

      for polyOrder : minPolyOrderB thru maxPolyOrderB do (
        printPrototype(decorator, c, v, bName[bInd], polyOrder)
      )
    )
  ),
  for v : 1 thru maxVdim[bInd] do ( 
    minPolyOrderB : minPolyOrder[bInd],
    maxPolyOrderB : maxPolyOrder[bInd],
    if (v=1) then maxPolyOrderB : 3, /* Generate p=3 kernels if vdim = 1 */
    for polyOrder : minPolyOrderB thru maxPolyOrderB do (
      printPrototypeHamiltonian(decorator, v, bName[bInd], polyOrder), 
      printPrototypeRadiation(decorator, v, bName[bInd], polyOrder)  
    )
  )  
);
printf(fh, "EXTERN_C_END ~%")$
close(fh)$
/* ............ Finished writing out the C header file ............ */
