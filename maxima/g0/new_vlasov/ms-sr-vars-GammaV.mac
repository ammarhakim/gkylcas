load("new_vlasov/sr-vars-GammaV")$
load(stringproc)$
/* This script calls the functions which calculate derived
   bulk four-velocity quantities: 
   1. u_i^2 (vdim components)
   2. GammaV^2 = 1 + |u_i|^2,
   3. GammaV = sqrt(1 + |u_i|^2),
   where u_i are the spatial components of the four-velocity GammaV*V_drift.
   Uses basis_exp_sq (obtain expansion of A^2 for a DG field A),
   basis_sqrt (obtain expansion of sqrt(A) for a DG field A) */

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
minVdim_Ser : 1$    /* see begining of v loop below though. */
maxCdim_Ser : 3$
maxVdim_Ser : 3$

/* Tensor product basis. */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
minVdim_Tensor : 1$    /* see begining of v loop below though. */
maxCdim_Tensor : 3$
maxVdim_Tensor : 3$

/* ...... END OF USER INPUTS........ */

bName        : ["ser","tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
minVdim      : [minVdim_Ser, minVdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$
maxVdim      : [maxVdim_Ser, maxVdim_Tensor]$
for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    minVdim : c, 
    if (c < 3) then minVdim : 1, 
    for v : minVdim thru maxVdim[bInd] do (

      minPolyOrderB : minPolyOrder[bInd],
      maxPolyOrderB : maxPolyOrder[bInd],
      if (c+v>5 and maxPolyOrderB > 1) then maxPolyOrderB : 1,

      for polyOrder : minPolyOrderB thru maxPolyOrderB do (
        fname : sconcat("~/max-out/sr_vars_GammaV_", c, "x", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
        fh : openw(fname),
        funcName : sconcat("sr_vars_GammaV_",  c, "x", v, "v_", bName[bInd], "_p", polyOrder),
        calc_gammaV_vars(fh, funcName, c, v, bName[bInd], polyOrder),
        close(fh)
      )
    )
  )
);
