load("maxwell/em-vars")$
load(stringproc)$
/* This script calls the functions which calculate the various 
   derived quantities from the electromagnetic fields including:
   1. bvar = b_i (first 3 components), b_i b_j (last 6 components)
   the magnetic field unit vector and unit tensor
   2. ExB velocity = E x B/|B|^2 

   Separate the operations into three functions:
   1. Compute the weak multiplications required: B_i B_j and E x B
   2. Either compute 1/|B|^2 using the basis_inv operator (only p=1) or
   set the matrices to be inverted by the weak division process to compute
   B_i B_j/|B|^2 and E x B/|B|^2 (p > 1). 
   3. Copy the solution and perform remaining operations. Note for computing b from bb, we use: 
   basis_sqrt_with_sign (obtain expansion of sqrt(A^2) for a DG field A, keeping the sign of A) */


/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
maxCdim_Ser : 3$

/* Tensor product basis. */
/* Note that Serendipity, p = 1, is equivalent to Tensor */
/* Thus no need to calculate p = 1 Tensor basis */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 2$
maxCdim_Tensor : 3$

/* ...... END OF USER INPUTS........ */

bName        : ["ser","tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$
for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (

    minPolyOrderB : minPolyOrder[bInd],
    maxPolyOrderB : maxPolyOrder[bInd],
    if (c>1 and bName[bInd] = "ser") then maxPolyOrderB : 1,

    for polyOrder : minPolyOrderB thru maxPolyOrderB do (
      fname : sconcat("~/max-out/em_calc_BB_", c, "x_", bName[bInd], "_p", polyOrder, ".c"),
      fh : openw(fname),
      funcName : sconcat("em_calc_BB_",  c, "x_", bName[bInd], "_p", polyOrder),
      calcBB(fh, funcName, c, bName[bInd], polyOrder),
      close(fh),
      
      fname : sconcat("~/max-out/em_set_bvar_", c, "x_", bName[bInd], "_p", polyOrder, ".c"),
      fh : openw(fname),
      funcName : sconcat("em_set_bvar_",  c, "x_", bName[bInd], "_p", polyOrder),
      if (polyOrder = 1) then (
        setbvar_p1(fh, funcName, c, bName[bInd], polyOrder)
      )
      else (
        setbvar(fh, funcName, c, bName[bInd], polyOrder)
      ),
      close(fh),

      fname : sconcat("~/max-out/em_copy_bvar_", c, "x_", bName[bInd], "_p", polyOrder, ".c"),
      fh : openw(fname),
      funcName : sconcat("em_copy_bvar_",  c, "x_", bName[bInd], "_p", polyOrder),
      copybvar(fh, funcName, c, bName[bInd], polyOrder),
      close(fh),

      fname : sconcat("~/max-out/em_calc_num_ExB_", c, "x_", bName[bInd], "_p", polyOrder, ".c"),
      fh : openw(fname),
      funcName : sconcat("em_calc_num_ExB_",  c, "x_", bName[bInd], "_p", polyOrder),
      calcNumExB(fh, funcName, c, bName[bInd], polyOrder),
      close(fh),
      
      fname : sconcat("~/max-out/em_set_ExB_", c, "x_", bName[bInd], "_p", polyOrder, ".c"),
      fh : openw(fname),
      funcName : sconcat("em_set_ExB_",  c, "x_", bName[bInd], "_p", polyOrder),
      if (polyOrder = 1) then (
        setExB_p1(fh, funcName, c, bName[bInd], polyOrder)
      )
      else (
        setExB(fh, funcName, c, bName[bInd], polyOrder)
      ),
      close(fh),

      fname : sconcat("~/max-out/em_copy_ExB_", c, "x_", bName[bInd], "_p", polyOrder, ".c"),
      fh : openw(fname),
      funcName : sconcat("em_copy_ExB_",  c, "x_", bName[bInd], "_p", polyOrder),
      copyExB(fh, funcName, c, bName[bInd], polyOrder),
      close(fh)
    )
  )
);
