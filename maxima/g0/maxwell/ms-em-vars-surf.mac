load("maxwell/em-vars-surf")$
load(stringproc)$
/* This script calls the functions which generate the kernels for calculating the *surface* magnetic field 
   unit vector and unit tensor required to update the PKPM system. Surface variables include:
   1. bx, bxbx, bxby, bxbz at left and right x surfaces
   2. by, bxby, byby, bybz at left and right y surfaces
   3. bz, bxbz, bybz, bzbz at left and right z surfaces 

   In 1D, these surface expansions can be generated with simple division. 
   In 2D/3D, these surface expansions require weak division and with p=1, we can
   still use the basis_inv method for increased computational efficiency. */


/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
maxCdim_Ser : 3$

/* Tensor product basis. */
/* Note that Serendipity, p = 1, is equivalent to Tensor */
/* Thus no need to calculate p = 1 Tensor basis */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 2$
maxCdim_Tensor : 3$

/* ...... END OF USER INPUTS........ */

bName        : ["ser", "tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$

for bInd : 1 thru length(bName) do (
  for d : minCdim[bInd] thru maxCdim[bInd] do (
    minPolyOrderB : minPolyOrder[bInd],
    maxPolyOrderB : maxPolyOrder[bInd],
    if (d>1 and bName[bInd] = "ser") then maxPolyOrderB : 1,

    for polyOrder : minPolyOrderB thru maxPolyOrderB do (
      disp(printf(false,sconcat("Creating em surface vars funcs ",bName[bInd]," ~axp~a"),d,polyOrder)),
      fname : sconcat("~/max-out/em_calc_surf_BB_", d, "x_", bName[bInd], "_p", polyOrder, ".c"),
      fh : openw(fname),
      funcName : sconcat("em_calc_surf_BB_",  d, "x_", bName[bInd], "_p", polyOrder),
      if (d = 1) then (
        calcBB_surf_1d(fh, funcName, d, bName[bInd], polyOrder)
      )
      else if (d = 2) then (
        calcBB_surf(fh, funcName, d, "ser", polyOrder)
      )
      else (
        calcBB_surf(fh, funcName, d, bName[bInd], polyOrder)
      ),
      close(fh),

      fname : sconcat("~/max-out/em_surf_set_bvar_", d, "x_", bName[bInd], "_p", polyOrder, ".c"),
      fh : openw(fname),
      funcName : sconcat("em_surf_set_bvar_",  d, "x_", bName[bInd], "_p", polyOrder),
      if (d = 1) then (
        set_surf_bvar_1d(fh, funcName, d, bName[bInd], polyOrder)
      )
      else if (polyOrder = 1 and d > 1) then (
        set_surf_bvar_p1(fh, funcName, d, bName[bInd], polyOrder)
      )
      else (
        set_surf_bvar(fh, funcName, d, bName[bInd], polyOrder)
      ),
      close(fh),

      fname : sconcat("~/max-out/em_surf_copy_bvar_", d, "x_", bName[bInd], "_p", polyOrder, ".c"),
      fh : openw(fname),
      funcName : sconcat("em_surf_copy_bvar_",  d, "x_", bName[bInd], "_p", polyOrder),
      copy_surf_bvar(fh, funcName, d, bName[bInd], polyOrder),
      close(fh)
    )
  )
);
