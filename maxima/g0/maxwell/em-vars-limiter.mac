/* This script generates the kernels for limiting Maxwell's equations in DG. 
   Limiter is a characteristic limiter that computes the waves and 
   limits the slopes based on the characteristic variables. */

load("modal-basis")$
load("out-scripts")$
fpprec : 24$

calcMaxwellLimiter(dir, fh, funcNm, cdim, polyOrder) := block(
  [varsC, bC, NC],

  kill(varsC, bC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis("Tensor", cdim, polyOrder),

  /* Number of basis monomials. */
  NC : length(bC),

  printf(fh, "#include <gkyl_maxwell_kernels.h> ~%"),
  printf(fh, "GKYL_CU_DH void ~a(double limiter_fac, const struct gkyl_wv_eqn *wv_eqn, 
  const struct gkyl_wave_cell_geom *geom, 
  double *em_l, double *em_c, double *em_r)~%{ ~%", funcNm),
  printf(fh, "  // limiter_fac:            Factor for relationship between cell slopes and cell average differences (by default: 1/sqrt(3)).~%"),
  printf(fh, "  // wv_eqn:                 Wave equation for computing waves for limiting characteristics.~%"),
  printf(fh, "  // geom:                   Geometry on the left (*only works with Cartesian components*).~%"),
  printf(fh, "  // em_l/c/r: [Ex, Ey, Ez, Bx, By, Bz, phi, psi], em input state vector in left/center/right cells.~%"),
  printf(fh, "~%"),

  printf(fh, "  const double *norm = geom->norm[~a]; ~%", dir-1),
  printf(fh, "  const double *tau1 = geom->tau1[~a]; ~%", dir-1),
  printf(fh, "  const double *tau2 = geom->tau2[~a]; ~%", dir-1),
  printf(fh, "~%"),

  printf(fh, "  double *ex_l = &em_l[~a]; ~%", 0*NC),
  printf(fh, "  double *ey_l = &em_l[~a]; ~%", 1*NC),
  printf(fh, "  double *ez_l = &em_l[~a]; ~%", 2*NC),
  printf(fh, "  double *bx_l = &em_l[~a]; ~%", 3*NC),
  printf(fh, "  double *by_l = &em_l[~a]; ~%", 4*NC),
  printf(fh, "  double *bz_l = &em_l[~a]; ~%", 5*NC),
  printf(fh, "  double *phi_l = &em_l[~a]; ~%", 6*NC),
  printf(fh, "  double *psi_l = &em_l[~a]; ~%", 7*NC),
  printf(fh, "~%"),

  printf(fh, "  double *ex_c = &em_c[~a]; ~%", 0*NC),
  printf(fh, "  double *ey_c = &em_c[~a]; ~%", 1*NC),
  printf(fh, "  double *ez_c = &em_c[~a]; ~%", 2*NC),
  printf(fh, "  double *bx_c = &em_c[~a]; ~%", 3*NC),
  printf(fh, "  double *by_c = &em_c[~a]; ~%", 4*NC), 
  printf(fh, "  double *bz_c = &em_c[~a]; ~%", 5*NC),
  printf(fh, "  double *phi_c = &em_c[~a]; ~%", 6*NC),
  printf(fh, "  double *psi_c = &em_c[~a]; ~%", 7*NC),  
  printf(fh, "~%"),

  printf(fh, "  double *ex_r = &em_r[~a]; ~%", 0*NC),
  printf(fh, "  double *ey_r = &em_r[~a]; ~%", 1*NC),
  printf(fh, "  double *ez_r = &em_r[~a]; ~%", 2*NC),
  printf(fh, "  double *bx_r = &em_r[~a]; ~%", 3*NC),
  printf(fh, "  double *by_r = &em_r[~a]; ~%", 4*NC),
  printf(fh, "  double *bz_r = &em_r[~a]; ~%", 5*NC),
  printf(fh, "  double *phi_r = &em_r[~a]; ~%", 6*NC),
  printf(fh, "  double *psi_r = &em_r[~a]; ~%", 7*NC),
  printf(fh, "~%"),

  /* State vector from cell averages on left, center, and right */
  printf(fh, "  double q_avg_l[8] = {0.0}; ~%"),
  printf(fh, "  q_avg_l[0] = ex_l[0]; ~%"),
  printf(fh, "  q_avg_l[1] = ey_l[0]; ~%"),
  printf(fh, "  q_avg_l[2] = ez_l[0]; ~%"),
  printf(fh, "  q_avg_l[3] = bx_l[0]; ~%"),
  printf(fh, "  q_avg_l[4] = by_l[0]; ~%"),
  printf(fh, "  q_avg_l[5] = bz_l[0]; ~%"),
  printf(fh, "  q_avg_l[6] = phi_l[0]; ~%"),
  printf(fh, "  q_avg_l[7] = psi_l[0]; ~%"),

  printf(fh, "  double q_avg_c[8] = {0.0}; ~%"),
  printf(fh, "  q_avg_c[0] = ex_c[0]; ~%"),
  printf(fh, "  q_avg_c[1] = ey_c[0]; ~%"),
  printf(fh, "  q_avg_c[2] = ez_c[0]; ~%"),
  printf(fh, "  q_avg_c[3] = bx_c[0]; ~%"),
  printf(fh, "  q_avg_c[4] = by_c[0]; ~%"),
  printf(fh, "  q_avg_c[5] = bz_c[0]; ~%"),
  printf(fh, "  q_avg_c[6] = phi_c[0]; ~%"),
  printf(fh, "  q_avg_c[7] = psi_c[0]; ~%"),

  printf(fh, "  double q_avg_r[8] = {0.0}; ~%"),
  printf(fh, "  q_avg_r[0] = ex_r[0]; ~%"),
  printf(fh, "  q_avg_r[1] = ey_r[0]; ~%"),
  printf(fh, "  q_avg_r[2] = ez_r[0]; ~%"),
  printf(fh, "  q_avg_r[3] = bx_r[0]; ~%"),
  printf(fh, "  q_avg_r[4] = by_r[0]; ~%"),
  printf(fh, "  q_avg_r[5] = bz_r[0]; ~%"),
  printf(fh, "  q_avg_r[6] = phi_r[0]; ~%"),
  printf(fh, "  q_avg_r[7] = psi_r[0]; ~%"),

  /* Rotate to local coordinates */
  printf(fh, "  double q_l_local[8] = {0.0}; ~%"),
  printf(fh, "  double q_c_local[8] = {0.0}; ~%"),
  printf(fh, "  double q_r_local[8] = {0.0}; ~%"),
  printf(fh, "  gkyl_wv_eqn_rotate_to_local(wv_eqn, tau1, tau2, norm, q_avg_l, q_l_local); ~%"),
  printf(fh, "  gkyl_wv_eqn_rotate_to_local(wv_eqn, tau1, tau2, norm, q_avg_c, q_c_local); ~%"),
  printf(fh, "  gkyl_wv_eqn_rotate_to_local(wv_eqn, tau1, tau2, norm, q_avg_r, q_r_local); ~%"),
  printf(fh, "~%"),

  /* Compute jumps for calculating fluctuations */
  printf(fh, "  double delta_l[8] = {0.0}; ~%"),
  printf(fh, "  double delta_c[8] = {0.0}; ~%"),
  printf(fh, "  double delta_r[8] = {0.0}; ~%"),

  printf(fh, "  delta_l[0] = limiter_fac*(q_c_local[0] - q_l_local[0]); ~%"),
  printf(fh, "  delta_l[1] = limiter_fac*(q_c_local[1] - q_l_local[1]); ~%"),
  printf(fh, "  delta_l[2] = limiter_fac*(q_c_local[2] - q_l_local[2]); ~%"),
  printf(fh, "  delta_l[3] = limiter_fac*(q_c_local[3] - q_l_local[3]); ~%"),
  printf(fh, "  delta_l[4] = limiter_fac*(q_c_local[4] - q_l_local[4]); ~%"),
  printf(fh, "  delta_l[5] = limiter_fac*(q_c_local[5] - q_l_local[5]); ~%"),
  printf(fh, "  delta_l[6] = limiter_fac*(q_c_local[6] - q_l_local[6]); ~%"),
  printf(fh, "  delta_l[7] = limiter_fac*(q_c_local[7] - q_l_local[7]); ~%"),

  printf(fh, "  delta_c[0] = ex_c[~a]; ~%", dir),
  printf(fh, "  delta_c[1] = ey_c[~a]; ~%", dir),
  printf(fh, "  delta_c[2] = ez_c[~a]; ~%", dir),
  printf(fh, "  delta_c[3] = bx_c[~a]; ~%", dir),
  printf(fh, "  delta_c[4] = by_c[~a]; ~%", dir),
  printf(fh, "  delta_c[5] = bz_c[~a]; ~%", dir),
  printf(fh, "  delta_c[6] = phi_c[~a]; ~%", dir),
  printf(fh, "  delta_c[7] = psi_c[~a]; ~%", dir),

  printf(fh, "  delta_r[0] = limiter_fac*(q_r_local[0] - q_c_local[0]); ~%"),
  printf(fh, "  delta_r[1] = limiter_fac*(q_r_local[1] - q_c_local[1]); ~%"),
  printf(fh, "  delta_r[2] = limiter_fac*(q_r_local[2] - q_c_local[2]); ~%"),
  printf(fh, "  delta_r[3] = limiter_fac*(q_r_local[3] - q_c_local[3]); ~%"),
  printf(fh, "  delta_r[4] = limiter_fac*(q_r_local[4] - q_c_local[4]); ~%"), 
  printf(fh, "  delta_r[5] = limiter_fac*(q_r_local[5] - q_c_local[5]); ~%"),
  printf(fh, "  delta_r[6] = limiter_fac*(q_r_local[6] - q_c_local[6]); ~%"),
  printf(fh, "  delta_r[7] = limiter_fac*(q_r_local[7] - q_c_local[7]); ~%"),
  printf(fh, "~%"),

  /* Rotate the slopes into the local coordinate system */
  printf(fh, "  double delta_c_local[8] = {0.0}; ~%"),
  printf(fh, "  gkyl_wv_eqn_rotate_to_local(wv_eqn, tau1, tau2, norm, delta_c, delta_c_local); ~%"),
  printf(fh, "~%"),

  /* Compute local waves and speeds at interface */
  printf(fh, "  double waves_slope_l[48] = {0.0}; ~%"),
  printf(fh, "  double waves_slope_c[48] = {0.0}; ~%"),  
  printf(fh, "  double waves_slope_r[48] = {0.0}; ~%"),  
  printf(fh, "  double speeds[6] = {0.0}; ~%"),
  printf(fh, "  double my_max_speed_l = gkyl_wv_eqn_waves(wv_eqn, GKYL_WV_HIGH_ORDER_FLUX, delta_l, q_c_local, q_c_local, waves_slope_l, speeds); ~%"),
  printf(fh, "  double my_max_speed_c = gkyl_wv_eqn_waves(wv_eqn, GKYL_WV_HIGH_ORDER_FLUX, delta_c_local, q_c_local, q_c_local, waves_slope_c, speeds); ~%"),
  printf(fh, "  double my_max_speed_r = gkyl_wv_eqn_waves(wv_eqn, GKYL_WV_HIGH_ORDER_FLUX, delta_r, q_c_local, q_c_local, waves_slope_r, speeds); ~%"), 
  printf(fh, "~%"),

  printf(fh, "  double mm[48] = {0.0}; ~%"),
  printf(fh, "  double slope[8] = {0.0}; ~%"), 

  printf(fh, "  for (int i = 0; i < 6; ++i) { ~%"),

  printf(fh, "    mm[8*i] = gkyl_minmod(waves_slope_c[8*i], waves_slope_l[8*i], waves_slope_r[8*i]); ~%"), 
  printf(fh, "    mm[8*i+1] = gkyl_minmod(waves_slope_c[8*i+1], waves_slope_l[8*i+1], waves_slope_r[8*i+1]); ~%"), 
  printf(fh, "    mm[8*i+2] = gkyl_minmod(waves_slope_c[8*i+2], waves_slope_l[8*i+2], waves_slope_r[8*i+2]); ~%"),
  printf(fh, "    mm[8*i+3] = gkyl_minmod(waves_slope_c[8*i+3], waves_slope_l[8*i+3], waves_slope_r[8*i+3]); ~%"), 
  printf(fh, "    mm[8*i+4] = gkyl_minmod(waves_slope_c[8*i+4], waves_slope_l[8*i+4], waves_slope_r[8*i+4]); ~%"), 
  printf(fh, "    mm[8*i+5] = gkyl_minmod(waves_slope_c[8*i+5], waves_slope_l[8*i+5], waves_slope_r[8*i+5]); ~%"),
  printf(fh, "    mm[8*i+6] = gkyl_minmod(waves_slope_c[8*i+6], waves_slope_l[8*i+6], waves_slope_r[8*i+6]); ~%"), 
  printf(fh, "    mm[8*i+7] = gkyl_minmod(waves_slope_c[8*i+7], waves_slope_l[8*i+7], waves_slope_r[8*i+7]); ~%"), 
  printf(fh, "    slope[0] += mm[8*i]; ~%"), 
  printf(fh, "    slope[1] += mm[8*i+1]; ~%"), 
  printf(fh, "    slope[2] += mm[8*i+2]; ~%"), 
  printf(fh, "    slope[3] += mm[8*i+3]; ~%"), 
  printf(fh, "    slope[4] += mm[8*i+4]; ~%"), 
  printf(fh, "    slope[5] += mm[8*i+5]; ~%"), 
  printf(fh, "    slope[6] += mm[8*i+6]; ~%"), 
  printf(fh, "    slope[7] += mm[8*i+7]; ~%"), 
  printf(fh, "  } ~%"),
  printf(fh, "~%"),
  
  printf(fh, "  // Rotate limited slope back to global coordinates ~%"), 
  printf(fh, "  ex_c[~a] = slope[0]*norm[0] + slope[1]*tau1[0] + slope[2]*tau2[0]; ~%", dir), 
  printf(fh, "  ey_c[~a] = slope[0]*norm[1] + slope[1]*tau1[1] + slope[2]*tau2[1]; ~%", dir), 
  printf(fh, "  ez_c[~a] = slope[0]*norm[2] + slope[1]*tau1[2] + slope[2]*tau2[2]; ~%", dir), 
  printf(fh, "  bx_c[~a] = slope[3]*norm[0] + slope[4]*tau1[0] + slope[5]*tau2[0]; ~%", dir), 
  printf(fh, "  by_c[~a] = slope[3]*norm[1] + slope[4]*tau1[1] + slope[5]*tau2[1]; ~%", dir), 
  printf(fh, "  bz_c[~a] = slope[3]*norm[2] + slope[4]*tau1[2] + slope[5]*tau2[2]; ~%", dir), 
  printf(fh, "  phi_c[~a] = slope[6]; ~%", dir), 
  printf(fh, "  psi_c[~a] = slope[7]; ~%", dir), 

  if (polyOrder > 1 or cdim > 1) then (
    printf(fh, "  for (int i = 0; i < 6; ++i) { ~%"),

    printf(fh, "    if (mm[8*i] != waves_slope_c[8*i]) { ~%"), 
    for j : 1 thru (NC-1-cdim) do (
      printf(fh, "      ex_c[~a] = 0.0; ~%", j+cdim)
    ),
    printf(fh, "    } ~%"), 

    printf(fh, "    if (mm[8*i+1] != waves_slope_c[8*i+1]) { ~%"), 
    for j : 1 thru (NC-1-cdim) do (
      printf(fh, "      ey_c[~a] = 0.0; ~%", j+cdim)
    ),
    printf(fh, "    } ~%"), 

    printf(fh, "    if (mm[8*i+2] != waves_slope_c[8*i+2]) { ~%"), 
    for j : 1 thru (NC-1-cdim) do (
      printf(fh, "      ez_c[~a] = 0.0; ~%", j+cdim)
    ),
    printf(fh, "    } ~%"), 

    printf(fh, "    if (mm[8*i+3] != waves_slope_c[8*i+3]) { ~%"), 
    for j : 1 thru (NC-1-cdim) do (
      printf(fh, "      bx_c[~a] = 0.0; ~%", j+cdim)
    ),
    printf(fh, "    } ~%"), 

    printf(fh, "    if (mm[8*i+4] != waves_slope_c[8*i+4]) { ~%"), 
    for j : 1 thru (NC-1-cdim) do (
      printf(fh, "      by_c[~a] = 0.0; ~%", j+cdim)
    ),
    printf(fh, "    } ~%"), 

    printf(fh, "    if (mm[8*i+5] != waves_slope_c[8*i+5]) { ~%"), 
    for j : 1 thru (NC-1-cdim) do (
      printf(fh, "      bz_c[~a] = 0.0; ~%", j+cdim)
    ),
    printf(fh, "    } ~%"), 

    printf(fh, "    if (mm[8*i+6] != waves_slope_c[8*i+6]) { ~%"), 
    for j : 1 thru (NC-1-cdim) do (
      printf(fh, "      phi_c[~a] = 0.0; ~%", j+cdim)
    ),
    printf(fh, "    } ~%"), 

    printf(fh, "    if (mm[8*i+7] != waves_slope_c[8*i+7]) { ~%"), 
    for j : 1 thru (NC-1-cdim) do (
      printf(fh, "      psi_c[~a] = 0.0; ~%", j+cdim)
    ),
    printf(fh, "    } ~%"), 
    
    printf(fh, "  } ~%")
  ),
  printf(fh, "} ~%")
)$
