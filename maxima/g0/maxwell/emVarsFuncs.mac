/*  Generate kernels for: 
    1. bvar = [b_i (3 components), b_i b_j (6 components)],
    the magnetic field unit vector and unit tensor, b_i = B_i/|B|
    2. ExB = E x B/|B|^2, 
    the E x B velocity
    3. b_i/kappa = b_i*sqrt(1 - |E x B|^2/(c^2 |B|^4)),
    the magnetic field unit vector divided by the E x B lorentz boost factor.
    Uses basis_exp_sq (obtain expansion of A^2 for a DG field A),
    basis_inv (obtain expansion of 1/A for a DG field A),
    basis_sqrt (obtain expansion of sqrt(A) for a DG field A) */

load("modal-basis");
load("out-scripts");
load("nodal_operations/nodal_functions")$
load(stringproc)$
fpprec : 24$

calcBvar(fh, funcNm, cdim, basisFun, polyOrder) := block(
  [bC, NC, Bx_e, By_e, Bz_e, BxSq_e, BySq_e, BzSq_e, magB_sq_inv_e,
   Bx2Corners, By2Corners, Bz2Corners,  
   bxbx_c, bxby_c, bxbz_c, byby_c, bybz_c, bzbz_c],

  kill(varsC, basisC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),

  NC  : length(bC),

  printf(fh, "#include <gkyl_maxwell_kernels.h> ~%"),
  printf(fh, "#include <gkyl_basis_~a_~ax_p~a_exp_sq.h> ~%", basisFun, cdim, polyOrder),
  printf(fh, "#include <gkyl_basis_~a_~ax_p~a_inv.h> ~%", basisFun, cdim, polyOrder),
  printf(fh, "#include <gkyl_basis_~a_~ax_p~a_sqrt_with_sign.h> ~%", basisFun, cdim, polyOrder),
  /* Function declaration with input/output variables. */
  printf(fh, "GKYL_CU_DH void ~a(const double *em, double* bvar) ~%{ ~%", funcNm),
  printf(fh, "  // em:   Input electromagnetic fields. ~%"),
  printf(fh, "  // bvar: b_i = B_i/|B| (first 3 components), b_i b_j = B_i B_j/|B|^2 (last 6 components). ~%"),
  printf(fh, " ~%"),

  printf(fh, "  const double *B_x = &em[~a]; ~%", NC*3),
  printf(fh, "  const double *B_y = &em[~a]; ~%", NC*4),
  printf(fh, "  const double *B_z = &em[~a]; ~%", NC*5),
  printf(fh, " ~%"),

  printf(fh, "  double *bx = &bvar[~a]; ~%", 0),
  printf(fh, "  double *by = &bvar[~a]; ~%", NC),
  printf(fh, "  double *bz = &bvar[~a]; ~%", NC*2),
  printf(fh, "  double *bxbx = &bvar[~a]; ~%", NC*3),
  printf(fh, "  double *bxby = &bvar[~a]; ~%", NC*4),
  printf(fh, "  double *bxbz = &bvar[~a]; ~%", NC*5),
  printf(fh, "  double *byby = &bvar[~a]; ~%", NC*6),
  printf(fh, "  double *bybz = &bvar[~a]; ~%", NC*7),
  printf(fh, "  double *bzbz = &bvar[~a]; ~%", NC*8),
  printf(fh, " ~%"),

  Bx_e : doExpand1(B_x, bC),
  By_e : doExpand1(B_y, bC),
  Bz_e : doExpand1(B_z, bC),

  printf(fh, "  // Calculate |B|^2 and get expansion of 1/|B|^2. ~%"),
  printf(fh, "  double B_x_sq[~a] = {0.0}; ~%", NC),
  printf(fh, "  ~a_~ax_p~a_exp_sq(B_x, B_x_sq); ~%", basisFun, cdim, polyOrder),
  printf(fh, " ~%"),

  printf(fh, "  double B_y_sq[~a] = {0.0}; ~%", NC),
  printf(fh, "  ~a_~ax_p~a_exp_sq(B_y, B_y_sq); ~%", basisFun, cdim, polyOrder),
  printf(fh, " ~%"),

  printf(fh, "  double B_z_sq[~a] = {0.0}; ~%", NC),
  printf(fh, "  ~a_~ax_p~a_exp_sq(B_z, B_z_sq); ~%", basisFun, cdim, polyOrder),
  printf(fh, " ~%"),

  printf(fh, "  double magB_sq[~a] = {0.0}; ~%~%", NC),

  BxSq_e : doExpand1(B_x_sq, bC),
  BxBy_e : doExpand1(B_x_B_y, bC),
  BxBz_e : doExpand1(B_x_B_z, bC),
  BySq_e : doExpand1(B_y_sq, bC),
  ByBz_e : doExpand1(B_y_B_z, bC),
  BzSq_e : doExpand1(B_z_sq, bC), 
  magBSq_e : doExpand1(magB_sq, bC),
  magB_sq_inv_e : doExpand1(magB_sq_inv, bC),

  BxBy_c : calcInnerProdList(varsC, 1, bC, Bx_e*By_e),
  BxBz_c : calcInnerProdList(varsC, 1, bC, Bx_e*Bz_e),
  ByBz_c : calcInnerProdList(varsC, 1, bC, By_e*Bz_e),

  printf(fh, "  double B_x_B_y[~a] = {0.0}; ~%", NC),
  writeCExprs1(B_x_B_y, BxBy_c),
  printf(fh, "~%"),
  flush_output(fh),

  printf(fh, "  double B_x_B_z[~a] = {0.0}; ~%", NC),
  writeCExprs1(B_x_B_z, BxBz_c),
  printf(fh, "~%"),
  flush_output(fh),

  printf(fh, "  double B_y_B_z[~a] = {0.0}; ~%", NC),
  writeCExprs1(B_y_B_z, ByBz_c),
  printf(fh, "~%"),
  flush_output(fh), 

  magBSq_c : calcInnerProdList(varsC, 1, bC, BxSq_e + BySq_e + BzSq_e),
  writeCExprs1(magB_sq, magBSq_c),
  printf(fh, "~%"),
  flush_output(fh),

  printf(fh, "  bool notCellAvg = true;~%"),
  nodes : getNodes(basisFun, cdim, 1),
  Bx2Corners : expand(float(evAtNodes(BxSq_e,nodes,varsC))),
  By2Corners : expand(float(evAtNodes(BySq_e,nodes,varsC))),
  Bz2Corners : expand(float(evAtNodes(BzSq_e,nodes,varsC))),
  printf(fh, "  // Check if either Bx^2, By^2, or Bz^2 < 0 at control points. ~%"),
  for i : 1 thru length(nodes) do (
    printf(fh, "  if (notCellAvg && (~a < 0)) notCellAvg = false; ~%", Bx2Corners[i]),
    printf(fh, "  if (notCellAvg && (~a < 0)) notCellAvg = false; ~%", By2Corners[i]),
    printf(fh, "  if (notCellAvg && (~a < 0)) notCellAvg = false; ~%", Bz2Corners[i])
  ),

  printf(fh, "  double magB_sq_inv[~a] = {0.0}; ~%~%", NC),

  printf(fh, "  // Calculate expansions of B_i B_j/|B|^2, which can be calculated free of aliasing errors. ~%"),
  bxbx_c : calcInnerProdList(varsC, 1, bC, BxSq_e*magB_sq_inv_e),
  bxby_c : calcInnerProdList(varsC, 1, bC, BxBy_e*magB_sq_inv_e),
  bxbz_c : calcInnerProdList(varsC, 1, bC, BxBz_e*magB_sq_inv_e),
  byby_c : calcInnerProdList(varsC, 1, bC, BySq_e*magB_sq_inv_e),
  bybz_c : calcInnerProdList(varsC, 1, bC, ByBz_e*magB_sq_inv_e),
  bzbz_c : calcInnerProdList(varsC, 1, bC, BzSq_e*magB_sq_inv_e),

  printf(fh, "  if (notCellAvg) { ~%"),
  printf(fh, "  ~a_~ax_p~a_inv(magB_sq, magB_sq_inv); ~%", basisFun, cdim, polyOrder),

  writeCExprs1(bxbx, bxbx_c),
  printf(fh, "~%"),
  flush_output(fh),

  writeCExprs1(bxby, bxby_c),
  printf(fh, "~%"),
  flush_output(fh),

  writeCExprs1(bxbz, bxbz_c),
  printf(fh, "~%"),
  flush_output(fh),

  writeCExprs1(byby, byby_c),
  printf(fh, "~%"),
  flush_output(fh),

  writeCExprs1(bybz, bybz_c),
  printf(fh, "~%"),
  flush_output(fh),

  writeCExprs1(bzbz, bzbz_c),
  printf(fh, "~%"),
  flush_output(fh),

  printf(fh, "  } else { ~%"),
  printf(fh, "  // If either Bx^2, By^2, or Bz^2 < 0 at control points, only use cell average to get 1/|B|^2. ~%"),
  unit : calcInnerProdList(varsC, 1, bC, 1.0),
  printf(fh, "  magB_sq_inv[0] = ~a/magB_sq[0]; ~%", float(expand(unit[1]*unit[1]))),
  printf(fh, "  bxbx[0] = ~a; ~%", float(expand(bxbx_c[1]))),
  printf(fh, "  bxby[0] = ~a; ~%", float(expand(bxby_c[1]))),
  printf(fh, "  bxbz[0] = ~a; ~%", float(expand(bxbz_c[1]))),
  printf(fh, "  byby[0] = ~a; ~%", float(expand(byby_c[1]))),
  printf(fh, "  bybz[0] = ~a; ~%", float(expand(bybz_c[1]))),
  printf(fh, "  bzbz[0] = ~a; ~%", float(expand(bzbz_c[1]))),
  printf(fh, "~%"),
  for i : 2 thru NC do (
    printf(fh, "  bxbx[~a] = 0.0; ~%", i-1),
    printf(fh, "  bxby[~a] = 0.0; ~%", i-1),
    printf(fh, "  bxbz[~a] = 0.0; ~%", i-1),
    printf(fh, "  byby[~a] = 0.0; ~%", i-1),
    printf(fh, "  bybz[~a] = 0.0; ~%", i-1),
    printf(fh, "  bzbz[~a] = 0.0; ~%", i-1),
    printf(fh, "~%")
  ),
  printf(fh, "  } ~%"),

  printf(fh, "  // Calculate b_i = B_i/|B| by taking square root of B_i^2/|B|^2 at quadrature points. ~%"),
  printf(fh, "  ~a_~ax_p~a_sqrt_with_sign(bxbx, bx); ~%", basisFun, cdim, polyOrder),
  printf(fh, "  ~a_~ax_p~a_sqrt_with_sign(byby, by); ~%", basisFun, cdim, polyOrder),
  printf(fh, "  ~a_~ax_p~a_sqrt_with_sign(bzbz, bz); ~%", basisFun, cdim, polyOrder),

  printf(fh, "} ~%"),
  printf(fh, " ~%")
)$

calcExB(fh, funcNm, cdim, basisFun, polyOrder) := block(
  [bC, NC, Ex_e, Ey_e, Ez_e, Bx_e, By_e, Bz_e, magB_sq_inv_e, 
   ExB_x_c, ExB_y_c, ExB_z_c],

  kill(varsC, basisC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),

  NC  : length(bC),

  printf(fh, "#include <gkyl_maxwell_kernels.h> ~%"),
  printf(fh, "#include <gkyl_basis_~a_~ax_p~a_exp_sq.h> ~%", basisFun, cdim, polyOrder),
  printf(fh, "#include <gkyl_basis_~a_~ax_p~a_inv.h> ~%", basisFun, cdim, polyOrder),
  /* Function declaration with input/output variables. */
  printf(fh, "GKYL_CU_DH void ~a(const double *em, double* ExB) ~%{ ~%", funcNm),
  printf(fh, "  // em:  Input electromagnetic fields. ~%"),
  printf(fh, "  // ExB: E x B velocity = E x B/|B|^2. ~%"),
  printf(fh, " ~%"),

  printf(fh, "  const double *E_x = &em[~a]; ~%", NC*0),
  printf(fh, "  const double *E_y = &em[~a]; ~%", NC*1),
  printf(fh, "  const double *E_z = &em[~a]; ~%", NC*2),
  printf(fh, "  const double *B_x = &em[~a]; ~%", NC*3),
  printf(fh, "  const double *B_y = &em[~a]; ~%", NC*4),
  printf(fh, "  const double *B_z = &em[~a]; ~%", NC*5),
  printf(fh, " ~%"),

  printf(fh, "  double *ExB_x = &ExB[~a]; ~%", 0),
  printf(fh, "  double *ExB_y = &ExB[~a]; ~%", NC),
  printf(fh, "  double *ExB_z = &ExB[~a]; ~%", NC*2),
  printf(fh, " ~%"),

  Ex_e : doExpand1(E_x, bC),
  Ey_e : doExpand1(E_y, bC),
  Ez_e : doExpand1(E_z, bC),
  Bx_e : doExpand1(B_x, bC),
  By_e : doExpand1(B_y, bC),
  Bz_e : doExpand1(B_z, bC),
  BxSq_e : doExpand1(B_x_sq, bC),
  BySq_e : doExpand1(B_y_sq, bC),
  BzSq_e : doExpand1(B_z_sq, bC), 
  num_ExB_x_e : doExpand1(num_ExB_x, bC),
  num_ExB_y_e : doExpand1(num_ExB_y, bC),
  num_ExB_z_e : doExpand1(num_ExB_z, bC),
  magBSq_e : doExpand1(magB_sq, bC),
  magB_sq_inv_e : doExpand1(magB_sq_inv, bC),

  printf(fh, "  // Calculate |B|^2 and get expansion of 1/|B|^2. ~%"),
  printf(fh, "  double B_x_sq[~a] = {0.0}; ~%", NC),
  printf(fh, "  ~a_~ax_p~a_exp_sq(B_x, B_x_sq); ~%", basisFun, cdim, polyOrder),
  printf(fh, " ~%"),

  printf(fh, "  double B_y_sq[~a] = {0.0}; ~%", NC),
  printf(fh, "  ~a_~ax_p~a_exp_sq(B_y, B_y_sq); ~%", basisFun, cdim, polyOrder),
  printf(fh, " ~%"),

  printf(fh, "  double B_z_sq[~a] = {0.0}; ~%", NC),
  printf(fh, "  ~a_~ax_p~a_exp_sq(B_z, B_z_sq); ~%", basisFun, cdim, polyOrder),
  printf(fh, " ~%"),

  printf(fh, "  double magB_sq[~a] = {0.0}; ~%~%", NC),

  num_ExB_x_c : calcInnerProdList(varsC, 1, bC, Ey_e*Bz_e - Ez_e*By_e),
  num_ExB_y_c : calcInnerProdList(varsC, 1, bC, Ez_e*Bx_e - Ex_e*Bz_e),
  num_ExB_z_c : calcInnerProdList(varsC, 1, bC, Ex_e*By_e - Ey_e*Bx_e),

  printf(fh, "  double num_ExB_x[~a] = {0.0}; ~%", NC),
  writeCExprs1(num_ExB_x, num_ExB_x_c),
  printf(fh, "~%"),
  flush_output(fh),

  printf(fh, "  double num_ExB_y[~a] = {0.0}; ~%", NC),
  writeCExprs1(num_ExB_y, num_ExB_y_c),
  printf(fh, "~%"),
  flush_output(fh),

  printf(fh, "  double num_ExB_z[~a] = {0.0}; ~%", NC),
  writeCExprs1(num_ExB_z, num_ExB_z_c),
  printf(fh, "~%"),
  flush_output(fh), 

  magBSq_c : calcInnerProdList(varsC, 1, bC, BxSq_e + BySq_e + BzSq_e),
  writeCExprs1(magB_sq, magBSq_c),
  printf(fh, "~%"),
  flush_output(fh),

  printf(fh, "  bool notCellAvg = true;~%"),
  nodes : getNodes(basisFun, cdim, 1),
  magB2Corners : expand(float(evAtNodes(magBSq_e,nodes,varsC))),
  for i : 1 thru length(nodes) do (
    printf(fh, "  if (notCellAvg && (~a < 0)) notCellAvg = false; ~%", magB2Corners[i])
  ),

  printf(fh, "  double magB_sq_inv[~a] = {0.0}; ~%~%", NC),

  ExB_x_c : calcInnerProdList(varsC, 1, bC, num_ExB_x_e*magB_sq_inv_e),
  ExB_y_c : calcInnerProdList(varsC, 1, bC, num_ExB_y_e*magB_sq_inv_e),
  ExB_z_c : calcInnerProdList(varsC, 1, bC, num_ExB_z_e*magB_sq_inv_e),

  printf(fh, "  if (notCellAvg) { ~%"),
  printf(fh, "  ~a_~ax_p~a_inv(magB_sq, magB_sq_inv); ~%", basisFun, cdim, polyOrder),

  writeCExprs1(ExB_x, ExB_x_c),
  printf(fh, "~%"),
  flush_output(fh),

  writeCExprs1(ExB_y, ExB_y_c),
  printf(fh, "~%"),
  flush_output(fh),

  writeCExprs1(ExB_z, ExB_z_c),
  printf(fh, "~%"),
  flush_output(fh),

  printf(fh, "  } else { ~%"),
  unit : calcInnerProdList(varsC, 1, bC, 1.0),
  printf(fh, "  magB_sq_inv[0] = ~a/magB_sq[0]; ~%", float(expand(unit[1]*unit[1]))),
  printf(fh, "  ExB_x[0] = ~a; ~%", float(expand(ExB_x_c[1]))),
  printf(fh, "  ExB_y[0] = ~a; ~%", float(expand(ExB_y_c[1]))),
  printf(fh, "  ExB_z[0] = ~a; ~%", float(expand(ExB_z_c[1]))),
  printf(fh, "~%"),
  printf(fh, "  } ~%"),

  printf(fh, "} ~%"),
  printf(fh, " ~%")
)$

calcKappaInvB(fh, funcNm, cdim, basisFun, polyOrder) := block(
  [bC, NC, Bx_e, By_e, Bz_e, BxSq_e, BySq_e, BzSq_e, magB_sq_inv_e, 
   bxbx_c, bxby_c, bxbz_c, byby_c, bybz_c, bzbz_c],

  kill(varsC, basisC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis(basisFun, cdim, polyOrder),

  NC  : length(bC),

  printf(fh, "#include <gkyl_maxwell_kernels.h> ~%"),
  printf(fh, "#include <gkyl_basis_~a_~ax_p~a_exp_sq.h> ~%", basisFun, cdim, polyOrder),
  printf(fh, "#include <gkyl_basis_~a_~ax_p~a_inv.h> ~%", basisFun, cdim, polyOrder),
  printf(fh, "#include <gkyl_basis_~a_~ax_p~a_sqrt_with_sign.h> ~%", basisFun, cdim, polyOrder),
  /* Function declaration with input/output variables. */
  printf(fh, "GKYL_CU_DH void ~a(const double *bvar, const double *ExB, double* kappa_inv_b) ~%{ ~%", funcNm),
  printf(fh, "  // bvar:        Input magnetic field unit vector and unit tensor. ~%"),
  printf(fh, "  // ExB:         Input E x B velocity. ~%"),
  printf(fh, "  // kappa_inv_b: b_i/kappa = B_i/|B| * sqrt(1 - |E x B|^2/(c^2 |B|^4)). ~%"),
  printf(fh, " ~%"),

  printf(fh, "  const double *bxbx = &bvar[~a]; ~%", NC*3),
  printf(fh, "  const double *byby = &bvar[~a]; ~%", NC*6),
  printf(fh, "  const double *bzbz = &bvar[~a]; ~%", NC*8),
  printf(fh, " ~%"),

  printf(fh, "  const double *ExB_x = &ExB[~a]; ~%", 0),
  printf(fh, "  const double *ExB_y = &ExB[~a]; ~%", NC),
  printf(fh, "  const double *ExB_z = &ExB[~a]; ~%", NC*2),
  printf(fh, " ~%"),

  printf(fh, "  double *kappa_inv_bx = &kappa_inv_b[~a]; ~%", 0),
  printf(fh, "  double *kappa_inv_by = &kappa_inv_b[~a]; ~%", NC),
  printf(fh, "  double *kappa_inv_bz = &kappa_inv_b[~a]; ~%", NC*2),
  printf(fh, " ~%"),

  printf(fh, "  // Calculate ((E x B)/|B|^2)^2. ~%"),
  printf(fh, "  double ExB_x_sq[~a] = {0.0}; ~%", NC),
  printf(fh, "  ~a_~ax_p~a_exp_sq(ExB_x, ExB_x_sq); ~%", basisFun, cdim, polyOrder),
  printf(fh, " ~%"),

  printf(fh, "  double ExB_y_sq[~a] = {0.0}; ~%", NC),
  printf(fh, "  ~a_~ax_p~a_exp_sq(ExB_y, ExB_y_sq); ~%", basisFun, cdim, polyOrder),
  printf(fh, " ~%"),

  printf(fh, "  double ExB_z_sq[~a] = {0.0}; ~%", NC),
  printf(fh, "  ~a_~ax_p~a_exp_sq(ExB_z, ExB_z_sq); ~%", basisFun, cdim, polyOrder),
  printf(fh, " ~%"),

  ExB_x_sq_e : doExpand1(ExB_x_sq, bC),
  ExB_y_sq_e : doExpand1(ExB_y_sq, bC),
  ExB_z_sq_e : doExpand1(ExB_z_sq, bC),

  bxbx_e : doExpand1(bxbx, bC),
  byby_e : doExpand1(byby, bC),
  bzbz_e : doExpand1(bzbz, bC),

  kappa_inv_bx_sq_c : calcInnerProdList(varsC, 1, bC, bxbx_e*(1 - ExB_x_sq_e - ExB_y_sq_e - ExB_z_sq_e)),
  kappa_inv_by_sq_c : calcInnerProdList(varsC, 1, bC, byby_e*(1 - ExB_x_sq_e - ExB_y_sq_e - ExB_z_sq_e)),
  kappa_inv_bz_sq_c : calcInnerProdList(varsC, 1, bC, bzbz_e*(1 - ExB_x_sq_e - ExB_y_sq_e - ExB_z_sq_e)),

  printf(fh, "  double kappa_inv_bx_sq[~a] = {0.0}; ~%", NC),
  printf(fh, "  double kappa_inv_by_sq[~a] = {0.0}; ~%", NC),
  printf(fh, "  double kappa_inv_bz_sq[~a] = {0.0}; ~%", NC),
  printf(fh, " ~%"),

  writeCExprs1(kappa_inv_bx_sq, kappa_inv_bx_sq_c),
  printf(fh, "~%"),
  flush_output(fh),

  writeCExprs1(kappa_inv_by_sq, kappa_inv_by_sq_c),
  printf(fh, "~%"),
  flush_output(fh),
  writeCExprs1(kappa_inv_bz_sq, kappa_inv_bz_sq_c),
  printf(fh, "~%"),
  flush_output(fh),

  printf(fh, "  ~a_~ax_p~a_sqrt_with_sign(kappa_inv_bx_sq, kappa_inv_bx); ~%", basisFun, cdim, polyOrder),
  printf(fh, "  ~a_~ax_p~a_sqrt_with_sign(kappa_inv_by_sq, kappa_inv_by); ~%", basisFun, cdim, polyOrder),
  printf(fh, "  ~a_~ax_p~a_sqrt_with_sign(kappa_inv_bz_sq, kappa_inv_bz); ~%", basisFun, cdim, polyOrder),

  printf(fh, "} ~%"),
  printf(fh, " ~%")
)$