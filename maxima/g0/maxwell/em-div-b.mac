/* This script generates the kernels for calculating div(b) and the max(|b_i|) penalization.

   div(b) is computed with averaging to ensure phase space incompressibility in the weak sense. */

load("modal-basis")$
load("out-scripts")$
load(stringproc)$
load("scifac")$
load("nodal_operations/nodal_functions")$
fpprec : 24$
cvars : [x, y, z]$

calcdivb(dir, fh, funcNm, cdim, polyOrder) := block(
  [varsC, bC, NC, cv, surfVars, bSurf, NSurf, surfConfNodes, numConfNodes, 
   b_surf_lr_e, b_surf_cl_e, b_surf_cr_e, b_surf_rl_e, 
   b_quad_surf_lr, b_quad_surf_cl, b_quad_surf_cr, b_quad_surf_rl, 
   surf_b_l, surf_b_r, bc_e, vol_b_c],

  kill(varsC, bC),

  /* Load basis of dimensionality requested. */
  [varsC,bC] : loadBasis("Tensor", cdim, polyOrder),

  /* Number of basis monomials. */
  NC : length(bC),

  /* cv = variable to compute gradients in. */
  cv : varsC[dir],
  /* Surface variables to integrate over. */
  surfVars : delete(cv,varsC),
  if (cdim = 1) then (
    NSurf : 1
  )
  else (
    bSurf : basisFromVars("Tensor",surfVars,polyOrder),
    NSurf : length(bSurf), 
    surfConfNodes : gaussOrd(polyOrder+1, cdim-1),
    numConfNodes : length(surfConfNodes)
  ), 

  printf(fh, "#include <gkyl_maxwell_kernels.h> ~%"),
  if (cdim > 1) then (
    printf(fh, "#include <gkyl_basis_tensor_~ax_p~a_upwind_quad_to_modal.h> ~%", cdim, polyOrder)
  ),
  /* Function declaration with input/output variables. */
  printf(fh, "GKYL_CU_DH void ~a(const double *dxv, 
  const double *bvar_surf_l, const double *bvar_surf_c, const double *bvar_surf_r, 
  const double *bvar_c, double* GKYL_RESTRICT max_b, double* GKYL_RESTRICT div_b) ~%{ ~%", funcNm),
  printf(fh, "  // dxv[NDIM]:       Cell spacing.~%"),
  printf(fh, "  // bvar_surf_l/c/r: Input surface magnetic field unit vector in left/center/right cells in each direction. ~%"),
  printf(fh, "  // bvar_c:          Input volume expansion of magnetic field unit vector in center cell. ~%"),
  printf(fh, "  // max_b:           Output surface expansion of max |b| for Lax penalization of streaming: lambda_i = |b_i|. ~%"),
  printf(fh, "  // div_b:           Output volume expansion of div(b).~%"),
  printf(fh, "~%"),

  printf(fh, "  const double dx1 = 2.0/dxv[~a]; ~%", dir-1),
  printf(fh, "  const double *b_c = &bvar_c[~a]; ~%", (dir-1)*NC),

  /* Surface magnetic field vector organized as:
     [bx_xl, bx_xr, by_yl, by_yr, bz_zl, bz_zr] */
  printf(fh, "  const double *b_surf_lr = &bvar_surf_l[~a]; ~%", (1 + (dir-1)*2)*NSurf),
  printf(fh, "  const double *b_surf_cl = &bvar_surf_c[~a]; ~%", (0 + (dir-1)*2)*NSurf),
  printf(fh, "  const double *b_surf_cr = &bvar_surf_c[~a]; ~%", (1 + (dir-1)*2)*NSurf),
  printf(fh, "  const double *b_surf_rl = &bvar_surf_r[~a]; ~%", (0 + (dir-1)*2)*NSurf),
  printf(fh, "~%"),

  /* Surface b penalization organized as :
     [|bx_xl|, |bx_xr|, 
      |by_yl|, |by_yr|,
      |bz_zl|, |bz_zr|] */
  printf(fh, "  double *max_b_l = &max_b[~a]; ~%", (0 + (dir-1)*2)*NSurf),
  printf(fh, "  double *max_b_r = &max_b[~a]; ~%", (1 + (dir-1)*2)*NSurf),
  printf(fh, "~%"),

  /* if cdim = 1, then the surface evaluations are just numbers, not expansions */
  if (cdim = 1) then (
    /* Surface componet of gradient expansion of b */
    surf_b_l : calcInnerProdList(surfVars, 1, subst(cv=-1, bC), 0.5*(b_surf_cl[0] + b_surf_lr[0])),
    surf_b_r : calcInnerProdList(surfVars, 1, subst(cv=1, bC), 0.5*(b_surf_rl[0] + b_surf_cr[0])),

    printf(fh, "  max_b_l[0] = fmax(fabs(b_surf_lr[0]), fabs(b_surf_cl[0])); ~%"),
    printf(fh, "  max_b_r[0] = fmax(fabs(b_surf_cr[0]), fabs(b_surf_rl[0])); ~%")
  )
  else (
    b_surf_lr_e : doExpand1(b_surf_lr, bSurf),
    b_surf_cl_e : doExpand1(b_surf_cl, bSurf),
    b_surf_cr_e : doExpand1(b_surf_cr, bSurf),
    b_surf_rl_e : doExpand1(b_surf_rl, bSurf),

    /* Surface componet of gradient expansion of b */
    surf_b_l : calcInnerProdList(surfVars, 1, subst(cv=-1, bC), 0.5*(b_surf_cl_e + b_surf_lr_e)),
    surf_b_r : calcInnerProdList(surfVars, 1, subst(cv=1, bC), 0.5*(b_surf_rl_e + b_surf_cr_e)),

    /* Compute surface expansion of pkpm b penalization by evaluating b_i
       at quadrature points and finding max(|b_i_l|, |b_i_r|) */
    b_quad_surf_lr : expand(float(evAtNodes(b_surf_lr_e,surfConfNodes,surfVars))),
    b_quad_surf_cl : expand(float(evAtNodes(b_surf_cl_e,surfConfNodes,surfVars))),
    b_quad_surf_cr : expand(float(evAtNodes(b_surf_cr_e,surfConfNodes,surfVars))),
    b_quad_surf_rl : expand(float(evAtNodes(b_surf_rl_e,surfConfNodes,surfVars))),

    printf(fh, "  double bl_r = 0.0; ~%"),
    printf(fh, "  double bc_l = 0.0; ~%"),
    printf(fh, "  double bc_r = 0.0; ~%"),
    printf(fh, "  double br_l = 0.0; ~%"),
    printf(fh, "  double max_b_quad_l[~a] = {0.0}; ~%", NSurf),
    printf(fh, "  double max_b_quad_r[~a] = {0.0}; ~%", NSurf),
    printf(fh, "~%"),
    for i : 1 thru numConfNodes do (
      printf(fh, "  bl_r = ~a; ~%", b_quad_surf_lr[i]),
      printf(fh, "  bc_l = ~a; ~%", b_quad_surf_cl[i]),
      printf(fh, "  bc_r = ~a; ~%", b_quad_surf_cr[i]),
      printf(fh, "  br_l = ~a; ~%", b_quad_surf_rl[i]),

      printf(fh, "  max_b_quad_l[~a] = fmax(fabs(bl_r), fabs(bc_l)); ~%", i-1),
      printf(fh, "  max_b_quad_r[~a] = fmax(fabs(bc_r), fabs(br_l)); ~%", i-1),
      printf(fh, "~%")
    ),
    printf(fh, "  tensor_~ax_p~a_upwind_quad_to_modal(max_b_quad_l, max_b_l); ~%", cdim, polyOrder),
    printf(fh, "  tensor_~ax_p~a_upwind_quad_to_modal(max_b_quad_r, max_b_r); ~%", cdim, polyOrder)
  ),
  printf(fh, "~%"),

  /* Volume component of gradient expansion of b 
     Solved in the strong form, so includes an evaluation of the volume expansion at surface. */
  bc_e : doExpand1(b_c, bC),
  bc_l : calcInnerProdList(surfVars, 1, subst(cv=-1, bC), subst(cv=-1, bc_e)),
  bc_r : calcInnerProdList(surfVars, 1, subst(cv=1, bC), subst(cv=1, bc_e)),

  vol_b_c : calcInnerProdList(varsC, 1, bC, diff(bc_e, cv)),

  /* Use collect write expression to factor the dx and reduce number of multiplications 
     Note minus sign on surface terms from left interface due to direction of normal vector */
  writeCIncrExprsCollect1lhsc(div_b, dx1*(vol_b_c - (surf_b_l - bc_l) + (surf_b_r - bc_r))),  
  printf(fh, "~%"),
  printf(fh, "} ~%")
)$
