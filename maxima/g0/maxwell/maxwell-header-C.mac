/* Generate the header file for Maxwell's equation kernels. */

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
maxCdim_Ser : 3$

/* Tensor product basis. */
/* Note that Serendipity, p = 1, is equivalent to Tensor */
/* Thus no need to calculate p = 1 Tensor basis */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
maxCdim_Tensor : 2$

/* ...... END OF USER INPUTS........ */

cvars : [x, y, z]$

bName        : ["ser", "tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$

printPrototype(deco, ci, vi, bStr, pi) := block([si],

  printf(fh, "~adouble maxwell_vol_~ax_~a_p~a(const gkyl_maxwell_inp *meq, const double *w, const double *dx, const double *q, double* GKYL_RESTRICT out); ~%", deco, ci, bStr, pi),
  for si : 1 thru ci do (
    printf(fh, "~avoid maxwell_surf~a_~ax_~a_p~a(const gkyl_maxwell_inp *meq, const double *w, const double *dx, const double *ql, const double *qc, const double *qr, double* GKYL_RESTRICT out); ~%", deco, cvars[si], ci, bStr, pi)
  ),
  printf(fh, "~%"),
  printf(fh, "~avoid em_bvar_~ax_~a_p~a(const double *em, double* bvar); ~%", deco, ci, bStr, pi),
  printf(fh, "~avoid em_ExB_~ax_~a_p~a(const double *em, double* ExB); ~%", deco, ci, bStr, pi),
  printf(fh, "~avoid em_pkpm_kappa_inv_b_~ax_~a_p~a(const double *bvar, const double *ExB, double* kappa_inv_b); ~%", deco, ci, bStr, pi),  
  printf(fh, "~%")
)$

/* ............ Write out the C header file ............ */
fh : openw("~/max-out/gkyl_maxwell_kernels.h")$

printf(fh, "#pragma once ~%")$
printf(fh, "#include <math.h> ~%")$
printf(fh, "#include <gkyl_util.h> ~%")$
printf(fh, "EXTERN_C_BEG ~%")$
printf(fh, "typedef struct { double c, chi, gamma; } gkyl_maxwell_inp; ~%")$
printf(fh, "~%")$

decorator : "GKYL_CU_DH "$
for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (

    minPolyOrderB : minPolyOrder[bInd],
    maxPolyOrderB : maxPolyOrder[bInd],
    if (c=3 and maxPolyOrderB > 1) then maxPolyOrderB : 1,

    for polyOrder : minPolyOrderB thru maxPolyOrderB do (
      printPrototype(decorator, c, v, bName[bInd], polyOrder)
    )
  )
);
printf(fh, "EXTERN_C_END ~%")$
close(fh)$
/* ............ Finished writing out the C header file ............ */