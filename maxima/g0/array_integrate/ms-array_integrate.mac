/* Generate kernels for updater integrating a gkyl_array over the
   whole domain, optionally applying an operator inside the integral .*/

load("array_integrate/integrateFuncs")$
load(stringproc)$

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
maxCdim_Ser : 3$

/* Tensor product basis. */
/* Note that Serendipity, p = 1, is equivalent to Tensor */
/* Thus no need to calculate p = 1 Tensor basis */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 0$
minCdim_Tensor : 1$
maxCdim_Tensor : 0$

/* GK hybrid basis. */
minPolyOrder_GkHybrid : 1$
maxPolyOrder_GkHybrid : 1$
minCdim_GkHybrid : 1$
maxCdim_GkHybrid : 3$

/* ...... END OF USER INPUTS........ */

/* Vdim possibilities for each of Cdim=[1,2,3]. */
gkVdims : [[1,2], [2], [2]]$

/* To generate other bases, just add corresponding column to arrays below. */
bName        : ["ser", "tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser     , minCdim_Tensor     ]$
maxCdim      : [maxCdim_Ser     , maxCdim_Tensor     ]$

/* Generate kernels of selected types. */
for bInd : 1 thru length(bName) do (
  fname : sconcat("~/max-out/array_integrate_op_", bName[bInd], ".c"),
  fh : openw(fname),

  printf(fh, "#include <gkyl_array_integrate_kernels.h>~%"),

  for cd : minCdim[bInd] thru maxCdim[bInd] do (
    for polyOrder : minPolyOrder[bInd] thru maxPolyOrder[bInd] do (
      disp(printf(false,"Creating gkyl_array_integrate_op_none ~ax ~a p~a ",cd,bName[bInd],polyOrder)),
      funcName : sconcat("gkyl_array_integrate_op_none_",cd,"x_",bName[bInd],"_p",polyOrder),
      arrayIntegrate_none(fh, funcName, cd, bName[bInd], polyOrder)
    )
  ),

  for cd : minCdim[bInd] thru maxCdim[bInd] do (
    for polyOrder : minPolyOrder[bInd] thru maxPolyOrder[bInd] do (
      disp(printf(false,"Creating gkyl_array_integrate_op_abs ~ax ~a p~a ",cd,bName[bInd],polyOrder)),
      funcName : sconcat("gkyl_array_integrate_op_abs_",cd,"x_",bName[bInd],"_p",polyOrder),
      arrayIntegrate_abs(fh, funcName, cd, bName[bInd], polyOrder)
    )
  ),

  for cd : minCdim[bInd] thru maxCdim[bInd] do (
    for polyOrder : minPolyOrder[bInd] thru maxPolyOrder[bInd] do (
      disp(printf(false,"Creating gkyl_array_integrate_op_sq ~ax ~a p~a ",cd,bName[bInd],polyOrder)),
      funcName : sconcat("gkyl_array_integrate_op_sq_",cd,"x_",bName[bInd],"_p",polyOrder),
      arrayIntegrate_sq(fh, funcName, cd, bName[bInd], polyOrder)
    )
  ),

  for cd : minCdim[bInd] thru maxCdim[bInd] do (
    for polyOrder : minPolyOrder[bInd] thru maxPolyOrder[bInd] do (
      disp(printf(false,sconcat("Creating gkyl_array_integrate_op_sq_weighted ~ax p~a ", bName[bInd]),cd,polyOrder)),
      funcName : sconcat("gkyl_array_integrate_op_sq_weighted_",cd,"x_",bName[bInd],"_p",polyOrder),
      arrayIntegrate_sq_weighted(fh, funcName, cd, 0, bName[bInd], polyOrder)
    )
  ),

  for cd : minCdim[bInd] thru maxCdim[bInd] do (
    for polyOrder : minPolyOrder[bInd] thru maxPolyOrder[bInd] do (
      disp(printf(false,sconcat("Creating gkyl_array_integrate_op_grad_sq ~ax p~a ", bName[bInd]),cd,polyOrder)),
      funcName : sconcat("gkyl_array_integrate_op_grad_sq_",cd,"x_",bName[bInd],"_p",polyOrder),
      arrayIntegrate_grad_sq(fh, funcName, cd, bName[bInd], polyOrder)
    )
  ),

  for cd : max(2,minCdim[bInd]) thru min(maxCdim[bInd],3) do (
    for polyOrder : minPolyOrder[bInd] thru maxPolyOrder[bInd] do (
      disp(printf(false,sconcat("Creating gkyl_array_integrate_op_gradperp_sq ~ax p~a ", bName[bInd]),cd,polyOrder)),
      funcName : sconcat("gkyl_array_integrate_op_gradperp_sq_",cd,"x_",bName[bInd],"_p",polyOrder),
      arrayIntegrate_gradperp_sq(fh, funcName, cd, bName[bInd], polyOrder)
    )
  ),

  for cd : max(2,minCdim[bInd]) thru min(maxCdim[bInd],3) do (
    for polyOrder : minPolyOrder[bInd] thru maxPolyOrder[bInd] do (
      disp(printf(false,sconcat("Creating gkyl_array_integrate_op_eps_gradperp_sq ~ax p~a ", bName[bInd]),cd,polyOrder)),
      funcName : sconcat("gkyl_array_integrate_op_eps_gradperp_sq_",cd,"x_",bName[bInd],"_p",polyOrder),
      arrayIntegrate_eps_gradperp_sq(fh, funcName, cd, bName[bInd], polyOrder)
    )
  ),

  close(fh)
);

/* Generate phase-space kernels of selected types. */
bName        : ["gkhyb"]$
minPolyOrder : [minPolyOrder_GkHybrid]$
maxPolyOrder : [maxPolyOrder_GkHybrid]$
minCdim      : [minCdim_GkHybrid     ]$
maxCdim      : [maxCdim_GkHybrid     ]$
for bInd : 1 thru length(bName) do (
  for cd : minCdim[bInd] thru maxCdim[bInd] do (
    /* Phase-space operator (weight is conf-space). */
    for gkV : 1 thru length(gkVdims[cd]) do (
      vd : gkVdims[cd][gkV],

      fname : sconcat("~/max-out/array_integrate_op_", cd, "x", vd, "v_", bName[bInd], ".c"),
      fh : openw(fname),

      printf(fh, "#include <gkyl_array_integrate_kernels.h>~%"),

      maxPolyOrderB : maxPolyOrder[bInd],
      if (cd=3) then maxPolyOrderB : 1, /* Only generate p=1 kernels for 3x2v */
      for polyOrder : minPolyOrder[bInd] thru maxPolyOrderB do (
        disp(printf(false,sconcat("Creating gkyl_array_integrate_op_sq_weighted ~ax~av p~a ", bName[bInd]),cd,vd,polyOrder)),
        funcName : sconcat("gkyl_array_integrate_op_sq_weighted_",cd,"x",vd,"v_",bName[bInd],"_p",polyOrder),
        arrayIntegrate_sq_weighted(fh, funcName, cd, vd, bName[bInd], polyOrder)
      ),
      close(fh)
    )
  )
);
