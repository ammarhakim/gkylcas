/* Generate header file for array_integrate kernels. */
load(stringproc)$

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
maxCdim_Ser : 3$

/* Tensor product basis. */
/* Note that Serendipity, p = 1, is equivalent to Tensor */
/* Thus no need to calculate p = 1 Tensor basis */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
maxCdim_Tensor : 0$

/* ...... END OF USER INPUTS........ */

/* To generate other bases, just add corresponding column to arrays below. */
bName        : ["ser", "tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$

fh : openw("~/max-out/gkyl_array_integrate_kernels.h")$
printf(fh, "#pragma once~%")$
printf(fh, "~%")$

printf(fh, "#include <gkyl_util.h>~%")$
printf(fh, "#include <math.h>~%")$
printf(fh, "~%")$

printf(fh, "EXTERN_C_BEG~%")$
printf(fh, "~%")$

funcName : "gkyl_array_integrate_op_none_ker"$
printf(fh, "GKYL_CU_DH void ~a(double *dxSq, double vol, int num_comp, int num_basis, const double *weight, const double *fIn, double *out);~%", funcName)$
printf(fh, "~%")$

funcName : "gkyl_array_integrate_op_abs_ker"$
printf(fh, "GKYL_CU_DH void ~a(double *dxSq, double vol, int num_comp, int num_basis, const double *weight, const double *fIn, double *out);~%", funcName)$
printf(fh, "~%")$

funcName : "gkyl_array_integrate_op_sq_ker"$
printf(fh, "GKYL_CU_DH void ~a(double *dxSq, double vol, int num_comp, int num_basis, const double *weight, const double *fIn, double *out);~%", funcName)$
printf(fh, "~%")$

for bInd : 1 thru length(bName) do (

  for cd : minCdim[bInd] thru maxCdim[bInd] do (
    for polyOrder : minPolyOrder[bInd] thru maxPolyOrder[bInd] do (
      funcName : sconcat("gkyl_array_integrate_op_grad_sq_",cd,"x_",bName[bInd],"_p",polyOrder,"_ker"),
      printf(fh, "GKYL_CU_DH void ~a(double *dxSq, double vol, int num_comp, int num_basis, const double *weight, const double *fIn, double *out);~%", funcName)
    )
  ),
  printf(fh, "~%"),

  for cd : max(2,minCdim[bInd]) thru min(maxCdim[bInd],3) do (
    for polyOrder : minPolyOrder[bInd] thru maxPolyOrder[bInd] do (
      funcName : sconcat("gkyl_array_integrate_op_gradperp_sq_",cd,"x_",bName[bInd],"_p",polyOrder,"_ker"),
      printf(fh, "GKYL_CU_DH void ~a(double *dxSq, double vol, int num_comp, int num_basis, const double *weight, const double *fIn, double *out);~%", funcName)
    )
  ),
  printf(fh, "~%"),

  for cd : max(2,minCdim[bInd]) thru min(maxCdim[bInd],3) do (
    for polyOrder : minPolyOrder[bInd] thru maxPolyOrder[bInd] do (
      funcName : sconcat("gkyl_array_integrate_op_eps_gradperp_sq_",cd,"x_",bName[bInd],"_p",polyOrder,"_ker"),
      printf(fh, "GKYL_CU_DH void ~a(double *dxSq, double vol, int num_comp, int num_basis, const double *weight, const double *fIn, double *out);~%", funcName)
    )
  ),
  printf(fh, "~%")

)$

printf(fh, "EXTERN_C_END~%")$
printf(fh, "~%")$
close(fh)$
