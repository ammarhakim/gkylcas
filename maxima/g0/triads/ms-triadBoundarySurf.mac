load("triads/triadBoundarySurfFuncs")$
load(stringproc)$
/* This script calls the functions which calculate the
   updates from the *boundary* surface terms for the Vlasov equation. */

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 2$
maxPolyOrder_Ser : 2$
minCdim_Ser : 2$
minVdim_Ser : 3$    /* see begining of v loop below though. */
maxCdim_Ser : 2$
maxVdim_Ser : 3$

/* Tensor product basis. */
minPolyOrder_Tensor : 1$
maxPolyOrder_Tensor : 1$
minCdim_Tensor : 1$
minVdim_Tensor : 1$    /* see begining of v loop below though. */
maxCdim_Tensor : 0$
maxVdim_Tensor : 3$

/* ...... END OF USER INPUTS........ */

bName        : ["ser","tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
minVdim      : [minVdim_Ser, minVdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$
maxVdim      : [maxVdim_Ser, maxVdim_Tensor]$
useHigherOrderList : [false, true]$

clabels : ["x","y","z"]$
vlabels : ["vx","vy","vz"]$

for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    for v : max(c,minVdim[bInd]) thru maxVdim[bInd] do (
      maxPolyOrderB : maxPolyOrder[bInd],
      if (c+v>5 and maxPolyOrderB > 1) then maxPolyOrderB : 1,
      for polyOrder : minPolyOrder[bInd] thru maxPolyOrderB do (
        disp(printf(false,sconcat("Creating surface Vlasov ",bName[bInd]," ~ax~av_p~a"),c,v,polyOrder)),
        for dir : 1 thru c do ( 
          for hoInd : 1 thru length(useHigherOrderList) do (
            /* Phase-space Hamiltonian surface fluxes. Only generate with Serendipity basis for now. */
            useHigherOrder : useHigherOrderList[hoInd],
            if useHigherOrder then si : "ho_" else si : "",
            if not((bName[bInd] = "ser")and (polyOrder = 1) and (useHigherOrder = true)) then (
              if ((bName[bInd] = "ser")and (polyOrder = 1) and (useHigherOrder = false)) then si : "",
              fname : sconcat("~/max-out/vlasov_nc_hamil_gen_boundary_",si,"surf", clabels[dir], "_", c, "x", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
              fh : openw(fname),
              funcName : sconcat("vlasov_nc_hamil_gen_boundary_",si,"surf",clabels[dir],"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder),
              if ( bName[bInd] = "ser"  and not(c+v>4 and polyOrder > 1) ) then (
                calcHamilGenBoundarySurfStreamNonCanonical(dir, fh, funcName, c, v, bName[bInd], polyOrder, useHigherOrder)
              ) 
              else (
                calcHamilGenBoundarySurfStreamNonCanonicalNodalBreakup(dir, fh, funcName, c, v, bName[bInd], polyOrder, useHigherOrder)
              ),
              close(fh)
            )
          )
        )
      )
    )
  )
);
