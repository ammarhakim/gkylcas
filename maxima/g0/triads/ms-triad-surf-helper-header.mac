/* Generate the header file for the helper files needs for the Triads. */
/* load("modal-basis");
load("out-scripts");
load("utilities")$
load("nodal_operations/nodal_functions")$ */
load("nodal_operations/nodal_functions")$
load("new_vlasov/vlasov-basis");

/* gaussOrd in: quadrature_functions */
/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 0$
minCdim_Ser : 1$
minVdim_Ser : 1$    /* see begining of v loop below though. */
maxCdim_Ser : 3$
maxVdim_Ser : 3$

/* Tensor product basis. */
minPolyOrder_Tensor : 1$
maxPolyOrder_Tensor : 1$
minCdim_Tensor : 1$
minVdim_Tensor : 1$    /* see begining of v loop below though. */
maxCdim_Tensor : 3$
maxVdim_Tensor : 3$

/* ...... END OF USER INPUTS........ */

cvars : [x, y, z]$

clabels : ["x","y","z"]$
vlabels : ["vx","vy","vz"]$

bName        : ["ser","tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
minVdim      : [minVdim_Ser, minVdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$
maxVdim      : [maxVdim_Ser, maxVdim_Tensor]$

printPrototype(dir, nodeNum, deco, ci, vi, bStr, pi) := block([si],
  if (ci <= vi and pi < 3) then (
    fname : sconcat("vlasov_nc_hamil_gen_surf_node",nodeNum,"_", clabels[dir], "_", ci, "x", vi, "v_", bStr, "_p", pi),
    bfname : sconcat("vlasov_nc_hamil_gen_boundary_surf_node",nodeNum,"_", clabels[dir], "_", ci, "x", vi, "v_", bStr, "_p", pi),
    printf(fh, "~avoid ~a(const double *w, const double *dxv,
     const double *poisson_tensor_conf, const double *hamil, const double *fl, const double *fc, const double *fr,
     double* GKYL_RESTRICT alpha_max, double* GKYL_RESTRICT Ghat_l, double* GKYL_RESTRICT Ghat_r ); ~%", deco, fname),
   printf(fh, "~avoid ~a(const double *w, const double *dxv, const int edge,
     const double *poisson_tensor_conf, const double *hamil, const double *fl, const double *fr, double* GKYL_RESTRICT Ghat ); ~%", deco, bfname)
  )
)$

/* ............ Write out the C header file ............ */
fh : openw("~/max-out/gkyl_nc_hamil_surf_comps_kernels.h")$

printf(fh, "#pragma once ~%")$
printf(fh, "#include <math.h> ~%")$
printf(fh, "#include <gkyl_util.h> ~%")$
printf(fh, "EXTERN_C_BEG ~%")$
printf(fh, "~%")$

decorator : "GKYL_CU_DH "$
for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    for v : c thru maxVdim[bInd] do (
      maxPolyOrderB : maxPolyOrder[bInd],
      if (c+v>4 and maxPolyOrderB > 1) then maxPolyOrderB : 1,
      for polyOrder : minPolyOrder[bInd] thru maxPolyOrderB do (
        for dir : 1 thru c do (

          kill(varsC,bC,varsV,bV,varsP,bP, cv, vv, surfVars, surfCVars, bSurf,nodes_conf,basisNodalConf,nodes_vel,basisNodalVel,surfNodes, numNodes),
          /* Load the  basis for the number of specific nodal points */
          [varsC,bC,varsV,bV,varsP,bP] :  loadVlasovBasis(bName[bInd], c, v, polyOrder),
          cv : varsP[dir],
          vv : varsV[dir], 
          surfVars : delete(cv,varsP), /* Surface variables at constant cv surface. */
          surfCVars : delete(cv,varsC), /* Remaining configuration space variables at cv surface. */
          [bSurf,nodes_conf,basisNodalConf,nodes_vel,basisNodalVel,surfNodes] : loadVlasovConfSurfBasis(c, v,  bName[bInd], polyOrder, surfVars, surfCVars, varsV),
          numNodes : length(surfNodes), 

          for nodeNum : 1 thru numNodes do ( 
            printPrototype(dir, nodeNum-1, decorator, c, v, bName[bInd], polyOrder)
          ),

          printf(fh, "~%")
        )
      )
    )
  )  
);
printf(fh, "EXTERN_C_END ~%")$
close(fh)$
/* ............ Finished writing out the C header file ............ */
