load("triads/triadVelFluxSurfFuncs")$
load(stringproc)$
/* This script calls the functions which calculate the
   components of the modal DG expansion of the velocity space 
   flux, first accumulating different forces into an array
   storing the phase space characteristics alpha_v at quadrature
   points, and then constructing a nodal Lax-Friedrichs flux,
   G = alpha/2*(f^+ + f^-) - |alpha|/2*(f^+ - f^-)
   and converting that back to a modal expansion. */

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
minVdim_Ser : 1$    /* see begining of v loop below though. */
maxCdim_Ser : 2$
maxVdim_Ser : 3$

/* Tensor product basis. */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
minVdim_Tensor : 1$    /* see begining of v loop below though. */
maxCdim_Tensor : 3$
maxVdim_Tensor : 1$

/* ...... END OF USER INPUTS........ */

bName        : ["ser","tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
minVdim      : [minVdim_Ser, minVdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$
maxVdim      : [maxVdim_Ser, maxVdim_Tensor]$

clabels : ["x","y","z"]$
vlabels : ["vx","vy","vz"]$

for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    for v : c thru maxVdim[bInd] do (
      maxPolyOrderB : maxPolyOrder[bInd],
      if (c+v>5 and maxPolyOrderB > 1) then maxPolyOrderB : 1,
      if (c+v>4 and maxPolyOrderB > 1) and (bName[bInd] = "ser") then maxPolyOrderB : 1,

      /* We do not generate 5D and 6D p>1 phase-space Hamiltonian kernels. */
      for polyOrder : minPolyOrder[bInd] thru maxPolyOrderB do (
        disp(printf(false,sconcat("Creating hamiltonian force velocity flux ",bName[bInd]," ~ax~av_p~a"),c,v,polyOrder)),
        /* Can only have Hamiltonian force in directions where we can take configuration space gradients. */
        for dir : 1 thru v do (
          /* Phase-space Hamiltonian surface component. Only generate with Serendipity basis for now. */
          if (bName[bInd] = "ser") then (
            fname : sconcat("~/max-out/nc_hamil_alpha_quad_", vlabels[dir], "_", c, "x", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
            fh : openw(fname),
            funcName : sconcat("nc_hamil_alpha_quad_",vlabels[dir],"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder),
            calcHamilGenVelSurfForceNonCanonical(dir, fh, funcName, c, v, bName[bInd], polyOrder), 
            close(fh)
          )
        )
      )
    )
  )
);
