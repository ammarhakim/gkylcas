/* Functions which compute the components of the surface update of the Vlasov 
   equation using a discontinuous Galerkin (DG) method. Advection in
   configuration space is computed as velocity gradients of a Hamiltonian. 
   In the case when the Hamiltonian that only depends on velocity space,
   **we assume the origin (v=0) is at a velocity-space cell edge** and thus
   we can just check the sign of the cell center value for the upwind 
   direction. In the case when the Hamiltonian depends on phase space
   we utilize a standard Lax-Friedrichs flux for continuous characteristics: 
   G = alpha/2*(f^+ + f^-) - |alpha|/2*(f^+ - f^-)
   evaluated at nodes and converted back to a modal expansion. Note that 
   we do not make any assumptions on the order of the phase space expansion
   and thus to evaluate G, we must utilize enough Gauss-Legendre quadrature points
   to integrate a 3*p polynomial (cubic for p=1, sixth order for p=2, ninth order for p=3). 
   We thus must use 2, 4, and 5 Gauss-Legendre points respectively. 

   We do similar evaluations for the velocity-space update, but for the velocity-space
   update, we pre-compute the modal expansion of the flux to allow for ease of 
   accumulation of different forces (Hamiltonian, electromagnetic, scalar potentials, etc.). 
   Thus, the velocity-space update simply evaluates the final surface integral with the
   computed modal expansion of the flux at that interface. 
*/

load("modal-basis");
load("out-scripts");
load("utilities")$
load("nodal_operations/nodal_functions")$
load("new_vlasov/vlasov-basis");
load(stringproc)$
fpprec : 24$

clabels : ["x","y","z"]$
dx11 : [dx10, dx11, dx12]$
dv11 : [dv10, dv11, dv12]$
cidx(cdim) := makelist(i,i,0,cdim-1)$
vidx(cdim,vdim) := makelist(i,i,cdim,cdim+vdim-1)$

/* Phase-space Hamiltonian surface streaming */
calcHamilGenSurfStreamNonCanonical(dir, fh, funcNm, cdim, vdim, basisFun, polyOrder) := block(
  [varsC,bC,varsV,bV,varsP,bP,cid,vid,hamil,cv,vv,surfVars,surfCVars, 
   bSurf,nodes_conf,basisNodalConf,nodes_vel,basisNodalVel,surfNodes, 
   NSurf,num_nodes_conf,num_nodes_vel,numNodes,fl_e,fc_e,fr_e,
   Pi_dH_dv_l_n,Pi_dH_dv_r_n,f_lr_n,f_cl_n,f_cr_n,f_rl_n,
   Ghat_r_nodal_e,Ghat_l_nodal_e,Ghat_r_c,Ghat_l_c,Ghat_l_e,Ghat_r_e,incr_l,incr_r],

  [varsC,bC,varsV,bV,varsP,bP] :  loadVlasovBasis(basisFun, cdim, vdim, polyOrder),
  NC : length(bC),  

  printf(fh, "#include <gkyl_vlasov_kernels.h> ~%"),
  printf(fh, "GKYL_CU_DH double ~a(const double *w, const double *dxv, 
  const double *jacob_vel, const double *poisson_tensor_conf, const double *hamil, 
  const double *fl, const double *fc, const double *fr, double* GKYL_RESTRICT out) ~%{ ~%", funcNm, cdim, vdim, basisFun, polyOrder),

  cid : cidx(cdim),
  vid : vidx(cdim,vdim),
  printf(fh, "  double dx1~a = 2.0/dxv[~a]; ~%", dir-1, cid[dir]),
  for i : 1 thru vdim do printf(fh, "  const double dv1~a = 2.0/dxv[~a]; ~%", i-1, vid[i]),
  printf(fh, "~%"),
  hamil : doExpand1(hamil, bV), /* Hamiltonian a function of the *velocity* phase space. */

  /* Save enough names for 3D */
  poissonTensorConf : [poisson_tensor_conf_0, poisson_tensor_conf_1, poisson_tensor_conf_2],

  /* Surface contribution is defined as integral(phi^- Ghat) over the surface. */
  /* cv = variable in direction of surface update. */
  cv : varsP[dir],
  vv : varsV[dir], 
  surfVars : delete(cv,varsP), /* Surface variables at constant cv surface. */
  surfCVars : delete(cv,varsC), /* Remaining configuration space variables at cv surface. */
  [bSurf,nodes_conf,basisNodalConf,nodes_vel,basisNodalVel,surfNodes] : loadVlasovConfSurfBasis(cdim, basisFun, polyOrder, surfVars, surfCVars, varsV),
  NSurf : length(bSurf), 
  num_nodes_conf : length(nodes_conf), 
  num_nodes_vel : length(nodes_vel), 
  numNodes : length(surfNodes), 

  /* Create expansions of f_left, f_center, and f_right on volume basis. */
  fl_e : doExpand1(fl, bP),
  fc_e : doExpand1(fc, bP),
  fr_e : doExpand1(fr, bP),
  printf(fh, "  double Ghat_r[~a] = {0.0}; ~%", NSurf),
  printf(fh, "  double Ghat_l[~a] = {0.0}; ~%", NSurf),

  /* Compute the charateristic for the NC Poisson Tensor */
  Pi_dH_dv : 0,
  for j : 1 thru vdim do (

    /* Offset the row by NC*(dir - 1)*vdim components */
    printf(fh, "  const double *poisson_tensor_conf_~a = &poisson_tensor_conf[~a]; ~%", j - 1, NC*(dir-1)*vdim + NC*(j-1)),

    poissonTensorConf_local : doExpand1(poissonTensorConf[j],bC),
    v_diff : varsV[j],
    Pi_dH_dv : Pi_dH_dv + poissonTensorConf_local*diff(hamil,v_diff)*dv11[j]
  ),

  printf(fh, "  double Ghat_l_nodal[~a] = {0.0}; ~%", numNodes),
  printf(fh, "  double Ghat_r_nodal[~a] = {0.0}; ~%", numNodes),
  Pi_dH_dv_l_n : float(evAtNodes(subst(cv=-1,Pi_dH_dv),surfNodes,surfVars)), 
  Pi_dH_dv_r_n : float(evAtNodes(subst(cv=1,Pi_dH_dv),surfNodes,surfVars)), 
  f_lr_n : float(evAtNodes(subst(cv=1,fl_e),surfNodes,surfVars)), 
  f_cl_n : float(evAtNodes(subst(cv=-1,fc_e),surfNodes,surfVars)), 
  f_cr_n : float(evAtNodes(subst(cv=1,fc_e),surfNodes,surfVars)), 
  f_rl_n : float(evAtNodes(subst(cv=-1,fr_e),surfNodes,surfVars)), 
  printf(fh, "  double alpha_l_quad = 0.0; ~%"), 
  printf(fh, "  double alpha_r_quad = 0.0; ~%"), 
  printf(fh, "  double alpha_max = 0.0; ~%"), 
  printf(fh, "  double f_lr_quad = 0.0; ~%"), 
  printf(fh, "  double f_cl_quad = 0.0; ~%"), 
  printf(fh, "  double f_cr_quad = 0.0; ~%"), 
  printf(fh, "  double f_rl_quad = 0.0; ~%"), 
  for i : 1 thru numNodes do (
    printf(fh, "  alpha_l_quad = ~a; ~%", Pi_dH_dv_l_n[i]), 
    printf(fh, "  alpha_r_quad = ~a; ~%", Pi_dH_dv_r_n[i]), 
    printf(fh, "  alpha_max = fmax(alpha_max, fmax(fabs(alpha_l_quad), fabs(alpha_r_quad))); ~%"), 
    printf(fh, "  f_lr_quad = ~a; ~%", f_lr_n[i]), 
    printf(fh, "  f_cl_quad = ~a; ~%", f_cl_n[i]), 
    printf(fh, "  f_cr_quad = ~a; ~%", f_cr_n[i]), 
    printf(fh, "  f_rl_quad = ~a; ~%", f_rl_n[i]), 
    printf(fh, "  Ghat_l_nodal[~a] = 0.5*(alpha_l_quad*(f_cl_quad + f_lr_quad) - fabs(alpha_l_quad)*(f_cl_quad - f_lr_quad)); ~%", i-1), 
    printf(fh, "  Ghat_r_nodal[~a] = 0.5*(alpha_r_quad*(f_rl_quad + f_cr_quad) - fabs(alpha_r_quad)*(f_rl_quad - f_cr_quad)); ~%", i-1), 
    printf(fh, "~%")    
  ), 
  /* Construct the nodal expansion from a tensor product of the configuration-space nodal basis 
     and velocity-space nodal basis. We do this separation because Maxima struggles to make
     high dimensional nodal bases and we know the basis we need is a tensor product of two
     lower dimensional basis sets. */
  Ghat_l_nodal_list : makelist(Ghat_l_nodal[i], i, 0, numNodes-1), 
  Ghat_r_nodal_list : makelist(Ghat_r_nodal[i], i, 0, numNodes-1), 
  Ghat_l_nodal_e : 0, 
  Ghat_r_nodal_e : 0, 
  for i : 1 thru num_nodes_conf do (
    for j : 1 thru num_nodes_vel do (
      Ghat_l_nodal_e : Ghat_l_nodal_e + Ghat_l_nodal_list[j + (i-1)*num_nodes_vel]*basisNodalVel[j]*basisNodalConf[i],
      Ghat_r_nodal_e : Ghat_r_nodal_e + Ghat_r_nodal_list[j + (i-1)*num_nodes_vel]*basisNodalVel[j]*basisNodalConf[i]
    )
  ),
  /* Project nodal basis back onto modal basis */
  Ghat_l_c : calcInnerProdList(surfVars, 1, bSurf, Ghat_l_nodal_e),
  Ghat_r_c : calcInnerProdList(surfVars, 1, bSurf, Ghat_r_nodal_e),
  writeCExprs1(Ghat_l, Ghat_l_c), 
  printf(fh, "~%"),
  flush_output(fh),

  writeCExprs1(Ghat_r, Ghat_r_c), 
  printf(fh, "~%"),
  flush_output(fh),

  /* Compute surface contribution integral(phi^- Ghat) on the left and right. */
  Ghat_l_e : doExpand1(Ghat_l, bSurf),
  Ghat_r_e : doExpand1(Ghat_r, bSurf),
  incr_l : calcInnerProdList(surfVars, 1, subst(cv=-1.0, bP), Ghat_l_e),
  incr_r : calcInnerProdList(surfVars, -1, subst(cv=1.0, bP), Ghat_r_e),
  writeCIncrExprsCollect1lhsc(out, dx11[dir]*incr_l + dx11[dir]*incr_r),    
  printf(fh, "~%"),

  /* Estimate stable time step from the maximum quadrature point evaluation. */
  printf(fh, "  return fabs(~a*~a*~a*alpha_max);~%", float(0.5*(2*polyOrder+1)), dv11[dir], dx11[dir]), 
  printf(fh, "~%"),

  printf(fh, "} ~%")
)$  