load("new_vlasov/vlasov-basis");
load("triads/triadVolHelperFuncs")$

load(stringproc)$

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 2$
maxCdim_Ser : 2$
maxVdim_Ser : 3$

/* Tensor product basis. */
minPolyOrder_Tensor : 1$
maxPolyOrder_Tensor : 1$
minCdim_Tensor : 1$
maxCdim_Tensor : 0$
maxVdim_Tensor : 3$

/* ...... END OF USER INPUTS........ */

/* To generate other bases, just add corresponding column to arrays below. */
bName        : ["ser","tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$
maxVdim      : [maxVdim_Ser, maxVdim_Tensor]$

clabels : ["x","y","z"]$
vlabels : ["vx","vy","vz"]$

/* Generate kernels of selected types. */
for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    or v : max(c,minVdim[bInd]) thru maxVdim[bInd] do (
      maxPolyOrderB : maxPolyOrder[bInd],
      if (c=3) then maxPolyOrderB : 1, /* Only generate p=1 kernels for 3x3v */
      if (c+v>5 and maxPolyOrderB > 1) then maxPolyOrderB : 1,
      for polyOrder : minPolyOrder[bInd] thru maxPolyOrderB do (
        [varsC,bC,varsV,bV,varsP,bP] :  loadVlasovBasis(bName[bInd], c, v, polyOrder),
        for component : 1 thru length(bP) do( 
          fname : sconcat("~/max-out/vlasov_nc_hamil_gen_vol_comp", (component - 1),"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
          disp(printf(false,"Creating volume file: ~a",fname)),
          fh : openw(fname),
          funcName : sconcat("vlasov_nc_hamil_gen_vol_comp", (component - 1),"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder),
          calcHamilVolNonCanonicalHelper(fh, funcName, c, v, bName[bInd], polyOrder, component, false),
          close(fh) 
         ),
        fname : sconcat("~/max-out/vlasov_nc_hamil_gen_vol_alpha_", c, "x", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
        disp(printf(false,"Creating volume file: ~a",fname)),
        fh : openw(fname),
        funcName : sconcat("vlasov_nc_hamil_gen_vol_alpha_", c, "x", v, "v_", bName[bInd], "_p", polyOrder),
        calcHamilVolNonCanonicalAlpha(fh, funcName, c, v, bName[bInd], polyOrder, false),
        close(fh) 
      )
    )
  )
)$