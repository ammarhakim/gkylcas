load("new_vlasov/vlasov-basis");
load("triads/triadVolHelperFuncs")$

load(stringproc)$

/* ...... USER INPUTS........ */

/* Serendipity basis. */
/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 3$
minVdim_Ser : 3$    /* see begining of v loop below though. */
maxCdim_Ser : 3$
maxVdim_Ser : 3$

/* Tensor product basis. */
minPolyOrder_Tensor : 1$
maxPolyOrder_Tensor : 0$
minCdim_Tensor : 1$
minVdim_Tensor : 1$    /* see begining of v loop below though. */
maxCdim_Tensor : 3$
maxVdim_Tensor : 3$

/* ...... END OF USER INPUTS........ */

cvars : [x, y, z]$

bName        : ["ser","tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
minVdim      : [minVdim_Ser, minVdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$
maxVdim      : [maxVdim_Ser, maxVdim_Tensor]$

clabels : ["x","y","z"]$
vlabels : ["vx","vy","vz"]$

/* Generate kernels of selected types. */
for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    for v : max(c,minVdim[bInd]) thru maxVdim[bInd] do (
      maxPolyOrderB : maxPolyOrder[bInd],
      if (c=3) then maxPolyOrderB : 1, /* Only generate p=1 kernels for 3x3v */
      if (c+v>5 and maxPolyOrderB > 1) then maxPolyOrderB : 1,
      for polyOrder : minPolyOrder[bInd] thru maxPolyOrderB do (
        if (( (c = 1 or c = 2) and v = 3 and polyOrder = 2) or (c = 3 and v = 3)) then (
          [varsC,bC,varsV,bV,varsP,bP] :  loadVlasovBasis(bName[bInd], c, v, polyOrder),
          for component : 1 thru length(bP) do( 
            fname : sconcat("~/max-out/vlasov_nc_hamil_gen_vol_comp", (component - 1),"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
            disp(printf(false,"Creating volume file: ~a",fname)),
            fh : openw(fname),
            funcName : sconcat("vlasov_nc_hamil_gen_vol_comp", (component - 1),"_", c, "x", v, "v_", bName[bInd], "_p", polyOrder),
            calcHamilVolNonCanonicalHelper(fh, funcName, c, v, bName[bInd], polyOrder, component, false),
            close(fh) 
          ),
          fname : sconcat("~/max-out/vlasov_nc_hamil_gen_vol_alpha_", c, "x", v, "v_", bName[bInd], "_p", polyOrder, ".c"),
          disp(printf(false,"Creating volume file: ~a",fname)),
          fh : openw(fname),
          funcName : sconcat("vlasov_nc_hamil_gen_vol_alpha_", c, "x", v, "v_", bName[bInd], "_p", polyOrder),
          calcHamilVolNonCanonicalAlpha(fh, funcName, c, v, bName[bInd], polyOrder, false),
          close(fh) 
        )
      )
    )
  )
)$