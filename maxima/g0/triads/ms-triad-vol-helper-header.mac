/* Generate the header file for the helper files needs for the Triads. */
load("new_vlasov/vlasov-basis");
/* ...... USER INPUTS........ */

/* Serendipity basis. */
/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
minVdim_Ser : 3$    /* see begining of v loop below though. */
maxCdim_Ser : 3$
maxVdim_Ser : 3$

/* Tensor product basis. */
minPolyOrder_Tensor : 1$
maxPolyOrder_Tensor : 0$
minCdim_Tensor : 1$
minVdim_Tensor : 1$    /* see begining of v loop below though. */
maxCdim_Tensor : 3$
maxVdim_Tensor : 3$

/* ...... END OF USER INPUTS........ */

cvars : [x, y, z]$

bName        : ["ser","tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
minVdim      : [minVdim_Ser, minVdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$
maxVdim      : [maxVdim_Ser, maxVdim_Tensor]$

printPrototype(comp, deco, ci, vi, bStr, pi) := block([si],
  if (ci <= vi and pi < 3) then (
    if (comp = 0) then (
    printf(fh, "~avoid vlasov_nc_hamil_gen_vol_alpha_~ax~av_~a_p~a(const double *w, const double *dxv, const int dir,
     const double *poisson_tensor_conf, const double *hamil, double* GKYL_RESTRICT out); ~%", deco, ci, vi, bStr, pi)
    ),
    printf(fh, "~avoid vlasov_nc_hamil_gen_vol_comp~a_~ax~av_~a_p~a(const double *w, const double *dxv, const int dir,
     const double *alpha, double* GKYL_RESTRICT out); ~%", deco, comp, ci, vi, bStr, pi)
  )
)$

/* ............ Write out the C header file ............ */
fh : openw("~/max-out/gkyl_nc_hamil_vol_comps_kernels.h")$

printf(fh, "#pragma once ~%")$
printf(fh, "#include <math.h> ~%")$
printf(fh, "#include <gkyl_util.h> ~%")$
printf(fh, "EXTERN_C_BEG ~%")$
printf(fh, "~%")$

decorator : "GKYL_CU_DH "$
for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    minVdimB : max(c,minVdim[bInd]), 
    maxVdimB : maxVdim[bInd], 
    for v : minVdimB thru maxVdimB do (

      minPolyOrderB : minPolyOrder[bInd],
      maxPolyOrderB : maxPolyOrder[bInd],
      if (c+v>5 and maxPolyOrderB > 1) then maxPolyOrderB : 1,

      for polyOrder : minPolyOrderB thru maxPolyOrderB do (
        if ((c+v>=4) or (v = 3) ) and (( polyOrder > 1 and c+v < 6) or (c+v = 6))then (
          [varsC,bC,varsV,bV,varsP,bP] :  loadVlasovBasis(bName[bInd], c, v, polyOrder), 
          for component : 0 thru (length(bP)-1) do( 
            printPrototype(component, decorator, c, v, bName[bInd], polyOrder)
          ),
          kill(bP),
          printf(fh, "~%")
        )
      )
    )
  )  
);
printf(fh, "EXTERN_C_END ~%")$
close(fh)$
/* ............ Finished writing out the C header file ............ */
