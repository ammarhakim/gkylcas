kill(all) $
load("recovery") $
load ("modal-basis") $
load(stringproc)$

minPolyOrder : 1 $
maxPolyOrder : 2 $

dirs : [x,y] $
bName : "ser" $

for polyOrder : minPolyOrder thru maxPolyOrder do (
  load(sconcat("basis-precalc/basisSer2x")),
  ba : basisC[polyOrder],
  numBasis : length(ba),

  subLst : append(
    makelist(Dxx[i]=Dxx[i-1], i, 1, numBasis),
    makelist(Dyy[i]=Dyy[i-1], i, 1, numBasis),
    makelist(Dxy[i]=Dxy[i-1], i, 1, numBasis)
  ),
  Dxxe :  doExpand(Dxx, ba),
  Dyye :  doExpand(Dyy, ba),
  Dxye :  doExpand(Dxy, ba),

  /* X-update */
  fname : sconcat("~/max-out/dg_gen_diffusion_vol_2x_", bName, "_p", polyOrder, ".c"),
  print("Generating:", fname),
  
  fh : openw(fname),
  printf(fh, "#include <gkyl_dg_gen_diffusion_kernels.h>~%~%"),
  printf(fh, "GKYL_CU_DH double~%"),
  printf(fh, sconcat("dg_gen_diffusion_vol_2x_", bName, "_p", polyOrder,
      "(const double* w, const double* dx,~%")),
  printf(fh, "  const double* Dij, const double* qIn, double* GKYL_RESTRICT out) ~%"),
  printf(fh, "{~%"),
  printf(fh, "  // w[NDIM]: Cell-center coordinates~%"),
  printf(fh, "  // dxv[NDIM]: Cell spacing~%"),
  printf(fh, "  // Dij: Diffusion coefficient in the center cell~%"),
  printf(fh, "  // q: Input field in the left cell~%"),
  printf(fh, "  // out: Incremented output~%~%"),
  printf(fh, "  const double Jxx = 4/dx[0]/dx[0];~%"),
  printf(fh, "  const double Jxy = 4/dx[0]/dx[1];~%"),
  printf(fh, "  const double Jyy = 4/dx[1]/dx[1];~%~%"),
  
  printf(fh, "  const double* Dxx = &Dij[0];~%"),
  printf(fh, "  const double* Dxy = &Dij[~a];~%", numBasis),
  printf(fh, "  const double* Dyy = &Dij[~a];~%~%", 2*numBasis),
  
  printf(fh, "  return Jxx*Dxx[0] + Jxy*Dxy[0] + Jyy*Dyy[0];~%"),
  printf(fh, "}~%"),
  close(fh)
  )$