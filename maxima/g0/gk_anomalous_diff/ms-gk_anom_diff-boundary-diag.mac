kill(all)$
load("gk_anomalous_diff/gk_anom_diff-boundary-diag.mac")$

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 1$
minCdim_Ser : 2$
maxCdim_Ser : 2$

/* Tensor order basis. No need to generate p=1. */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
maxCdim_Tensor : 0$

/* ...... END OF USER INPUTS........ */

vDims : [[1,2], [2], [2]]$

/* To generate other bases, just add corresponding column to arrays below. */
bName        : ["ser", "tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser     , minCdim_Tensor     ]$
maxCdim      : [maxCdim_Ser     , maxCdim_Tensor     ]$
dirVars      : [[[x,vpar],[x,vpar,mu]],[[null],[x,y,vpar,mu]],[[null],[x,y,z,vpar,mu]]]$ 

for bInd : 1 thru length(bName) do (
  for polyOrder : minPolyOrder[bInd] thru maxPolyOrder[bInd] do (
    for cdim : minCdim[bInd] thru maxCdim[bInd] do (
      for vdim in vDims[cdim] do (
        dir : 1,
        dirVar : dirVars[cdim][vdim][dir], 

        fname : sconcat("~/max-out/gk_anomalous_diffusion_boundary_diag", dirVar,"_", cdim, "x", vdim, "v_", bName[bInd], "_p", polyOrder, ".c"),
        fh : openw(fname),
        printf(fh, "#include <gkyl_gk_anomalous_diffusion_kernels.h>~%~%"),
        print("Generating:", fname),
        for side in bound_side do (
          for bc in bound_diag_bc_type do (
            funcName : sconcat("gk_anomalous_diffusion_boundary_diag", dirVar,"_", side, "_", bc, "_", cdim, "x", vdim, "v_", bName[bInd], "_p", polyOrder),
            gk_anomalous_diff_gen_boundary_diag_ker(fh, funcName, cdim, vdim, bName[bInd], polyOrder, dir, side, bc)
          )
        ),
        close(fh)

      )
    )
  )
)$
