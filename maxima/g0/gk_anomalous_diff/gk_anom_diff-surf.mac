load("modal-basis")$
load("recovery")$
load("out-scripts")$
fpprec : 24$

gk_anomalous_diff_gen_surf_ker(fh, funcNm, cdim, vdim, basisType, polyOrder, dir) := block(
  [dir,bType,varsC,basisC,vars,basis,vSub,numBasis,numBasisC,surfVar,surfIntVars,nul_c,nuc_c,nur_c,nul_e,nuc_e,nur_e,
   Jfl_c,Jfc_c,Jfr_c,Jfl_e,Jfc_e,Jfr_e,jacobgeo_inv_e,fl_c,fc_c,fr_c,fl_e,fc_e,fr_e,
   fRecl_e,nuAv_l,surf_incr_l_c,fRecr_e,nuAv_r,surf_incr_r_c,surf_l_out,surf_r_out],

  dir : 1,
  dim : cdim+vdim,
  
  bType : basisType,
  if polyOrder=1 then bType : "gkhyb",  /* Force p=1 to mean hybrid. */

  [varsC, basisC, vars, basis, vSub] : loadGkBasis(basisType, cdim, vdim, polyOrder),
  numBasis : length(basis),
  numBasisC : length(basisC),

  surfVar  : vars[dir],
  surfIntVars : delete(surfVar,vars),
  
  printf(fh, "GKYL_CU_DH double ~a(const double *wc, const double *dxc, const double *nul, const double *nuc, const double *nur, const double *jacobgeo_inv, const double *Jfl, const double *Jfc, const double *Jfr, double* GKYL_RESTRICT out) ~%", funcNm),
  printf(fh, "{~%"),
  printf(fh, "  // w[NDIM]: Cell-center coordinate.~%"),
  printf(fh, "  // dxv[NDIM]: Cell length.~%"),
  printf(fh, "  // nul: Diffusivity in the left cell.~%"),
  printf(fh, "  // nuc: Diffusivity in the center cell.~%"),
  printf(fh, "  // nur: Diffusivity in the right cell.~%"),
  printf(fh, "  // jacobgeo_inv: one divided by the configuration space Jacobian.~%"),
  printf(fh, "  // Jfl: Input field times conf-space Jacobian in the left cell.~%"),
  printf(fh, "  // Jfc: Input field times conf-space Jacobian in the center cell.~%"),
  printf(fh, "  // Jfr: Input field times conf-space Jacobian in the right cell.~%"),
  printf(fh, "  // out: Incremented output.~%~%"),

  printf(fh, "  const double rdx2sq = pow(2./dxc[~a],2.0);~%", dir-1),
  printf(fh, "~%"),

  /* Here we assume diffusivity only depends on position space,
     but it could be easily changed to vary with velocity space too. */
  nul_c : makelist(nul[i-1],i,1,numBasisC),
  nuc_c : makelist(nuc[i-1],i,1,numBasisC),
  nur_c : makelist(nur[i-1],i,1,numBasisC),
  nul_e : doExpand(nul_c, basisC),
  nuc_e : doExpand(nuc_c, basisC),
  nur_e : doExpand(nur_c, basisC),
  
  Jfl_c : makelist(Jfl[i-1], i, 1, numBasis),
  Jfc_c : makelist(Jfc[i-1], i, 1, numBasis),
  Jfr_c : makelist(Jfr[i-1], i, 1, numBasis),
  Jfl_e : doExpand(Jfl_c, basis),
  Jfc_e : doExpand(Jfc_c, basis),
  Jfr_e : doExpand(Jfr_c, basis),

  /* Divide jacobGeo*f by jacobGeo. */
  jacobgeo_inv_e : doExpand1(jacobgeo_inv, basisC),
  
  fl_c : calcInnerProdList(vars, jacobgeo_inv_e, basis, Jfl_e),
  fc_c : calcInnerProdList(vars, jacobgeo_inv_e, basis, Jfc_e),
  fr_c : calcInnerProdList(vars, jacobgeo_inv_e, basis, Jfr_e),

  /* Divide jacobGeo*f by jacobGeo. */
  printf(fh, "  double fl[~a];~%", numBasis),
  writeCExprsNoExpand1(fl, fl_c),
  printf(fh, "~%"),
  flush_output(fh),
  fl_c : makelist(fl[i-1], i, 1, numBasis),
  fl_e : doExpand(fl_c, basis),

  printf(fh, "  double fc[~a];~%", numBasis),
  writeCExprsNoExpand1(fc, fc_c),
  printf(fh, "~%"),
  flush_output(fh),
  fc_c : makelist(fc[i-1], i, 1, numBasis),
  fc_e : doExpand(fc_c, basis),

  printf(fh, "  double fr[~a];~%", numBasis),
  writeCExprsNoExpand1(fr, fr_c),
  printf(fh, "~%"),
  flush_output(fh),
  fr_c : makelist(fr[i-1], i, 1, numBasis),
  fr_e : doExpand(fr_c, basis),

  /* Contribution from lower surface. */
  fRecl_e : calcRecov2CellGen(bType, surfVar, vars, polyOrder, dg(fl_c), dg(fc_c)),
  nuAv_l : (subst(surfVar=1,nul_e) + subst(surfVar=-1,nuc_e))/2,
  surf_incr_l_c : calcInnerProdList(surfIntVars, -1, subst(surfVar=-1,basis), nuAv_l*subst(surfVar=0,diff(fRecl_e,surfVar))),

  /* Contribution from upper surface. */
  fRecr_e : calcRecov2CellGen(bType, surfVar, vars, polyOrder, dg(fc_c), dg(fr_c)),
  nuAv_r : (subst(surfVar=1,nuc_e) + subst(surfVar=-1,nur_e))/2,
  surf_incr_r_c : calcInnerProdList(surfIntVars, 1, subst(surfVar=1,basis), nuAv_r*subst(surfVar=0,diff(fRecr_e,surfVar))),
  
  surf_l_out : makelist(surf_incr_l_c[i],i,1,numBasis),
  surf_r_out : makelist(surf_incr_r_c[i],i,1,numBasis),
  writeCIncrExprsNoExpand1(out, rdx2sq*(surf_l_out + surf_r_out)),
  printf(fh, "~%"),
  
  printf(fh, "  return 0.;~%"), /* Return CFL frequency in volume kernel. */
  printf(fh, "}~%~%")
  
)$
