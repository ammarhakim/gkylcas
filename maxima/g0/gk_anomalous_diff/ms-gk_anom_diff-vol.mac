kill(all)$
load("gk_anomalous_diff/gk_anom_diff-vol.mac")$

/* Generate kernels for the anomalous diffusion volume term. */

/* ...... USER INPUTS........ */

/* Serendipity basis. */
minPolyOrder_Ser : 1$
maxPolyOrder_Ser : 1$
minCdim_Ser : 2$
maxCdim_Ser : 2$

/* Tensor order basis. No need to generate p=1. */
minPolyOrder_Tensor : 2$
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
maxCdim_Tensor : 0$

/* ...... END OF USER INPUTS........ */

vDims : [[1,2], [2], [2]]$

/* To generate other bases, just add corresponding column to arrays below. */
bName        : ["ser", "tensor"]$
minPolyOrder : [minPolyOrder_Ser, minPolyOrder_Tensor]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Tensor]$

for bInd : 1 thru length(bName) do (
  for cdim : minCdim[bInd] thru maxCdim[bInd] do (
    for vdim in vDims[cdim] do (
      minPolyOrderB : minPolyOrder[bInd],
      maxPolyOrderB : maxPolyOrder[bInd],

      for polyOrder : minPolyOrderB thru maxPolyOrderB do (
        disp(printf(false,sconcat("Creating volume diffusion",bName[bInd]," ~ax~avp~a"),cdim,vdim,polyOrder)),
        fname : sconcat("~/max-out/gk_anomalous_diffusion_vol_", cdim, "x", cdim, "v_", bName[bInd], "_p", polyOrder, ".c"),
        fh : openw(fname),
        printf(fh, "#include <gkyl_gk_anomalous_diffusion_kernels.h>~%~%"),
        funcName : sconcat("gk_anomalous_diffusion_vol_", cdim, "x", vdim, "v_", bName[bInd], "_p", polyOrder),
        gk_anomalous_diff_gen_boundary_vol_ker(fh, funcName, cdim, vdim, bName[bInd], polyOrder),
        close(fh)
      )
    )
  )
);
