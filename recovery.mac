load("modal-basis") $

load("recovery-calc/recovery-1cell") $
load("recovery-calc/recovery-2cell") $
load("recovery-calc/recovery-3cell") $
load("recovery-calc/recovery-face") $

/* -- Helper Functions -------------------------------------------- */

etaDir(dir, xc, dx, fn) := block(
  /* A helper function to shift basis functions in only one direction.
     Example: etaDir(y, dy/2, dy, fn) */
  return(subst(td=dir, subst(dir=2*(td-xc)/dx, fn)))
) $

eta(xc, dx, fn) := block(
  /* A helper function to shift basis functions in all directions
     together
     Example: eta([x, y], [dx/2, -dy/2], [dx, dy], fn) */
  [out, tx, ty, tz],
  out : subst(tx=x, subst(x=2*(tx-xc[1])/dx[1], fn)),
  if length(dx) > 1 then out : subst(ty=y, subst(y=2*(ty-xc[2])/dx[2], out)),
  if length(dx) > 2 then out : subst(tz=z, subst(z=2*(tz-xc[3])/dx[3], out)),
  return(out)
) $

/* A simple helper function to convert x, y, or z to indices 1, 2, or 3 respectively */
getDirIdx(dir, numDims) := block([],
  if numDims = 1 then return(1),
  if dir = x then return(1),
  if dir = y then return(2),
  if dir = z then return(3)
) $

getBasis(basisType, varsIn, polyOrder) := block(
  [varsC, basisC, varsP, basisP, cDim, vDim, confVars, velVars],
  /* Determine dimensionality from a list of variables. */
  confVars : [x,y,z],
  velVars  : [vx,vy,vz],
  cDim     : 0,
  vDim     : 0,
  for v in varsIn do (
    if (length(sublist_indices(confVars,lambda([a],a=v))) > 0) then (
      cDim : cDim+1
    ) else if (length(sublist_indices(velVars,lambda([a],a=v))) > 0) then (
      vDim : vDim+1
    )
  ),
  if (vDim = 0) then (
    load(sconcat("basis-precalc/basis", basisType, cDim, "x"))
  ) else (
    load(sconcat("basis-precalc/basis", basisType, cDim, "x", vDim, "v"))
  ),
  if polyOrder > 0 then (
    if (vDim = 0) then (
      return(basisC[polyOrder])
    ) else (
      return(basisP[polyOrder])
    )
  ) else (
    if (vDim = 0) then (
      return([basisC[1][1]])
    ) else (
      return([basisP[1][1]])
    )
  )
) $


/* -- Legacy Wrappers --------------------------------------------- */
