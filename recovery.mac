load("modal-basis") $

load("recovery-calc/recovery-1cell") $
load("recovery-calc/recovery-2cell") $
load("recovery-calc/recovery-3cell") $
load("recovery-calc/recovery-face") $

/* -- Helper Functions -------------------------------------------- */

etaDir(dir, xc, dx, fn) := block(
  /* A helper function to shift basis functions in only one direction.
     Example: etaDir(y, dy/2, dy, fn) */
  return(subst(td=dir, subst(dir=2*(td-xc)/dx, fn)))
) $

eta(xc, dx, fn) := block(
  /* A helper function to shift basis functions in all directions
     together
     Example: eta([x, y], [dx/2, -dy/2], [dx, dy], fn) */
  [out, tx, ty, tz],
  out : subst(tx=x, subst(x=2*(tx-xc[1])/dx[1], fn)),
  if length(dx) > 1 then out : subst(ty=y, subst(y=2*(ty-xc[2])/dx[2], out)),
  if length(dx) > 2 then out : subst(tz=z, subst(z=2*(tz-xc[3])/dx[3], out)),
  return(out)
) $

getBasis(basisType, numDims, polyOrder) := block(
  [basis, varsC, basisC, varsP, basisP, basisConstant],
  if (numDims < 4) then (
    load(sconcat("basis-precalc/basis", basisType, numDims, "x"))
  ) else (
    load(sconcat("basis-precalc/basis", basisType, numDims-3, "x", 3, "v"))
  ),
  if polyOrder > 0 then (
    basis : if (numDims<4) then basisC[polyOrder] else basisP[polyOrder]
  ) else (
    basis : basisConstant
  ),
  return(basis)
  ) $

getDirs(numDims, polyOrder) := block(
  [dirs, varsC, basisC, varsP, basisP, basisConstant],
  if (numDims < 4) then (
    load(sconcat("basis-precalc/basisSer", numDims, "x"))
  ) else (
    load(sconcat("basis-precalc/basisSer", numDims-3, "x", 3, "v"))
  ),
  if polyOrder > 0 then (
    dirs : if (numDims<4) then varsC else varsP
  ) else (
    dirs : 1
  ),
  return(dirs)
) $