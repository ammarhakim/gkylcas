/* This script generates the kernels for the surface term of the
   (q/m)*(-grad(phi) + E + v x B) . del_v(f) advection in velocity
   space for the Vlasov equation. */

load("modal-basis");
load("out-scripts");
load(stringproc)$
load("scifac")$
fpprec : 24$

varsCall : [x, y, z]$
varsV    : [vx, vy, vz]$
cvars    : [X, Y, Z]$
vvars    : [VX, VY, VZ]$

dvdx  : [dv0dx0, dv1dx1, dv2dx2]$
wdx   : [w0dx0, w1dx1, w2dx2]$
dv11l : [dv10l, dv11l, dv12l]$
dv11r : [dv10r, dv11r, dv12r]$

Efld  : [E0, E1, E2]$
Bfld  : [B0, B1, B2]$

slcn(lst, n) := makelist(lst[i], i, 1, n)$

cidx(cdim)      := makelist(i,i,0,cdim-1)$
vidx(cdim,vdim) := makelist(i,i,cdim,cdim+vdim-1)$

/* Helper functions for expanding in basis functions a quantity we know should be sparse  */
/* For example, alpha, the phase space flow only depends on a few phase space coordinates */
doMakeExprLst(vals, S)  := makelist(if vals[i] # 0 then S[i-1] else 0, i, 1, length(vals))$
doExpandLst(lst, basis) := sum(lst[i]*basis[i], i, 1, length(basis))$

calcVlasovPhiUpdateInDir(dir, fh, funcNm, cdim, vdim, basisFun, p, hasB) := block([bP,bC,varsC,numC,cflPt,cid,vid,vv,surfVars,bSurf,fl_e,fr_e],
  kill(varsC, varsP, basisC, basisP),
  load(sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v")),

  bP    : basisP[p],
  bC    : basisC[p],
  varsC : slcn(varsP, cdim),
  numC  : length(bC),

  /* Specify a point to evaluate alpha at for use global Lax fluxes. */
  cflPt : makelist(varsP[d]=0, d, 1, length(varsP)),

  printf(fh, "__host__ __device__ double ~a_~a_P~a(const double *wl, const double *wr, const double *dxvl, const double *dxvr, const double amax, const double *phi, const double *EM, const double *fl, const double *fr, double *outl, double *outr) ~%{ ~%", funcNm, vvars[dir], p),
  printf(fh, "  // w:         Cell-center coordinates.~%"),
  printf(fh, "  // dxv[NDIM]: Cell spacing.~%"),
  printf(fh, "  // amax:      amax in global lax flux.~%"),
  printf(fh, "  // phi:       electrostatic potential.~%"),
  printf(fh, "  // EM:        external EM field vectors.~%"),
  printf(fh, "  // fl/fr:     Distribution function in left/right cells ~%"),
  printf(fh, "  // outl/outr: output distribution function in left/right cells ~%"),
  printf(fh, "  // returns abs(amid) for use in determining amax in cfl and global lax flux ~%"),

  cid : cidx(cdim),
  vid : vidx(cdim,vdim),

  printf(fh, "  double dv1~al = 2./dxvl[~a]; ~%", dir-1, vid[dir]),
  printf(fh, "  double dv1~ar = 2./dxvr[~a]; ~%", dir-1, vid[dir]),
  for d : 1 thru vdim do (
    printf(fh, "  const double dv~a = dxvr[~a], wv~a = wr[~a]; ~%", d, vid[d], d, vid[d])
  ),
  printf(fh, "~%"),

  printf(fh, "  const double *E~a = &EM[~a]; ~%", dir-1, numC*(dir-1)),
  if (hasB) then (
    /* If vdim = 1, then no magnetic field. */
    if vdim > 1 then (
      if vdim = 2 then (
        /* In 2 velocity dimensions, only Bz. */
        printf(fh, "  const double *B~a = &EM[~a]; ~%", 2, numC*2+3*numC)
      ),
      if vdim = 3 then (
        for d : 1 thru 3 do (
          printf(fh, "  const double *B~a = &EM[~a]; ~%", d-1, numC*(d-1)+3*numC)
        ) 
      )
    )
  ),
  printf(fh, "~%"),

  /* Surface contribution is defined as integral(phi^- Ghat) over the surface. */

  /* vv = variable in direction of surface update. */
  vv : varsV[dir],

  /* Surface variables to integrate over. */
  surfVars : delete(vv,varsP),

  /* Generate surface basis. This produces the ndim-1 orthogonal basis with no vv dependence. */
  bSurf : sqrt(2)*delete(0,fullratsimp(innerProd(varsP,1,bP,subst([vv^2=var2,var2=1/3,vv=0],bP)))*bP),

  /* Create expansions of f_left and f_right on volume basis. */
  fl_e : doExpand1(fl, bP),
  fr_e : doExpand1(fr, bP),

  /* Ghat involves both the average and jump of the distribution function
     across the surface boundary, favg, and fjump. */
  printf(fh, "  double Ghat[~a]; ~%", length(bSurf)),
  printf(fh, "  double favg[~a]; ~%", length(bSurf)),
  /* alpha is the phase space flux at the surface. */
  printf(fh, "  double alpha[~a]; ~%", length(bSurf)),
  printf(fh, "~%"),

  /* Print C exprs for average of distribution across surface boundary,
     favg = f_right(vv=-1) + f_left(vv=1), projected onto surface basis. */
  favg_c : gcfac(fullratsimp(innerProd(surfVars, 1, bSurf, subst(vv=-1, fr_e)+subst(vv=1, fl_e)))),
  writeCExprs1(favg, favg_c),
  printf(fh, "~%"),
  favgNoZero_c : doMakeExprLst(favg_c, favg),
  favg_e : doExpandLst(favgNoZero_c, bSurf),
  flush_output(fh),

  /* Project fjump = fr(sv=-1) - fl(sv=1) onto surface basis.
     Don't need to print it out because it is just part of Ghat (see note below),
     unlike favg which appears in Ghat in an inner product with alpha. */
  fjump_c : gcfac(fullratsimp(innerProd(surfVars, 1, bSurf, subst(vv=-1, fr_e)-subst(vv=1, fl_e)))),

  /* Calculate the acceleration. */
  phi_e : doExpand1(phi,bC),
  if (dir = 1) then (
    acc_e : -diff(phi_e,varsCall[1]) + doExpand1(Efld[1],bC),
    if (hasB) then ( acc_e : acc_e + vvy*doExpand1(Bfld[3],bC) - vvz*doExpand1(Bfld[2],bC) )
  ) elseif (dir = 2) then (
    acc_e : -diff(phi_e,varsCall[2]) + doExpand1(Efld[2],bC),
    if (hasB) then ( acc_e : acc_e + vvz*doExpand1(Bfld[1],bC) - vvx*doExpand1(Bfld[3],bC) )
  ) else (
    acc_e : -diff(phi_e,varsCall[3]) + doExpand1(Efld[3],bC),
    if (hasB) then ( acc_e : acc_e + vvx*doExpand1(Bfld[2],bC) - vvy*doExpand1(Bfld[1],bC) )
  ),
  vzero(vdim) := if vdim = 1 then [vvy=0, vvz=0] elseif vdim = 2 then [vvz=0] else [],
  vTransSubs  : [vvx=vx*dv1/2+wv1, vvy=vy*dv2/2+wv2, vvz=vz*dv3/2+wv3],
  acc_e       : subst(append(vzero(vdim),vTransSubs), acc_e),

  /* alpha_v = (q/m)*(-grad(phi) + E + v x B) dot grad_v(f). */
  /* Project alpha_v onto surface basis, and print resulting coefficients. */
  alphaV_c : calcInnerProdList(surfVars, 1, bSurf, subst(vv=1, acc_e)),
  writeCExprsCollect1lhsc(alpha, radcan(alphaV_c)),
  printf(fh, "~%"),
  flush_output(fh),
  /* Zero out components of alpha which are empty. */
  alphaNoZero : doMakeExprLst(alphaV_c, alpha),
  alpha_e     : doExpandLst(alphaNoZero, bSurf),

  /* Evaluate acceleration at cflPt (in this case the midpoint). */
  amid : float(expand(fullratsimp(subst(cflPt,alpha_e)))),
  printf(fh, "  const double amid = ~a; ~%", amid),
  printf(fh, "~%"),
  flush_output(fh),

  /* Evaluate surface projection of Ghat = (alpha*favg - amax*fjump)/2. */
  alphafavg_c : calcInnerProdList(surfVars, favg_e, bSurf, alpha_e),
  /* Here we see why we didn't need to print out fjump_c. it appears directly in Ghat_c. */
  Ghat_c : 0.5*alphafavg_c - 0.5*amax*fjump_c,
  writeCExprsNoExpand1(Ghat, Ghat_c),
  printf(fh, "~%"),
  flush_output(fh),
  /* Zero out components of Ghat which are empty. */
  GhatNoZero : doMakeExprLst(Ghat_c, Ghat),
  Ghat_e     : doExpandLst(GhatNoZero, bSurf),

  /* Compute surface contribution integral(phi^- Ghat) on the right. */
  incr_s : calcInnerProdList(surfVars, 1, subst(vv=-1.0, bP), Ghat_e),
  writeCIncrExprs1(outr, dv11r[dir]*incr_s),  
  printf(fh, "~%"),

  /* Compute surface contribution integral(phi^- Ghat) on the left. */
  incr_l : calcInnerProdList(surfVars, -1, subst(vv=1.0, bP), Ghat_e),

  /* Left contribution is the same as the right contribution up to sign changes.
     Can exploit this fact that reduce the number of multiplications. */
  signs    : fullratsimp(incr_l/incr_s),
  incr_new : makelist(signs[i]*incr_s[i], i, 1, length(bP)),
  writeCIncrExprs1(outl, dv11l[dir]*incr_new),

  printf(fh, "~%"),
  /* Return a local estimate of amax. */
  printf(fh, "  return std::abs(amid); ~%"),
  printf(fh, "} ~%"),
  printf(fh, "~%")
);

calcVlasovPhiSurfUpdater(fh, funcNm, cdim, vdim, basisFun, p, hasB) := block([dir],
  for dir : 1 thru vdim do ( calcVlasovPhiUpdateInDir(dir, fh, funcNm, cdim, vdim, basisFun, p, hasB) )
)$
