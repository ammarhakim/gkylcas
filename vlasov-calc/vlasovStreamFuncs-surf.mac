/* Compute the surf term for ONLY the streaming term (v . grad(f))
   in the Vlasov-Poisson and Vlasov-Maxwell equations. */
load("modal-basis")$
load("out-scripts")$
load(stringproc)$
fpprec : 24$

varsV : [vx, vy, vz]$
cvars : [X, Y, Z]$
vvars : [VX, VY, VZ]$

cidx(cdim)      := makelist(i,i,0,cdim-1)$
vidx(cdim,vdim) := makelist(i,i,cdim,cdim+vdim-1)$

calcStreamUpdateInDir(dir, fh, funcNm, cdim, vdim, basisFun, p) := block([bP,numBasisP,cid,vid,wvl,wvr,dvl,dvr,cv,vv,surfVars,fL_e,fR_e,fhat,surfTerm,incr_r,clst,incr_s],

  kill(varsC, varsP, basisC, basisP),

  load(sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v")),

  bP        : basisP[p],
  numBasisP : length(bP),

  printf(fh, "__host__ __device__ void ~a_~a_P~a(const double *wl, const double *wr, const double *dxvl, const double *dxvr, const double *fl, const double *fr, double *outl, double *outr) ~%{ ~%", funcNm, cvars[dir], p),
  printf(fh, "  // w[NDIM]:   Cell-center coordinates.~%"),
  printf(fh, "  // dxv[NDIM]: Cell spacing.~%"),
  printf(fh, "  // fl/fr:     Distribution function in left/right cells.~%"),
  printf(fh, "  // outl/outr: Incremented distribution function in left/right cells.~%"),

  cid : cidx(cdim),
  vid : vidx(cdim,vdim),

  /* Cell centers and lengths along velocity space. */
  wvl : wl[vid[dir]],
  wvr : wr[vid[dir]],
  dvl : dxvl[vid[dir]],
  dvr : dxvr[vid[dir]],

  printf(fh, "  double rdxl2 = 2.0/dxvl[~a]; ~%", cid[dir]),
  printf(fh, "  double rdxr2 = 2.0/dxvr[~a]; ~%~%", cid[dir]),
  printf(fh, "  double incr[~a]; ~%~%", numBasisP),

  cv : varsP[dir],
  vv : varsV[dir],
  surfVars : delete(cv,varsP),
  
  fL_e : doExpand1(fl, bP),
  fR_e : doExpand1(fr, bP),
  
  printf(fh, "  if (~a>0) { ~%",wvr),
  
  fhat     : subst(cv=1, fL_e),
  surfTerm : calcInnerProdList(surfVars, wvl+(dvl/2)*vv, subst(cv=-1, bP), fhat),

  incr_r : surfTerm,
  clst   : [wvl, dvl],
  writeCExprsCollect1(incr, incr_r, clst),
  printf(fh, "~%"),

  incr_s : makelist(incr[i-1], i, 1, numBasisP),
  writeCIncrExprs1(outr, incr_s*rdxr2),
  printf(fh, "~%"),
  
  surfTerm : calcInnerProdList(surfVars, wvl+(dvl/2)*vv, subst(cv=1, bP), fhat),

  incr_l : -surfTerm,
  signs  : fullratsimp(incr_l/incr_r),
  incr_s : makelist(signs[i]*incr[i-1], i, 1, numBasisP),
  writeCIncrExprs1(outl, incr_s*rdxl2),

  printf(fh, "  } else { ~%"),
  
  fhat     : subst(cv=-1, fR_e),
  surfTerm : calcInnerProdList(surfVars, wvr+(dvr/2)*vv, subst(cv=-1, bP), fhat),

  incr_r : surfTerm,
  clst   : [wvr, dvr],
  writeCExprsCollect1(incr, incr_r, clst),
  printf(fh, "~%"),

  incr_s : makelist(incr[i-1], i, 1, numBasisP),
  writeCIncrExprs1(outr, incr_s*rdxr2),
  printf(fh, "~%"),

  surfTerm : calcInnerProdList(surfVars, wvr+(dvr/2)*vv, subst(cv=1, bP), fhat),

  incr_l : -surfTerm,
  signs  : fullratsimp(incr_l/incr_r),
  incr_s : makelist(signs[i]*incr[i-1], i, 1, numBasisP),
  writeCIncrExprs1(outl, incr_s*rdxl2),
  
  printf(fh, "  } ~%"),
  printf(fh, "} ~%")
);

calcVlasovStreamSurfUpdater(fh, funcNm, cdim, vdim, basisFun, p) := block([dir],
  printf(fh, "#include <VlasovModDecl.h> ~%"),
  for dir : 1 thru cdim do ( calcStreamUpdateInDir(dir, fh, funcNm, cdim, vdim, basisFun, p) )
)$

