load("modal-basis");
load("out-scripts");
load(stringproc)$
fpprec : 24$

let(z1^2, z1_sq)$
let(z2^2, z2_sq)$
let(z3^2, z3_sq)$
let(z4^2, z4_sq)$
let(z5^2, z5_sq)$

let(z1^3, z1_cu)$
let(z2^3, z2_cu)$
let(z3^3, z3_cu)$
let(z4^3, z4_cu)$

maxPolyOrder : 3$
minDim : 1$
maxDim : 6$

fh : openw("~/max-out/ModalBasisSer.c");

varDim : [z1, z2, z3, z4, z5, z6]$
var : []$

for d : minDim thru maxDim do (
   maxPolyOrderB : maxPolyOrder,
   if (d>4 and maxPolyOrder > 2) then maxPolyOrderB : 2,
   if (d=6 and maxPolyOrder > 1) then maxPolyOrderB : 1,

   /* append to the list var based on the dimensionality */
   /* note that append expects both inputs to be lists */
   var : append(var, [varDim[d]]),
   for p : 0 thru maxPolyOrderB do (
      printf(fh, "static inline void ~%"),
      printf(fh, "eval_~ad_p~a(const double *z, double *b) { ~%", d, p),
      for dim : minDim thru d do (
         printf(fh, "   const double z~a = z[~a];", dim, dim-1),
         if p = 2 then (
            printf(fh, " const double z~a_sq = z~a*z~a;", dim, dim, dim)
         ),
         if p = 3 then (
            printf(fh, " const double z~a_cu = z~a*z~a*z~a;", dim, dim, dim, dim)
         ),
      printf(fh, "~%")
      ),
      printf(fh, "~%"),
      basis : gsOrthoNorm(var, makeSerendipBasis(var, p)),
      /* simplify expressions in basis to eliminate ^, which C does not have */
      basis : map(letsimp, basis),

      writeCBasis(basis),
      printf(fh, "} ~%")
   )
);

close(fh);
