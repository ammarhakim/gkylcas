/* Generate kernels for FEM inter-grid operators: prolongation and restiction */

load("modal-basis");
load("out-scripts");
load("nodalOperations/nodalFunctions");
load("mgPoisson-calc/MGpoissonUtil");
load("mgPoisson-calc/FEMnodalFuncs");

fpprec : 24$

solveProlongationWeqEq(varsIn,nodBasisIn,cellToIdxStoredCIn,cellToCoefCIn,nodesExFIn,cellToIdxStoredFIn,cellToCoefFIn) := block([vars,bN,numNodes,numBasis,dim,cellToIdxStoredC,cellToCoefC,nodesExF,cellToIdxStoredF,cellToCoefF,i,fldF_cEx,lhsF,lhsC,dxF,dxC,iF,iC,fldF_e,lhsFcont,rhsCcont,idx,k,cellCoordC,cellCoordF,fldC_e,wF,wC,varTrans,subList],

  vars : varsIn,
  bN   : nodBasisIn,

  cellToIdxStoredC : cellToIdxStoredCIn,
  cellToCoefC      : cellToCoefCIn,
  nodesExF         : nodesExFIn,
  cellToIdxStoredF : cellToIdxStoredFIn,
  cellToCoefF      : cellToCoefFIn,

  dim      : length(vars),
  numBasis : length(bN),
  numNodes : numBasis,


  /* Count the number of unknowns. */
  fldF_cEx : [],
  for i : 1 thru length(cellToCoefF) do ( fldF_cEx : unique(append(fldF_cEx,cellToCoefF[i][2]) ) ),
  numUnknown : length(fldF_cEx),

  /* Lists to store the weak equality system of equations. Each fine-grid
     node has a 2-element list, the first element are the coordinates of
     that node. */
  lhsF : makelist([makelist(9,d,1,dim),0],i,1,numUnknown),
  rhsC : makelist([makelist(9,d,1,dim),0],i,1,numUnknown),

  /* Fine- and coarse-grid cell lengths. */
  dxF : makelist(1,d,1,dim), 
  dxC : makelist(2,d,1,dim), 

  /* Loop through the fine-grid cells. For each of these project the
     corresponding coarse-grid cell on to it. Each projection contributes
     to the weak equality system of equations. */
  for iF : 1 thru length(cellToCoefF) do (

    cellCoordF   : copylist(cellToCoefF[iF][1]),
    currNodesExF : assoc(cellCoordF,nodesExF),

    /* Add contribution from projecting the fine-grid function onto its
       own basis to the left side of the weak system of equations. */
    fldF_e   : doExpand(makelist(eval_string(sconcat("fldF",cellToCoefF[iF][2][k])),k,1,numBasis),bN),
    lhsFcont : calcInnerProdList(vars,1,bN,fldF_e), 
    for k : 1 thru numNodes do (
       idx : sublist_indices(lhsF, lambda([x],x[1]=currNodesExF[k])),
       if length(idx)>0 then (
         idx : idx[1]
       ) else (
         idx          : sublist_indices(lhsF, lambda([x],x[1]=makelist(9,d,1,dim)))[1],
         lhsF[idx][1] : currNodesExF[k]
       ),
       lhsF[idx][2] : lhsF[idx][2]+lhsFcont[k]
    ),


    /* Project the coarse-grid field in the corresponding cell onto this
       fine-grid cell, and add this contribution to the right-side. */
    cellCoordC : makelist(signum(cellCoordF[d])*floor(abs(cellCoordF[d]/2)),d,1,dim),
    coefsC     : assoc(cellCoordC,cellToCoefC),
    fldC_e     : doExpand(makelist(eval_string(sconcat("fldC",coefsC[k])),k,1,numBasis),bN),

    /* Fine- and coarse-grid cell centers. */
    wF         : cellCoordF,
    wC         : makelist(2*cellCoordC[d]-dxF[d]/2,d,1,dim),

    /* Substitute coarse-grid logical variable to do integration in fine-grid logical variable. */
    varTrans   : fullratsimp(makelist((2/dxC[d])*(wF[d]-wC[d]+(dxF[d]/2)*vars[d]),d,1,dim)),
    subList    : makelist(vars[d]=varTrans[d],d,1,dim),
    rhsCcont   : calcInnerProdList(vars,1,bN,subst(subList,fldC_e)),

    for k : 1 thru numNodes do (
       idx : sublist_indices(rhsC, lambda([x],x[1]=currNodesExF[k])),
       if length(idx)>0 then (
         idx : idx[1]
       ) else (
         idx          : sublist_indices(rhsC, lambda([x],x[1]=makelist(9,d,1,dim)))[1],
         rhsC[idx][1] : currNodesExF[k]
       ),
       rhsC[idx][2] : rhsC[idx][2]+rhsCcont[k]
    )

  ),

  fldF_cEx : makelist(eval_string(sconcat("fldF",fldF_cEx[i])),i,1,numUnknown),
  weqSolv  : linsolve(makelist(lhsF[i][2]=rhsC[i][2],i,1,numUnknown),fldF_cEx),

  return(weqSolv)
)$

calcFEMprolongationOp(fh, funcNm, dim, basisFun, pMax) := block([beta,coordVarS,stencilLoc,bcTypes,bcStrs,bcKey,sI,bcCombos,stencilSizeF,bcI,d,currBC,bN,numBasis,nodes,numNodes,weqMemSizeC,nodesExC,storedNodesExC,cellToIdxStoredC,dataStrsC,weqSizeC,cellToCoefC,weqMemSizeF,nodesExF,storedNodesExF,cellToIdxStoredF,dataStrsF,weqSizeF,cellToCoefF,weqSolv,weqSolvLHS,weqSolvRHS],
  /* Prolongation operator transferring a coarse-grid field to the
     fine grid. Currently limited to coarsening 2^a grids by a
     factor of 2 in both directions. */

  kill(varsC, varsP, basisC, basisP),

  load(sconcat("basis-precalc/basis", basisFun, dim, "x")),

  beta : 2,   /* Number of fine cells span by a single coarse cell in one direction. */ 

  /* Associative list between stencil location (-1,0,1) and variable
     strings used in kernel names. */
  coordVarS : getCoordVarS(varsC),

  /* List of stencil locations. Each entry is a dim-dimensional list
     with -1 meaning it is at a lower boundary, 1 upper boundary, or
     0 away from boundaries in that direction. */ 
  stencilLoc : getStencilCoords(dim),

  /* Types of boundary conditions for which to generate kernels.
       =0 periodic
       =1 Dirichlet
       =2 Neumann
       =3 Robin
     For periodic we'll assume ghost cells are filled accordingly
     and use an interior stencil. */
  bcTypes  : [0, 1, 2, 3],
  bcStrs   : ["", "Dirichlet", "Neumann", "Robin"],
  bcKey    : makelist([bcTypes[i],bcStrs[i]],i,1,length(bcTypes)),

  for sI : 1 thru length(stencilLoc) do (

    /* Obtain the different BC combinations for this stencil.
       Will generate a separate kernel for each. */
    bcCombos : getBCcombos(stencilLoc[sI],bcTypes),

    stencilSizeF : makelist(beta*2,i,1,dim),
    for d : 1 thru dim do (
      if stencilLoc[sI][d] < 0 then ( stencilSizeF[d] : beta )
    ),
  
    /* Loop over BC combinations. Will create a separate kernel for each. */
    for bcI : 1 thru length(bcCombos) do (

      currBC : copylist(bcCombos[bcI]),

      /* String used in kernel name, identifying stencil location and BC. */
      stencilStr : getStencilStr(stencilLoc[sI],coordVarS,currBC,bcKey),

      for polyOrder : 1 thru pMax do (
        bN       : getNodalBasis(basisFun, dim, polyOrder),
        numBasis : length(bN),
  
        nodes          : args(getNodes(basisFun, dim, polyOrder)),
        numNodes       : length(nodes),

        weqMemSizeC    : makelist([1,1],i,1,dim),
        nodesExC       : getExtendedNodes(basisFun,polyOrder,stencilLoc[sI],weqMemSizeC),
        storedNodesExC : getExtendedStoredNodes(basisFun,polyOrder,stencilLoc[sI],weqMemSizeC),

        /* Associative list between cell coordinates and a linear (base 1) index. */
        cellToIdxStoredC : getCellToIdx(stencilLoc[sI],weqMemSizeC),

        /* Create a map of which cell is going to save the contribution from each node. */
        dataStrsC : getDataStr(weqMemSizeC,stencilLoc[sI],varsC),

        /* Associative list of cell coordinate, and the memory location of each node. */
        weqSizeC    : makelist([1,0],i,1,dim),
        cellToCoefC : getCellToCoef(numBasis,stencilLoc[sI],nodesExC,storedNodesExC,
                                    cellToIdxStoredC,dataStrsC,weqSizeC),

        /* Now do the fine-grid cells. */
        weqMemSizeF      : makelist([3,1],i,1,dim),
        weqSizeF         : makelist([3,0],i,1,dim),
        stencilLocF      : copylist(stencilLoc[sI]),
        for d : 1 thru dim do (
          if stencilLoc[sI][d] < 0 then (
            stencilLocF[d] : 0,
            weqMemSizeF[d] : [1,1],
            weqSizeF[d]    : [1,0]
          )
        ),
        nodesExF         : getExtendedNodes(basisFun,polyOrder,stencilLocF,weqMemSizeF),
        storedNodesExF   : getExtendedStoredNodes(basisFun,polyOrder,stencilLocF,weqMemSizeF),
        cellToIdxStoredF : getCellToIdx(stencilLocF,weqMemSizeF),
        dataStrsF        : getDataStr(weqMemSizeF,stencilLocF,varsC),
        cellToCoefF      : getCellToCoef(numBasis,stencilLocF,nodesExF,storedNodesExF,
                                         cellToIdxStoredF,dataStrsF,weqSizeF),
                                         /*
        if (dim=2) then (
          print("loc=",stencilLoc[sI]," | cellToCoefC="),
          for i : 1 thru length(cellToCoefC) do (
            print("              |            =",cellToCoefC[i])
          ),
          print("           | cellToCoefF="),
          for i : 1 thru length(cellToCoefF) do (
            print("              |            =",cellToCoefF[i])
          )
        ),
        */

        weqSolv : solveProlongationWeqEq(varsC,bN,cellToIdxStoredC,cellToCoefC,nodesExF,cellToIdxStoredF,cellToCoefF),

        /* Remove contributions from the auxiliary coarse-cells we used to
           form the weak equality system of equations. */
        for iC : 1 thru length(cellToCoefC) do (
          strsC : sublist(makelist(eval_string(cellToCoefC[iC][2][k]),k,1,numBasis),lambda([x],op(x) # C)),
          if length(strsC)>0 then (
            subList : makelist(eval_string(sconcat("fldC",string(strsC[k])))=0,k,1,length(strsC)),
            weqSolv : subst(subList,weqSolv)
          )
        ),

        weqSolvLHS : makelist(lhs(weqSolv[i]),i,1,length(weqSolv)),
        weqSolvRHS : makelist(rhs(weqSolv[i]),i,1,length(weqSolv)),

        /* Function declaration with input/output variables. */
        printf(fh, "void ~a_~aP~a(double *fldCC, double **fldF) ~%{ ~%", funcNm, stencilStr, polyOrder),
        printf(fh, "  // fldC: coarse-grid field.~%"),
        printf(fh, "  // fldF: fine-grid field in cells pointed to by the stencil.~%"),
        printf(fh, "~%"),
  
        /* Create a pointer to each cell used by stencil. */
        for iF : 1 thru length(dataStrsF) do (
          idx : sublist_indices(weqSolvLHS, lambda([x],op(x)=eval_string(sconcat("fldF",dataStrsF[iF])))),
          if (length(idx)>0) then (
            if (weqSolvRHS[idx[1]] # 0) then (
              printf(fh, "  double *fldF~a = fldF[~a];~%", dataStrsF[iF], iF-1)
            )
          )
        ),
        printf(fh, "~%"),
  
        writeIncrExprs(weqSolvLHS,weqSolvRHS),
  
        printf(fh, "}~%"),
        printf(fh, "~%")
      )
    )
  )
)$

calcFEMrestrictionOp(fh, funcNm, dim, basisFun, pMax) := block([beta,coordVarS,stencilLoc,bcTypes,bcStrs,bcKey,sI,bcCombos,stencilSizeF,bcI,d,currBC,bN,numBasis,nodes,numNodes,weqMemSizeC,nodesExC,storedNodesExC,cellToIdxStoredC,dataStrsC,weqSizeC,cellToCoefC,weqMemSizeF,nodesExF,storedNodesExF,cellToIdxStoredF,dataStrsF,weqSizeF,cellToCoefF,weqSolv,weqSolvLHS,weqSolvRHS,weqUnknowns,weqKnowns,newSolv,dxF,dxC,dirichletSurfs,cellCoordC,cellCoordF,storedNodeToCellF,boundNodesC,boundNodesCI,boundNodeF,boundCellF,iF,nodeIdxF],
  /* Restriction operator transferring a fine-grid field to the
     coarse grid. Currently limited to coarsening 2^a grids by a
     factor of 2 in both directions. */

  kill(varsC, varsP, basisC, basisP),

  load(sconcat("basis-precalc/basis", basisFun, dim, "x")),

  beta : 2,   /* Number of fine cells span by a single coarse cell in one direction. */

  /* Associative list between stencil location (-1,0,1) and variable
     strings used in kernel names. */
  coordVarS : getCoordVarS(varsC),

  /* List of stencil locations. */
  stencilLoc : getStencilCoords(dim),

  /* Types of boundary conditions for which to generate kernels.
       =0 periodic
       =1 Dirichlet
       =2 Neumann
       =3 Robin
     For periodic we'll assume ghost cells are filled accordingly
     and use an interior stencil. */
  bcTypes  : [0, 1, 2, 3],
  bcStrs   : ["", "Dirichlet", "Neumann", "Robin"],
  bcKey    : makelist([bcTypes[i],bcStrs[i]],i,1,length(bcTypes)),

  for sI : 1 thru length(stencilLoc) do (
    
    /* Obtain the different BC combinations for this stencil.
       Will generate a separate kernel for each. */
    bcCombos : getBCcombos(stencilLoc[sI],bcTypes),

    stencilSizeF : makelist(beta*2,i,1,dim),
    for d : 1 thru dim do (
      if stencilLoc[sI][d] < 0 then ( stencilSizeF[d] : beta )
    ),
  
    /* Loop over BC combinations. Will create a separate kernel for each. */
    for bcI : 1 thru length(bcCombos) do (

      currBC : copylist(bcCombos[bcI]),

      /* String used in kernel name, identifying stencil location and BC. */
      stencilStr : getStencilStr(stencilLoc[sI],coordVarS,currBC,bcKey),

      for polyOrder : 1 thru pMax do (
        bN       : getNodalBasis(basisFun, dim, polyOrder),
        numBasis : length(bN),
  
        nodes          : args(getNodes(basisFun, dim, polyOrder)),
        numNodes       : length(nodes),

        weqMemSizeC    : makelist([1,1],i,1,dim),
        nodesExC       : getExtendedNodes(basisFun,polyOrder,stencilLoc[sI],weqMemSizeC),
        storedNodesExC : getExtendedStoredNodes(basisFun,polyOrder,stencilLoc[sI],weqMemSizeC),

        /* Associative list between cell coordinates and a linear (base 1) index. */
        cellToIdxStoredC : getCellToIdx(stencilLoc[sI],weqMemSizeC),

        /* Create a map of which cell is going to save the contribution from each node. */
        dataStrsC : getDataStr(weqMemSizeC,stencilLoc[sI],varsC),

        /* Associative list of cell coordinate, and the memory location of each node. */
        weqSizeC    : makelist([1,0],i,1,dim),
        cellToCoefC : getCellToCoef(numBasis,stencilLoc[sI],nodesExC,storedNodesExC,
                                    cellToIdxStoredC,dataStrsC,weqSizeC),

        /* Now do the fine-grid cells. */
        weqMemSizeF      : makelist([3,1],i,1,dim),
        weqSizeF         : makelist([3,0],i,1,dim),
        stencilLocF      : copylist(stencilLoc[sI]),
        for d : 1 thru dim do (
          if stencilLoc[sI][d] < 0 then (
            stencilLocF[d] : 0,
            weqMemSizeF[d] : [1,1],
            weqSizeF[d]    : [1,0]
          )
        ),
        nodesExF         : getExtendedNodes(basisFun,polyOrder,stencilLocF,weqMemSizeF),
        storedNodesExF   : getExtendedStoredNodes(basisFun,polyOrder,stencilLocF,weqMemSizeF),
        cellToIdxStoredF : getCellToIdx(stencilLocF,weqMemSizeF),
        dataStrsF        : getDataStr(weqMemSizeF,stencilLocF,varsC),
        cellToCoefF      : getCellToCoef(numBasis,stencilLocF,nodesExF,storedNodesExF,
                                         cellToIdxStoredF,dataStrsF,weqSizeF),

        weqSolv : solveProlongationWeqEq(varsC,bN,cellToIdxStoredC,cellToCoefC,nodesExF,cellToIdxStoredF,cellToCoefF),

        weqSolvLHS : makelist(lhs(weqSolv[i]),i,1,length(weqSolv)),
        weqSolvRHS : makelist(rhs(weqSolv[i]),i,1,length(weqSolv)),

        weqUnknowns : listofvars(weqSolvLHS),
        weqKnowns   : listofvars(weqSolvRHS),

        /* The restriction matrix is the transpose of the prolongation matrix. */
        newSolv : (transpose(coefmatrix(weqSolvRHS,weqKnowns))) . matrix(weqUnknowns),
        weqSolv : makelist(weqKnowns[i]=newSolv[i][1],i,1,length(weqKnowns)),

        /* Swap knowns and unknowns. */
        tmp         : copylist(weqUnknowns),
        weqUnknowns : copylist(weqKnowns),
        weqKnowns   : copylist(tmp),
        kill(tmp),

        /* Remove contributions from the auxiliary coarse-cells we used to
           form the weak equality system of equations. */
        weqSolv : sublist(weqSolv,lambda([x],op(lhs(x))=fldCC)),

        weqSolvLHS : makelist(lhs(weqSolv[i]),i,1,length(weqSolv)),
        weqSolvRHS : makelist(rhs(weqSolv[i]),i,1,length(weqSolv)),

        /* Fine- and coarse-grid cell lengths. */
        dxF : makelist(1,d,1,dim), 
        dxC : makelist(2,d,1,dim), 

        /* For Dirichlet BCs, the values on the boundary get transferred. */
        dirichletSurfs : sublist_indices(currBC, lambda([x],x=1)),

        cellCoordC : makelist(0,i,1,dim),
        cellCoordF : makelist(0,i,1,dim),
        for dI : 1 thru length(dirichletSurfs) do (
          dir : dirichletSurfs[dI],
          if (stencilLoc[sI][dir]=-1) then ( cellCoordF[dir] : -1 )
        ),

        /* Associative list of nodes on extended logical space, and the cell that stores that node. */
        storedNodeToCellF : invertAssocList(storedNodesExF),

        for dI : 1 thru length(dirichletSurfs) do (
          dir          : dirichletSurfs[dI],
          boundNodesC  : copylist(sublist(storedNodesExC[1][2],lambda([x],x[dir]=stencilLoc[sI][dir]))),
          boundNodesCI : sublist_indices(storedNodesExC[1][2],lambda([x],x[dir]=stencilLoc[sI][dir])),

          /* Fine- and coarse-grid cell centers. */
          for k : 1 thru length(boundNodesC) do (
            boundNodeF : fullratsimp(makelist((dxC[d]/dxF[d])*boundNodesC[k][d]-dxF[d],d,1,dim)),
            boundCellF : assoc(boundNodeF,storedNodeToCellF),
            iF         : assoc(boundCellF,cellToIdxStoredF),
            nodeIdxF   : sublist_indices(storedNodesExF[iF][2],lambda([x],x=boundNodeF))[1],
            coefsF     : assoc(boundCellF,cellToCoefF),
            weqSolvRHS[boundNodesCI[k]] : eval_string(sconcat("fldF",coefsF[nodeIdxF]))
          )
        ),

        /* Function declaration with input/output variables. */
        printf(fh, "void ~a_~aP~a(double **fldF, double *fldCC) ~%{ ~%", funcNm, stencilStr, polyOrder),
        printf(fh, "  // fldF: fine-grid field in cells pointed to by the stencil.~%"),
        printf(fh, "  // fldC: coarse-grid field.~%"),
        printf(fh, "~%"),
  
        /* Create a pointer to each cell used by stencil. */
        for iF : 1 thru length(dataStrsF) do (
          nodeNotIn : true,
          for k : 1 thru length(weqSolvRHS) do (
            nodeNotIn : nodeNotIn and freeof(eval_string(sconcat("fldF",dataStrsF[iF])),weqSolvRHS[k])
          ),
          if not nodeNotIn then (
            printf(fh, "  double *fldF~a = fldF[~a];~%", dataStrsF[iF], iF-1)
          )
        ),
        printf(fh, "~%"),
  
        writeIncrExprs(weqSolvLHS,weqSolvRHS),
  
        printf(fh, "}~%"),
        printf(fh, "~%")
      )
    )

  )
)$
