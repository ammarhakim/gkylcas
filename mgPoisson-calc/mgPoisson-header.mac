/* Create header file for multigrid Poisson solver. */
load("mgPoisson-calc/MGpoissonUtil");

fh : openw("~/max-out/MGpoissonModDecl.h")$

polyOrderMax : 2$

bName        : ["Ser"]$


VarsC : [X, Y, Z]$

/* This variable obviates some if-statements. */
boundStrKey : [[-1,"L"],[0,""],[1,"U"]]$
/* Types of boundary conditions for which to generate kernels.
     =0 periodic
     =1 Dirichlet
     =2 Neumann
     =3 Robin
     =9 non-periodic
   For periodic we'll assume ghost cells are filled accordingly
   and use an interior stencil. */
bcTypesDG  : [0, 3]$
bcStrsDG   : ["", "Robin"]$
bcKeyDG    : makelist([bcTypesDG[i],bcStrsDG[i]],i,1,length(bcTypesDG))$

bcTypesFEM : [0, 1, 2, 3]$
bcStrsFEM  : ["", "Dirichlet", "Neumann", "Robin"]$
bcKeyFEM   : makelist([bcTypesFEM[i],bcStrsFEM[i]],i,1,length(bcTypesFEM))$

bcTypesNP : [0, 9]$ 
bcStrsNP  : ["", "NonPeriodic"]$
bcKeyNP   : makelist([bcTypesNP[i],bcStrsNP[i]],i,1,length(bcTypesNP))$

printf(fh, "#ifndef MG_POISSON_MOD_DECL_H ~%")$
printf(fh, "#define MG_POISSON_MOD_DECL_H ~%")$
printf(fh, " ~%")$

printf(fh, "#include <cmath>~%")$
printf(fh, " ~%")$

printf(fh, "extern \"C\" { ~%")$
printf(fh, " ~%")$

findBoundaryStrCombo(fhIn, funcNameStr, funcArgsStr, basisFun, dim, bcKey) := block([coordVarS,stencilLoc,sI,bcCombos,bcI,currBC,stencilStr,i],
  /* Obtain the various string combinations for the names of the
     kernels used near boundaries. */

  load(sconcat("basis-precalc/basis", basisFun, dim, "x")),

  /* Associative list between stencil location (-1,0,1) and variable
     strings used in kernel names. */
  coordVarS : getCoordVarS(varsC),
  
  /* List of stencil locations. Each entry is a dim-dimensional list
   with -1 meaning it is at a lower boundary, 1 upper boundary, or
   0 away from boundaries in that direction. */
  stencilLoc : getStencilCoords(dim),

  for sI : 2 thru length(stencilLoc) do (
  
    /* Obtain the different BC combinations for this stencil.
       Will generate a separate kernel for each. */
    bcCombos : getBCcombos(stencilLoc[sI],makelist(bcKey[i][1],i,1,length(bcKey))),

    /* Loop over BC combinations. Will create a separate kernel for each. */
    for bcI : 1 thru length(bcCombos) do (

      currBC : copylist(bcCombos[bcI]),

      /* String used in kernel name, identifying stencil location and BC. */
      stencilStr : getStencilStr(stencilLoc[sI],coordVarS,currBC,bcKey),

      printf(fhIn, sconcat("void ",funcNameStr,"~ax~a_~aP~a(",funcArgsStr,");~%"), dim, bName[bInd], stencilStr, polyOrder)
    )
  )
)$

for bInd : 1 thru length(bName) do (

  for polyOrder : 1 thru polyOrderMax do (
    for ci : 1 thru 3 do (

      /* ~~~~~~~~~~~~~~ DG solver kernels ~~~~~~~~~~~~~~ */

      /* Prolongation and restriction operators. */
      printf(fh, "void MGpoissonDGProlong~ax~a_P~a(const double *fldC, double **fldF);~%", ci, bName[bInd], polyOrder),
      printf(fh, "void MGpoissonDGRestrict~ax~a_P~a(double **fldF, double *fldC);~%", ci, bName[bInd], polyOrder),
      printf(fh, "~%"),

      /* Smoothers. */
      printf(fh, "void MGpoissonDGDampedGaussSeidel~ax~a_P~a(const double omega, double **dx, const double *bcVals, double **rho, double **phiPrev, double **phi);~%", ci, bName[bInd], polyOrder),
      printf(fh, "void MGpoissonDGDampedJacobi~ax~a_P~a(const double omega, double **dx, const double *bcVals, double **rho, double **phiPrev, double **phi);~%", ci, bName[bInd], polyOrder),
      /* Boundary smoothers. */
      findBoundaryStrCombo(fh, "MGpoissonDGDampedGaussSeidel", "const double omega, double **dx, const double *bcVals, double **rho, double **phiPrev, double **phi", bName[bInd], ci, bcKeyDG),
      findBoundaryStrCombo(fh, "MGpoissonDGDampedJacobi", "const double omega, double **dx, const double *bcVals, double **rho, double **phiPrev, double **phi", bName[bInd], ci, bcKeyDG),
      printf(fh, "~%"),

      /* Residue kernels. */
      printf(fh, "void MGpoissonDGResidue~ax~a_P~a(double **dx, const double *bcVals, double **rho, double **phi, double *resOut);~%", ci, bName[bInd], polyOrder),
      findBoundaryStrCombo(fh, "MGpoissonDGResidue", "double **dx, const double *bcVals, double **rho, double **phi, double *resOut", bName[bInd], ci, bcKeyDG),
      printf(fh, "~%"),

      /* ~~~~~~~~~~~~~~ FEM solver kernels. ~~~~~~~~~~~~~~ */
      /* Translating between DG and FEM. */
      printf(fh, "void MGpoissonFEM_DGtoFEM_~ax~a_P~a(const double *dgFld, double **femOut);~%", ci, bName[bInd], polyOrder),
      findBoundaryStrCombo(fh, "MGpoissonFEM_DGtoFEM_", "const double *dgFld, double **femOut", bName[bInd], ci, bcKeyNP),
      printf(fh, "~%"),

      /* Projecting an FEM field onto the nodal (FEM) basis. */
      printf(fh, "void MGpoissonFEMproject~ax~a_P~a(double **dx, double **femFld, double *out);~%", ci, bName[bInd], polyOrder),
      findBoundaryStrCombo(fh, "MGpoissonFEMproject", "double **dx, double **femFld, double *out", bName[bInd], ci, bcKeyNP),
      printf(fh, "~%"),

      /* Smoothers. */
      printf(fh, "void MGpoissonFEMDampedJacobi~ax~a_P~a(const double omega, double **dx, const double *bcVals, double **rho, double **phiPrev, double **phi);~%", ci, bName[bInd], polyOrder),
      printf(fh, "void MGpoissonFEMDampedGaussSeidel~ax~a_P~a(const double omega, double **dx, const double *bcVals, double **rho, double **phiPrev, double **phi);~%", ci, bName[bInd], polyOrder),
      /* Boundary smoothers. */
      findBoundaryStrCombo(fh, "MGpoissonFEMDampedJacobi", "const double omega, double **dx, const double *bcVals, double **rho, double **phiPrev, double **phi", bName[bInd], ci, bcKeyFEM),
      findBoundaryStrCombo(fh, "MGpoissonFEMDampedGaussSeidel", "const double omega, double **dx, const double *bcVals, double **rho, double **phiPrev, double **phi", bName[bInd], ci, bcKeyFEM),
      printf(fh, "~%"),

      /* Prolongation and restriction operators. */
      printf(fh, "void MGpoissonFEMProlong~ax~a_P~a(const double *fldC, double **fldF);~%", ci, bName[bInd], polyOrder),
      findBoundaryStrCombo(fh, "MGpoissonFEMProlong", "const double *fldC, double **fldF", bName[bInd], ci, bcKeyFEM),
      printf(fh, "void MGpoissonFEMRestrict~ax~a_P~a(double **fldF, double *fldC);~%", ci, bName[bInd], polyOrder),
      findBoundaryStrCombo(fh, "MGpoissonFEMRestrict", "double **fldF, double *fldC", bName[bInd], ci, bcKeyFEM),
      printf(fh, "~%"),

      /* Residue kernels. */
      printf(fh, "void MGpoissonFEMResidue~ax~a_P~a(double **dx, const double *bcVals, double **rho, double **phi, double *resOut);~%", ci, bName[bInd], polyOrder),
      findBoundaryStrCombo(fh, "MGpoissonFEMResidue", "double **dx, const double *bcVals, double **rho, double **phi, double *resOut", bName[bInd], ci, bcKeyFEM),
      printf(fh, "~%"),

      /* L2 norm. */
      printf(fh, "void MGpoissonFEML2norm~ax~a_P~a(const double *dxC, double **femFld, double *normOut);~%", ci, bName[bInd], polyOrder),
      findBoundaryStrCombo(fh, "MGpoissonFEML2norm", "const double *dxC, double **femFld, double *normOut", bName[bInd], ci, bcKeyNP),
      printf(fh, "~%"),

      /* M0 norm. */
      printf(fh, "void MGpoissonFEMM0norm~ax~a_P~a(const double *dxC, double **femFld, double *normOut);~%", ci, bName[bInd], polyOrder),
      findBoundaryStrCombo(fh, "MGpoissonFEMM0norm", "const double *dxC, double **femFld, double *normOut", bName[bInd], ci, bcKeyNP),
      printf(fh, "~%"),

      /* Accumulate a constant and an FEM field. */
      printf(fh, "void MGpoissonFEMaccuConst~ax~a_P~a(const double constIn, double *femFld);~%", ci, bName[bInd], polyOrder),
      findBoundaryStrCombo(fh, "MGpoissonFEMaccuConst", "const double constIn, double *femFld", bName[bInd], ci, bcKeyNP),
      printf(fh, "~%")

    ),
    printf(fh, "~%")
  )

);

printf(fh, "} ~%")$

printf(fh, "#endif ~%")$

close(fh)$
