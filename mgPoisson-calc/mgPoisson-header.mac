/* Create header file for multigrid Poisson solver. */

fh : openw("~/max-out/MGpoissonModDecl.h")$

polyOrderMax : 1$

bName        : ["Ser"]$


VarsC : [X, Y, Z]$

printf(fh, "#ifndef MG_POISSON_MOD_DECL_H ~%")$
printf(fh, "#define MG_POISSON_MOD_DECL_H ~%")$

printf(fh, " ~%")$

printf(fh, "extern \"C\" { ~%")$
printf(fh, " ~%")$


for bInd : 1 thru length(bName) do (

  for pi : 1 thru polyOrderMax do (
    for ci : 1 thru 2 do (

      /* DG solver kernels, */

      /* Prolongation and restriction operators. */
      printf(fh, "void MGpoissonProlong~ax~a_P~a(const double *fldC, double **fldF);~%", ci, bName[bInd], pi),
      printf(fh, "void MGpoissonRestrict~ax~a_P~a(double **fldF, double *fldC);~%", ci, bName[bInd], pi),
      printf(fh, "~%"),

      /* Smoothers. */
      printf(fh, "void MGpoissonJacobi~ax~a_P~a(const double omega, double **dx, const double *rho, double **phi);~%", ci, bName[bInd], pi),
      printf(fh, "void MGpoissonDampedJacobi~ax~a_P~a(const double omega, double **dx, const double *rho, double **phi);~%", ci, bName[bInd], pi),
      printf(fh, "~%"),

      /* Residue kernels. */
      printf(fh, "void MGpoissonResidue~ax~a_P~a(double **dx, const double *rho, double **phi, double *resOut);~%", ci, bName[bInd], pi),
      printf(fh, "~%")

    ),
    printf(fh, "~%")
  )

);

printf(fh, "} ~%")$

printf(fh, "#endif ~%")$

close(fh)$
