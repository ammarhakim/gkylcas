/* Create methods for FEM data fields. */

load("modal-basis");
load("out-scripts");
load("nodalOperations/nodalFunctions");
load("mgPoisson-calc/MGpoissonUtil");
fpprec : 24$

calcAccumulateConst(fh, funcNm, dim, basisFun, pMax) := block([],
/* Accumulate a const with an FEM field. */

  kill(varsC, varsP, basisC, basisP),

  load(sconcat("basis-precalc/basis", basisFun, dim, "x")),

  /* Associative list between stencil location (-1,0,1) and variable
     strings used in kernel names. */
  coordVarS : getCoordVarS(varsC),

  /* List of stencil locations. Each entry is a dim-dimensional list
     with -1 meaning it is at a lower boundary, 1 upper boundary, or
     0 away from boundaries in that direction. */
  stencilLoc : getStencilCoords(dim),

  /* Types of boundary conditions for which to generate kernels.
       =0 periodic
       =9 non-periodic
     For periodic we'll assume ghost cells are filled accordingly
     and use an interior stencil. */
  bcTypes  : [0, 9],
  bcStrs   : ["", "NonPeriodic"],
  bcKey    : [[bcTypes[1],bcStrs[1]],[bcTypes[2],bcStrs[2]]],

  for sI : 1 thru length(stencilLoc) do (

    /* This if-statement excludes lower boundary kernels. */
    if length(sublist(stencilLoc[sI],lambda([x],x > -1)))>0 then (

      /* Obtain the different BC combinations for this stencil.
         Will generate a separate kernel for each. */
      bcCombos : getBCcombos(stencilLoc[sI],bcTypes),

      /* Loop over BC combinations. Will create a separate kernel for each. */
      for bcI : 1 thru length(bcCombos) do (

        currBC : copylist(bcCombos[bcI]),

        /* String used in kernel name, identifying stencil location and BC. */
        stencilStr : getStencilStr(stencilLoc[sI],coordVarS,currBC,bcKey),

        for polyOrder : 1 thru pMax do (

          nodes    : args(getNodes(basisFun, dim, polyOrder)),

          /* Each cell only stores the lower left nodes (except for upper boundary cells). */
          numStoredNodes : length(getStoredNodes(nodes,stencilLoc[sI])),

          printf(fh, "void ~a_~aP~a(const double constIn, double *femFld) ~%{ ~%", funcNm, stencilStr, polyOrder),
          printf(fh, "  // constIn: constant to accumulate.~%"),
          printf(fh, "  // femFld:  FEM field to accumulate.~%"),
          printf(fh, "~%"),

          accVals : makelist(constIn,i,1,numStoredNodes),

          writeCIncrExprs1(femFld, accVals),

          printf(fh, "}~%"),
          printf(fh, "~%")

        )
      )
    )
  )
)$
