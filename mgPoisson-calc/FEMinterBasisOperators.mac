/* Generate kernels for translating a the coefficients of a DG field
   into coefficients of a continuous Galerkin FEM field, and viceversa. */

load("modal-basis");
load("out-scripts");
load("nodalOperations/nodalFunctions");
load("mgPoisson-calc/MGpoissonUtil");
load("mgPoisson-calc/FEMnodalFuncs");
fpprec : 24$

boundStrKey : [[-1,"L"],[0,""],[1,"U"]]$

calcDGtoFEM(fh, funcNm, dim, basisFun, pMax) := block([],
  /* Translate DG coefficients (modal) to FEM coefficients (nodal).
     Assume this translation involves only nearest neighbors,
     and that each FEM field (which in Gkeyll actually has the same
     number of DOFs as DG fields) stores only the value corresponding to
     the lower corner node(s) (except for upper boundary cells w/o
     periodic BCs). */

  kill(varsC, varsP, basisC, basisP),

  load(sconcat("basis-precalc/basis", basisFun, dim, "x")),

  /* Associative list between stencil location (-1,0,1) and variable
     strings used in kernel names. */
  coordVarS : getCoordVarS(varsC),

  /* List of stencil locations. Each entry is a dim-dimensional list
     with -1 meaning it is at a lower boundary, 1 upper boundary, or
     0 away from boundaries in that direction. */
  stencilLoc : getStencilCoords(dim),

  /* Types of boundary conditions for which to generate kernels.
       =0 periodic
       =9 non-periodic
     For periodic we'll assume ghost cells are filled accordingly
     and use an interior stencil. */
  bcTypes : [0, 9],
  bcStrs  : ["", "NonPeriodic"],
  bcKey   : [[bcTypes[1],bcStrs[1]],[bcTypes[2],bcStrs[2]]],

  for sI : 1 thru length(stencilLoc) do (

    /* Obtain the different BC combinations for this stencil.
       Will generate a separate kernel for each. */
    bcCombos : getBCcombos(stencilLoc[sI],bcTypes),

    /* Loop over BC combinations. Will create a separate kernel for each. */
    for bcI : 1 thru length(bcCombos) do (

      currBC : copylist(bcCombos[bcI]),

      /* String used in kernel name, identifying stencil location and BC. */
      stencilStr : getStencilStr(stencilLoc[sI],coordVarS,currBC,bcKey),

      for polyOrder : 1 thru pMax do (

        bC   : basisC[polyOrder],
        numB : length(bC),

        /* Expansion coefficients of DG field in this (lower corner) cell. */
        dgC_c : makelist(dgFld[i],i,0,numB-1),

        /* Get modal to nodal transformation matrix.*/
        modToNod : calcModToNod(basisFun,dim,polyOrder),

        /* Convert to nodal in this cell.*/ 
        dgNod   : modToNod . dgC_c,
        dgNod_c : makelist(dgNod[i][1],i,1,length(dgNod)), 

        nodes         : args(getNodes(basisFun, dim, polyOrder)),
        numNodes      : length(nodes),
        nodesEx       : getExtendedNodes(basisFun,polyOrder,stencilLoc[sI],makelist([1,1],i,1,dim)),
        storedNodesEx : getExtendedStoredNodes(basisFun,polyOrder,stencilLoc[sI],makelist([1,1],i,1,dim)),
        
        /* Associative list of nodes on extended logical space, and the cell that stores that node. */
        storedNodeToCell : invertAssocList(storedNodesEx),

        /* Associative list between cell coordinates and a linear (base 1) index. */
        cellToIdxStored : getCellToIdx(stencilLoc[sI],makelist([1,1],i,1,dim)),

        /* Create a map of which cell is going to save the 
           contribution from each node. */
        dataStrs    : getDataStr(makelist([1,1],i,1,dim),stencilLoc[sI],varsC),

        /* Associative list of cell coordinate, and the memory location of each node. */
        cellToCoef : getCellToCoef(numB,stencilLoc[sI],nodesEx,storedNodesEx,storedNodeToCell,cellToIdxStored,dataStrs),

        /* Append variable name to memory location string. */
        targetCoef : makelist(0,i,1,numNodes),
        for i : 1 thru numNodes do (
          targetCoef[i] : sconcat("femFld",cellToCoef[1][2][i])
        ),

        /* Also, currently it seems that the contributions of colocated DG nodes
           need to be averaged, so compute this prefactor. This may be revisited. */
        avFactor : makelist(1,i,1,numNodes),
        for i : 1 thru numNodes do (
          numDimsAtBoundary : 0,
          for d : 1 thru dim do (
            if ((nodes[i][d] = 1) and (stencilLoc[sI][d] # 1)) then (
              numDimsAtBoundary : numDimsAtBoundary + 1
            ) elseif ((nodes[i][d] = -1) and (stencilLoc[sI][d] # -1)) then (
              numDimsAtBoundary : numDimsAtBoundary + 1
            )
          ),
          avFactor[i] : 1/(2^numDimsAtBoundary)
        ),

        /* Function declaration with input/output variables. */
        printf(fh, "void ~a_~aP~a(const double *dgFld, double **femFld) ~%{ ~%", funcNm, stencilStr, polyOrder),
        printf(fh, "  // dgFld:  DG (modal) field coefficients.~%"),
        printf(fh, "  // femFld: FEM (nodal) field coefficients.~%"),
        printf(fh, "~%"),

        /* Pointers to the data in cells pointed to by the stencil. */
        lhs : makelist(eval_string(targetCoef[i]),i,1,numNodes),
        rhs : makelist(dgNod_c[i],i,1,numNodes),
        i : 1,
        printf(fh, "  double *femFldC = femFld[~a]; ~%", i-1),
        varStrs : [""],
        for d : 1 thru dim do (
          for sI : 1 thru 2^(d-1) do (
            i : i + 1,
            varStrs : append(varStrs, [sconcat(varStrs[sI],"U",string(varsC[d]))]),
            isPresent : false,
            for j : 1 thru numB do (
              checkFor : eval_string(sconcat("femFld",varStrs[i]))[j-1],
              for k : 1 thru numB do (
                if not (freeof(checkFor,lhs[k]) and freeof(checkFor,rhs[k])) then ( isPresent : true )
              )
            ),
            if isPresent then (
              printf(fh, sconcat("  double *femFld",varStrs[i]," = femFld[~a]; ~%"), i-1)
            )
          )
        ),
        printf(fh, "~%"),

        writeIncrExprs(targetCoef, avFactor*dgNod_c), 
        printf(fh, "~%"),

        printf(fh, "}~%"),
        printf(fh, "~%")
      )
    )
  )
)$

calcFEMtoDG(fh, funcNm, dim, basisFun, pMax) := block([],
  /* Translate FEM coefficients (nodal) to DG coefficients (nodal).
     Assume this translation involves only nearest neighbors,
     and that each FEM field (which in Gkeyll actually has the same
     number of DOFs as DG fields) stores only the value corresponding to
     the lower corner node(s) (except for upper boundary cells w/o
     periodic BCs). */

  kill(varsC, varsP, basisC, basisP),

  load(sconcat("basis-precalc/basis", basisFun, dim, "x")),

  /* Associative list between stencil location (-1,0,1) and variable
     strings used in kernel names. */
  coordVarS : getCoordVarS(varsC),

  /* List of stencil locations. Each entry is a dim-dimensional list
     with -1 meaning it is at a lower boundary, 1 upper boundary, or
     0 away from boundaries in that direction. */
  stencilLoc : getStencilCoords(dim),

  /* Types of boundary conditions for which to generate kernels.
       =0 periodic
       =9 non-periodic
     For periodic we'll assume ghost cells are filled accordingly
     and use an interior stencil. */
  bcTypes : [0, 9],
  bcStrs  : ["", "NonPeriodic"],
  bcKey   : [[bcTypes[1],bcStrs[1]],[bcTypes[2],bcStrs[2]]],

  for sI : 1 thru length(stencilLoc) do (

    /* Obtain the different BC combinations for this stencil.
       Will generate a separate kernel for each. */
    bcCombos : getBCcombos(stencilLoc[sI],bcTypes),

    /* Loop over BC combinations. Will create a separate kernel for each. */
    for bcI : 1 thru length(bcCombos) do (

      currBC : copylist(bcCombos[bcI]),

      /* String used in kernel name, identifying stencil location and BC. */
      stencilStr : getStencilStr(stencilLoc[sI],coordVarS,currBC,bcKey),

      for polyOrder : 1 thru pMax do (

        bC   : basisC[polyOrder],
        numB : length(bC),

        nodes         : args(getNodes(basisFun, dim, polyOrder)),
        numNodes      : length(nodes),
        nodesEx       : getExtendedNodes(basisFun,polyOrder,stencilLoc[sI],makelist([1,1],i,1,dim)),
        storedNodesEx : getExtendedStoredNodes(basisFun,polyOrder,stencilLoc[sI],makelist([1,1],i,1,dim)),
        
        /* Associative list of nodes on extended logical space, and the cell that stores that node. */
        storedNodeToCell : invertAssocList(storedNodesEx),

        /* Associative list between cell coordinates and a linear (base 1) index. */
        cellToIdxStored : getCellToIdx(stencilLoc[sI],makelist([1,1],i,1,dim)),

        /* Create a map of which cell is going to save the 
           contribution from each node. */
        dataStrs    : getDataStr(makelist([1,1],i,1,dim),stencilLoc[sI],varsC),

        /* Associative list of cell coordinate, and the memory location of each node. */
        cellToCoef : getCellToCoef(numB,stencilLoc[sI],nodesEx,storedNodesEx,storedNodeToCell,cellToIdxStored,dataStrs),

        /* Append variable name to memory location string. */
        femFld_c : makelist(0,i,1,numNodes),
        for i : 1 thru numNodes do (
          femFld_c[i] : eval_string(sconcat("femFld",cellToCoef[1][2][i]))
        ),

        /* Get modal to nodal transformation matrix.*/
        nodToMod : calcNodToMod(basisFun,dim,polyOrder),

        /* Convert to modal in this cell.*/ 
        dgMod   : nodToMod . femFld_c,
        dgMod_c : makelist(dgMod[i][1],i,1,length(dgMod)), 

        /* Function declaration with input/output variables. */
        printf(fh, "void ~a_~aP~a(double *dgFld, double **femFld) ~%{ ~%", funcNm, stencilStr, polyOrder),
        printf(fh, "  // dgFld:  DG (modal) field coefficients.~%"),
        printf(fh, "  // femFld: FEM (nodal) field coefficients.~%"),
        printf(fh, "~%"),

        /* Pointers to the data in cells pointed to by the stencil. */
        lhs : makelist(dgFld[i-1],i,1,numB),
        rhs : makelist(dgMod_c[i],i,1,numB),
        i : 1,
        printf(fh, "  double *femFldC = femFld[~a]; ~%", i-1),
        varStrs : [""],
        for d : 1 thru dim do (
          for sI : 1 thru 2^(d-1) do (
            i : i + 1,
            varStrs : append(varStrs, [sconcat(varStrs[sI],"U",string(varsC[d]))]),
            isPresent : false,
            for j : 1 thru numB do (
              checkFor : eval_string(sconcat("femFld",varStrs[i]))[j-1],
              for k : 1 thru numB do (
                if not (freeof(checkFor,lhs[k]) and freeof(checkFor,rhs[k])) then ( isPresent : true )
              )
            ),
            if isPresent then (
              printf(fh, sconcat("  double *femFld",varStrs[i]," = femFld[~a]; ~%"), i-1)
            )
          )
        ),
        printf(fh, "~%"),

        writeCExprs1(dgFld, dgMod_c), 
        printf(fh, "~%"),

        printf(fh, "}~%"),
        printf(fh, "~%")
      )
    )
  )
)$

