/* Compute the norms of a FEM field. */ 

load("modal-basis");
load("out-scripts");
load("nodalOperations/nodalFunctions");
load("mgPoisson-calc/MGpoissonUtil");
fpprec : 24$

writeCIncrExprs1NoPowers(lhs, rhs, qPow, numElemMax) := block([expr],
  /* Search for powers of the quantities in qPow. If one of them is found
     then define a temporary variable for it before writing out the increment. */

  exprN : length(rhs),

  /* Eliminate the exponents as needed. */
  subList     : [],
  maxExponent : 8,
  for eI : 1 thru length(qPow) do (
    if numElemMax > 0 then (
      for d : 0 thru numElemMax-1 do (
        for f : 2 thru maxExponent do (
          doSub : false,
          for k : 1 thru exprN do (
            if (not freeof(qPow[eI][d]^f,rhs[k])) then ( doSub : true )
          ),
          if (doSub) then (
            /* Define a separate variable. */
            lhsS : sconcat("  const double ",string(qPow[eI]),d,"R",f),
            rhsS : sconcat("std::pow(",string(qPow[eI][d]),",",f,");~%"),
            printf(fh, sconcat(lhsS," = ",rhsS)),
            /* Add to the string substitution list, used in writing file. */
            subList : append(subList,[[sconcat(string(qPow[eI][d]), "^",f), sconcat(string(qPow[eI]),d,"R",f)]])
          )
        )
      )
    ) else (
      for f : 2 thru maxExponent do (
        doSub : false,
        for k : 1 thru exprN do (
          if (not freeof(qPow[eI]^f,rhs[k])) then ( doSub : true )
        ),
        if (doSub) then (
          /* Define a separate variable. */
          lhsS : sconcat("  const double ",sconcat(string(op(qPow[eI])),args(qPow[eI])[1]),"R",f),
          rhsS : sconcat("std::pow(",string(qPow[eI]),",",f,");~%"),
          printf(fh, sconcat(lhsS," = ",rhsS)),
          /* Add to the string substitution list, used in writing file. */
          subList : append(subList,[[sconcat(string(qPow[eI]), "^",f), sconcat(sconcat(string(op(qPow[eI])),args(qPow[eI])[1]),"R",f)]])
        )
      )
    )
  ),
  printf(fh, "~%"),

  expr : float(rhs),
  for i : 1 thru exprN do (
    if expr[i] # 0.0 then (
      ep : string(expr[i]),
      if (length(subList) > 0) then (
        outStr : ssubst(subList[1][2],subList[1][1],ep),
        for s : 2 thru length(subList) do (
          outStr : ssubst(subList[s][2],subList[s][1],outStr)
        )
      ) else (
        outStr : ep
      ),
      printf(fh, "  ~a += ~a; ~%", lhs[i-1], outStr)
    )
  )
)$

calcL2norm(fh, funcNm, dim, basisFun, pMax) := block([],
/* Compute the L2 norm 
     normL2 = \int dx | f |^2
   of a FEM field. */

  kill(varsC, varsP, basisC, basisP),

  load(sconcat("basis-precalc/basis", basisFun, dim, "x")),

  /* Associative list between stencil location (-1,0,1) and variable
     strings used in kernel names. */
  coordVarS : getCoordVarS(varsC),

  /* List of stencil locations. Each entry is a dim-dimensional list
     with -1 meaning it is at a lower boundary, 1 upper boundary, or
     0 away from boundaries in that direction. */
  stencilLoc : getStencilCoords(dim),

  /* Types of boundary conditions for which to generate kernels.
       =0 periodic
       =9 non-periodic
     For periodic we'll assume ghost cells are filled accordingly
     and use an interior stencil. */
  bcTypes  : [0, 9],
  bcStrs   : ["", "NonPeriodic"],
  bcKey    : [[bcTypes[1],bcStrs[1]],[bcTypes[2],bcStrs[2]]],

  for sI : 1 thru length(stencilLoc) do (

    /* This if-statement excludes lower boundary kernels. */
    if length(sublist(stencilLoc[sI],lambda([x],x > -1)))>0 then (

      /* Obtain the different BC combinations for this stencil.
         Will generate a separate kernel for each. */
      bcCombos : getBCcombos(stencilLoc[sI],bcTypes),
  
      /* Loop over BC combinations. Will create a separate kernel for each. */
      for bcI : 1 thru length(bcCombos) do (
  
        currBC : copylist(bcCombos[bcI]),
  
        /* String used in kernel name, identifying stencil location and BC. */
        stencilStr : getStencilStr(stencilLoc[sI],coordVarS,currBC,bcKey),
  
        for polyOrder : 1 thru pMax do (
      
          bN   : getNodalBasis(basisFun, dim, polyOrder),
          numB : length(bN),
      
          nodes    : args(getNodes(basisFun, dim, polyOrder)),
          numNodes : length(nodes),
        
          /* Each cell only stores the lower left nodes. */
          storedNodes    : getStoredNodes(nodes,stencilLoc[sI]),
          numStoredNodes : length(storedNodes),
      
          nodesEx       : getExtendedNodes(basisFun,polyOrder,stencilLoc[sI],makelist([1,0],i,1,dim)),
          storedNodesEx : getExtendedStoredNodes(basisFun,polyOrder,stencilLoc[sI],makelist([1,1],i,1,dim)),
        
          /* Associative list of nodes on extended logical space, and the cell that stores that node. */
          storedNodeToCell : invertAssocList(storedNodesEx),
        
          /* Associative list between cell coordinates and a linear (base 1) index. */
          cellToIdxStored : getCellToIdx(stencilLoc[sI],makelist([1,1],i,1,dim)),
        
          /* List of strings identifying each cell involved in the stencil. */
          dataStrs : getDataStr(makelist([1,1],i,1,dim),stencilLoc[sI],varsC),
        
          /* Associative list of cell coordinate, and the memory location of each node. */
          cellToCoef : getCellToCoef(numB,stencilLoc[sI],nodesEx,storedNodesEx,storedNodeToCell,cellToIdxStored,dataStrs),
      
          femFld_e :Â doExpand(makelist(eval_string(sconcat("femFld",cellToCoef[1][2][k])),k,1,numB),bN),
      
          normCont : fullratsimp(innerProd(varsC,1,1,femFld_e^2)),
      
          printf(fh, "void ~a_~aP~a(double **femFld, double *normOut) ~%{ ~%", funcNm, stencilStr, polyOrder),
          printf(fh, "  // femFld:  FEM field in neighboring cells.~%"),
          printf(fh, "  // normOut: norm.~%"),
          printf(fh, "~%"),
      
          /* Create a pointer to each cell used by stencil. */
          i : 1,
          varStrs : [""],
          printf(fh, "  double *femFldC = femFld[0]; ~%"),
          for d : 1 thru dim do (
            for sI : 1 thru 2^(d-1) do (
              i         : i + 1,
              varStrs   : append(varStrs, [sconcat(varStrs[sI],assoc(1,locStrKey),string(varsC[d]))]),
              isPresent : false,
              for k : 1 thru numB do (
                if not freeof(eval_string(sconcat("femFld",varStrs[i]))[k-1],normCont) then ( isPresent : true ) 
              ),
              if isPresent then (
                printf(fh, "  double *femFld~a = femFld[~a]; ~%", varStrs[i], i-1)
              )
            )
          ),
          printf(fh, "~%"),
      
          writeCIncrExprs1NoPowers(normOut, [normCont], makelist(eval_string(sconcat("femFld",cellToCoef[1][2][k])),k,1,numB), 0),
      
          printf(fh, "}~%"),
          printf(fh, "~%")
  
        )
      )
    )
  )
)$
