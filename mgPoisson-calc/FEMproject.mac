/* Kernels for projecting an FEM field onto the nodal basis. */

load("modal-basis");
load("out-scripts");
load("nodalOperations/nodalFunctions");
load("mgPoisson-calc/MGpoissonUtil");
fpprec : 24$

calcFEMproject(fh, funcNm, dim, basisFun, pMax) := block([],
  /* We assume a Gkeyll data field contains the expansion coefficients in the
     FEM (nodal) basis. We wish to project that field onto the (nonorthogonal)
     nodal basis set. */

  kill(varsC, varsP, basisC, basisP),

  load(sconcat("basis-precalc/basis", basisFun, dim, "x")),

  /* Associative list between stencil location (-1,0,1) and variable
     strings used in kernel names. */
  coordVarS : getCoordVarS(varsC),

  /* List of stencil locations. Each entry is a dim-dimensional list
     with -1 meaning it is at a lower boundary, 1 upper boundary, or
     0 away from boundaries in that direction. */
  stencilLoc : getStencilCoords(dim),

  /* Types of boundary conditions for which to generate kernels.
       =0 periodic
       =9 non-periodic
     For periodic we'll assume ghost cells are filled accordingly
     and use an interior stencil. */
  bcTypes : [0, 9],
  bcStrs  : ["", "NonPeriodic"],
  bcKey   : makelist([bcTypes[i],bcStrs[i]],i,1,length(bcTypes)),

  for sI : 1 thru length(stencilLoc) do (

    /* Obtain the different BC combinations for this stencil.
       Will generate a separate kernel for each. */
    bcCombos : getBCcombos(stencilLoc[sI],bcTypes),

    /* Loop over BC combinations. Will create a separate kernel for each. */
    for bcI : 1 thru length(bcCombos) do (

      currBC : copylist(bcCombos[bcI]),

      /* String used in kernel name, identifying stencil location and BC. */
      stencilStr : getStencilStr(stencilLoc[sI],coordVarS,currBC,bcKey),

      for polyOrder : 1 thru pMax do (

        /* Count the number of non-periodic boundaries. */
        npDirs : length(sublist(stencilLoc[sI],lambda([x],x # 0))),
      
        bN   : getNodalBasis(basisFun, dim, polyOrder),
        numB : length(bN),
      
        nodes    : args(getNodes(basisFun, dim, polyOrder)),
        numNodes : length(nodes),
      
        /* Each cell only stores the lower left nodes. */
        storedNodes    : getStoredNodes(nodes,stencilLoc[sI]),
        numStoredNodes : length(storedNodes),
      
        nodesEx       : getExtendedNodes(basisFun,polyOrder,stencilLoc[sI],makelist([1,0],i,1,dim)),
        weqNodesEx    : getExtendedWeqNodes(basisFun,polyOrder,stencilLoc[sI],makelist([1,0],i,1,dim)),
        storedNodesEx : getExtendedStoredNodes(basisFun,polyOrder,stencilLoc[sI],makelist([1,1],i,1,dim)),
      
        /* Associative list of nodes on extended logical space, and
           the cell that contributes that node to the weak form. */
        weqNodeToCell : invertAssocList(weqNodesEx),
      
        /* Associative list of nodes on extended logical space, and the cell that stores that node. */
        storedNodeToCell : invertAssocList(storedNodesEx),
      
        /* Associative list between cell coordinates and a linear (base 1) index. */
        cellToIdxWeq    : getCellToIdx(stencilLoc[sI],makelist([1,0],i,1,dim)),
        cellToIdxStored : getCellToIdx(stencilLoc[sI],makelist([1,1],i,1,dim)),
      
        /* List of strings identifying each cell involved in the stencil. */
        dataStrs : getDataStr(makelist([1,1],i,1,dim),stencilLoc[sI],varsC),
      
        /* Associative list of cell coordinate, and the memory location of each node. */
        cellToCoef : getCellToCoef(numB,stencilLoc[sI],nodesEx,storedNodesEx,storedNodeToCell,cellToIdxStored,dataStrs),
      
        /* Lists where we will store the actual stencil.*/
        projStencil : makelist(0,i,1,numStoredNodes),

        /* Loop over 2^dim cells abutting stored nodes. Each cell adds a
           contribution to the equation corresponding those stored nodes. */
        cI : 1,
        currCoord   : makelist(0,i,1,dim),
        currNodesEx : assoc(currCoord,nodesEx),
        femFld_e    : doExpand(makelist(eval_string(sconcat("femFld",cellToCoef[cI][2][k])),k,1,numB),bN),
        cellCont    : makelist(0,i,1,numNodes),
        for dI : 1 thru dim do (
          cellCont : cellCont+volFac*calcInnerProdList(varsC,1,bN,femFld_e)
        ),
        for k : 1 thru numStoredNodes do (
          idx : sublist_indices(currNodesEx,lambda([x],x=storedNodes[k])),
          if length(idx)>0 then (
            idx            : idx[1],
            projStencil[k] : projStencil[k]+cellCont[idx]
          )
        ),
        for dI : 1 thru dim do (
          cellsSoFar : cI,
          for pS : 1 thru cellsSoFar do (
            if (stencilLoc[sI][dI] > -1) then (
              /* Add contributions from nearest lower cell in dI direction. */
              cI : cI+1,
              currCoord     : copylist(cellToCoef[pS][1]),
              currCoord[dI] : -1,
              currNodesEx   : assoc(currCoord,nodesEx),
              femFld_e    : doExpand(makelist(eval_string(sconcat("femFld",cellToCoef[cI][2][k])),k,1,numB),bN),
              cellCont    : makelist(0,i,1,numNodes),
              for dI : 1 thru dim do (
                cellCont : cellCont+volFac*calcInnerProdList(varsC,1,bN,femFld_e)
              ),
              for k : 1 thru numStoredNodes do (
                idx : sublist_indices(currNodesEx,lambda([x],x=storedNodes[k])),
                if length(idx)>0 then (
                  idx            : idx[1],
                  projStencil[k] : projStencil[k]+cellCont[idx]
                )
              )
            )
          )
        ),
        projStencil : fullratsimp(projStencil),

        printf(fh, "void ~a_~aP~a(double **dx, double **femFld, double *out) ~%{ ~%", funcNm, stencilStr, polyOrder),
        printf(fh, "  // dx:      cell lengths of cells pointed to by the projection stencil.~%"),
        printf(fh, "  // femFld:  FEM field in cells pointed to by the projection stencil.~%"),
        printf(fh, "  // out:     projection of the FEM field.~%"),
        printf(fh, "~%"),

        /* Pointers to the cell lengths in cells pointed to by the stencil. */
        printf(fh, "  double *dxC  = dx[0]; ~%"),
        printf(fh, "~%"),

        volumeFac : (1/2)^dim,
        for dir : 1 thru dim do (
          volumeFac : volumeFac*dxC[dir-1]
        ),
        printf(fh, "  double volFac = ~a; ~%", float(volumeFac)),
        printf(fh, "~%"),

        /* Pointers to the data in cells pointed to by the stencil. */
        printf(fh, "  double *femFldC = femFld[0]; ~%"),
        i : 1,
        varStrs : [""],
        for d : 1 thru dim do (
          for sI : 1 thru 3^(d-1) do (
            for pm : -1 thru 1 step 2 do (
              i : i + 1,
              varStrs : append(varStrs, [sconcat(varStrs[sI],assoc(pm,locStrKey),string(varsC[d]))]),
              printf(fh, "  double *femFld~a = femFld[~a]; ~%", varStrs[i], i-1)
            )
          )
        ),
        printf(fh, "~%"),

        /* Write the relaxation stencil. */
        writeCExprsNoExpand1(out,projStencil),
        printf(fh, "~%"),

        printf(fh, "}~%"),
        printf(fh, "~%")

      )
    )
  )
)$
