/* A collection of functions commonly used by other Maxima scripts.
   in generating MGpoisson kernels. */

/* String used for identifying nearest neighbor cells,
   and location of the stencil. */
locStrKey : [[-1,"L"],[0,""],[1,"U"]]$

invertAssocList(assLstIn) := block([i,k,invALst],
  /* Invert an associative list, making the first entry of each element
     the second, and viceversa. */
  invALst : [],
  for i : 1 thru length(assLstIn) do (
    if listp(assLstIn[i][2]) then (
      for k : 1 thru length(assLstIn[i][2]) do (
        invALst : endcons([assLstIn[i][2][k],assLstIn[i][1]], invALst)
      )
    ) else (
      invALst : endcons([assLstIn[i][2],assLstIn[i][1]], invALst)
    )
  ),
  return(invALst)
)$

getStencilCoords(dimIn) := block([cD, dir, acI, bI, stencilLoc],
  /* Create a list with 3^dim elements. Each element is itself an dim-long
     list indicating whether the cell has a lower (=-1) or upper (=1)
     boundary, or no boundary (=0) in that direction. */
  cD         : 1,
  stencilLoc : [makelist(0,i,1,dimIn)],  /* Center stencil, all zeros. */
  for dir : 1 thru dimIn do (
    for acI : 1 thru 3^(dir-1) do (  /* Loop through cells already added to stencilLoc. */
      for bI : -1 thru 1 step 2 do (  /* Loop over lower and upper. */
        stencilLoc : append(stencilLoc, copylist([stencilLoc[acI]])),
        stencilLoc[length(stencilLoc)][dir] : bI
      )
    )
  ),
  return(stencilLoc)
)$

getCoordVarS(varsIn) := block([dim,sVars,d,coordVarS],
  /* Return an associative list between a stencil location coordinates in
     one direction and the (string) variables for that dimensionality.
     Used in placing variables in kernel boundary names. */
  dim         : length(varsIn),
  sVars       : copylist(varsIn),
  for d : 1 thru dim do ( sVars[d] : string(varsIn[d]) ),
  coordVarS : [[-1,sVars],[0,makelist("",i,1,dim)],[1,sVars]],
  return(coordVarS)
)$

getBCcombos(stencilLocIn,bcTypesIn) := block([dim,npDirsN,npBCcombos,tmp,l,cI,bcI,d,nInc,bcCombos],
  /* Given the BC types in bcTypesn and the stencil location
     stencilLocIn, return a list of of the different combinations of
     BCs, each of which will produce a separate kernel. */
  dim : length(stencilLocIn),

  /* Count the number of non-periodic boundaries. */
  npDirs  : sublist_indices(stencilLocIn,lambda([x],x # 0)),
  npDirsN : length(npDirs),

  /* Given npDirsN non-periodic directions there are bcN^npDirsN possible combinations of
     of that cell's stencil, assuming there are bcN types of BCs. */
  if (npDirsN # 0) then (
    npBCcombos : makelist([bcTypesIn[i]],i,2,length(bcTypesIn)),
    for l : 2 thru npDirsN do (
      tmp        : copylist(npBCcombos),
      npBCcombos : [],
      for cI : 1 thru length(tmp) do ( for bI : 2 thru length(bcTypesIn) do (
        npBCcombos : append(npBCcombos,[ append(tmp[cI],[bcTypesIn[bI]]) ])
      ) )
    ),

    bcCombos : makelist(makelist(0,d,1,dim),i,1,length(npBCcombos)),
    for iB : 1 thru length(bcCombos) do (
      for j : 1 thru npDirsN do (
        bcCombos[iB][npDirs[j]] : npBCcombos[iB][j]
      )
    )
  ) else (
    bcCombos :Â [makelist(0,i,1,dim)]
  ),

  return(bcCombos)
)$

getStencilStr(stencilLocIn,coordVarSIn,currBCIn,bcKeyIn) := block([d,dim,stStr],
  /* Given the stencil location, and BC types/keys, return the string
     used to name the kernel which identifies location and BC. */
  dim   : length(stencilLocIn),
  stStr : "",
  for d : 1 thru dim do (
    stStr : sconcat(stStr,assoc(stencilLocIn[d],locStrKey),
                    assoc(stencilLocIn[d],coordVarSIn)[d],assoc(currBCIn[d],bcKeyIn))
  ),
  if slength(stStr)>1 then ( stStr : sconcat(stStr,"_") ),
  return(stStr)
)$

getDataStr(stencilSizeIn,stencilLocIn,varsIn) := block([dim,dI,pS,k],
  /* stencilSizeIn should be a dim-long list, each entry a 2-element list 
     with the size of the stencil in the lower/upper direction. For each
     cell linked by the stencil, return a string identifying that cell. */
 dataStrs : [""],
 dim      : length(varsIn),
 for dI: 1 thru dim do (
   cellsSoFar : length(dataStrs),
   for pS : 1 thru cellsSoFar do (
     if (stencilLocIn[dI] > -1) then (
       /* Add stencilSizeIn[dI][1] nearest lower cells. */
       for k : 1 thru stencilSizeIn[dI][1] do (
         dataStrs : endcons(sconcat(dataStrs[pS],"L",smake(k,string(varsIn[dI]))),dataStrs)
       )
     ),
     if (stencilLocIn[dI] < 1) then (
       /* Add stencilSizeIn[dI][2] nearest upper cells. */
       for k : 1 thru stencilSizeIn[dI][2] do (
         dataStrs : endcons(sconcat(dataStrs[pS],"U",smake(k,string(varsIn[dI]))),dataStrs)
       )
     )
   )
 ),
 dataStrs[1] : "C",
 return(dataStrs) 
)$






