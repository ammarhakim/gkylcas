calcRecov1CellGen(basisNm, dir, numDims, polyOrder, C, lo, ce, up) := block(
  /* Returns recovered polynomial defined over 1 cell with a 3-cell stencil
  Inputs:
    basisNm : name of used basis function ("Ser", "Tensor", or "Max");
      NOTE: This makes no difference for 1D recoveries so it should
      ideally be an optional input but I don't see a way around it
      now. --Petr Cagas
    dir : direction of the recovery (x, y, or z)
    numDims : number of dimensions
    C : continuity of the recovered solution (either 0 or 1)
    lo : can be one of the following
      * dg(A) : A is an array of expansion coefficients corresponding
        to logical space basis functions (in the lower cell)
      * bc(D=_, N=_, val=_) : a boundary condition definition
        D*f(x)+N*df(x)/dx=val which is used instead of expansion
        coefficients
      * dg(A, bc(D=_, N=_, val=_)) : a constrained recovery where
        expansion coefficients are used together with boundary
        conditions at the edge
    ce : dg(A), where A is an array of expansion coefficients corresponding
      to logical space basis functions (in the middle cell)
    up : similar to 'lo' but in the upper cell
  Outputs:
    recovered polynomial
  */
  [
  DoF, r, rLo, rUp, rExp, rSol, rSub,
  recEqList, projSubList,
  baLo1D, baCe1D, baUp1D, baLoND, baCeND, baUpND,
  dimProjLo, dimProjCe, dimProjUp, qLo1D, qCe1D, qUp1D
  ],

  baCe1D : getBasis(sconcat("basis-precalc/basis", basisNm, "1x"), polyOrder),
  baCe1D : subst(x=dir, baCe1D),
  
  DoF : polyOrder + 3,
  for i : 1 thru C do (
    /* Increase the final number of degrees of freedom for C_1 continuity */
    if is(op(lo)=dg) then DoF : DoF + 1,
    if is(op(up)=dg) then DoF : DoF + 1
  ),
  
  /* Forming and solving the equation system */
  rExp : doExpand(r, makelist(dir^i, i, 0, DoF-1)), /* Final recovery polynomial */
  /* New solution is weakly equal to the original representation */
  recEqList : calcInnerProdListGen([dir], [[-1, 2]], 1,
    baCe1D, rExp-doExpand(qCe1D, baCe1D)),
  if is(op(lo)=dg) then (
    if length(args(lo)) > 1 then (
      rLo : calcRecov2CellGen(basisNm, dir, 1, polyOrder,
        dg(qLo1D, args(lo)[2]), dg(qCe1D))
    ) else (
      rLo : calcRecov2CellGen(basisNm, dir, 1, polyOrder,
        dg(qLo1D), dg(qCe1D))
      ),
    for i : 0 thru C do (
      recEqList : append(
        recEqList,
        [subst(dir=0, diff(rLo, dir, i))
          - subst(dir=-1, diff(rExp, dir, i))]
      )
    )
  ) else (
    recEqList : append(
      recEqList,
      [subst(args(lo), val - D*subst(dir=-1, rExp)
        - N*subst(dir=-1, diff(rExp, dir)))]
      )
  ),
  if is(op(up)=dg) then (
    if length(args(up)) > 1 then (
      rUp : calcRecov2CellGen(basisNm, dir, 1, polyOrder,
        dg(qCe1D), dg(qUp1D, args(up)[2]))
    ) else (
      rUp : calcRecov2CellGen(basisNm, dir, 1, polyOrder,
        dg(qCe1D), dg(qUp1D))
    ),
    for i : 0 thru C do (
      recEqList : append(
        recEqList,
        [subst(dir=0, diff(rUp, dir, i))
          - subst(dir=1, diff(rExp, dir, i))]
      )
    )
  ) else (
    recEqList : append(
      recEqList,
      [subst(args(up), val - D*subst(dir=1, rExp)
        - N*subst(dir=1, diff(rExp, dir)))]
    )
  ),

  rSol : linsolve(recEqList, makelist(r[i], i, 1, DoF)),
  rSub : fullratsimp(subst(rSol, rExp)),
  
  /* Backsubstitute the non-recovered directtions if needed */
  if numDims > 1 then (
    baLo1D : etaDir(dir, -2, 2, baCe1D),
    baUp1D : etaDir(dir, 2, 2, baCe1D),
    baCeND : getBasis(sconcat("basis-precalc/basis", basisNm, numDims, "x"),
                      polyOrder),
    baLoND : etaDir(dir, -2, 2, baCeND),
    baUpND : etaDir(dir, 2, 2, baCeND),
    
    dimProjCe : calcInnerProdListGen([dir], [[-1, 1]],
      1, baCe1D, doExpand(args(ce)[1], baCND)),
    projSubList : makelist(qCe1D[i]=dimProjCe[i], i, 1, length(baCe1D)),
    if is(op(lo)=dg) then (
      dimProjLo : calcInnerProdListGen([dir], [[-3, -1]],
        1, baLo1D, doExpand(args(lo)[1], baLoND)),
      projSubList : append (
        projSubList,
        makelist(qLo1D[i]=dimProjLo[i], i, 1, length(baCe1D))
      )
    ),
    if is(op(up)=dg) then (
      dimProjUp : calcInnerProdListGen([dir], [[1, 3]],
        1, baUp1D, doExpand(args(up)[1], baUpND)),
      projSubList : append (
        projSubList,
        makelist(qUp1D[i]=dimProjUp[i], i, 1, length(baCe1D))
      )
    )
  )
  else (
    projSubList : makelist(qCe1D[i]=args(ce)[1][i], i, 1, length(baCe1D)),
    if is(op(lo)=dg) then (
      projSubList : append (
        projSubList,
        makelist(qLo1D[i]=args(lo)[1][i], i, 1, length(baCe1D))
      )
    ),
    if is(op(up)=dg) then (
      projSubList : append (
        projSubList,
        makelist(qUp1D[i]=args(up)[1][i], i, 1, length(baCe1D))
      )
    )
  ),
  
  return(expand(subst(projSubList, rSub)))
) $