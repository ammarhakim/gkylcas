calcRecov2CellGen(basisNm, dir, numDims, polyOrder, lo, up) := block(
  /* Returns recovered polynomial across two neighboring cells.
  Inputs:
    basisNm : name of used basis function ("Ser", "Tensor", or "Max");
      NOTE: This makes no difference for 1D recoveries so it should
      ideally be an optional input but I don't see a way around it
      now. --Petr Cagas
    dir : direction of the recovery (x, y, or z)
    numDims : number of dimensions
    polyOrder : polynomial order of the inputs
    lo : can be one of the following
      * dg(A) : A is an array of expansion coefficients corresponding
        to logical space basis functions
      * bc(D=_, N=_, val=_) : a boundary condition definition
        D*f(x)+N*df(x)/dx=val; note that this BC is definided at the
        interface between the two cells, which makes this a quite
        weird case that will most likely not see much use
      * dg(A, bc(D=_, N=_, val=_)) : a constrained recovery where
        expansion coefficients are used together with boundary
        conditions at the edge
    up : equvivalent of `lo` at the upper side
  Outputs:
    a polynomial
  */
  [
  DoF, r, rExp, rSol, rSub,
  recEqList, projSubList,
  baLo1D, baCe1D, baUp1D, baLoND, baCeND, baUpND,
  dimProjLo, dimProjUp, qLo1D, qUp1D
  ],
 
  /* forming and solving the equation system */
  DoF : 0,
  if is(op(lo)=dg) then (
    DoF : DoF + polyOrder+1,
    if length(args(lo)) > 1 then DoF : DoF + 1 /* aditional DoF for BC */
  )
  else (
    DoF : DoF + 1 /* only 1 DoF for BC */
  ),
  if is(op(up)=dg) then (
    DoF : DoF + polyOrder+1,
    if length(args(up)) > 1 then DoF : DoF + 1 /* aditional DoF for BC */
  )
  else (
    DoF : DoF + 1 /* only 1 DoF for BC */
  ),
  rExp : doExpand(r, makelist(dir^i, i, 0, DoF-1)), /* recovery polynomial */

  baCe1D : getBasis(sconcat("basis-precalc/basis", basisNm, "1x"), polyOrder),
  baCe1D : subst(x=dir, baCe1D),
  
  recEqList : [], /* equation set from the weak equality formulation */
  if is(op(lo)=dg) then (
    baLo1D : etaDir(dir, -1, 2, baCe1D),
    recEqList : append(
      recEqList,
      calcInnerProdListGen([dir], [[-2, 0]], 1,
        baLo1D, rExp-doExpand(qLo1D, baLo1D))
    ),
    if length(args(lo)) > 1 then (
      recEqList : append(
        recEqList,
        [subst(args(args(lo)[2]), val - D*subst(dir=-2, rExp)
          - N*subst(dir=-2, diff(rExp, dir)))]
      )
    )
  )
  else (
    recEqList : append(
      recEqList,
      [subst(args(lo), val - D*subst(dir=0, rExp)
        - N*subst(dir=0, diff(rExp, dir)))]
    )
  ),

  if is(op(up)=dg) then (
    baUp1D : etaDir(dir, 1, 2, baCe1D),
    recEqList : append(
      recEqList,
      calcInnerProdListGen([dir], [[0, 2]], 1,
        baUp1D, rExp-doExpand(qUp1D, baUp1D))
    ),
    if length(args(up)) > 1 then (
      recEqList : append(
        recEqList,
        [subst(args(args(up)[2]), val - D*subst(dir=2, rExp)
          - N*subst(dir=2, diff(rExp, dir)))]
      )
    )
  )
  else (
    recEqList : append(
      recEqList,
      [subst(args(up), val - D*subst(dir=0, rExp)
        - N*subst(dir=0, diff(rExp, dir)))]
    )
  ),

  rSol : linsolve(recEqList, makelist(r[i], i, 1, DoF)),
  rSub : fullratsimp(subst(rSol, rExp)),
  
  /* backsubstitute the non-recovered directtions if needed */
  if numDims > 1 then (
    baND : getBasis(sconcat("basis-precalc/basis", basisNm, numDims, "x"), polyOrder),
    
    projSubList : [],
    if is(op(lo)=dg) then (
      baLoND : etaDir(dir, -1, 2, baND),
      dimProjLo : calcInnerProdListGen([dir], [[-dx[dIdx], 0]],
        1, baLo1D, doExpand(args(lo)[1], baLoND)),
      projSubList : append (
        projSubList,
        makelist(qLo1D[i]=dimProjLo[i], i, 1, length(baCe1D))
      )
    ),
    if is(op(up)=dg) then (
      baUpND : etaDir(dir, -1, 2, baND),
      dimProjUp : calcInnerProdListGen([dir], [[0, dx[dIdx]]],
        1, baUp1D, doExpand(args(up)[1], baUpND)),
      projSubList : append (
        projSubList,
        makelist(qUp1D[i]=dimProjUp[i], i, 1, length(baCe1D))
      )
    )
  )
  else (
    projSubList : [],
    if is(op(lo)=dg) then (
      projSubList : append (
        projSubList,
        makelist(qLo1D[i]=args(lo)[1][i], i, 1, length(baCe1D))
      )
    ),
    if is(op(up)=dg) then (
      projSubList : append (
        projSubList,
        makelist(qUp1D[i]=args(up)[1][i], i, 1, length(baCe1D))
      )
    )
  ),

  return(expand(subst(projSubList, rSub)))
  ) $