calcRecov2CellGen(basisNm, recDir, dirs, polyOrder, lo, up) := block(
  /* Returns recovered polynomial across two neighboring cells.
  Inputs:
    basisNm : name of used basis function ("Ser", "Tensor", or "Max");
      NOTE: This makes no difference for 1D recoveries so it should
      ideally be an optional input but I don't see a way around it
      now. --Petr Cagas
    recDir : direction of the recovery (x, y, or z)
    dirs : direction names, e.g. [x, y]
    polyOrder : polynomial order of the inputs
    lo : can be one of the following
      * dg(A) : A is an array of expansion coefficients corresponding
        to logical space basis functions
      * bc(D=_, N=_, val=_) : a boundary condition definition
        D*f(x)+N*df(x)/dx=val; note that this BC is definided at the
        interface between the two cells, which makes this a quite
        weird case that will most likely not see much use
      * dg(A, bc(D=_, N=_, val=_)) : a constrained recovery where
        expansion coefficients are used together with boundary
        conditions at the edge
    up : equivalent of `lo` at the upper side
  Outputs:
    a polynomial
  */
  [
  DoF, r, rExp, rSol, rSub,
  recEqList, projSubList,
  baLo1D, baCe1D, baUp1D, baLoND, baCeND, baUpND,
  dimProjLo, dimProjUp, qLo1D, qUp1D,
  wx, wy, wz,
  numDims,
  baCeNDw, perpDirs,
  bcExp
  ],
  
  baCe1D : getBasis(basisNm, 1, polyOrder),
  baCe1D : subst(x=recDir, baCe1D),
  baLo1D : etaDir(recDir, -1, 2, baCe1D),
  baUp1D : etaDir(recDir, 1, 2, baCe1D),
 
  /* forming and solving the equation system */
  DoF : 0,
  if is(op(lo)=dg) then (
    DoF : DoF + polyOrder + 1,
    if length(args(lo)) > 1 then (
      if is(op(args(lo)[2])=bc) then (
        DoF : DoF + 1 /* only 1 DoF for BC */
      )
      else (
        DoF : DoF + length(args(args(lo)[2]))
      )
    )
  )
  elseif is(op(lo)=bc) then (
    DoF : DoF + 1 /* only 1 DoF for BC */
  )
  else (
    DoF : DoF + length(args(lo))
  ),
  if is(op(up)=dg) then (
    DoF : DoF + polyOrder + 1,
    if length(args(up)) > 1 then (
      if is(op(args(up)[2])=bc) then (
        DoF : DoF + 1 /* only 1 DoF for BC */
      )
      else (
        DoF : DoF + length(args(args(up)[2]))
      )
    )
  )
  elseif is(op(up)=bc) then (
    DoF : DoF + 1 /* only 1 DoF for BC */
  )
  else (
    DoF : DoF + length(args(up))
  ),
  rExp : doExpand(r, makelist(recDir^i, i, 0, DoF-1)), /* recovery polynomial */

  recEqList : [], /* equation set from the weak equality formulation */
  if is(op(lo)=dg) then (
    recEqList : append(
      recEqList,
      calcInnerProdListGen([recDir], [[-2, 0]], 1,
        baLo1D, rExp-doExpand(qLo1D, baLo1D))
    ),
    if length(args(lo)) > 1 then (
      if is(op(args(lo)[2])=bc) then (
        recEqList : append(
          recEqList,
          [subst(args(args(lo)[2]), val - D*subst(recDir=-2, rExp)
            - N*subst(recDir=-2, diff(rExp, recDir)))]
        )
      )
      else (
        for i : 1 thru length(args(args(lo)[2])) do (
          recEqList : append(
            recEqList,
            [subst(args(args(lo)[2])[i], val)
              - subst(recDir=-2, diff(rExp, recDir, subst(args(args(lo)[2])[i], der)))]
          )
        )
      )
    )
  )
  elseif is(op(lo)=bc) then (
    recEqList : append(
      recEqList,
      [subst(args(lo), val - D*subst(recDir=0, rExp)
        - N*subst(recDir=0, diff(rExp, recDir)))]
    )
  )
  else (
    for i : 1 thru length(args(lo)) do (
      recEqList : append(
        recEqList,
        [subst(args(lo)[i], val)
          - subst(recDir=0, diff(rExp, recDir, subst(args(lo)[i], der)))]
      )
    )
  ),

  if is(op(up)=dg) then (
    recEqList : append(
      recEqList,
      calcInnerProdListGen([recDir], [[0, 2]], 1,
        baUp1D, rExp-doExpand(qUp1D, baUp1D))
    ),
    if length(args(up)) > 1 then (
      if is(op(args(up)[2])=bc) then (
        recEqList : append(
          recEqList,
          [subst(args(args(up)[2]), val - D*subst(recDir=2, rExp)
            - N*subst(recDir=2, diff(rExp, recDir)))]
        )
      )
      else (
        for i : 1 thru length(args(args(up)[2])) do (
          recEqList : append(
            recEqList,
            [subst(args(args(up)[2])[i], val)
              - subst(recDir=2, diff(rExp, recDir, subst(args(args(up)[2])[i], der)))]
          )
        )
      )
    )
  )
  elseif is(op(up)=bc) then (
    recEqList : append(
      recEqList,
      [subst(args(up), val - D*subst(recDir=0, rExp)
        - N*subst(recDir=0, diff(rExp, recDir)))]
    )
  )
  else (
    for i : 1 thru length(args(up)) do (
      recEqList : append(
        recEqList,
        [subst(args(up)[i], val) - subst(recDir=0, diff(rExp, recDir, subst(args(up)[i], der)))]
      )
    )
  ),

  rSol : linsolve(recEqList, makelist(r[i], i, 1, DoF)),
  rSub : fullratsimp(subst(rSol, rExp)),
  
  /* backsubstitute the non-recovered directtions if needed */
  numDims : length(dirs),
  if numDims > 1 then (
    baCeND : getBasis(basisNm, numDims, polyOrder),
    baVars : listofvars(baCeND),
    baCeND : psubst(makelist(baVars[i]=dirs[i],i,1,numDims), baCeND),  
    baLoND : etaDir(recDir, -1, 2, baCeND),
    baUpND : etaDir(recDir, 1, 2, baCeND),
    /* prepare for the case where expansion coefficients at a wall are
    given; i.e., a basis function set with one less dimension is
    needed */
    perpDirs : delete(recDir, dirs),
    baCeNDw  : getBasis(basisNm, numDims-1, polyOrder),
    baVars   : listofvars(baCeNDw),
    baCeNDw  : psubst(makelist(baVars[i]=perpDirs[i],i,1,numDims-1), baCeNDw), 
    
    projSubList : [],
    if is(op(lo)=dg) then (
      dimProjLo : calcInnerProdListGen([recDir], [[-2, 0]],
        1, baLo1D, doExpand(args(lo)[1], baLoND)),
      projSubList : append (
        projSubList,
        makelist(qLo1D[i]=dimProjLo[i], i, 1, length(baCe1D))
      ),
      if length(args(lo)) > 1 then (
        bcExp : subst(args(args(lo)[2]), ec),
        if not atom(bcExp) then (
          projSubList : append(
            projSubList,
            [val=doExpand(bcExp, baCeNDw)]
          )
        )
      )
    ),
    if is(op(up)=dg) then (
      dimProjUp : calcInnerProdListGen([recDir], [[0, 2]],
        1, baUp1D, doExpand(args(up)[1], baUpND)),
      projSubList : append (
        projSubList,
        makelist(qUp1D[i]=dimProjUp[i], i, 1, length(baCe1D))
      ),
      if length(args(up)) > 1 then (
        bcExp : subst(args(args(up)[2]), ec),
        if not atom(bcExp) then (
          projSubList : append(
            projSubList,
            [val=doExpand(bcExp, baCeNDw)]
          )
        )
      )
    )
  )
  else (
    projSubList : [],
    if is(op(lo)=dg) then (
      projSubList : append (
        projSubList,
        makelist(qLo1D[i]=args(lo)[1][i], i, 1, length(baCe1D))
      )
    ),
    if is(op(up)=dg) then (
      projSubList : append (
        projSubList,
        makelist(qUp1D[i]=args(up)[1][i], i, 1, length(baCe1D))
      )
    )
  ),
  return(expand(subst(projSubList, rSub)))
  ) $
