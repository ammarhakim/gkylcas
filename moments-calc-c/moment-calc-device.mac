load(stringproc)$

/* ...... USER INPUTS........ */

/* Serendipity basis. */
maxPolyOrder_Ser : 1$
minCdim_Ser : 1$
minVdim_Ser : 1$    /* but see v loop below. */
maxCdim_Ser : 1$
maxVdim_Ser : 1$

/* Maximal order basis. */
maxPolyOrder_Max : 1$
minCdim_Max : 1$
minVdim_Max : 1$    /* but see v loop below. */
maxCdim_Max : 0$
maxVdim_Max : 0$

/* Tensor order basis. */
maxPolyOrder_Tensor : 1$    /* BoundaryEval fails for polyOrder>2 for some reason. */
minCdim_Tensor : 1$
minVdim_Tensor : 1$    /* but see v loop below. */
maxCdim_Tensor : 0$
maxVdim_Tensor : 0$

gkVdims      : [[1,2], [2], [2]]$

/* ...... END OF USER INPUTS........ */

bName        : ["Ser","Max","Tensor"]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Max, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Max, minCdim_Tensor]$
minVdim      : [minVdim_Ser, minVdim_Max, minVdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Max, maxCdim_Tensor]$
maxVdim      : [maxVdim_Ser, maxVdim_Max, maxVdim_Tensor]$

load(gentran)$
gentranlang : c$

disp(printf(false,"Creating CUDA wrappers:"))$
for bInd : 1 thru length(bName) do (
  for c : minCdim[bInd] thru maxCdim[bInd] do (
    for v : c thru maxVdim[bInd] do (
  
      /* Vlasov moment calculators. */
      disp(printf(false,sconcat("  DistFuncMomentCalc", bName[bInd], "~ax~avDevice.cu"),c,v)),
      fname : sconcat("~/max-out/DistFuncMomentCalc", bName[bInd], c, "x", v, "vDevice", ".cu"),
      fh : openw(fname),
      printf(fh,"/* -*- c++ -*- */~%"),
      printf(fh,"// Gkyl ------------------------------------------------------------------------~%"),
      printf(fh,"//~%"),
      printf(fh,"// CUDA wrappers for moment-calculating kernels.~%"),
      printf(fh,"//~%"),
      printf(fh,"//    _______     ___~%"),
      printf(fh,"// + 6 @ |||| # P ||| +~%"),
      printf(fh,"//------------------------------------------------------------------------------~%"),
      printf(fh,"~%"),
      printf(fh,"#include \"DistFuncMomentCalcDeviceWrappers.h\"~%"),
      printf(fh,"#include \"DistFuncMomentCalcModDecl.h\"~%"),
      printf(fh,"#include \"DistFuncMomentCalcDeviceCommon.cu\"~%"),
      printf(fh,"~%"),
      close(fh),

      for polyOrder : 1 thru maxPolyOrder[bInd] do (

        gentranin("moments-calc-c/moment-device.mac", [fname]),
        gentraninshut()

      )
  
    )

  )
);

