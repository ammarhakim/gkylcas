/** 5M (euler) equations */

load(itensor)$

/** Compute Jacobian matrix J[i,j] : diff(F[i],Q[j]) */
calcJac(F, Q) := genmatrix(
  lambda([i,j], diff(F[i],Q[j])),
  length(F), length(Q)
  )$

genmatrix(
  lambda([i,j], diff(F[i],Q[j])), length(F), length(Q))$

/**** Euler Equations in primitive form */
dn(dir) := u[1]*D(n) + n*D(u[1])$ /* Density */
du(dir, i) := u[1]*D(u(i)) + 1/(m*n)*D(p)*kdelta([],[i,dir])$ /* Velocity */
dp(dir) := u[1]*D(p) + gamma*p*D(u[1])$ /* Pressure */

/* Equations in directon dir */
eqList(dir) := [dn(dir), du(dir,1), du(dir,2), du(dir,3), dp(dir)]$

/* Differentials */
diffList : [D(n), D(u[1]), D(u[2]), D(u[3]), D(p)]$

/* Construct coefficient matrix */
AEuler_1 : coefmatrix(eqList(1), diffList)$
AEuler_2 : coefmatrix(eqList(2), diffList)$
AEuler_3 : coefmatrix(eqList(3), diffList)$

/* Source for momentum equations  */
momSrc(i) := qbym*(E[i] + sum(sum(B[m]*u[k]*levi_civita([k,m,i]), k, 1, 3), m, 1, 3))$

/* List of source terms */
srcList : map(canform, [0, momSrc(1), momSrc(2), momSrc(3), 0])$

/* List of 5M variables */
varList : [n, u[1], u[2], u[3], p]$

/* Compute source Jacobian */
srcJac : calcJac(srcList, varList)$

/* List of EM variables */
emVarList : [E[1], E[2], E[3], B[1], B[2], B[3]]$

/* Compute contribution of sources to EM terms */
emSrcJac : calcJac(srcList, emVarList)$



