/** Linearization of Maxwell equations (they are already linear) */

/** Compute Jacobian matrix J[i,j] : diff(F[i],Q[j]) */
calcJac(F, Q) := genmatrix(lambda([i,j], diff(F[i],Q[j])), length(F), length(Q))$

/* Maxwell equations */
maxFx : [0, c^2*B[3], -c^2*B[2], 0, -E[3], E[2]]$
maxFy : [-c^2*B[3], 0, c^2*B[1], E[3], 0, -E[1]]$
maxFz : [c^2*B[2], -c^2*B[1], 0, -E[2], E[1], 0]$

/* List of EM variables */
emVarList : [E[1], E[2], E[3], B[1], B[2], B[3]]$

AMaxwell[1] : calcJac(maxFx, emVarList)$
AMaxwell[2] : calcJac(maxFy, emVarList)$
AMaxwell[3] : calcJac(maxFz, emVarList)$

/* Sources for Maxwell equations */
srcList : [-q*n*u[1], -q*n*u[2], -q*n*u[3]]/epsilon0$
/* List of moment variable */
momVarList : [n, u[1], u[2], u[3]]$

momSrcJac : calcJac(srcList, momVarList)$

/* Write contribution to field part of D to file */
fh : openw("~/max-out/maxwell-lin-fld-D.lua")$

kA : sum(k[i]*AMaxwell[i], i, 1, 3),
[nrow, ncol] : matrix_size(AMaxwell[1])$
for i : 1 thru nrow do (
  for j : 1 thru ncol do (
    if kA[i][j] # 0 then printf(fh, " D[~a][~a] = ~a ~%", i, j, kA[i][j] )
    )
  )$

close(fh)$

/* Write contribution to moment part of D to file */
fh : openw("~/max-out/maxwell-lin-mom-D.lua")$

[nrow, ncol] : matrix_size(momSrcJac)$
for i : 1 thru nrow do (
  for j : 1 thru ncol do (
    printf(fh, " D[~a][~a] = ~a*1i ~%", i, j, momSrcJac[i,j])
    )
  )$

close(fh)$