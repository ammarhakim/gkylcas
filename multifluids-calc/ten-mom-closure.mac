/** Linearization of 10M equations */

load(itensor)$

/** Compute Jacobian matrix J[i,j] : diff(F[i],Q[j]) */
calcJac(F, Q) := genmatrix(lambda([i,j], diff(F[i],Q[j])), length(F), length(Q))$

/** Declare P and Q as symmetric tensors */
decsym(P,2,0,[sym(all)],[]);
decsym(T,2,0,[sym(all)],[]);
decsym(Q,3,0,[sym(all)],[]);

/* Gradient of perturbed heat-flux */
dq(j,k) := sum(kv[i]*(kv[i]*P([j,k],[]) + kv[j]*P([k,i],[])+kv[k]*P([i,j],[])), i, 1, 3)$

/* Collect contributions to pressure tensor terms */
dqClosure : canform([dq(1,1), dq(1,2), dq(1,3), dq(2,2), dq(2,3), dq(3,3)])$

/* Temperature terms */
Pij : [P([1,1],[]), P([1,2],[]), P([1,3],[]), P([2,2],[]), P([2,3],[]), P([3,3],[])]$

closureJac : coefmatrix(dqClosure, Pij)$
