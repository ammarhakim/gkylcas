/* Generate kernels that perform binary operations between
   two fields. Currently two operations are supported:
     1) Weak division by a scalar function.
     2) Weak multiplication.
   This script calls the functions calcBinOp for various
   combinations of configuration and velocity space, and
   indicates the maximum polyOrder to generate code for. */
load("binOp-calc-c/binOp-division-calc")$
load("binOp-calc-c/binOp-multiplication-calc")$
load("binOp-calc-c/binOp-dotProduct-calc")$
load(stringproc)$

/* ...... USER INPUTS........ */

/* Serendipity basis. */
maxPolyOrder_Ser : 2$
minCdim_Ser : 1$
minVdim_Ser : 1$
maxCdim_Ser : 3$
maxVdim_Ser : 3$

/* Maximal order basis. */
maxPolyOrder_Max : 2$
minCdim_Max : 1$
minVdim_Max : 1$
maxCdim_Max : 3$
maxVdim_Max : 3$

/* Tensor product basis. */
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
minVdim_Tensor : 1$
maxCdim_Tensor : 2$
maxVdim_Tensor : 2$

/* ...... END OF USER INPUTS........ */

bName        : ["Ser","Max","Tensor"]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Max, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Max, minCdim_Tensor]$
minVdim      : [minVdim_Ser, minVdim_Max, minVdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Max, maxCdim_Tensor]$
maxVdim      : [maxVdim_Ser, maxVdim_Max, maxVdim_Tensor]$

for bInd : 1 thru length(bName) do (
  /* Generate kernels for operations between two fields defined on
     spaces with same dimensions (1D, 2D, 3D). */
  for polyOrder : 1 thru maxPolyOrder[bInd] do (
    for c : minCdim[bInd] thru maxCdim[bInd] do (
      fname : sconcat("~/max-out/CartFieldBinOp", bName[bInd], c, "xP", polyOrder, ".cpp"),
      fh : openw(fname),
    
      disp(printf(false,sconcat("Creating ~ax ", bName[bInd]),c)),
    
      printf(fh, "#include <math.h> ~%"),
      printf(fh, "#include <CartFieldBinOpModDecl.h> ~%"),
      printf(fh, " ~%"),
      printf(fh, "using namespace Eigen; ~%"),
      printf(fh, " ~%"),
      
      funcName : sconcat("CartFieldBinOpMultiply", c, "x", bName[bInd]),
      disp(printf(false,sconcat("Working on CartFieldBinOpMultiply", c, "x", bName[bInd]))),
      calcBinOpConfMultiply(fh, funcName, c, bName[bInd],polyOrder),
      
      usePositivity : false,
      funcName : sconcat("CartFieldBinOpDivide", c, "x", bName[bInd]),
      disp(printf(false,sconcat("Working on CartFieldBinOpDivide", c, "x", bName[bInd]))),
      calcBinOpConfDivide(fh, funcName, c, bName[bInd], polyOrder, usePositivity),

/*
      if (bName[bInd]="Ser" and polyOrder=1) then (
        usePositivity : true,
        funcName : sconcat("CartFieldBinOpDividePositivity", c, "x", bName[bInd]),
        disp(printf(false,sconcat("Working on CartFieldBinOpDividePositivity", c, "x", bName[bInd]))),
        calcBinOpConfDivide(fh, funcName, c, bName[bInd], polyOrder, usePositivity)
      ),
*/
     
      funcName : sconcat("CartFieldBinOpDotProduct", c, "x", bName[bInd]),
      disp(printf(false,sconcat("Working on CartFieldBinOpDotProduct", c, "x", bName[bInd]))),
      calcBinOpDotProduct(fh, funcName, c, bName[bInd],polyOrder),
     
      close(fh)
    ),
  
    for c : minCdim[bInd] thru maxCdim[bInd] do (
      for v : min(2,c) thru maxVdim[bInd] do (
        if(not (c+v>4 and polyOrder > 1)) then (
          fname : sconcat("~/max-out/CartFieldBinOp", bName[bInd], c, "x", v, "vP", polyOrder, ".cpp"),
          fh : openw(fname),
    
          disp(printf(false,sconcat("Creating ~ax~av ", bName[bInd]),c,v)),
    
          printf(fh, "#include <math.h> ~%"),
          printf(fh, "#include <CartFieldBinOpModDecl.h> ~%"),
          printf(fh, " ~%"),
          printf(fh, "using namespace Eigen; ~%"),
          printf(fh, " ~%"),

          /* Kernels for operations between two fields defined
             on the same (phase) space. */
          funcName : sconcat("CartFieldBinOpMultiply", c, "x", v, "v", bName[bInd]),
          disp(printf(false,sconcat("Working on CartFieldBinOpMultiply", c, "x", v, "v", bName[bInd]))),
          calcBinOpPhasePhaseMultiply(fh, funcName, c, v, bName[bInd],polyOrder),
       
          /* Kernels for operations between two fields defined on
             spaces with different dimensions, i.e. operations between
             a configuration space field and a phase space field. */
          funcName : sconcat("CartFieldBinOpConfPhaseMultiply", c, "x", v, "v", bName[bInd]),
          disp(printf(false,sconcat("Working on CartFieldBinOpConfPhaseMultiply", c, "x", v, "v", bName[bInd]))),
          calcBinOpConfPhaseMultiply(fh, funcName, c, v, bName[bInd],polyOrder), 
    
          funcName : sconcat("CartFieldBinOpConfPhaseDivide", c, "x", v, "v", bName[bInd]),
          disp(printf(false,sconcat("Working on CartFieldBinOpConfPhaseDivide", c, "x", v, "v", bName[bInd]))),
          calcBinOpConfPhaseDivide(fh, funcName, c, v, bName[bInd],polyOrder),
    
          close(fh)
        )
      )
    )
  )
)$

