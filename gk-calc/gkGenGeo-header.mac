/* Generate the header file for the kernels of the gyrokinetic
   equation.

   See the bottom of the file for run commands. */

cvars : [X, Y, Z]$
vvars : [Vpar, Mu]$

printPrototypes() := block([], 
  pmax : 2,
  for ci : 1 thru 3 do (
    for vi: 0 thru 2 do (
      if ci=1 or (ci>1 and vi=2) or (ci=2 and vi=0) then (
        if ci=1 then bvarslist : [[0], [1]],
        if ci=2 then bvarslist : [[0], [1]],
        if ci=3 then bvarslist : [[0], [1], [3], [1,3]],
        for pi : 1 thru pmax do (
          printf(fh, "double EmGyrokineticGenGeoStep2Vol~ax~avSerP~a(const double q_, const double m_, const double *w, const double *dxv, const double *dApardt, const double *f, double *out); ~%", ci, vi, pi),
          for b : 1 thru length(bvarslist) do (
            printf(fh, "double GyrokineticGenGeoVol~ax~avSerP~a_Bvars_~a(const double q_, const double m_, const double *w, const double *dxv, const double *Bmag, const double *BmagInv, const double *Gradpar, const double *geoX, const double *geoY, const double *geoZ, const double *Phi, const double *f, double *out); ~%", ci, vi, pi, simplode(bvarslist[b],"_")),
            printf(fh, "double EmGyrokineticGenGeoVol~ax~avSerP~a_Bvars_~a(const double q_, const double m_, const double *w, const double *dxv, const double *Bmag, const double *BmagInv, const double *Gradpar, const double *geoX, const double *geoY, const double *geoZ, const double *Phi, const double *Apar, const double *dApardt, const double *f, double *out); ~%", ci, vi, pi, simplode(bvarslist[b],"_")),

            if vi = 0 then vd : 0
            else vd : 1,

            for si : 1 thru ci+vd do (
              if si <= ci then dirlabel : cvars[si]
              else dirlabel : vvars[si-ci],

              printf(fh, "double GyrokineticGenGeoSurf~ax~avSer_~a_P~a_Bvars_~a(const double q_, const double m_, const double cflL, const double cflR, const double *w, const double *dxv, const double amax_in, const double *Bmag, const double *BmagInv, const double *Gradpar, const double *geoX, const double *geoY, const double *geoZ, const double *Phi, const double *fl, const double *fr, double *outl, double *outr); ~%", ci, vi, dirlabel, pi, simplode(bvarslist[b],"_")),
              printf(fh, "double EmGyrokineticGenGeoSurf~ax~avSer_~a_P~a_Bvars_~a(const double q_, const double m_, const double cflL, const double cflR, const double *w, const double *dxv, const double amax_in, const double *Bmag, const double *BmagInv, const double *Gradpar, const double *geoX, const double *geoY, const double *geoZ, const double *Phi, const double *Apar, const double *AparL, const double *dApardt, const double *dApardtPrev, const double *fl, const double *fr, double *outl, double *outr, double *emModL, double *emModR); ~%", ci, vi, dirlabel, pi, simplode(bvarslist[b],"_")),
              printf(fh, "double EmGyrokineticGenGeoSurf~ax~avSerStep2_~a_P~a_Bvars_~a(const double q_, const double m_, const double cflL, const double cflR, const double *w, const double *dxv, const double amax_in, const double *Bmag, const double *BmagInv, const double *Gradpar, const double *geoX, const double *geoY, const double *geoZ, const double *Phi, const double *Apar, const double *AparL, const double *dApardt, const double *dApardtPrev, const double *fl, const double *fr, double *outl, double *outr, double *emModL, double *emModR); ~%", ci, vi, dirlabel, pi, simplode(bvarslist[b],"_")),
              printf(fh, "double GyrokineticGenGeoSurfPositivity~ax~avSer_~a_P~a_Bvars_~a(const double q_, const double m_, const double cflL, const double cflR, const double *w, const double *dxv, const double amax_in, const double *Bmag, const double *BmagInv, const double *Gradpar, const double *geoX, const double *geoY, const double *geoZ, const double *Phi, const double *fl, const double *fr, double *outl, double *outr); ~%", ci, vi, dirlabel, pi, simplode(bvarslist[b],"_")),
              printf(fh, "double EmGyrokineticGenGeoSurfPositivity~ax~avSer_~a_P~a_Bvars_~a(const double q_, const double m_, const double cflL, const double cflR, const double *w, const double *dxv, const double amax_in, const double *Bmag, const double *BmagInv, const double *Gradpar, const double *geoX, const double *geoY, const double *geoZ, const double *Phi, const double *Apar, const double *AparL, const double *dApardt, const double *dApardtPrev, const double *fl, const double *fr, double *outl, double *outr); ~%", ci, vi, dirlabel, pi, simplode(bvarslist[b],"_")),
              printf(fh, "double EmGyrokineticGenGeoSurfPositivity~ax~avSerStep2_~a_P~a_Bvars_~a(const double q_, const double m_, const double cflL, const double cflR, const double *w, const double *dxv, const double amax_in, const double *Bmag, const double *BmagInv, const double *Gradpar, const double *geoX, const double *geoY, const double *geoZ, const double *Phi, const double *Apar, const double *AparL, const double *dApardt, const double *dApardtPrev, const double *fl, const double *fr, double *outl, double *outr); ~%", ci, vi, dirlabel, pi, simplode(bvarslist[b],"_"))
            ),
            printf(fh, "~%")      
          ),
          printf(fh, "~%")
)))))$

fh : openw("~/max-out/GyrokineticGenGeoModDecl.h")$
printf(fh, "#ifndef GYROKINETICGENGEO_MOD_DECL_H ~%")$
printf(fh, "#define GYROKINETICGENGEO_MOD_DECL_H ~%")$
printf(fh, "#include <cmath> ~%")$
printf(fh, "#include <algorithm> ~%")$
printf(fh, "#include <Positivity.h> ~%")$
printf(fh, "#define SURFAVG 1 ~%")$
printf(fh, "#define QUAD 2 ~%")$
printf(fh, "#define cflType QUAD ~%")$
printf(fh, "#define upwindType QUAD ~%")$
printf(fh, "template <typename T> int sgn(T val) { ~%")$
printf(fh, "    return (T(0) < val) - (val < T(0)); ~%}~%")$
printf(fh, "extern \"C\" { ~%")$
printPrototypes()$
printf(fh, "} ~%")$
printf(fh, "#endif ~%")$
close(fh)$

