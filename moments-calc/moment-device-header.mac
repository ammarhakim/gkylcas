/* 
   Generate header file for moment device kernels wrappers.
*/

/* ...... USER INPUTS........ */

/* Serendipity basis. */
maxPolyOrder_Ser : 3$
minCdim_Ser : 1$
minVdim_Ser : 1$    /* but see v loop below. */
maxCdim_Ser : 3$
maxVdim_Ser : 3$

/* Maximal order basis. */
maxPolyOrder_Max : 3$
minCdim_Max : 1$
minVdim_Max : 1$    /* but see v loop below. */
maxCdim_Max : 3$
maxVdim_Max : 3$

/* Tensor order basis. */
maxPolyOrder_Tensor : 2$    /* BoundaryEval fails for polyOrder>2 for some reason. */
minCdim_Tensor : 1$
minVdim_Tensor : 1$    /* but see v loop below. */
maxCdim_Tensor : 2$
maxVdim_Tensor : 2$

gkVdims      : [[1,2], [2], [2]]$

/* ...... END OF USER INPUTS........ */

bName        : ["Ser","Max","Tensor"]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Max, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Max, minCdim_Tensor]$
minVdim      : [minVdim_Ser, minVdim_Max, minVdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Max, maxCdim_Tensor]$
maxVdim      : [maxVdim_Ser, maxVdim_Max, maxVdim_Tensor]$

printPrototypes() := block([],
  for bInd : 1 thru length(bName) do (
    for ci : minCdim[bInd] thru maxCdim[bInd] do (
      for vi : max(ci,minVdim[bInd]) thru maxVdim[bInd] do (
  
        maxPolyOrderB : maxPolyOrder[bInd],
        if (ci+vi>4 and maxPolyOrderB > 2) then maxPolyOrderB : 2,
        if (ci+vi=6 and maxPolyOrderB > 1) then maxPolyOrderB : 1,
        for pi : 1 thru maxPolyOrderB do (
          printf(fh, "void cuda_MomentCalc~ax~av~a_M0_P~a(GkDeviceProp *prop, int numBlocks, int numThreads, GkylCartField_t *fIn, GkylCartField_t *out); ~%", ci, vi, bName[bInd], pi),
          printf(fh, "void cuda_MomentCalc~ax~av~a_M1i_P~a(GkDeviceProp *prop, int numBlocks, int numThreads, GkylCartField_t *fIn, GkylCartField_t *out); ~%", ci, vi, bName[bInd], pi),
          printf(fh, "void cuda_MomentCalc~ax~av~a_M2ij_P~a(GkDeviceProp *prop, int numBlocks, int numThreads, GkylCartField_t *fIn, GkylCartField_t *out); ~%", ci, vi, bName[bInd], pi),
          printf(fh, "void cuda_MomentCalc~ax~av~a_M2_P~a(GkDeviceProp *prop, int numBlocks, int numThreads, GkylCartField_t *fIn, GkylCartField_t *out); ~%", ci, vi, bName[bInd], pi),
          printf(fh, "void cuda_MomentCalc~ax~av~a_M3i_P~a(GkDeviceProp *prop, int numBlocks, int numThreads, GkylCartField_t *fIn, GkylCartField_t *out); ~%", ci, vi, bName[bInd], pi),
          printf(fh, "~%") 
        ),
        printf(fh, "~%")
      )
    )
  ),
  printf(fh, "~% ~%")
)$

/* Print C header file. */
fh : openw("~/max-out/DistFuncMomentCalcDeviceModDecl.h")$
printf(fh, "// Gkyl ------------------------------------------------------------------------~%")$
printf(fh, "//~%")$
printf(fh, "// Header to C functions calling CUDA kernels that compute moments of the~%")$
printf(fh, "// distribution function.~%")$
printf(fh, "//~%")$

printf(fh, "//    _______     ___~%")$
printf(fh, "// + 6 @ |||| # P ||| +~%")$
printf(fh, "//------------------------------------------------------------------------------~%")$
printf(fh, "~%")$

printf(fh, "#include <GkylRectCart.h>~%")$
printf(fh, "#include <GkylRange.h>~%")$
printf(fh, "#include <GkylCudaFuncs.h>~%")$
printf(fh, "#include <GkylCartField.h>~%")$
printf(fh, "#include <GkylBasisTypes.h>~%")$
printf(fh, "~%")$

printf(fh, "#ifndef DIST_FUNC_MOMENT_CALC_DEVICE_MOD_DELC_H ~%")$
printf(fh, "#define DIST_FUNC_MOMENT_CALC_DEVICE_MOD_DELC_H ~%")$

printf(fh, "~%")$
printf(fh, "extern \"C\" { ~%")$
printf(fh, "~%")$
printPrototypes()$
printf(fh, "} ~%")$
printf(fh, "#endif ~%")$
close(fh)$


/* Print Lua Cdef wrapper. */
fh : openw("~/max-out/_DistFuncMomentCalcDeviceCdef.lua")$
printf(fh, "-- Gkyl ------------------------------------------------------------------------~%")$
printf(fh, "--~%")$
printf(fh, "-- Lua wrapper to C functions calling CUDA kernels that compute moments of the~%")$
printf(fh, "-- distribution function.~%")$
printf(fh, "--~%")$

printf(fh, "--    _______     ___~%")$
printf(fh, "-- + 6 @ |||| # P ||| +~%")$
printf(fh, "--------------------------------------------------------------------------------~%")$
printf(fh, "~%")$

printf(fh, "local ffi = require \"ffi\" ~%~%")$
printf(fh, "ffi.cdef [[~%")$
printf(fh, "~%")$
printPrototypes()$
printf(fh, "]]~%")$
close(fh)$
