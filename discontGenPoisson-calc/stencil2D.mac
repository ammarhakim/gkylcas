/* Generate Lua code that fills the left-side matrix entries
   corresponding to the discretization of the generalized Poisson equation
      nabla_i D^ij nabla_j phi  = - rho
   with recovery DG in the 2D interior cells. */

kill(all)$
load("recovery")$

size : [2, 2] $
dirs : [x, y] $
range : [[-1,1], [-1,1]] $
basisNm : ["Ser", "Tensor"] $
Jxx : 4/dx[1]^2 $
Jyy : 4/dx[2]^2 $
Jxy : 4/dx[1]/dx[2] $
C : 0 $

isTop : false $
isBottom : false $
isLeft : false $
isRight : false $

for polyOrder : 1 thru 1 do (
  for bIdx : 1 thru min(length(basisNm),polyOrder) do (
    bnm  : if polyOrder=1 then "" else basisNm[bIdx],
    fname : sconcat("~/.max-out/discontGenPoisson", bnm,
                    "Stencil2D",
                    if isTop then "_T" else "",
                    if isBottom then "_B" else "",
                    if isRight then "_R" else "",
                    if isLeft then "_L" else "",
                    "_", polyOrder, "p.lua"),
    fh : openw(fname),
    printf(fh, "local Lin = require \"Lib.Linalg\"~%"),
    printf(fh, "local function stencilFn(dx,~%"),
    printf(fh, "                         DxxC, DyyC, DxyC,~%"),
    printf(fh, "                         DxxL, DyyL, DxyL,~%"),
    printf(fh, "                         DxxR, DyyR, DxyR,~%"),
    printf(fh, "                         DxxB, DyyB, DxyB,~%"),
    printf(fh, "                         DxxT, DyyT, DxyT,~%"),
    printf(fh, "                         bcDx, bcNx, bcValx,~%"),
    printf(fh, "                         bcDy, bcNy, bcValy)~%"),
    printf(fh, "  local _M = {}~%~%"),
    
    ba : getBasis(sconcat("basis-precalc/basis", basisNm[bIdx], "2x"),
                  polyOrder),
    numBasis : length(ba),

    /* Volume ----------------------------------------------------- */
    recfx : if isRight then
              calcRecov1CellGen(basisNm[bIdx], x, size, polyOrder, C,
                dg(fL),
                dg(fC),
                bc(D=bcDx, N=bcNx, val=bcValx))
            elseif isLeft then
              calcRecov1CellGen(basisNm[bIdx], x, size, polyOrder, C,
                bc(D=bcDx, N=bcNx, val=bcValx),
                dg(fC),
                dg(fR))
            else
              calcRecov1CellGen(basisNm[bIdx], x, size, polyOrder, C,
                dg(fL),
                dg(fC),
                dg(fR)),
      
   recfy : if isTop then
             calcRecov1CellGen(basisNm[bIdx], y, size, polyOrder, C,
               dg(fB),
               dg(fC),
               bc(D=bcDy, N=bcNy, val=bcValy))
           elseif isBottom then
             calcRecov1CellGen(basisNm[bIdx], y, size, polyOrder, C,
               bc(D=bcDy, N=bcNy, val=bcValy),
               dg(fC),
               dg(fT))
           else
             calcRecov1CellGen(basisNm[bIdx], y, size, polyOrder, C,
               dg(fB),
               dg(fC),
               dg(fT)),

    vol : calcInnerProdList(dirs, Jxx, diff(ba, x),
            doExpand(DxxC, ba)*diff(recfx, x)) +
          calcInnerProdList(dirs, Jxy, diff(ba, x),
            doExpand(DxyC, ba)*diff(recfy, y)) +
          calcInnerProdList(dirs, Jxy, diff(ba, y),
            doExpand(DxyC, ba)*diff(recfx, x)) +
          calcInnerProdList(dirs, Jyy, diff(ba, y),
            doExpand(DyyC, ba)*diff(recfy, y)),

    /* Top -------------------------------------------------------- */
    recDyy : calcRecov2CellGen(basisNm[bIdx], y, size, polyOrder,
      dg(DyyC),
      dg(DyyT)),
    recDxy : calcRecov2CellGen(basisNm[bIdx], y, size, polyOrder,
      dg(DxyC),
      dg(DxyT)),
    if isTop then (
      recf2 : calcRecov2CellGen(basisNm[bIdx], y, size, polyOrder,
        dg(fB),
        dg(fC, bc(D=bcDy, N=bcNy, val=bcValy))),
      recf6 : if isRight then
                calcRecovFaceGen(basisNm[bIdx], y, 0, size, 2, polyOrder, C,
                  dg(dg(fBL), dg(fL, bc(D=bcDy, N=bcNy, val=bcValy))),
                  dg(dg(fB), dg(fC, bc(D=bcDy, N=bcNy, val=bcValy))),
                  bc(D=bcDx, N=bcNx, val=bcValx))
              elseif isLeft then
                calcRecovFaceGen(basisNm[bIdx], y, 0, size, 2, polyOrder, C,
                  bc(D=bcDx, N=bcNx, val=bcValx),
                  dg(dg(fB), dg(fC, bc(D=bcDy, N=bcNy, val=bcValy))),
                  dg(dg(fBR), dg(fR, bc(D=bcDy, N=bcNy, val=bcValy))))
              else
                calcRecovFaceGen(basisNm[bIdx], y, 0, size, 2, polyOrder, C,
                  dg(dg(fBL), dg(fL, bc(D=bcDy, N=bcNy, val=bcValy))),
                  dg(dg(fB), dg(fC, bc(D=bcDy, N=bcNy, val=bcValy))),
                  dg(dg(fBR), dg(fR, bc(D=bcDy, N=bcNy, val=bcValy)))),
      faceT : subst(y=0, recDyy)*subst(y=2, diff(recf2, y))*Jyy +
              subst(y=0, recDxy)*diff(recf6, x)*Jxy
    ) else (
      recf2 : calcRecov2CellGen(basisNm[bIdx], y, size, polyOrder,
        dg(fC),
        dg(fT)),
      recf6 : if isRight then
                calcRecovFaceGen(basisNm[bIdx], y, 0, size, 0, polyOrder, C,
                  dg(dg(fL), dg(fTL)),
                  dg(dg(fC), dg(fT)),
                  bc(D=bcDx, N=bcNx, val=bcValx))
              elseif isLeft then
                calcRecovFaceGen(basisNm[bIdx], y, 0, size, 0, polyOrder, C,
                  bc(D=bcDx, N=bcNx, val=bcValx),
                  dg(dg(fC), dg(fT)),
                  dg(dg(fR), dg(fTR)))
              else
                calcRecovFaceGen(basisNm[bIdx], y, 0, size, 0, polyOrder, C,
                  dg(dg(fL), dg(fTL)),
                  dg(dg(fC), dg(fT)),
                  dg(dg(fR), dg(fTR))),
      faceT : subst(y=0, recDyy)*subst(y=0, diff(recf2, y))*Jyy +
              subst(y=0, recDxy)*diff(recf6, x)*Jxy
    ),
    surfT : calcInnerProdList([x], 1, subst(y=1, ba), faceT),

    /* Bottom ----------------------------------------------------- */
    recDyy : calcRecov2CellGen(basisNm[bIdx], y, size, polyOrder,
      dg(DyyB),
      dg(DyyC)),
    recDxy : calcRecov2CellGen(basisNm[bIdx], y, size, polyOrder,
      dg(DxyB),
      dg(DxyC)),
    if isBottom then (
      recf2 : calcRecov2CellGen(basisNm[bIdx], y, size, polyOrder,
        dg(fC, bc(D=bcDy, N=bcNy, val=bcValy)),
        dg(fT)),
      recf6 : if isRight then
                calcRecovFaceGen(basisNm[bIdx], y, 0, size, -2, polyOrder, C,
                  dg(dg(fL, bc(D=bcDy, N=bcNy, val=bcValy)), dg(fTL)),
                  dg(dg(fC, bc(D=bcDy, N=bcNy, val=bcValy)), dg(fT)),
                  bc(D=bcDx, N=bcNx, val=bcValx))
              elseif isLeft then
                calcRecovFaceGen(basisNm[bIdx], y, 0, size, -2, polyOrder, C,
                  bc(D=bcDx, N=bcNx, val=bcValx),
                  dg(dg(fC, bc(D=bcDy, N=bcNy, val=bcValy)), dg(fT)),
                  dg(dg(fR, bc(D=bcDy, N=bcNy, val=bcValy)), dg(fTR)))
              else
                calcRecovFaceGen(basisNm[bIdx], y, 0, size, -2, polyOrder, C,
                  dg(dg(fL, bc(D=bcDy, N=bcNy, val=bcValy)), dg(fTL)),
                  dg(dg(fC, bc(D=bcDy, N=bcNy, val=bcValy)), dg(fT)),
                  dg(dg(fR, bc(D=bcDy, N=bcNy, val=bcValy)), dg(fTR))),
      faceB : subst(y=0, recDyy)*subst(y=-2, diff(recf2, y))*Jyy +
              subst(y=0, recDxy)*diff(recf6, x)*Jxy
    ) else (
      recf2 : calcRecov2CellGen(basisNm[bIdx], y, size, polyOrder,
        dg(fB),
        dg(fC)),
      recf6 : if isRight then
                calcRecovFaceGen(basisNm[bIdx], y, 0, size, 0, polyOrder, C,
                  dg(dg(fBL), dg(fL)),
                  dg(dg(fB), dg(fC)),
                  bc(D=bcDx, N=bcNx, val=bcValx))
              elseif isLeft then
                calcRecovFaceGen(basisNm[bIdx], y, 0, size, 0, polyOrder, C,
                  bc(D=bcDx, N=bcNx, val=bcValx),
                  dg(dg(fB), dg(fC)),
                  dg(dg(fBR), dg(fR)))
              else
                calcRecovFaceGen(basisNm[bIdx], y, 0, size, 0, polyOrder, C,
                  dg(dg(fBL), dg(fL)),
                  dg(dg(fB), dg(fC)),
                  dg(dg(fBR), dg(fR))),
      faceB : subst(y=0, recDyy)*subst(y=0, diff(recf2, y))*Jyy +
              subst(y=0, recDxy)*diff(recf6, x)*Jxy
    ),
    surfB : calcInnerProdList([x], 1, subst(y=-1, ba), faceB),

    /* Left ------------------------------------------------------- */
    recDxx : calcRecov2CellGen(basisNm[bIdx], x, size, polyOrder,
      dg(DxxL),
      dg(DxxC)),
    recDxy : calcRecov2CellGen(basisNm[bIdx], x, size, polyOrder,
      dg(DxyL),
      dg(DxyC)),
    if isLeft then (
      recf2 : calcRecov2CellGen(basisNm[bIdx], x, size, polyOrder,
        dg(fC, bc(D=bcDx, N=bcNx, val=bcValx)),
        dg(fR)),
      recf6 : if isTop then
                calcRecovFaceGen(basisNm[bIdx], x, 0, size, -2, polyOrder, C,
                  dg(dg(fB, bc(D=bcDx, N=bcNx, val=bcValx)), dg(fBR)),
                  dg(dg(fC, bc(D=bcDx, N=bcNx, val=bcValx)), dg(fR)),
                  bc(D=bcDy, N=bcNy, val=bcValy))
              elseif isBottom then
                calcRecovFaceGen(basisNm[bIdx], x, 0, size, -2, polyOrder, C,
                  bc(D=bcDy, N=bcNy, val=bcValy),
                  dg(dg(fC, bc(D=bcDx, N=bcNx, val=bcValx)), dg(fR)),
                  dg(dg(fT, bc(D=bcDx, N=bcNx, val=bcValx)), dg(fTR)))
              else
                calcRecovFaceGen(basisNm[bIdx], x, 0, size, -2, polyOrder, C,
                  dg(dg(fB, bc(D=bcDx, N=bcNx, val=bcValx)), dg(fBR)),
                  dg(dg(fC, bc(D=bcDx, N=bcNx, val=bcValx)), dg(fR)),
                  dg(dg(fT, bc(D=bcDx, N=bcNx, val=bcValx)), dg(fTR))),
      faceL : subst(x=0, recDxx)*subst(x=-2, diff(recf2, x))*Jxx +
              subst(x=0, recDxy)*diff(recf6, y)*Jxy
    ) else (
      recf2 : calcRecov2CellGen(basisNm[bIdx], x, size, polyOrder,
        dg(fL),
        dg(fC)),
      recf6 : if isTop then
                calcRecovFaceGen(basisNm[bIdx], x, 0, size, 0, polyOrder, C,
                  dg(dg(fBL), dg(fB)),
                  dg(dg(fL), dg(fC)),
                  bc(D=bcDy, N=bcNy, val=bcValy))
              elseif isBottom then
                calcRecovFaceGen(basisNm[bIdx], x, 0, size, 0, polyOrder, C,
                  bc(D=bcDy, N=bcNy, val=bcValy),
                  dg(dg(fL), dg(fC)),
                  dg(dg(fTL), dg(fT)))
              else
                calcRecovFaceGen(basisNm[bIdx], x, 0, size, 0, polyOrder, C,
                  dg(dg(fBL), dg(fB)),
                  dg(dg(fL), dg(fC)),
                  dg(dg(fTL), dg(fT))),
      faceL : subst(x=0, recDxx)*subst(x=0, diff(recf2, x))*Jxx +
              subst(x=0, recDxy)*diff(recf6, y)*Jxy
    ),
    surfL : calcInnerProdList([y], 1, subst(x=-1, ba), faceL),

    /* Right ------------------------------------------------------ */
    recDxx : calcRecov2CellGen(basisNm[bIdx], x, size, polyOrder,
      dg(DxxC),
      dg(DxxR)),
    recDxy : calcRecov2CellGen(basisNm[bIdx], x, size, polyOrder,
      dg(DxyC),
      dg(DxyR)),
    if isRight then (
      recf2 : calcRecov2CellGen(basisNm[bIdx], x, size, polyOrder,
        dg(fL),
        dg(fC, bc(D=bcDx, N=bcNx, val=bcValx))),
      recf6 : if isTop then
                calcRecovFaceGen(basisNm[bIdx], x, 0, size, 2, polyOrder, C,
                  dg(dg(fBL), dg(fB, bc(D=bcDx, N=bcNx, val=bcValx))),
                  dg(dg(fL), dg(fC, bc(D=bcDx, N=bcNx, val=bcValx))),
                  bc(D=bcDy, N=bcNy, val=bcValy))
              elseif isBottom then
                calcRecovFaceGen(basisNm[bIdx], x, 0, size, 2, polyOrder, C,
                  bc(D=bcDy, N=bcNy, val=bcValy),
                  dg(dg(fL), dg(fC, bc(D=bcDx, N=bcNx, val=bcValx))),
                  dg(dg(fTL), dg(fT, bc(D=bcDx, N=bcNx, val=bcValx))))
              else
                calcRecovFaceGen(basisNm[bIdx], x, 0, size, 2, polyOrder, C,
                  dg(dg(fBL), dg(fB, bc(D=bcDx, N=bcNx, val=bcValx))),
                  dg(dg(fL), dg(fC, bc(D=bcDx, N=bcNx, val=bcValx))),
                  dg(dg(fTL), dg(fT, bc(D=bcDx, N=bcNx, val=bcValx)))),
      faceR : subst(x=0, recDxx)*subst(x=2, diff(recf2, x))*Jxx +
              subst(x=0, recDxy)*diff(recf6, y)*Jxy
    ) else (
      recf2 : calcRecov2CellGen(basisNm[bIdx], x, size, polyOrder,
        dg(fC),
        dg(fR)),
      recf6 : if isTop then
                calcRecovFaceGen(basisNm[bIdx], x, 0, size, 0, polyOrder, C,
                  dg(dg(fB), dg(fBR)),
                  dg(dg(fC), dg(fR)),
                  bc(D=bcDy, N=bcNy, val=bcValy))
              elseif isBottom then
                calcRecovFaceGen(basisNm[bIdx], x, 0, size, 0, polyOrder, C,
                  bc(D=bcDy, N=bcNy, val=bcValy),
                  dg(dg(fC), dg(fR)),
                  dg(dg(fT), dg(fTR)))
              else
                calcRecovFaceGen(basisNm[bIdx], x, 0, size, 0, polyOrder, C,
                  dg(dg(fB), dg(fBR)),
                  dg(dg(fC), dg(fR)),
                  dg(dg(fT), dg(fTR))),
      faceR : subst(x=0, recDxx)*subst(x=0, diff(recf2, x))*Jxx +
              subst(x=0, recDxy)*diff(recf6, y)*Jxy
    ),
    surfR : calcInnerProdList([y], 1, subst(x=1, ba), faceR),

    /* Assembly --------------------------------------------------- */
    /* st : expand(surfT - surfB + surfR - surfL - vol), */
    /* I'm not sure the 'expand' here is needed and it significantly
    increases the execution time for higher polynomial cases --Petr */
    st : surfT - surfB + surfR - surfL - vol,
    stCheck : transpose(makelist(0, i, 1, numBasis)), /* Cross-check */

    fList : [fBL, fL, fTL, fB, fC, fT, fBR, fR, fTR],
    for m : 1 thru 9 do (
      cMat : coefmatrix(st, makelist(fList[m][i], i, 1, numBasis)),
      stCheck : stCheck + cMat. transpose(makelist(fList[m][i], i, 1, numBasis)),
      printf(fh, "  _M[~a] = Lin.Mat(~a,~a)~%", m, numBasis, numBasis),
      for i : 1 thru numBasis do (
        for j : 1 thru numBasis do (
          printf(fh, "  _M[~a][~a][~a] = ~a~%", m, i, j, float(expand(cMat[i][j])))
        )
      )
    ),
    cMatx : coefmatrix(st, [bcValx]),
    cMaty : coefmatrix(st, [bcValy]),
    /* Santity check: should be all zeros */
    isZero : makelist(expand(st[i]-stCheck[i][1]-cMatx[i][1]*bcValx-cMaty[i][1]*bcValy),i,1,numBasis),
    printf(fh, "  _M[10] = Lin.Vec(~a)~%", numBasis),
    for i : 1 thru numBasis do (
      printf(fh, "  _M[10][~a] = ~a + ~a~%", i,
             bcValx*float(expand(cMatx[i][1])), bcValy*float(expand(cMaty[i][1])))
    ),

    printf(fh, "  return(_M)~%"),
    printf(fh, "end~%~%"),
    printf(fh, "return(stencilFn)"),
    close(fh)
  )
)$