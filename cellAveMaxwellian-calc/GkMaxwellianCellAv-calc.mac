/* Generate Maxwellian on Vlasov grid based on cell averaged moments */

load("modal-basis");
load("out-scripts");
load(stringproc)$
fpprec : 24$

/* Serendipity basis. */
maxPolyOrder_Ser : 2$
/* Maximal order basis. */
maxPolyOrder_Max : 2$

declareWriteCExprsC(lhs, rhs) := block([expr],
  expr : float(expand(rhs)),
  if expr # 0.0 then (
    ep : string(expr),
    for i : 0 thru 60 do (
    	ep : ssubst(string(pow(uParAv,2)),string(uParAv^2),ep),
    	ep : ssubst(string(pow(w[i],2)),string(w[i]^2),ep)
    ),
    printf(fh, "  double ~a = ~a; ~%", lhs, ep)
  )
)$

writeCExprsCs(lhs, rhs) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (	
    if expr[i] # 0.0 then (
      ep : string(expr[i]),
      ep : ssubst("log(","ln(",ep),
      ep : ssubst("exp(","2.718281828459045^(",ep),
      ep : ssubst("pow(vtSqAv,3/2)","vtSqAv^(3/2)", ep),
      printf(fh, "  ~a = ~a; ~%", lhs[i-1], ep)	
    )
  )
)$

writeCExprsC(lhs, rhs) := block([expr],
  expr : float(expand(rhs)),
  if expr # 0.0 then (
     ep : string(expr),
     printf(fh, "  ~a = ~a; ~%", lhs, ep)	
  )
)$

/* cell-average GkMaxwellian calculation */
calcGkMaxwellianCellAv(fh, funcNm, cdim, vdim, basisFun, pMax) := block([],
  kill(varsC, varsP, basisC, basisP),
  modNm : sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v"),
  load(modNm),
  for p : 1 thru pMax do (
    bP : basisP[p],
    print(basisFun, cdim, vdim, p, length(basisP)),
    bC : basisC[p],
    NC : length(bC),
  
    printf(fh, "void ~a_P~a(const double m_, const double *w, const double *m0, const double *uPar, const double *vtSq, const double *bmag, double *fMax) ~%{ ~%", funcNm, p),
    printf(fh, "  // w[~a]:      cell-center coordinates. ~%", cdim+vdim),
    printf(fh, "  // m0[~a]:     particle density. ~%", NC),
    printf(fh, "  // uPar[~a]:   fluid velocity. ~%", NC*vdim),
    printf(fh, "  // vtSq[~a]:   squared thermal speed, sqrt(T/m). ~%", NC),
    printf(fh, "  // fMax: 	cell ave Maxwellian ~%"),
    printf(fh, " ~%"),

    m0_e : doExpand1(m0,bC),
    m0Av_c : innerProd(varsC,1.0,1.0,m0_e)/innerProd(varsC,1.0,1.0,1.0),
    declareWriteCExprsC(m0Av, m0Av_c),

    uPar_e : doExpand1(uPar,bC),
    uParAv_c : innerProd(varsC,1.0,1.0,uPar_e)/innerProd(varsC,1.0,1.0,1.0),
    declareWriteCExprsC(uParAv, uParAv_c),

    vtSq_e : doExpand1(vtSq,bC),
    vtSqAv_c : innerProd(varsC,1.0,1.0,vtSq_e)/innerProd(varsC,1.0,1.0,1.0),
    declareWriteCExprsC(vtSqAv, vtSqAv_c),

    bmag_e : doExpand1(bmag,bC),
    bmagAv_c : innerProd(varsC,1.0,1.0,bmag_e)/innerProd(varsC,1.0,1.0,1.0),
    declareWriteCExprsC(bmagAv, bmagAv_c),
    
    /* Define and write fMax */
    if vdim = 1 then (
	denom : 2*%pi*vtSqAv,
	maxNorm : m0Av/sqrt(denom),
	
       /* Define vSq for exponent */
    	vSq_c : fullratsimp(innerProd(varsP,1,1.0,0.5*(w[cdim] - uParAv)^2)/innerProd(varsP,1.0,1.0,1.0)),
	declareWriteCExprsC(vSqAv, vSq_c),
    	printf(fh, " ~%")
        )
    else (
    	denom : (2*%pi*vtSqAv)^3,
	maxNorm : bmagAv*m0Av/sqrt(denom),

       /* Define vSq for exponent */
    	vSq_c : fullratsimp(innerProd(varsP,1,1.0,0.5*(w[cdim] - uParAv)^2
	      	+ w[cdim+1]*bmagAv/m_)/innerProd(varsP,1.0,1.0,1.0)),
	declareWriteCExprsC(vSqAv, vSq_c),
    	printf(fh, " ~%")
 	),

    fMax_c : calcInnerProdList(varsP,maxNorm,bP,exp(-vSqAv/vtSqAv)),
    writeCExprsCs(fMax, fMax_c),
    printf(fh, " ~%"),

    printf(fh, "  if (m0Av <= 0 || vtSqAv <= 0 ) { ~%"),
    printf(fh, "    fMax[0] = 0.0;~%"),
    printf(fh, "  }~%"),
    printf(fh, "} ~%")
))$

bName        : ["Ser","Max"]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Max]$

for bInd : 1 thru length(bName) do (
  for c : 1 thru 2 do (
      for v : c thru 2 do (
      	  disp(printf(false,sconcat("Creating fMaxAv ", bName[bInd]," ~ax~av"),c,v)),
    	  fname : sconcat("~/max-out/GkMaxwellianCellAv", bName[bInd], c, "x", v, "v", ".cpp"),
    	  fh : openw(fname),

    	  printf(fh, "#include <MaxwellianCellAvModDecl.h> ~%"),
    	  printf(fh, "#include <math.h> ~%"),

	  print("attempting to print",c,"x",v,"v functions..."),
    	  /*. Calculate cell average fMax. */
    	  funcNm : sconcat("GkMaxwellianCellAv", bName[bInd], c, "x", v, "v"),
    	  calcGkMaxwellianCellAv(fh, funcNm, c, v, bName[bInd], maxPolyOrder[bInd]),
    	  close(fh)
  	  )
  )	
)$