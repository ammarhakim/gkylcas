kill(all) $
load("modal-basis") $
load("recovery") $
assume(dv[0]>0, dv[1]>0, dv[2]>0) $
numDims : 3 $

fgConvolution(basisNm, dir, der, polyOrder, fL, fU, gL, gU) := block(
  [gRec, gDer, ba, baL, baU, perpDirs, outL, outU],
  gRec : calcRecov2CellGen(basisNm, dir, [x,y,z], polyOrder, dg(gL), dg(gU)),
  gDer : diff(diff(gRec, der[1]), der[2]),
  
  ba : getBasis(sconcat("basis-precalc/basis", basisNm, "3x"), polyOrder),
  baL : etaDir(dir, -1, 2, ba),
  baU : etaDir(dir, 1, 2, ba),
  perpDirs : getPerpDir(dir),
  outL : calcInnerProdListGen([dir, perpDirs[1], perpDis[2]],
    [[-2,0], [-1,1], [-1,1]], 1, baL, gDer*doExpand(fL, baL)),
  outU : calcInnerProdListGen([dir, perpDirs[1], perpDirs[2]],
    [[0,2], [-1,1], [-1,1]], 1, baU, gDer*doExpand(fU, baU)),
  return([outL, outU])
  ) $

getSurfTerm(basisNm, dir, edge, polyOrder,
            fC, f1L, f1U, f2L, f2U,
            gC, g1L, g1U, g2L, g2U) := block(
  [C, face, perpDirs, edgeNm, ba, giifC, gijfL, gijfC, gijfU, rec2, rec6, giif, giifi, gijf, gijfj, Jii, Jij, Jik, t1, t2, t3, t4, t5, t6],
  
  perpDirs : delete(dir, [x,y,z]),

  giifC : fgConvolution(basisNm, dir, [dir, dir], polyOrder,
    fC[1], fC[2], gC[1], gC[2]),

  gijfL : fgConvolution(basisNm, dir, [dir, perpDirs[1]], polyOrder,
    f1L[1], f1L[2], g1L[1], g1L[2]),
  gijfC : fgConvolution(basisNm, dir, [dir, perpDirs[1]], polyOrder,
    fC[1], fC[2], gC[1], gC[2]),
  gijfU : fgConvolution(basisNm, dir, [dir, parpDirs[1]], polyOrder,
    f1U[1], f1U[2], g1U[1], g1U[2]),

  gikfL : fgConvolution(basisNm, dir, [dir, perpDirs[2]], polyOrder,
    f2L[1], f2L[2], g2L[1], g2L[2]),
  gikfC : fgConvolution(basisNm, dir, [dir, perpDirs[2]], polyOrder,
    fC[1], fC[2], gC[1], gC[2]),
  gikfU : fgConvolution(basisNm, dir, [dir, parpDirs[2]], polyOrder,
    f2U[1], f2U[2], g2U[1], g2U[2]),

  rec2 : calcRecov2CellGen(basisNm, dir, [x,y,z], polyOrder, dg(giifC[1]), dg(giifC[2])),
  giif : subst(dir=0, rec2),
  giifi : subst(dir=0, diff(rec2, dir)),
  
  rec2 : calcRecov2CellGen(basisNm, dir, [x,y,x], polyOrder, dg(gijfC[1]), dg(gijfC[2])),
  gijf : subst(dir=0, rec2),
  rec2 : calcRecov2CellGen(basisNm, dir, [x,y,x], polyOrder, dg(gikfC[1]), dg(gikfC[2])),
  gikf : subst(dir=0, rec2),

  C : 0,
  face : 0,
  rec6 : calcRecovFaceGen(basisNm, [dir, perpDirs[1]], [x,y,z], face, polyOrder, C,
    dg(dg(gijfL[1]), dg(gijfL[2])),
    dg(dg(gijfC[1]), dg(gijfC[2])),
    dg(dg(gijfU[1]), dg(gijfU[2]))),
  gijfj : diff(rec6, perpDirs[1]),
  rec6 : calcRecovFaceGen(basisNm, [dir, perpDirs[2]], [x,y,z], face, polyOrder, C,
    dg(dg(gikfL[1]), dg(gikfL[2])),
    dg(dg(gikfC[1]), dg(gikfC[2])),
    dg(dg(gikfU[1]), dg(gikfU[2]))),
  gikfk : diff(rec6, perpDirs[2]),

  ba : getBasis(sconcat("basis-precalc/basis", basisNm, "3x"), polyOrder),
  Jii : eval_string(sconcat("J", dir, dir)),
  Jij : eval_string(sconcat("J", dir, perpDirs[1])),
  Jik : eval_string(sconcat("J", dir, perpDirs[2])),
  
  t1 : calcInnerProdList(perpDirs, Jii, subst(dir=edge, ba), giifi),
  t2 : calcInnerProdList(perpDirs, Jij, subst(dir=edge, ba), gijfj),
  t3 : calcInnerProdList(perpDirs, Jik, subst(dir=edge, ba), gikfk),
  t4 : calcInnerProdList(perpDirs, Jii, subst(dir=edge, diff(ba, dir)), giif),
  t5 : calcInnerProdList(perpDirs, Jij, subst(dir=edge, diff(ba, perpDirs[1])), gijf),
  t6 : calcInnerProdList(perpDirs, Jik, subst(dir=edge, diff(ba, perpDirs[2])), gikf),
  return(t1 + t2 + t3 - t4 - t5 - t6)
  ) $

basisNm : "Ser"$
for polyOrder : 1 thru 1 do (
  fname : sconcat("~/max-out/fpoDiffKernel3xP", polyOrder, ".cpp"),
  fh : openw(fname),
  printf(fh, "#include <math.h>~%"),
  printf(fh, "#include <fpoKernelsDecl.h>~%~%"),

  printf(fh, "double fpoDiffKernel3xP~a(const double dt, const double *dv,~%", polyOrder),
  printf(fh, "                          const double *fxLyLzC,~%"),
  printf(fh, "                          const double *fxLyCzL,~%"),
  printf(fh, "                          const double *fxLyCzC,~%"),
  printf(fh, "                          const double *fxLyCzU,~%"),
  printf(fh, "                          const double *fxLyUzC,~%"),
  
  printf(fh, "                          const double *fxCyLzL,~%"),
  printf(fh, "                          const double *fxCyLzC,~%"),
  printf(fh, "                          const double *fxCyLzU,~%"),
  printf(fh, "                          const double *fxCyCzL,~%"),
  printf(fh, "                          const double *fxCyCzC,~%"),
  printf(fh, "                          const double *fxCyCzU,~%"),
  printf(fh, "                          const double *fxCyUzL,~%"),
  printf(fh, "                          const double *fxCyUzC,~%"),
  printf(fh, "                          const double *fxCyUzU,~%"),
  
  printf(fh, "                          const double *fxUyLzC,~%"),
  printf(fh, "                          const double *fxUyCzL,~%"),
  printf(fh, "                          const double *fxUyCzC,~%"),
  printf(fh, "                          const double *fxUyCzU,~%"),
  printf(fh, "                          const double *fxUyUzC,~%"),
  
  printf(fh, "                          const double *gxLyLzC,~%"),
  printf(fh, "                          const double *gxLyCzL,~%"),
  printf(fh, "                          const double *gxLyCzC,~%"),
  printf(fh, "                          const double *gxLyCzU,~%"),
  printf(fh, "                          const double *gxLyUzC,~%"),
  
  printf(fh, "                          const double *gxCyLzL,~%"),
  printf(fh, "                          const double *gxCyLzC,~%"),
  printf(fh, "                          const double *gxCyLzU,~%"),
  printf(fh, "                          const double *gxCyCzL,~%"),
  printf(fh, "                          const double *gxCyCzC,~%"),
  printf(fh, "                          const double *gxCyCzU,~%"),
  printf(fh, "                          const double *gxCyUzL,~%"),
  printf(fh, "                          const double *gxCyUzC,~%"),
  printf(fh, "                          const double *gxCyUzU,~%"),
  
  printf(fh, "                          const double *gxUyLzC,~%"),
  printf(fh, "                          const double *gxUyCzL,~%"),
  printf(fh, "                          const double *gxUyCzC,~%"),
  printf(fh, "                          const double *gxUyCzU,~%"),
  printf(fh, "                          const double *gxUyUzC,~%"),
  printf(fh, "                          double *fOut) {~%"),
  
  ba : getBasis(sconcat("basis-precalc/basis", basisNm, "3x"), polyOrder),

  indexSubList : append(
    /* distribution functions */
    makelist(fxLyLzC[i]=fxLyLzC[i-1], i, 1, length(ba)),
    makelist(fxLyCzL[i]=fxLyCzL[i-1], i, 1, length(ba)),
    makelist(fxLyCzC[i]=fxLyCzC[i-1], i, 1, length(ba)),
    makelist(fxLyCzU[i]=fxLyCzU[i-1], i, 1, length(ba)),
    makelist(fxLyUzC[i]=fxLyUzC[i-1], i, 1, length(ba)),
    makelist(fxCyLzL[i]=fxCyLzL[i-1], i, 1, length(ba)),
    makelist(fxCyLzC[i]=fxCyLzC[i-1], i, 1, length(ba)),
    makelist(fxCyLzU[i]=fxCyLzU[i-1], i, 1, length(ba)),
    makelist(fxCyCzL[i]=fxCyCzL[i-1], i, 1, length(ba)),
    makelist(fxCyCzC[i]=fxCyCzC[i-1], i, 1, length(ba)),
    makelist(fxCyCzU[i]=fxCyCzU[i-1], i, 1, length(ba)),
    makelist(fxCyUzL[i]=fxCyUzL[i-1], i, 1, length(ba)),
    makelist(fxCyUzC[i]=fxCyUzC[i-1], i, 1, length(ba)),
    makelist(fxCyUzU[i]=fxCyUzU[i-1], i, 1, length(ba)),
    makelist(fxUyLzC[i]=fxUyLzC[i-1], i, 1, length(ba)),
    makelist(fxUyCzL[i]=fxUyCzL[i-1], i, 1, length(ba)),
    makelist(fxUyCzC[i]=fxUyCzC[i-1], i, 1, length(ba)),
    makelist(fxUyCzU[i]=fxUyCzU[i-1], i, 1, length(ba)),
    makelist(fxUyUzC[i]=fxUyUzC[i-1], i, 1, length(ba)),
    /* diff potential */
    makelist(gxLyLzC[i]=gxLyLzC[i-1], i, 1, length(ba)),
    makelist(gxLyCzL[i]=gxLyCzL[i-1], i, 1, length(ba)),
    makelist(gxLyCzC[i]=gxLyCzC[i-1], i, 1, length(ba)),
    makelist(gxLyCzU[i]=gxLyCzU[i-1], i, 1, length(ba)),
    makelist(gxLyUzC[i]=gxLyUzC[i-1], i, 1, length(ba)),
    makelist(gxCyLzL[i]=gxCyLzL[i-1], i, 1, length(ba)),
    makelist(gxCyLzC[i]=gxCyLzC[i-1], i, 1, length(ba)),
    makelist(gxCyLzU[i]=gxCyLzU[i-1], i, 1, length(ba)),
    makelist(gxCyCzL[i]=gxCyCzL[i-1], i, 1, length(ba)),
    makelist(gxCyCzC[i]=gxCyCzC[i-1], i, 1, length(ba)),
    makelist(gxCyCzU[i]=gxCyCzU[i-1], i, 1, length(ba)),
    makelist(gxCyUzL[i]=gxCyUzL[i-1], i, 1, length(ba)),
    makelist(gxCyUzC[i]=gxCyUzC[i-1], i, 1, length(ba)),
    makelist(gxCyUzU[i]=gxCyUzU[i-1], i, 1, length(ba)),
    makelist(gxUyLzC[i]=gxUyLzC[i-1], i, 1, length(ba)),
    makelist(gxUyCzL[i]=gxUyCzL[i-1], i, 1, length(ba)),
    makelist(gxUyCzC[i]=gxUyCzC[i-1], i, 1, length(ba)),
    makelist(gxUyCzU[i]=gxUyCzU[i-1], i, 1, length(ba)),
    makelist(gxUyUzC[i]=gxUyUzC[i-1], i, 1, length(ba))
    ),
  
  fListxLyLzC : makelist(fxLyLzC[i], i, 1, length(ba)),
  fListxLyCzL : makelist(fxLyCzL[i], i, 1, length(ba)),
  fListxLyCzC : makelist(fxLyCzC[i], i, 1, length(ba)),
  fListxLyCzU : makelist(fxLyCzU[i], i, 1, length(ba)),
  fListxLyUzC : makelist(fxLyUzC[i], i, 1, length(ba)),
  fListxCyLzL : makelist(fxCyLzL[i], i, 1, length(ba)),
  fListxCyLzC : makelist(fxCyLzC[i], i, 1, length(ba)),
  fListxCyLzU : makelist(fxCyLzU[i], i, 1, length(ba)),
  fListxCyCzL : makelist(fxCyCzL[i], i, 1, length(ba)),
  fListxCyCzC : makelist(fxCyCzC[i], i, 1, length(ba)),
  fListxCyCzU : makelist(fxCyCzU[i], i, 1, length(ba)),
  fListxCyUzL : makelist(fxCyUzL[i], i, 1, length(ba)),
  fListxCyUzC : makelist(fxCyUzC[i], i, 1, length(ba)),
  fListxCyUzU : makelist(fxCyUzU[i], i, 1, length(ba)),
  fListxUyLzC : makelist(fxUyLzC[i], i, 1, length(ba)),
  fListxUyCzL : makelist(fxUyCzL[i], i, 1, length(ba)),
  fListxUyCzC : makelist(fxUyCzC[i], i, 1, length(ba)),
  fListxUyCzU : makelist(fxUyCzU[i], i, 1, length(ba)),
  fListxUyUzC : makelist(fxUyUzC[i], i, 1, length(ba)),

  gListxLyLzC : makelist(gxLyLzC[i], i, 1, length(ba)),
  gListxLyCzL : makelist(gxLyCzL[i], i, 1, length(ba)),
  gListxLyCzC : makelist(gxLyCzC[i], i, 1, length(ba)),
  gListxLyCzU : makelist(gxLyCzU[i], i, 1, length(ba)),
  gListxLyUzC : makelist(gxLyUzC[i], i, 1, length(ba)),
  gListxCyLzL : makelist(gxCyLzL[i], i, 1, length(ba)),
  gListxCyLzC : makelist(gxCyLzC[i], i, 1, length(ba)),
  gListxCyLzU : makelist(gxCyLzU[i], i, 1, length(ba)),
  gListxCyCzL : makelist(gxCyCzL[i], i, 1, length(ba)),
  gListxCyCzC : makelist(gxCyCzC[i], i, 1, length(ba)),
  gListxCyCzU : makelist(gxCyCzU[i], i, 1, length(ba)),
  gListxCyUzL : makelist(gxCyUzL[i], i, 1, length(ba)),
  gListxCyUzC : makelist(gxCyUzC[i], i, 1, length(ba)),
  gListxCyUzU : makelist(gxCyUzU[i], i, 1, length(ba)),
  gListxUyLzC : makelist(gxUyLzC[i], i, 1, length(ba)),
  gListxUyCzL : makelist(gxUyCzL[i], i, 1, length(ba)),
  gListxUyCzC : makelist(gxUyCzC[i], i, 1, length(ba)),
  gListxUyCzU : makelist(gxUyCzU[i], i, 1, length(ba)),
  gListxUyUzC : makelist(gxUyUzC[i], i, 1, length(ba)),
  
  printf(fh, "  double Jxx = 16/(dv[0]*dv[0]*dv[0]*dv[0]);~%"),
  printf(fh, "  double Jyy = 16/(dv[1]*dv[1]*dv[1]*dv[1]);~%"),
  printf(fh, "  double Jzz = 16/(dv[2]*dv[2]*dv[2]*dv[2]);~%"),
  printf(fh, "  double Jxy = 16/(dv[0]*dv[0]*dv[1]*dv[1]);~%"),
  printf(fh, "  double Jyx = Jxy;~%"),
  printf(fh, "  double Jxz = 16/(dv[0]*dv[0]*dv[2]*dv[2]);~%"),
  printf(fh, "  double Jzx = Jxz;~%~%"),
  printf(fh, "  double Jyz = 16/(dv[1]*dv[1]*dv[2]*dv[2]);~%"),
  printf(fh, "  double Jzy = Jyz;~%~%"),

  surfxL : getSurfTerm(basisNm, x, -1, polyOrder,
    [fListxLyCzC, fListxCyCzC],
    [fListxLyLzC, fListxCyLzC], [fListxLyUzC, fListxCyUzC],
    [fListxLyCzL, fListxCyCzL], [fListxLyCzU, fListxCyCzU],
    [gListxLyCzC, gListxCyCzC],
    [gListxLyLzC, gListxCyLzC], [gListxLyUzC, gListxCyUzC],
    [gListxLyCzL, gListxCyCzL], [gListxLyCzU, gListxCyCzU]),
  surfxU : getSurfTerm(basisNm, x, 1, polyOrder,
    [fListxCyCzC, fListxUyCzC],
    [fListxCyLzC, fListxUyLzC], [fListxCyUzC, fListxUyUzC],
    [fListxCyCzL, fListxUyCzL], [fListxCyCzU, fListxUyCzU],
    [gListxCyCzC, gListxUyCzC],
    [gListxCyLzC, gListxUyLzC], [gListxCyUzC, gListxUyUzC],
    [gListxCyCzL, gListxUyCzL], [gListxCyCzU, gListxUyCzU]),
  
  surfyL : getSurfTerm(basisNm, y, -1, polyOrder,
    [fListxCyLzC, fListxCyCzC],
    [fListxLyLzC, fListxLyCzC], [fListxUyLzC, fListxUyCzC],
    [fListxCyLzL, fListxCyCzL], [fListxCyLzU, fListxCyCzU],
    [gListxCyLzC, gListxCyCzC],
    [gListxLyLzC, gListxLyCzC], [gListxUyLzC, gListxUyCzC],
    [gListxCyLzL, gListxCyCzL], [gListxCyLzU, gListxCyCzU]),
  surfyU : getSurfTerm(basisNm, y, 1, polyOrder,
    [fListxCyCzC, fListxCyUzC],
    [fListxLyCzC, fListxLyUzC], [fListxUyCzC, fListxUyUzC],
    [fListxCyCzL, fListxCyUzL], [fListxCyCzU, fListxCyUzU],
    [gListxCyCzC, gListxCyUzC],
    [gListxLyCzC, gListxLyUzC], [gListxUyCzC, gListxUyUzC],
    [gListxCyCzL, gListxCyUzL], [gListxCyCzU, gListxCyUzU]),

  surfzL : getSurfTerm(basisNm, z, -1, polyOrder,
    [fListxCyCzL, fListxCyCzC],
    [fListxLyCzL, fListxLyCzC], [fListxUyCzL, fListxUyCzC],
    [fListxCyLzL, fListxCyLzC], [fListxCyUzL, fListxCyUzC],
    [gListxCyCzL, gListxCyCzC],
    [gListxLyCzL, gListxLyCzC], [gListxUyCzL, gListxUyCzC],
    [gListxCyLzL, gListxCyLzC], [gListxCyUzL, gListxCyUzC]),
  surfzU : getSurfTerm(basisNm, z, 1, polyOrder,
    [fListxCyCzC, fListxCyCzU],
    [fListxLyCzC, fListxLyCzU], [fListxUyCzC, fListxUyCzU],
    [fListxCyLzC, fListxCyLzU], [fListxCyUzC, fListxCyUzU],
    [gListxCyCzC, gListxCyCzU],
    [gListxLyCzC, gListxLyCzU], [gListxUyCzC, gListxUyCzU],
    [gListxCyLzC, gListxCyLzU], [gListxCyUzC, gListxCyUzU]),


  tmp : (surfxU - surfxL + surfyU - surfyL + surfzU - surfzL)/2,
  out : subst(indexSubList, expand(tmp)),
  for i : 1 thru length(ba) do printf(fh, "  fOut[~a] += ~a;~%", i-1, dt*float(out[i])),

  /* Putting together the volume terms */
  gxxfPhixxVol : calcInnerProdList([x,y,z], Jxx, diff(ba, x, 2),
    diff(doExpand(gListxCyCzC, ba), x, 2)*doExpand(fListxCyCzC, ba)),
  gyyfPhiyyVol : calcInnerProdList([x,y,z], Jyy, diff(ba, y, 2),
    diff(doExpand(gListxCyCzC, ba), y, 2)*doExpand(fListxCyCzC, ba)),
  gzzfPhizzVol : calcInnerProdList([x,y,z], Jzz, diff(ba, z, 2),
    diff(doExpand(gListxCyCzC, ba), z, 2)*doExpand(fListxCyCzC, ba)),
  gxyfPhixyVol : calcInnerProdList([x,y,z], Jxy, diff(diff(ba, x), y),
    diff(diff(doExpand(gListxCyCzC, ba), x), y)*doExpand(fListxCyCzC, ba)),
  gxzfPhixzVol : calcInnerProdList([x,y,z], Jxz, diff(diff(ba, x), z),
    diff(diff(doExpand(gListxCyCzC, ba), x), y)*doExpand(fListxCyCzC, ba)),
  gyzfPhiyzVol : calcInnerProdList([x,y,z], Jyz, diff(diff(ba, y), z),
    diff(diff(doExpand(gListxCyCzC, ba), y), z)*doExpand(fListxCyCzC, ba)),
 
  /* Writting the volume term */
  tmp : (gxxfPhixxVol + gyyfPhiyyVol + gzzfPhizzVol +
    2*gxyfPhixyVol + 2*gxzfPhixzVol + 2*gyzfPhiyzVol)/2,
  out : subst(indexSubList, expand(tmp)),
  for i : 1 thru length(ba) do printf(fh, "  fOut[~a] += ~a;~%", i-1, dt*float(out[i])),

  
  /* Calculating the time step */
  vxx : diff(doExpand(gListxCyCzC, ba), x, 2)*Jxx/4,
  vyy : diff(doExpand(gListxCyCzC, ba), y, 2)*Jyy/4,
  vzz : diff(doExpand(gListxCyCzC, ba), z, 2)*Jzz/4,
  vxy : diff(diff(doExpand(gListxCyCzC, ba), x), y)*Jxy/4,
  vxz : diff(diff(doExpand(gListxCyCzC, ba), x), z)*Jxz/4,
  vyz : diff(diff(doExpand(gListxCyCzC, ba), y), z)*Jyz/4,

  cflFreq : (2*polyOrder+1)*(subst([x=0,y=0,z=0], vxx+vxy+vyy+vzz+vxz+vyz)),
  out : subst(indexSubList, float(expand(cflFreq))),
  printf(fh, "~%"),
  printf(fh, "  return ~a;~%", out),

  printf(fh, "}"),
  close(fh) 
  )