kill(all) $
load("modal-basis") $
load("recovery") $
assume(dv[0]>0, dv[1]>0, dv[2]>0) $

fgConvolution(basisNm, dir, der, polyOrder, fL, fU, gL, gU) := block(
  [gRec, gDer, ba, baL, baU, perpDirs, outL, outU],
  gRec : calcRecov2CellGen(basisNm, dir, [x,y,z], polyOrder, dg(gL), dg(gU)),
  gDer : diff(diff(gRec, der[1]), der[2]),
  
  ba : getBasis(sconcat("basis-precalc/basis", basisNm, "3x"), polyOrder),
  baL : etaDir(dir, -1, 2, ba),
  baU : etaDir(dir, 1, 2, ba),
  perpDirs : delete(dir, [x,y,z]),
  outL : calcInnerProdListGen([dir, perpDirs[1], perpDirs[2]],
    [[-2,0], [-1,1], [-1,1]], 1, baL, gDer*doExpand(fL, baL)),
  outU : calcInnerProdListGen([dir, perpDirs[1], perpDirs[2]],
    [ [0,2], [-1,1], [-1,1]], 1, baU, gDer*doExpand(fU, baU)),
  return([outL, outU])
) $

getSurfTerm(basisNm, dir, edge, polyOrder,
            fC, f1L, f1U, f2L, f2U,
            gC, g1L, g1U, g2L, g2U) := block(
  [C, perpDirs, edgeNm, ba,
  giifC, gijfL, gijfC, gijfU, gikfL, gikfC, gikfU,
  rec2, rec6,
  giif, giifi, gijf, gikf, gikfk, gijfj,
  Jii, Jij, Jik,
  t1, t2, t3, t4, t5, t6],
  
  perpDirs : delete(dir, [x,y,z]),

  giifC : fgConvolution(basisNm, dir, [dir, dir], polyOrder,
    fC[1], fC[2], gC[1], gC[2]),

  gijfL : fgConvolution(basisNm, dir, [dir, perpDirs[1]], polyOrder,
    f1L[1], f1L[2], g1L[1], g1L[2]),
  gijfC : fgConvolution(basisNm, dir, [dir, perpDirs[1]], polyOrder,
    fC[1], fC[2], gC[1], gC[2]),
  gijfU : fgConvolution(basisNm, dir, [dir, perpDirs[1]], polyOrder,
    f1U[1], f1U[2], g1U[1], g1U[2]),

  gikfL : fgConvolution(basisNm, dir, [dir, perpDirs[2]], polyOrder,
    f2L[1], f2L[2], g2L[1], g2L[2]),
  gikfC : fgConvolution(basisNm, dir, [dir, perpDirs[2]], polyOrder,
    fC[1], fC[2], gC[1], gC[2]),
  gikfU : fgConvolution(basisNm, dir, [dir, perpDirs[2]], polyOrder,
    f2U[1], f2U[2], g2U[1], g2U[2]),

  rec2 : calcRecov2CellGen(basisNm, dir, [x,y,z], polyOrder, dg(giifC[1]), dg(giifC[2])),
  giif : subst(dir=0, rec2),
  giifi : subst(dir=0, diff(rec2, dir)),
  
  rec2 : calcRecov2CellGen(basisNm, dir, [x,y,z], polyOrder, dg(gijfC[1]), dg(gijfC[2])),
  gijf : subst(dir=0, rec2),
  /*gijfj : subst(dir=0, diff(rec2, perpDirs[1])),*/
  
  rec2 : calcRecov2CellGen(basisNm, dir, [x,y,z], polyOrder, dg(gikfC[1]), dg(gikfC[2])),
  gikf : subst(dir=0, rec2),
  /*gikfk : subst(dir=0, diff(rec2, perpDirs[2])),*/

  C : 1,
  rec6 : calcRecovFaceGen(basisNm, [dir, perpDirs[1]], [x,y,z], 0, polyOrder, C,
    dg(dg(gijfL[1]), dg(gijfL[2])),
    dg(dg(gijfC[1]), dg(gijfC[2])),
    dg(dg(gijfU[1]), dg(gijfU[2]))),
  gijfj : diff(rec6, perpDirs[1]),
  rec6 : calcRecovFaceGen(basisNm, [dir, perpDirs[2]], [x,y,z], 0, polyOrder, C,
    dg(dg(gikfL[1]), dg(gikfL[2])),
    dg(dg(gikfC[1]), dg(gikfC[2])),
    dg(dg(gikfU[1]), dg(gikfU[2]))),
  gikfk : diff(rec6, perpDirs[2]),

  ba : getBasis(sconcat("basis-precalc/basis", basisNm, "3x"), polyOrder),
  Jii : eval_string(sconcat("J", dir, dir)),
  Jij : eval_string(sconcat("J", dir, perpDirs[1])),
  Jik : eval_string(sconcat("J", dir, perpDirs[2])),
  
  t1 : calcInnerProdList(perpDirs, Jii, subst(dir=edge, ba), giifi),
  t2 : calcInnerProdList(perpDirs, Jij, subst(dir=edge, ba), gijfj),
  t3 : calcInnerProdList(perpDirs, Jik, subst(dir=edge, ba), gikfk),
  t4 : calcInnerProdList(perpDirs, Jii, subst(dir=edge, diff(ba, dir)), giif),
  t5 : calcInnerProdList(perpDirs, Jij, subst(dir=edge, diff(ba, perpDirs[1])), gijf),
  t6 : calcInnerProdList(perpDirs, Jik, subst(dir=edge, diff(ba, perpDirs[2])), gikf),
  /*return(t1 - t4)*/
  return(t1 + t2 + t3 - t4 - t5 - t6)
) $

createIndexShiftList(ba) := block(
  indexSubList : append(
    /* distribution functions */
    makelist(fLLC[i]=fLLC[i-1], i, 1, length(ba)),
    makelist(fLCL[i]=fLCL[i-1], i, 1, length(ba)),
    makelist(fLCC[i]=fLCC[i-1], i, 1, length(ba)),
    makelist(fLCU[i]=fLCU[i-1], i, 1, length(ba)),
    makelist(fLUC[i]=fLUC[i-1], i, 1, length(ba)),
    makelist(fCLL[i]=fCLL[i-1], i, 1, length(ba)),
    makelist(fCLC[i]=fCLC[i-1], i, 1, length(ba)),
    makelist(fCLU[i]=fCLU[i-1], i, 1, length(ba)),
    makelist(fCCL[i]=fCCL[i-1], i, 1, length(ba)),
    makelist(fCCC[i]=fCCC[i-1], i, 1, length(ba)),
    makelist(fCCU[i]=fCCU[i-1], i, 1, length(ba)),
    makelist(fCUL[i]=fCUL[i-1], i, 1, length(ba)),
    makelist(fCUC[i]=fCUC[i-1], i, 1, length(ba)),
    makelist(fCUU[i]=fCUU[i-1], i, 1, length(ba)),
    makelist(fULC[i]=fULC[i-1], i, 1, length(ba)),
    makelist(fUCL[i]=fUCL[i-1], i, 1, length(ba)),
    makelist(fUCC[i]=fUCC[i-1], i, 1, length(ba)),
    makelist(fUCU[i]=fUCU[i-1], i, 1, length(ba)),
    makelist(fUUC[i]=fUUC[i-1], i, 1, length(ba)),
    /* diff potential */
    makelist(gLLC[i]=gLLC[i-1], i, 1, length(ba)),
    makelist(gLCL[i]=gLCL[i-1], i, 1, length(ba)),
    makelist(gLCC[i]=gLCC[i-1], i, 1, length(ba)),
    makelist(gLCU[i]=gLCU[i-1], i, 1, length(ba)),
    makelist(gLUC[i]=gLUC[i-1], i, 1, length(ba)),
    makelist(gCLL[i]=gCLL[i-1], i, 1, length(ba)),
    makelist(gCLC[i]=gCLC[i-1], i, 1, length(ba)),
    makelist(gCLU[i]=gCLU[i-1], i, 1, length(ba)),
    makelist(gCCL[i]=gCCL[i-1], i, 1, length(ba)),
    makelist(gCCC[i]=gCCC[i-1], i, 1, length(ba)),
    makelist(gCCU[i]=gCCU[i-1], i, 1, length(ba)),
    makelist(gCUL[i]=gCUL[i-1], i, 1, length(ba)),
    makelist(gCUC[i]=gCUC[i-1], i, 1, length(ba)),
    makelist(gCUU[i]=gCUU[i-1], i, 1, length(ba)),
    makelist(gULC[i]=gULC[i-1], i, 1, length(ba)),
    makelist(gUCL[i]=gUCL[i-1], i, 1, length(ba)),
    makelist(gUCC[i]=gUCC[i-1], i, 1, length(ba)),
    makelist(gUCU[i]=gUCU[i-1], i, 1, length(ba)),
    makelist(gUUC[i]=gUUC[i-1], i, 1, length(ba))
  )
) $

createInputLists(ba) := block(
  fListLLC : makelist(fLLC[i], i, 1, length(ba)),
  fListLCL : makelist(fLCL[i], i, 1, length(ba)),
  fListLCC : makelist(fLCC[i], i, 1, length(ba)),
  fListLCU : makelist(fLCU[i], i, 1, length(ba)),
  fListLUC : makelist(fLUC[i], i, 1, length(ba)),
  fListCLL : makelist(fCLL[i], i, 1, length(ba)),
  fListCLC : makelist(fCLC[i], i, 1, length(ba)),
  fListCLU : makelist(fCLU[i], i, 1, length(ba)),
  fListCCL : makelist(fCCL[i], i, 1, length(ba)),
  fListCCC : makelist(fCCC[i], i, 1, length(ba)),
  fListCCU : makelist(fCCU[i], i, 1, length(ba)),
  fListCUL : makelist(fCUL[i], i, 1, length(ba)),
  fListCUC : makelist(fCUC[i], i, 1, length(ba)),
  fListCUU : makelist(fCUU[i], i, 1, length(ba)),
  fListULC : makelist(fULC[i], i, 1, length(ba)),
  fListUCL : makelist(fUCL[i], i, 1, length(ba)),
  fListUCC : makelist(fUCC[i], i, 1, length(ba)),
  fListUCU : makelist(fUCU[i], i, 1, length(ba)),
  fListUUC : makelist(fUUC[i], i, 1, length(ba)),
  
  gListLLC : makelist(gLLC[i], i, 1, length(ba)),
  gListLCL : makelist(gLCL[i], i, 1, length(ba)),
  gListLCC : makelist(gLCC[i], i, 1, length(ba)),
  gListLCU : makelist(gLCU[i], i, 1, length(ba)),
  gListLUC : makelist(gLUC[i], i, 1, length(ba)),
  gListCLL : makelist(gCLL[i], i, 1, length(ba)),
  gListCLC : makelist(gCLC[i], i, 1, length(ba)),
  gListCLU : makelist(gCLU[i], i, 1, length(ba)),
  gListCCL : makelist(gCCL[i], i, 1, length(ba)),
  gListCCC : makelist(gCCC[i], i, 1, length(ba)),
  gListCCU : makelist(gCCU[i], i, 1, length(ba)),
  gListCUL : makelist(gCUL[i], i, 1, length(ba)),
  gListCUC : makelist(gCUC[i], i, 1, length(ba)),
  gListCUU : makelist(gCUU[i], i, 1, length(ba)),
  gListULC : makelist(gULC[i], i, 1, length(ba)),
  gListUCL : makelist(gUCL[i], i, 1, length(ba)),
  gListUCC : makelist(gUCC[i], i, 1, length(ba)),
  gListUCU : makelist(gUCU[i], i, 1, length(ba)),
  gListUUC : makelist(gUUC[i], i, 1, length(ba))
) $

createKernelSurfXL(basisNm, polyOrder) := block(
  [indexSubList,
  fListLLC, fListLCL, fListLCC, fListLCU, fListLUC, fListCLL, fListCLC, fListCLU, fListCCL, fListCCC, fListCCU, fListCUL, fListCUC, fListCUU, fListULC, fListUCL, fListUCC, fListUCU,  fListUUC,
  gListLLC, gListLCL, gListLCC, gListLCU, gListLUC, gListCLL, gListCLC, gListCLU, gListCCL, gListCCC, gListCCU, gListCUL, gListCUC, gListCUU, gListULC, gListUCL, gListUCC, gListUCU,  gListUUC,
  fname, fh, ba, surf, out],
  
  fname : sconcat("~/max-out/fpoDiffSurfXL", basisNm, "3xP", polyOrder, ".cpp"),
  fh : openw(fname),
  printf(fh, "#include <math.h>~%"),
  printf(fh, "#include <fpoKernelsDecl.h>~%~%"),
  
  printf(fh, "void fpoDiffSurfXL~a3xP~a(const double dt, const double* dv,~%", basisNm, polyOrder),
  printf(fh, "                          const double* fLCC,~%"),
  printf(fh, "                          const double* fLLC,~%"),
  printf(fh, "                          const double* fLUC,~%"),
  printf(fh, "                          const double* fLCL,~%"),
  printf(fh, "                          const double* fLCU,~%"),
  
  printf(fh, "                          const double* fCCC,~%"),
  printf(fh, "                          const double* fCLC,~%"),
  printf(fh, "                          const double* fCUC,~%"),
  printf(fh, "                          const double* fCCL,~%"),
  printf(fh, "                          const double* fCCU,~%"),
  
  printf(fh, "                          const double* gLCC,~%"),
  printf(fh, "                          const double* gLLC,~%"),
  printf(fh, "                          const double* gLUC,~%"),
  printf(fh, "                          const double* gLCL,~%"),
  printf(fh, "                          const double* gLCU,~%"),
  
  printf(fh, "                          const double* gCCC,~%"),
  printf(fh, "                          const double* gCLC,~%"),
  printf(fh, "                          const double* gCUC,~%"),
  printf(fh, "                          const double* gCCL,~%"),
  printf(fh, "                          const double* gCCU,~%"),
  
  printf(fh, "                          double *fOut) {~%"),
  
  ba : getBasis(sconcat("basis-precalc/basis", basisNm, "3x"), polyOrder),
  createIndexShiftList(ba),
  createInputLists(ba),
  
  printf(fh, "  double Jxx = 16/(dv[0]*dv[0]*dv[0]*dv[0]);~%"),
  printf(fh, "  double Jxy = 16/(dv[0]*dv[0]*dv[1]*dv[1]);~%"),
  printf(fh, "  double Jyx = Jxy;~%"),
  printf(fh, "  double Jxz = 16/(dv[0]*dv[0]*dv[2]*dv[2]);~%"),
  printf(fh, "  double Jzx = Jxz;~%~%"),
  
  surf : getSurfTerm(basisNm, x, -1, polyOrder,
    [fListLCC, fListCCC],
    [fListLLC, fListCLC], [fListLUC, fListCUC],
    [fListLCL, fListCCL], [fListLCU, fListCCU],
    [gListLCC, gListCCC],
    [gListLLC, gListCLC], [gListLUC, gListCUC],
    [gListLCL, gListCCL], [gListLCU, gListCCU]),
  out : subst(indexSubList, expand(-surf/2)),
  for i : 1 thru length(ba) do printf(fh, "  fOut[~a] += ~a;~%", i-1, dt*float(out[i])),
  printf(fh, "}"),
  close(fh)
) $

createKernelSurfXU(basisNm, polyOrder) := block(
  [indexSubList,
  fListLLC, fListLCL, fListLCC, fListLCU, fListLUC, fListCLL, fListCLC, fListCLU, fListCCL, fListCCC, fListCCU, fListCUL, fListCUC, fListCUU, fListULC, fListUCL, fListUCC, fListUCU, fListUUC,
  gListLLC, gListLCL, gListLCC, gListLCU, gListLUC, gListCLL, gListCLC, gListCLU, gListCCL, gListCCC, gListCCU, gListCUL, gListCUC, gListCUU, gListULC, gListUCL, gListUCC, gListUCU, gListUUC,
  fname, fh, ba, surf, out],
  
  fname : sconcat("~/max-out/fpoDiffSurfXU", basisNm, "3xP", polyOrder, ".cpp"),
  fh : openw(fname),
  printf(fh, "#include <math.h>~%"),
  printf(fh, "#include <fpoKernelsDecl.h>~%~%"),
  
  printf(fh, "void fpoDiffSurfXU~a3xP~a(const double dt, const double* dv,~%", basisNm, polyOrder),
  printf(fh, "                          const double* fCCC,~%"),
  printf(fh, "                          const double* fCLC,~%"),
  printf(fh, "                          const double* fCUC,~%"),
  printf(fh, "                          const double* fCCL,~%"),
  printf(fh, "                          const double* fCCU,~%"),
  
  printf(fh, "                          const double* fUCC,~%"),
  printf(fh, "                          const double* fULC,~%"),
  printf(fh, "                          const double* fUUC,~%"),
  printf(fh, "                          const double* fUCL,~%"),
  printf(fh, "                          const double* fUCU,~%"),
  
  printf(fh, "                          const double* gCCC,~%"),
  printf(fh, "                          const double* gCLC,~%"),
  printf(fh, "                          const double* gCUC,~%"),
  printf(fh, "                          const double* gCCL,~%"),
  printf(fh, "                          const double* gCCU,~%"),
  
  printf(fh, "                          const double* gUCC,~%"),
  printf(fh, "                          const double* gULC,~%"),
  printf(fh, "                          const double* gUUC,~%"),
  printf(fh, "                          const double* gUCL,~%"),
  printf(fh, "                          const double* gUCU,~%"),
  
  printf(fh, "                          double* fOut) {~%"),
  
  ba : getBasis(sconcat("basis-precalc/basis", basisNm, "3x"), polyOrder),
  createIndexShiftList(ba),
  createInputLists(ba),
  
  printf(fh, "  double Jxx = 16/(dv[0]*dv[0]*dv[0]*dv[0]);~%"),
  printf(fh, "  double Jxy = 16/(dv[0]*dv[0]*dv[1]*dv[1]);~%"),
  printf(fh, "  double Jyx = Jxy;~%"),
  printf(fh, "  double Jxz = 16/(dv[0]*dv[0]*dv[2]*dv[2]);~%"),
  printf(fh, "  double Jzx = Jxz;~%~%"),
  
  surf : getSurfTerm(basisNm, x, 1, polyOrder,
    [fListCCC, fListUCC],
    [fListCLC, fListULC], [fListCUC, fListUUC],
    [fListCCL, fListUCL], [fListCCU, fListUCU],
    [gListCCC, gListUCC],
    [gListCLC, gListULC], [gListCUC, gListUUC],
    [gListCCL, gListUCL], [gListCCU, gListUCU]),
  out : subst(indexSubList, expand(surf/2)),
  for i : 1 thru length(ba) do printf(fh, "  fOut[~a] += ~a;~%", i-1, dt*float(out[i])),
  printf(fh, "}"),
  close(fh)
) $

createKernelSurfYL(basisNm, polyOrder) := block(
  [indexSubList,
  fListLLC, fListLCL, fListLCC, fListLCU, fListLUC, fListCLL, fListCLC, fListCLU, fListCCL, fListCCC, fListCCU, fListCUL, fListCUC, fListCUU, fListULC, fListUCL, fListUCC, fListUCU,  fListUUC,
  gListLLC, gListLCL, gListLCC, gListLCU, gListLUC, gListCLL, gListCLC, gListCLU, gListCCL, gListCCC, gListCCU, gListCUL, gListCUC, gListCUU, gListULC, gListUCL, gListUCC, gListUCU,  gListUUC,
  fname, fh, ba, surf, out],
  
  fname : sconcat("~/max-out/fpoDiffSurfYL", basisNm, "3xP", polyOrder, ".cpp"),
  fh : openw(fname),
  printf(fh, "#include <math.h>~%"),
  printf(fh, "#include <fpoKernelsDecl.h>~%~%"),
  
  printf(fh, "void fpoDiffSurfYL~a3xP~a(const double dt, const double* dv,~%", basisNm, polyOrder),
  printf(fh, "                          const double* fCLC,~%"),
  printf(fh, "                          const double* fLLC,~%"),
  printf(fh, "                          const double* fULC,~%"),
  printf(fh, "                          const double* fCLL,~%"),
  printf(fh, "                          const double* fCLU,~%"),
 
  printf(fh, "                          const double* fCCC,~%"),
  printf(fh, "                          const double* fLCC,~%"),
  printf(fh, "                          const double* fUCC,~%"),
  printf(fh, "                          const double* fCCL,~%"),
  printf(fh, "                          const double* fCCU,~%"),

  printf(fh, "                          const double* gCLC,~%"),
  printf(fh, "                          const double* gLLC,~%"),
  printf(fh, "                          const double* gULC,~%"),
  printf(fh, "                          const double* gCLL,~%"),
  printf(fh, "                          const double* gCLU,~%"),
 
  printf(fh, "                          const double* gCCC,~%"),
  printf(fh, "                          const double* gLCC,~%"),
  printf(fh, "                          const double* gUCC,~%"),
  printf(fh, "                          const double* gCCL,~%"),
  printf(fh, "                          const double* gCCU,~%"),
  
  printf(fh, "                          double* fOut) {~%"),
  
  ba : getBasis(sconcat("basis-precalc/basis", basisNm, "3x"), polyOrder),
  createIndexShiftList(ba),
  createInputLists(ba),
  
  printf(fh, "  double Jyy = 16/(dv[1]*dv[1]*dv[1]*dv[1]);~%"),
  printf(fh, "  double Jxy = 16/(dv[0]*dv[0]*dv[1]*dv[1]);~%"),
  printf(fh, "  double Jyx = Jxy;~%"),
  printf(fh, "  double Jyz = 16/(dv[1]*dv[1]*dv[2]*dv[2]);~%"),
  printf(fh, "  double Jzy = Jyz;~%~%"),
  
  surf : getSurfTerm(basisNm, y, -1, polyOrder,
    [fListCLC, fListCCC],
    [fListLLC, fListLCC], [fListULC, fListUCC],
    [fListCLL, fListCCL], [fListCLU, fListCCU],
    [gListCLC, gListCCC],
    [gListLLC, gListLCC], [gListULC, gListUCC],
    [gListCLL, gListCCL], [gListCLU, gListCCU]
  ),
  out : subst(indexSubList, expand(-surf/2)),
  for i : 1 thru length(ba) do printf(fh, "  fOut[~a] += ~a;~%", i-1, dt*float(out[i])),
  printf(fh, "}"),
  close(fh)
) $

createKernelSurfYU(basisNm, polyOrder) := block(
  [indexSubList,
  fListLLC, fListLCL, fListLCC, fListLCU, fListLUC, fListCLL, fListCLC, fListCLU, fListCCL, fListCCC, fListCCU, fListCUL, fListCUC, fListCUU, fListULC, fListUCL, fListUCC, fListUCU,  fListUUC,
  gListLLC, gListLCL, gListLCC, gListLCU, gListLUC, gListCLL, gListCLC, gListCLU, gListCCL, gListCCC, gListCCU, gListCUL, gListCUC, gListCUU, gListULC, gListUCL, gListUCC, gListUCU,  gListUUC,
  fname, fh, ba, surf, out],
  
  fname : sconcat("~/max-out/fpoDiffSurfYU", basisNm, "3xP", polyOrder, ".cpp"),
  fh : openw(fname),
  printf(fh, "#include <math.h>~%"),
  printf(fh, "#include <fpoKernelsDecl.h>~%~%"),
  
  printf(fh, "void fpoDiffSurfYU~a3xP~a(const double dt, const double* dv,~%", basisNm, polyOrder),
  printf(fh, "                          const double* fCCC,~%"),
  printf(fh, "                          const double* fLCC,~%"),
  printf(fh, "                          const double* fUCC,~%"),
  printf(fh, "                          const double* fCCL,~%"),
  printf(fh, "                          const double* fCCU,~%"),
 
  printf(fh, "                          const double* fCUC,~%"),
  printf(fh, "                          const double* fLUC,~%"),
  printf(fh, "                          const double* fUUC,~%"),
  printf(fh, "                          const double* fCUL,~%"),
  printf(fh, "                          const double* fCUU,~%"),

  printf(fh, "                          const double* gCCC,~%"),
  printf(fh, "                          const double* gLCC,~%"),
  printf(fh, "                          const double* gUCC,~%"),
  printf(fh, "                          const double* gCCL,~%"),
  printf(fh, "                          const double* gCCU,~%"),
 
  printf(fh, "                          const double* gCUC,~%"),
  printf(fh, "                          const double* gLUC,~%"),
  printf(fh, "                          const double* gUUC,~%"),
  printf(fh, "                          const double* gCUL,~%"),
  printf(fh, "                          const double* gCUU,~%"),
  
  printf(fh, "                          double* fOut) {~%"),
  
  ba : getBasis(sconcat("basis-precalc/basis", basisNm, "3x"), polyOrder),
  createIndexShiftList(ba),
  createInputLists(ba),
  
  printf(fh, "  double Jyy = 16/(dv[1]*dv[1]*dv[1]*dv[1]);~%"),
  printf(fh, "  double Jxy = 16/(dv[0]*dv[0]*dv[1]*dv[1]);~%"),
  printf(fh, "  double Jyx = Jxy;~%"),
  printf(fh, "  double Jyz = 16/(dv[1]*dv[1]*dv[2]*dv[2]);~%"),
  printf(fh, "  double Jzy = Jyz;~%~%"),
  
  surf : getSurfTerm(basisNm, y, 1, polyOrder,
    [fListCCC, fListCUC],
    [fListLCC, fListLUC], [fListUCC, fListUUC],
    [fListCCL, fListCUL], [fListCCU, fListCUU],
    [gListCCC, gListCUC],
    [gListLCC, gListLUC], [gListUCC, gListUUC],
    [gListCCL, gListCUL], [gListCCU, gListCUU]
  ),
  out : subst(indexSubList, expand(surf/2)),
  for i : 1 thru length(ba) do printf(fh, "  fOut[~a] += ~a;~%", i-1, dt*float(out[i])),
  printf(fh, "}"),
  close(fh)
) $

createKernelSurfZL(basisNm, polyOrder) := block(
  [indexSubList,
  fListLLC, fListLCL, fListLCC, fListLCU, fListLUC, fListCLL, fListCLC, fListCLU, fListCCL, fListCCC, fListCCU, fListCUL, fListCUC, fListCUU, fListULC, fListUCL, fListUCC, fListUCU,  fListUUC,
  gListLLC, gListLCL, gListLCC, gListLCU, gListLUC, gListCLL, gListCLC, gListCLU, gListCCL, gListCCC, gListCCU, gListCUL, gListCUC, gListCUU, gListULC, gListUCL, gListUCC, gListUCU,  gListUUC,
  fname, fh, ba, surf, out],
  
  fname : sconcat("~/max-out/fpoDiffSurfZL", basisNm, "3xP", polyOrder, ".cpp"),
  fh : openw(fname),
  printf(fh, "#include <math.h>~%"),
  printf(fh, "#include <fpoKernelsDecl.h>~%~%"),
  
  printf(fh, "void fpoDiffSurfZL~a3xP~a(const double dt, const double* dv,~%", basisNm, polyOrder),
  printf(fh, "                          const double* fCCL,~%"),
  printf(fh, "                          const double* fLCL,~%"),
  printf(fh, "                          const double* fUCL,~%"),
  printf(fh, "                          const double* fCLL,~%"),
  printf(fh, "                          const double* fCUL,~%"),

  printf(fh, "                          const double* fCCC,~%"),
  printf(fh, "                          const double* fLCC,~%"),
  printf(fh, "                          const double* fUCC,~%"),
  printf(fh, "                          const double* fCLC,~%"),
  printf(fh, "                          const double* fCUC,~%"),

  printf(fh, "                          const double* gCCL,~%"),
  printf(fh, "                          const double* gLCL,~%"),
  printf(fh, "                          const double* gUCL,~%"),
  printf(fh, "                          const double* gCLL,~%"),
  printf(fh, "                          const double* gCUL,~%"),

  printf(fh, "                          const double* gCCC,~%"),
  printf(fh, "                          const double* gLCC,~%"),
  printf(fh, "                          const double* gUCC,~%"),
  printf(fh, "                          const double* gCLC,~%"),
  printf(fh, "                          const double* gCUC,~%"),
  
  printf(fh, "                          double* fOut) {~%"),
  
  ba : getBasis(sconcat("basis-precalc/basis", basisNm, "3x"), polyOrder),
  createIndexShiftList(ba),
  createInputLists(ba),
  
  printf(fh, "  double Jzz = 16/(dv[2]*dv[2]*dv[2]*dv[2]);~%"),
  printf(fh, "  double Jxz = 16/(dv[0]*dv[0]*dv[2]*dv[2]);~%"),
  printf(fh, "  double Jzx = Jxz;~%"),
  printf(fh, "  double Jyz = 16/(dv[1]*dv[1]*dv[2]*dv[2]);~%"),
  printf(fh, "  double Jzy = Jyz;~%~%"),
  
  surf : getSurfTerm(basisNm, z, -1, polyOrder,
    [fListCCL, fListCCC],
    [fListLCL, fListLCC], [fListUCL, fListUCC],
    [fListCLL, fListCLC], [fListCUL, fListCUC],
    [gListCCL, gListCCC],
    [gListLCL, gListLCC], [gListUCL, gListUCC],
    [gListCLL, gListCLC], [gListCUL, gListCUC]
  ),
  out : subst(indexSubList, expand(-surf/2)),
  for i : 1 thru length(ba) do printf(fh, "  fOut[~a] += ~a;~%", i-1, dt*float(out[i])),
  printf(fh, "}"),
  close(fh)
) $

createKernelSurfZU(basisNm, polyOrder) := block(
  [indexSubList,
  fListLLC, fListLCL, fListLCC, fListLCU, fListLUC, fListCLL, fListCLC, fListCLU, fListCCL, fListCCC, fListCCU, fListCUL, fListCUC, fListCUU, fListULC, fListUCL, fListUCC, fListUCU,  fListUUC,
  gListLLC, gListLCL, gListLCC, gListLCU, gListLUC, gListCLL, gListCLC, gListCLU, gListCCL, gListCCC, gListCCU, gListCUL, gListCUC, gListCUU, gListULC, gListUCL, gListUCC, gListUCU,  gListUUC,
  fname, fh, ba, surf, out],
  
  fname : sconcat("~/max-out/fpoDiffSurfZU", basisNm, "3xP", polyOrder, ".cpp"),
  fh : openw(fname),
  printf(fh, "#include <math.h>~%"),
  printf(fh, "#include <fpoKernelsDecl.h>~%~%"),
  
  printf(fh, "void fpoDiffSurfZU~a3xP~a(const double dt, const double* dv,~%", basisNm, polyOrder),
  printf(fh, "                          const double* fCCC,~%"),
  printf(fh, "                          const double* fLCC,~%"),
  printf(fh, "                          const double* fUCC,~%"),
  printf(fh, "                          const double* fCLC,~%"),
  printf(fh, "                          const double* fCUC,~%"),

  printf(fh, "                          const double* fCCU,~%"),
  printf(fh, "                          const double* fLCU,~%"),
  printf(fh, "                          const double* fUCU,~%"),
  printf(fh, "                          const double* fCLU,~%"),
  printf(fh, "                          const double* fCUU,~%"),

  printf(fh, "                          const double* gCCC,~%"),
  printf(fh, "                          const double* gLCC,~%"),
  printf(fh, "                          const double* gUCC,~%"),
  printf(fh, "                          const double* gCLC,~%"),
  printf(fh, "                          const double* gCUC,~%"),

  printf(fh, "                          const double* gCCU,~%"),
  printf(fh, "                          const double* gLCU,~%"),
  printf(fh, "                          const double* gUCU,~%"),
  printf(fh, "                          const double* gCLU,~%"),
  printf(fh, "                          const double* gCUU,~%"),
  
  printf(fh, "                          double* fOut) {~%"),
  
  ba : getBasis(sconcat("basis-precalc/basis", basisNm, "3x"), polyOrder),
  createIndexShiftList(ba),
  createInputLists(ba),
  
  printf(fh, "  double Jzz = 16/(dv[2]*dv[2]*dv[2]*dv[2]);~%"),
  printf(fh, "  double Jxz = 16/(dv[0]*dv[0]*dv[2]*dv[2]);~%"),
  printf(fh, "  double Jzx = Jxz;~%"),
  printf(fh, "  double Jyz = 16/(dv[1]*dv[1]*dv[2]*dv[2]);~%"),
  printf(fh, "  double Jzy = Jyz;~%~%"),
  
  surf : getSurfTerm(basisNm, z, 1, polyOrder,
    [fListCCC, fListCCU],
    [fListLCC, fListLCU], [fListUCC, fListUCU],
    [fListCLC, fListCLU], [fListCUC, fListCUU],
    [gListCCC, gListCCU],
    [gListLCC, gListLCU], [gListUCC, gListUCU],
    [gListCLC, gListCLU], [gListCUC, gListCUU]
  ),
  out : subst(indexSubList, expand(surf/2)),
  for i : 1 thru length(ba) do printf(fh, "  fOut[~a] += ~a;~%", i-1, dt*float(out[i])),
  printf(fh, "}"),
  close(fh)
) $

createKernelVol(basisNm, polyOrder) := block(
  [indexSubList,
  fListLLC, fListLCL, fListLCC, fListLCU, fListLUC, fListCLL, fListCLC, fListCLU, fListCCL, fListCCC, fListCCU, fListCUL, fListCUC, fListCUU, fListULC, fListUCL, fListUCC, fListUCU, fListUUC,
  gListLLC, gListLCL, gListLCC, gListLCU, gListLUC, gListCLL, gListCLC, gListCLU, gListCCL, gListCCC, gListCCU, gListCUL, gListCUC, gListCUU, gListULC, gListUCL, gListUCC, gListUCU, gListUUC,
  fname, fh, ba, gxxfPhixxVol, gyyfPhiyyVol, gzzfPhizzVol, gxyfPhixyVol, gxzfPhixzVol, gyzfPhiyzVol, tmp, out,
  vxx, vyy, vzz, vxy, vxz, vyz, cflFreq],
  
  fname : sconcat("~/max-out/fpoDiffVol", basisNm, "3xP", polyOrder, ".cpp"),
  fh : openw(fname),
  printf(fh, "#include <math.h>~%"),
  printf(fh, "#include <fpoKernelsDecl.h>~%~%"),
  
  printf(fh, "double fpoDiffVol~a3xP~a(const double dt, const double* dv,~%", basisNm, polyOrder),
  
  printf(fh, "                         const double* fCCC,~%"),
  printf(fh, "                         const double* gCCC,~%"),
  
  printf(fh, "                         double *fOut) {~%"),
  
  ba : getBasis(sconcat("basis-precalc/basis", basisNm, "3x"), polyOrder),
  createIndexShiftList(ba),
  createInputLists(ba),
  
  printf(fh, "  double Jxx = 16/(dv[0]*dv[0]*dv[0]*dv[0]);~%"),
  printf(fh, "  double Jyy = 16/(dv[1]*dv[1]*dv[1]*dv[1]);~%"),
  printf(fh, "  double Jzz = 16/(dv[2]*dv[2]*dv[2]*dv[2]);~%"),
  printf(fh, "  double Jxy = 16/(dv[0]*dv[0]*dv[1]*dv[1]);~%"),
  printf(fh, "  double Jyx = Jxy;~%"),
  printf(fh, "  double Jxz = 16/(dv[0]*dv[0]*dv[2]*dv[2]);~%"),
  printf(fh, "  double Jzx = Jxz;~%"),
  printf(fh, "  double Jyz = 16/(dv[1]*dv[1]*dv[2]*dv[2]);~%"),
  printf(fh, "  double Jzy = Jyz;~%~%"),
  /* Putting together the volume terms */
  gxxfPhixxVol : calcInnerProdList([x,y,z], Jxx, diff(ba, x, 2),
    diff(doExpand(gListCCC, ba), x, 2)*doExpand(fListCCC, ba)),
  gyyfPhiyyVol : calcInnerProdList([x,y,z], Jyy, diff(ba, y, 2),
    diff(doExpand(gListCCC, ba), y, 2)*doExpand(fListCCC, ba)),
  gzzfPhizzVol : calcInnerProdList([x,y,z], Jzz, diff(ba, z, 2),
    diff(doExpand(gListCCC, ba), z, 2)*doExpand(fListCCC, ba)),
  gxyfPhixyVol : calcInnerProdList([x,y,z], Jxy, diff(diff(ba, x), y),
    diff(diff(doExpand(gListCCC, ba), x), y)*doExpand(fListCCC, ba)),
  gxzfPhixzVol : calcInnerProdList([x,y,z], Jxz, diff(diff(ba, x), z),
    diff(diff(doExpand(gListCCC, ba), x), z)*doExpand(fListCCC, ba)),
  gyzfPhiyzVol : calcInnerProdList([x,y,z], Jyz, diff(diff(ba, y), z),
    diff(diff(doExpand(gListCCC, ba), y), z)*doExpand(fListCCC, ba)),
 
  /* Writting the volume term */
  tmp : (gxxfPhixxVol + gyyfPhiyyVol + gzzfPhizzVol +
    2*gxyfPhixyVol + 2*gxzfPhixzVol + 2*gyzfPhiyzVol)/2,
  out : subst(indexSubList, expand(tmp)),
  for i : 1 thru length(ba) do printf(fh, "  fOut[~a] += ~a;~%", i-1, dt*float(out[i])),

  /* Calculating the time step */
  vxx : diff(doExpand(gListCCC, ba), x, 2)*Jxx/4,
  vyy : diff(doExpand(gListCCC, ba), y, 2)*Jyy/4,
  vzz : diff(doExpand(gListCCC, ba), z, 2)*Jzz/4,
  vxy : diff(diff(doExpand(gListCCC, ba), x), y)*Jxy/4,
  vxz : diff(diff(doExpand(gListCCC, ba), x), z)*Jxz/4,
  vyz : diff(diff(doExpand(gListCCC, ba), y), z)*Jyz/4,

  cflFreq : (2*polyOrder+1)*(subst([x=0,y=0,z=0], vxx+vxy+vyy+vzz+vxz+vyz)),
  out : subst(indexSubList, float(expand(cflFreq))),
  printf(fh, "~%"),
  printf(fh, "  return ~a;~%", out),

  printf(fh, "}"),
  close(fh) 
) $