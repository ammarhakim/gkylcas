kill(all) $
load("modal-basis") $
load("recovery") $
assume(dv[0]>0, dv[1]>0, dv[2]>0) $
numDims : 2 $

basisNm : "Ser"$
for polyOrder : 1 thru 1 do (
  fname : sconcat("~/.max-out/fpoDragKernel3xP", polyOrder, ".cpp"),
  fh : openw(fname),
  printf(fh, "#include <math.h>~%"),
  printf(fh, "#include <fpoKernelsDecl.h>~%~%"),

  printf(fh, "double fpoDragKernelP~a(const double dt, const double *dv,~%", polyOrder),
  printf(fh, "                        const double *f,~%"),
  printf(fh, "                        const double *f1L, const double *f1U,~%"),
  printf(fh, "                        const double *f2L, const double *f2U,~%"),
  printf(fh, "                        const double *f3L, const double *f3U,~%"),
  printf(fh, "                        const double *h,~%"),
  printf(fh, "                        const double *h1L, const double *h1U,~%"),
  printf(fh, "                        const double *h2L, const double *h2U,~%"),
  printf(fh, "                        const double *h3L, const double *h3U,~%"),
  printf(fh, "                        const int isTopEdge, const int isBotEdge, const int isLeftEdge, const int isRightEdge,~%"),
  printf(fh, "                        double *fOut) {~%"),

  printf(fh, "  double Jx = 4/(dv[0]*dv[0]);~%"),
  printf(fh, "  double Jy = 4/(dv[1]*dv[1]);~%"),
  printf(fh, "  double Jz = 4/(dv[2]*dv[2]);~%~%"),
  
  ba : getBasis(sconcat("basis-precalc/basis", basisNm, "3x"), polyOrder),
  ba1L : eta([-1,0,0], [2,2,2], ba),
  ba1U : eta([1,0,0], [2,2,2], ba),
  ba2L : eta([0,-1,0], [2,2,2], ba),
  ba2U : eta([0,1,0], [2,2,2], ba),
  ba3L : eta([0,0,-1], [2,2,2], ba),
  ba3U : eta([0,0,1], [2,2,2], ba),
    
  indexSubList : append(
    /* drag potential */
    makelist(h[i]=h[i-1], i, 1, length(ba)),
    makelist(h1L[i]=h1L[i-1], i, 1, length(ba)),
    makelist(h1U[i]=h1U[i-1], i, 1, length(ba)),
    makelist(h2L[i]=h2L[i-1], i, 1, length(ba)),
    makelist(h2U[i]=h2U[i-1], i, 1, length(ba)),
    makelist(h3L[i]=h3L[i-1], i, 1, length(ba)),
    makelist(h3U[i]=h3U[i-1], i, 1, length(ba)),
    /* distribution functions */
    makelist(f[i]=f[i-1], i, 1, length(ba)),
    makelist(f1L[i]=f1L[i-1], i, 1, length(ba)),
    makelist(f1U[i]=f1U[i-1], i, 1, length(ba)),
    makelist(f2L[i]=f2L[i-1], i, 1, length(ba)),
    makelist(f2U[i]=f2U[i-1], i, 1, length(ba)),
    makelist(f3L[i]=f3L[i-1], i, 1, length(ba)),
    makelist(f3U[i]=f3U[i-1], i, 1, length(ba)),
    /* convolutions */
    makelist(hxfLL[i]=hxfLL[i-1], i, 1, length(ba)),
    makelist(hxfLU[i]=hxfLU[i-1], i, 1, length(ba)),
    makelist(hxfUL[i]=hxfUL[i-1], i, 1, length(ba)),
    makelist(hxfUU[i]=hxfUU[i-1], i, 1, length(ba)),
    
    makelist(hyfLL[i]=hyfLL[i-1], i, 1, length(ba)),
    makelist(hyfLU[i]=hyfLU[i-1], i, 1, length(ba)),
    makelist(hyfUL[i]=hyfUL[i-1], i, 1, length(ba)),
    makelist(hyfUU[i]=hyfUU[i-1], i, 1, length(ba)),
    
    makelist(hzfLL[i]=hzfLL[i-1], i, 1, length(ba)),
    makelist(hzfLU[i]=hzfLU[i-1], i, 1, length(ba)),
    makelist(hzfUL[i]=hzfUL[i-1], i, 1, length(ba)),
    makelist(hzfUU[i]=hzfUU[i-1], i, 1, length(ba)),
    /* cell size */
    makelist(dv[i]=dv[i-1], i, 1, 3)
    ),

  /* Setting up recoveries of h */
  hRec1L : calcRecov2CellGen(basisNm, x, [2,2,2], polyOrder, dg(h1L), dg(h)),
  hRec1U : calcRecov2CellGen(basisNm, x, [2,2,2], polyOrder, dg(h), dg(h1U)),
  hRec2L : calcRecov2CellGen(basisNm, y, [2,2,2], polyOrder, dg(h2L), dg(h)),
  hRec2U : calcRecov2CellGen(basisNm, y, [2,2,2], polyOrder, dg(h), dg(h2U)),
  hRec3L : calcRecov2CellGen(basisNm, z, [2,2,2], polyOrder, dg(h3L), dg(h)),
  hRec3U : calcRecov2CellGen(basisNm, z, [2,2,2], polyOrder, dg(h), dg(h3U)),
  
  tmp : calcInnerProdListGen([x, y, z], [[-2,0],[-1,1],[-1,1]], 1, ba1L,
    diff(hRec1L, x)*doExpand(f1L, ba1L)),
  printf(fh, "  double hxfLL[~a];~%", length(ba)),
  out : subst(indexSubList, float(expand(tmp))),
  for i : 1 thru length(ba) do printf(fh, "  hxfLL[~a] = ~a;~%", i-1, out[i]),
  printf(fh, "~%"),
  tmp : calcInnerProdListGen([x, y, z], [[0,2],[-1,1],[-1,1]], 1, ba1U,
    diff(hRec1L, x)*doExpand(f, ba1U)),
  printf(fh, "  double hxfLU[~a];~%", length(ba)),
  out : subst(indexSubList, float(expand(tmp))),
  for i : 1 thru length(ba) do printf(fh, "  hxfLU[~a] = ~a;~%", i-1, out[i]),
  printf(fh, "~%"),

  tmp : calcInnerProdListGen([x, y, z], [[-2,0],[-1,1],[-1,1]], 1, ba1L,
    diff(hRec1U, x)*doExpand(f, ba1L)),
  printf(fh, "  double hxfUL[~a];~%", length(ba)),
  out : subst(indexSubList, float(expand(tmp))),
  for i : 1 thru length(ba) do printf(fh, "  hxfUL[~a] = ~a;~%", i-1, out[i]),
  printf(fh, "~%"),
  tmp : calcInnerProdListGen([x, y, z], [[0,2],[-1,1],[-1,1]], 1, ba1U,
    diff(hRec1U, x)*doExpand(f1U, ba1U)),
  printf(fh, "  double hxfUU[~a];~%", length(ba)),
  out : subst(indexSubList, float(expand(tmp))),
  for i : 1 thru length(ba) do printf(fh, "  hxfUU[~a] = ~a;~%", i-1, out[i]),
  printf(fh, "~%"),


  tmp : calcInnerProdListGen([x, y, z], [[-1,1],[-2,0],[-1,1]], 1, ba2L,
    diff(hRec2L, y)*doExpand(f2L, ba2L)),
  printf(fh, "  double hyfLL[~a];~%", length(ba)),
  out : subst(indexSubList, float(expand(tmp))),
  for i : 1 thru length(ba) do printf(fh, "  hyfLL[~a] = ~a;~%", i-1, out[i]),
  printf(fh, "~%"),
  tmp : calcInnerProdListGen([x, y, z], [[-1,1],[0,2],[-1,1]], 1, ba2U,
    diff(hRec2L, y)*doExpand(f, ba2U)),
  printf(fh, "  double hyfLU[~a];~%", length(ba)),
  out : subst(indexSubList, float(expand(tmp))),
  for i : 1 thru length(ba) do printf(fh, "  hyfLU[~a] = ~a;~%", i-1, out[i]),
  printf(fh, "~%"),

  tmp : calcInnerProdListGen([x, y, z], [[-1,1],[-2,0],[-1,1]], 1, ba2L,
    diff(hRec2U, y)*doExpand(f, ba2L)),
  printf(fh, "  double hyfUL[~a];~%", length(ba)),
  out : subst(indexSubList, float(expand(tmp))),
  for i : 1 thru length(ba) do printf(fh, "  hyfUL[~a] = ~a;~%", i-1, out[i]),
  printf(fh, "~%"),
  tmp : calcInnerProdListGen([x, y, z], [[-1,1],[0,2],[-1,1]], 1, ba2U,
    diff(hRec2U, y)*doExpand(f2U, ba2U)),
  printf(fh, "  double hyfUU[~a];~%", length(ba)),
  out : subst(indexSubList, float(expand(tmp))),
  for i : 1 thru length(ba) do printf(fh, "  hyfUU[~a] = ~a;~%", i-1, out[i]),
  printf(fh, "~%"),


  tmp : calcInnerProdListGen([x, y, z], [[-1,1],[-1,1],[-2,0]], 1, ba3L,
    diff(hRec3L, z)*doExpand(f3L, ba3L)),
  printf(fh, "  double hzfLL[~a];~%", length(ba)),
  out : subst(indexSubList, float(expand(tmp))),
  for i : 1 thru length(ba) do printf(fh, "  hzfLL[~a] = ~a;~%", i-1, out[i]),
  printf(fh, "~%"),
  tmp : calcInnerProdListGen([x, y, z], [[-1,1],[-1,1],[0,2]], 1, ba3U,
    diff(hRec3L, z)*doExpand(f, ba3U)),
  printf(fh, "  double hzfLU[~a];~%", length(ba)),
  out : subst(indexSubList, float(expand(tmp))),
  for i : 1 thru length(ba) do printf(fh, "  hzfLU[~a] = ~a;~%", i-1, out[i]),
  printf(fh, "~%"),

  tmp : calcInnerProdListGen([x, y, z], [[-1,1],[-1,1],[-2,0]], 1, ba3L,
    diff(hRec3U, z)*doExpand(f, ba3L)),
  printf(fh, "  double hzfUL[~a];~%", length(ba)),
  out : subst(indexSubList, float(expand(tmp))),
  for i : 1 thru length(ba) do printf(fh, "  hzfUL[~a] = ~a;~%", i-1, out[i]),
  printf(fh, "~%"),
  tmp : calcInnerProdListGen([x, y, z], [[-1,1],[-1,1],[0,2]], 1, ba3U,
    diff(hRec3U, z)*doExpand(f3U, ba3U)),
  printf(fh, "  double hzfUU[~a];~%", length(ba)),
  out : subst(indexSubList, float(expand(tmp))),
  for i : 1 thru length(ba) do printf(fh, "  hzfUU[~a] = ~a;~%", i-1, out[i]),
  printf(fh, "~%"),

  
  hxfRecL : calcRecov2CellGen(basisNm, x, [2,2,2], polyOrder, dg(hxfLL), dg(hxfLU)),
  hxfRecU : calcRecov2CellGen(basisNm, x, [2,2,2], polyOrder, dg(hxfUL), dg(hxfUU)),
  hyfRecL : calcRecov2CellGen(basisNm, y, [2,2,2], polyOrder, dg(hyfLL), dg(hyfLU)),
  hyfRecU : calcRecov2CellGen(basisNm, y, [2,2,2], polyOrder, dg(hyfUL), dg(hyfUU)),
  hzfRecL : calcRecov2CellGen(basisNm, z, [2,2,2], polyOrder, dg(hzfLL), dg(hzfLU)),
  hzfRecU : calcRecov2CellGen(basisNm, z, [2,2,2], polyOrder, dg(hzfUL), dg(hzfUU)),


  /* Putting together the surface terms at x */
  hxfPhiSurL : calcInnerProdListGen([y,z], [[-1,1],[-1,1]], Jx, subst(x=-1, ba),
    subst(x=0, hxfRecL)),
  hxfPhiSurU : calcInnerProdListGen([y,z], [[-1,1],[-1,1]], Jx, subst(x=1, ba),
    subst(x=0, hxfRecU)),
  /* Putting together the surface terms at y */
  hyfPhiSurL : calcInnerProdListGen([x,z], [[-1,1],[-1,1]], Jy, subst(y=-1, ba),
    subst(y=0, hyfRecL)),
  hyfPhiSurU : calcInnerProdListGen([x,z], [[-1,1],[-1,1]], Jy, subst(y=1, ba),
    subst(y=0, hyfRecU)),
  /* Putting together the surface terms at y */
  hzfPhiSurL : calcInnerProdListGen([x,y], [[-1,1],[-1,1]], Jz, subst(z=-1, ba),
    subst(z=0, hzfRecL)),
  hzfPhiSurU : calcInnerProdListGen([x,y], [[-1,1],[-1,1]], Jz, subst(z=1, ba),
    subst(z=0, hzfRecU)),

  /* Putting together the volume terms */
  hxfPhixVol : calcInnerProdListGen([x,y,z], [[-1,1],[-1,1],[-1,1]], Jx,
    diff(ba, x), diff(doExpand(h, ba), x)*doExpand(f, ba)),
  hyfPhiyVol : calcInnerProdListGen([x,y,z], [[-1,1],[-1,1],[-1,1]], Jy,
    diff(ba, y), diff(doExpand(h, ba), y)*doExpand(f, ba)),
  hzfPhizVol : calcInnerProdListGen([x,y,z], [[-1,1],[-1,1],[-1,1]], Jz,
    diff(ba, z), diff(doExpand(h, ba), z)*doExpand(f, ba)),
  
  /* printf(fh, "  if (isLeftEdge) {~%"),
  tmp : -(hxfPhiSurR),
  out : subst(indexSubList, float(expand(tmp))),
  for i : 1 thru length(baC) do printf(fh, "    fOut[~a] = fC[~a] + ~a;~%", i-1, i-1, dt*out[i]),
  
  printf(fh, "  } else if (isRightEdge) {~%"),
  tmp : -(-hxfPhiSurL),
  out : subst(indexSubList, float(expand(tmp))),
  for i : 1 thru length(baC) do printf(fh, "    fOut[~a] = fC[~a] + ~a;~%", i-1, i-1, dt*out[i]),
  
  printf(fh, "  } else {~%"),*/
  tmp : -(hxfPhiSurU-hxfPhiSurL),
  out : subst(indexSubList, float(expand(tmp))),
  for i : 1 thru length(ba) do printf(fh, "    fOut[~a] = f[~a] + ~a;~%", i-1, i-1, dt*out[i]),
  /*printf(fh, "  }~%~%"),*/

  /*printf(fh, "  if (isBotEdge) {~%"),
  tmp : -(hyfPhiSurT),
  out : subst(indexSubList, float(expand(tmp))),
  for i : 1 thru length(baC) do printf(fh, "    fOut[~a] += ~a;~%", i-1, dt*out[i]),
  
  printf(fh, "  } else if (isTopEdge) {~%"),
  tmp : -(-hyfPhiSurB),
  out : subst(indexSubList, float(expand(tmp))),
  for i : 1 thru length(baC) do printf(fh, "    fOut[~a] += ~a;~%", i-1, dt*out[i]),
  
  printf(fh, "  } else {~%"),*/
  tmp : -(hyfPhiSurU-hyfPhiSurL),
  out : subst(indexSubList, float(expand(tmp))),
  for i : 1 thru length(ba) do printf(fh, "    fOut[~a] += ~a;~%", i-1, dt*out[i]),
  /*printf(fh, "  }~%~%"),*/

  tmp : -(hzfPhiSurU-hzfPhiSurL),
  out : subst(indexSubList, float(expand(tmp))),
  for i : 1 thru length(ba) do printf(fh, "    fOut[~a] += ~a;~%", i-1, dt*out[i]),

  /* Writting the volume term */
  tmp : hxfPhixVol + hyfPhiyVol + hzfPhizVol,
  out : subst(indexSubList, float(expand(tmp))),
  for i : 1 thru length(ba) do printf(fh, "  fOut[~a] += ~a;~%", i-1, dt*out[i]),
  
  /* Calculating the time step */
  vx :  diff(calcRecov1CellGen(basisNm, x, [2,2,2], polyOrder, 0, dg(h1L), dg(h), dg(h1U)), x)*Jx/2,
  vy :  diff(calcRecov1CellGen(basisNm, y, [2,2,2], polyOrder, 0, dg(h2L), dg(h), dg(h2U)), y)*Jy/2,
  vz :  diff(calcRecov1CellGen(basisNm, z, [2,2,2], polyOrder, 0, dg(h3L), dg(h), dg(h3U)), z)*Jz/2,
  cflFreq : (2*polyOrder+1)*(subst([x=0,y=0,z=0], vx+vy+vz)),
  out : subst(indexSubList, float(expand(cflFreq))),
  printf(fh, "~%"),
  printf(fh, "  return ~a;~%", out),
 
  printf(fh, "}"),
  
  close(fh)
  )