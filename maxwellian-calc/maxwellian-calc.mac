/* Create kernels to project a Maxwellian onto the DG basis using quadrature. */

load("maxwellian-calc/maxwellianGaussQuad.mac")$
load(stringproc)$


/* ...... USER INPUTS........ */

/* Serendipity basis. */
maxPolyOrder_Ser : 3$
minCdim_Ser : 1$
minVdim_Ser : 1$    /* see beginning of v loop below though. */
maxCdim_Ser : 3$
maxVdim_Ser : 3$

/* Maximal order basis. */
maxPolyOrder_Max : 2$
minCdim_Max : 1$
minVdim_Max : 1$    /* see begining of v loop below though. */
maxCdim_Max : 2$
maxVdim_Max : 2$

/* Tensor product basis. */
maxPolyOrder_Tensor : 2$
minCdim_Tensor : 1$
minVdim_Tensor : 1$    /* see begining of v loop below though. */
maxCdim_Tensor : 2$
maxVdim_Tensor : 2$

/* ...... END OF USER INPUTS........ */

bName        : ["Ser","Max","Tensor"]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Max, maxPolyOrder_Tensor]$
minCdim      : [minCdim_Ser, minCdim_Max, minCdim_Tensor]$
minVdim      : [minVdim_Ser, minVdim_Max, minVdim_Tensor]$
maxCdim      : [maxCdim_Ser, maxCdim_Max, maxCdim_Tensor]$
maxVdim      : [maxVdim_Ser, maxVdim_Max, maxVdim_Tensor]$

for bInd : 1 thru length(bName) do (
  for cD : minCdim[bInd] thru maxCdim[bInd] do (
    for vD : max(cD,minVdim[bInd]) thru maxVdim[bInd] do (

      maxPolyOrderB : maxPolyOrder[bInd],
      if (cD+vD>4 and maxPolyOrderB > 2) then maxPolyOrderB : 2,
      if (cD+vD=6 and maxPolyOrderB > 1) then maxPolyOrderB : 1,

      for polyOrder : 1 thru maxPolyOrderB do (

        disp(printf(false,sconcat("Creating MaxwellianOnBasis",bName[bInd]," ~ax~avP~a"),cD,vD,polyOrder)),
        fname : sconcat("~/max-out/MaxwellianOnBasis", bName[bInd], cD, "x", vD, "vP", polyOrder, ".cpp"),
        fh : openw(fname),
        printf(fh, "#include <MaxwellianOnBasisModDecl.h>~%~%"),

        /* Functions to project a Maxwellian with Gaussian quadrature. */
        isGK : false,
        funcName : sconcat("MaxwellianOnBasisGauss", cD, "x", vD, "v", bName[bInd]),
        calcMaxwellianProjGauss(fh, funcName, cD, vD, bName[bInd], polyOrder, isGK),

        if (vD < 3) then (
          /* Functions to project a gyrokinetic Maxwellian with Gaussian quadrature. */
          isGK : true,
          funcName : sconcat("GkMaxwellianOnBasisGauss", cD, "x", vD, "v", bName[bInd]),
          calcMaxwellianProjGauss(fh, funcName, cD, vD, bName[bInd], polyOrder, isGK)
        ),

        close(fh),

        /* Create a separate file for gyrokinetics in 3x2v. */
        if (cD = 3) then (
          disp(printf(false,sconcat("Creating MaxwellianOnBasis",bName[bInd]," ~ax~avP~a"),cD,2,polyOrder)),
          fname : sconcat("~/max-out/MaxwellianOnBasis", bName[bInd], cD, "x", 2, "vP", polyOrder, ".cpp"),
          fh : openw(fname),
          printf(fh, "#include <MaxwellianOnBasisModDecl.h>~%~%"),
          isGK : true,
          funcName : sconcat("GkMaxwellianOnBasisGauss", cD, "x", 2, "v", bName[bInd]),
          calcMaxwellianProjGauss(fh, funcName, cD, 2, bName[bInd], polyOrder, isGK),
          close(fh)
        )

      )
    )
  )
);
